-- 1. Simple table with primary key
CREATE TABLE public.users (
  id serial PRIMARY KEY,
  name text NOT NULL
);

-- 2. Quoted table and column names
CREATE TABLE "App"."User Data" (
  "User ID" uuid PRIMARY KEY,
  "Full Name" text NOT NULL
);

-- 3. Table with default values and a quoted constraint name
CREATE TABLE system.settings (
  setting_key text PRIMARY KEY,
  setting_value text,
  CONSTRAINT "Default Setting Check" CHECK (setting_value IS NOT NULL)
);

-- 4. Table with quoted composite column and array
CREATE TABLE "Inventory"."StockItems" (
  "ItemID" int PRIMARY KEY,
  "Tags" text[]
);

-- 5. Foreign key with a quoted constraint name and target
CREATE TABLE "Orders"."OrderLines" (
  id serial PRIMARY KEY,
  order_id int,
  CONSTRAINT "FK Order Reference" FOREIGN KEY (order_id) REFERENCES "Orders"."Order"("OrderID")
);

-- 6. Table using composite type with mixed-case field names
CREATE TABLE contact_info (
  id int PRIMARY KEY,
  location address -- assumed composite type
);

-- 7. Inheritance with quoted base table
CREATE TABLE "Archive"."OldUsers" (
  archived_at timestamptz DEFAULT now()
) INHERITS ("Users"."User Data");

-- 8. Identity column with quoted constraint
CREATE TABLE logging.audit_trail (
  log_id int GENERATED BY DEFAULT AS IDENTITY,
  message text,
  CONSTRAINT "PK_Audit" PRIMARY KEY (log_id)
);

-- 9. Generated column with expression
CREATE TABLE finance.transactions (
  amount numeric,
  tax_rate numeric,
  total numeric GENERATED ALWAYS AS (amount * (1 + tax_rate)) STORED
);

-- 10. Range partitioned table
CREATE TABLE metrics.monthly_stats (
  stat_id serial,
  recorded_at date
) PARTITION BY RANGE (recorded_at);

-- 11. Composite multi-column primary key
CREATE TABLE school.attendance (
  "Student ID" uuid,
  "Class ID" uuid,
  attended_on date DEFAULT CURRENT_DATE,
  PRIMARY KEY ("Student ID", "Class ID")
);

-- 12. Table with special chars in constraint name
CREATE TABLE secure.sessions (
  session_id uuid PRIMARY KEY,
  user_id uuid,
  CONSTRAINT "fk-user->session" FOREIGN KEY (user_id) REFERENCES users(id)
);

-- 13. Table with multiple unique constraints and quoted keys
CREATE TABLE public."API Keys" (
  "KeyID" uuid PRIMARY KEY,
  "ClientName" text,
  "KeyValue" text UNIQUE,
  CONSTRAINT "Unique_ClientName" UNIQUE ("ClientName")
);

-- 14. Enum field reference
CREATE TABLE alerts (
  alert_id serial PRIMARY KEY,
  level "AlertLevel" NOT NULL -- assumed enum type
);

-- 15. Table with foreign key referencing quoted table/column
CREATE TABLE "Billing"."Invoices" (
  invoice_id uuid PRIMARY KEY,
  "Client ID" uuid,
  CONSTRAINT "FK_Client" FOREIGN KEY ("Client ID") REFERENCES "Clients"."ClientBase"("Client ID")
);

-- 16. Table with special-cased check
CREATE TABLE media.assets (
  id uuid PRIMARY KEY,
  url text,
  CONSTRAINT "Check-URL-NonEmpty" CHECK (url <> '')
);

-- 17. Composite type and JSON field
CREATE TABLE data.snapshots (
  id serial PRIMARY KEY,
  metadata jsonb,
  context address
);

-- 18. Table with quoted schema, table, and constraints
CREATE TABLE "x-Schema"."z-Table" (
  "Z-ID" int PRIMARY KEY,
  "Z-Name" text,
  CONSTRAINT "z-Name-Check" CHECK ("Z-Name" ~ '^[A-Z]')
);

-- 19. Table with lowercase constraint on quoted column
CREATE TABLE users.details (
  "first_name" text NOT NULL,
  "last_name" text,
  CONSTRAINT "first_name_required" CHECK ("first_name" <> '')
);

-- 20. Table using generated stored and quoted default
CREATE TABLE "Calculated"."Metrics" (
  base int,
  adjustment int DEFAULT 0,
  "Total" int GENERATED ALWAYS AS (base + adjustment) STORED
);
