/**
* This file was automatically generated by pg-proto-parser@latest.
* DO NOT MODIFY IT BY HAND. Instead, modify the source proto file,
* and run the pg-proto-parser generate command to regenerate this file.
*/
export type EnumType = "OverridingKind" | "QuerySource" | "SortByDir" | "SortByNulls" | "SetQuantifier" | "A_Expr_Kind" | "RoleSpecType" | "TableLikeOption" | "DefElemAction" | "PartitionStrategy" | "PartitionRangeDatumKind" | "RTEKind" | "WCOKind" | "GroupingSetKind" | "CTEMaterialize" | "SetOperation" | "ObjectType" | "DropBehavior" | "AlterTableType" | "GrantTargetType" | "VariableSetKind" | "ConstrType" | "ImportForeignSchemaType" | "RoleStmtType" | "FetchDirection" | "FunctionParameterMode" | "TransactionStmtKind" | "ViewCheckOption" | "DiscardMode" | "ReindexObjectType" | "AlterTSConfigType" | "PublicationObjSpecType" | "AlterPublicationAction" | "AlterSubscriptionType" | "OnCommitAction" | "ParamKind" | "CoercionContext" | "CoercionForm" | "BoolExprType" | "SubLinkType" | "RowCompareType" | "MinMaxOp" | "SQLValueFunctionOp" | "XmlExprOp" | "XmlOptionType" | "JsonEncoding" | "JsonFormatType" | "JsonConstructorType" | "JsonValueType" | "NullTestType" | "BoolTestType" | "CmdType" | "JoinType" | "AggStrategy" | "AggSplit" | "SetOpCmd" | "SetOpStrategy" | "OnConflictAction" | "LimitOption" | "LockClauseStrength" | "LockWaitPolicy" | "LockTupleMode" | "KeywordKind" | "Token";
export const getEnumValue = (enumType: EnumType, key: string | number) => {
  switch (enumType) {
    case "OverridingKind":
      {
        switch (key) {
          case "OVERRIDING_NOT_SET":
            return 0;
          case "OVERRIDING_USER_VALUE":
            return 1;
          case "OVERRIDING_SYSTEM_VALUE":
            return 2;
          case 0:
            return "OVERRIDING_NOT_SET";
          case 1:
            return "OVERRIDING_USER_VALUE";
          case 2:
            return "OVERRIDING_SYSTEM_VALUE";
          default:
            throw new Error("Key not recognized in enum OverridingKind");
        }
      }
    case "QuerySource":
      {
        switch (key) {
          case "QSRC_ORIGINAL":
            return 0;
          case "QSRC_PARSER":
            return 1;
          case "QSRC_INSTEAD_RULE":
            return 2;
          case "QSRC_QUAL_INSTEAD_RULE":
            return 3;
          case "QSRC_NON_INSTEAD_RULE":
            return 4;
          case 0:
            return "QSRC_ORIGINAL";
          case 1:
            return "QSRC_PARSER";
          case 2:
            return "QSRC_INSTEAD_RULE";
          case 3:
            return "QSRC_QUAL_INSTEAD_RULE";
          case 4:
            return "QSRC_NON_INSTEAD_RULE";
          default:
            throw new Error("Key not recognized in enum QuerySource");
        }
      }
    case "SortByDir":
      {
        switch (key) {
          case "SORTBY_DEFAULT":
            return 0;
          case "SORTBY_ASC":
            return 1;
          case "SORTBY_DESC":
            return 2;
          case "SORTBY_USING":
            return 3;
          case 0:
            return "SORTBY_DEFAULT";
          case 1:
            return "SORTBY_ASC";
          case 2:
            return "SORTBY_DESC";
          case 3:
            return "SORTBY_USING";
          default:
            throw new Error("Key not recognized in enum SortByDir");
        }
      }
    case "SortByNulls":
      {
        switch (key) {
          case "SORTBY_NULLS_DEFAULT":
            return 0;
          case "SORTBY_NULLS_FIRST":
            return 1;
          case "SORTBY_NULLS_LAST":
            return 2;
          case 0:
            return "SORTBY_NULLS_DEFAULT";
          case 1:
            return "SORTBY_NULLS_FIRST";
          case 2:
            return "SORTBY_NULLS_LAST";
          default:
            throw new Error("Key not recognized in enum SortByNulls");
        }
      }
    case "SetQuantifier":
      {
        switch (key) {
          case "SET_QUANTIFIER_DEFAULT":
            return 0;
          case "SET_QUANTIFIER_ALL":
            return 1;
          case "SET_QUANTIFIER_DISTINCT":
            return 2;
          case 0:
            return "SET_QUANTIFIER_DEFAULT";
          case 1:
            return "SET_QUANTIFIER_ALL";
          case 2:
            return "SET_QUANTIFIER_DISTINCT";
          default:
            throw new Error("Key not recognized in enum SetQuantifier");
        }
      }
    case "A_Expr_Kind":
      {
        switch (key) {
          case "AEXPR_OP":
            return 0;
          case "AEXPR_OP_ANY":
            return 1;
          case "AEXPR_OP_ALL":
            return 2;
          case "AEXPR_DISTINCT":
            return 3;
          case "AEXPR_NOT_DISTINCT":
            return 4;
          case "AEXPR_NULLIF":
            return 5;
          case "AEXPR_IN":
            return 6;
          case "AEXPR_LIKE":
            return 7;
          case "AEXPR_ILIKE":
            return 8;
          case "AEXPR_SIMILAR":
            return 9;
          case "AEXPR_BETWEEN":
            return 10;
          case "AEXPR_NOT_BETWEEN":
            return 11;
          case "AEXPR_BETWEEN_SYM":
            return 12;
          case "AEXPR_NOT_BETWEEN_SYM":
            return 13;
          case 0:
            return "AEXPR_OP";
          case 1:
            return "AEXPR_OP_ANY";
          case 2:
            return "AEXPR_OP_ALL";
          case 3:
            return "AEXPR_DISTINCT";
          case 4:
            return "AEXPR_NOT_DISTINCT";
          case 5:
            return "AEXPR_NULLIF";
          case 6:
            return "AEXPR_IN";
          case 7:
            return "AEXPR_LIKE";
          case 8:
            return "AEXPR_ILIKE";
          case 9:
            return "AEXPR_SIMILAR";
          case 10:
            return "AEXPR_BETWEEN";
          case 11:
            return "AEXPR_NOT_BETWEEN";
          case 12:
            return "AEXPR_BETWEEN_SYM";
          case 13:
            return "AEXPR_NOT_BETWEEN_SYM";
          default:
            throw new Error("Key not recognized in enum A_Expr_Kind");
        }
      }
    case "RoleSpecType":
      {
        switch (key) {
          case "ROLESPEC_CSTRING":
            return 0;
          case "ROLESPEC_CURRENT_ROLE":
            return 1;
          case "ROLESPEC_CURRENT_USER":
            return 2;
          case "ROLESPEC_SESSION_USER":
            return 3;
          case "ROLESPEC_PUBLIC":
            return 4;
          case 0:
            return "ROLESPEC_CSTRING";
          case 1:
            return "ROLESPEC_CURRENT_ROLE";
          case 2:
            return "ROLESPEC_CURRENT_USER";
          case 3:
            return "ROLESPEC_SESSION_USER";
          case 4:
            return "ROLESPEC_PUBLIC";
          default:
            throw new Error("Key not recognized in enum RoleSpecType");
        }
      }
    case "TableLikeOption":
      {
        switch (key) {
          case "CREATE_TABLE_LIKE_COMMENTS":
            return 0;
          case "CREATE_TABLE_LIKE_COMPRESSION":
            return 1;
          case "CREATE_TABLE_LIKE_CONSTRAINTS":
            return 2;
          case "CREATE_TABLE_LIKE_DEFAULTS":
            return 3;
          case "CREATE_TABLE_LIKE_GENERATED":
            return 4;
          case "CREATE_TABLE_LIKE_IDENTITY":
            return 5;
          case "CREATE_TABLE_LIKE_INDEXES":
            return 6;
          case "CREATE_TABLE_LIKE_STATISTICS":
            return 7;
          case "CREATE_TABLE_LIKE_STORAGE":
            return 8;
          case "CREATE_TABLE_LIKE_ALL":
            return 9;
          case 0:
            return "CREATE_TABLE_LIKE_COMMENTS";
          case 1:
            return "CREATE_TABLE_LIKE_COMPRESSION";
          case 2:
            return "CREATE_TABLE_LIKE_CONSTRAINTS";
          case 3:
            return "CREATE_TABLE_LIKE_DEFAULTS";
          case 4:
            return "CREATE_TABLE_LIKE_GENERATED";
          case 5:
            return "CREATE_TABLE_LIKE_IDENTITY";
          case 6:
            return "CREATE_TABLE_LIKE_INDEXES";
          case 7:
            return "CREATE_TABLE_LIKE_STATISTICS";
          case 8:
            return "CREATE_TABLE_LIKE_STORAGE";
          case 9:
            return "CREATE_TABLE_LIKE_ALL";
          default:
            throw new Error("Key not recognized in enum TableLikeOption");
        }
      }
    case "DefElemAction":
      {
        switch (key) {
          case "DEFELEM_UNSPEC":
            return 0;
          case "DEFELEM_SET":
            return 1;
          case "DEFELEM_ADD":
            return 2;
          case "DEFELEM_DROP":
            return 3;
          case 0:
            return "DEFELEM_UNSPEC";
          case 1:
            return "DEFELEM_SET";
          case 2:
            return "DEFELEM_ADD";
          case 3:
            return "DEFELEM_DROP";
          default:
            throw new Error("Key not recognized in enum DefElemAction");
        }
      }
    case "PartitionStrategy":
      {
        switch (key) {
          case "PARTITION_STRATEGY_LIST":
            return 0;
          case "PARTITION_STRATEGY_RANGE":
            return 1;
          case "PARTITION_STRATEGY_HASH":
            return 2;
          case 0:
            return "PARTITION_STRATEGY_LIST";
          case 1:
            return "PARTITION_STRATEGY_RANGE";
          case 2:
            return "PARTITION_STRATEGY_HASH";
          default:
            throw new Error("Key not recognized in enum PartitionStrategy");
        }
      }
    case "PartitionRangeDatumKind":
      {
        switch (key) {
          case "PARTITION_RANGE_DATUM_MINVALUE":
            return 0;
          case "PARTITION_RANGE_DATUM_VALUE":
            return 1;
          case "PARTITION_RANGE_DATUM_MAXVALUE":
            return 2;
          case 0:
            return "PARTITION_RANGE_DATUM_MINVALUE";
          case 1:
            return "PARTITION_RANGE_DATUM_VALUE";
          case 2:
            return "PARTITION_RANGE_DATUM_MAXVALUE";
          default:
            throw new Error("Key not recognized in enum PartitionRangeDatumKind");
        }
      }
    case "RTEKind":
      {
        switch (key) {
          case "RTE_RELATION":
            return 0;
          case "RTE_SUBQUERY":
            return 1;
          case "RTE_JOIN":
            return 2;
          case "RTE_FUNCTION":
            return 3;
          case "RTE_TABLEFUNC":
            return 4;
          case "RTE_VALUES":
            return 5;
          case "RTE_CTE":
            return 6;
          case "RTE_NAMEDTUPLESTORE":
            return 7;
          case "RTE_RESULT":
            return 8;
          case 0:
            return "RTE_RELATION";
          case 1:
            return "RTE_SUBQUERY";
          case 2:
            return "RTE_JOIN";
          case 3:
            return "RTE_FUNCTION";
          case 4:
            return "RTE_TABLEFUNC";
          case 5:
            return "RTE_VALUES";
          case 6:
            return "RTE_CTE";
          case 7:
            return "RTE_NAMEDTUPLESTORE";
          case 8:
            return "RTE_RESULT";
          default:
            throw new Error("Key not recognized in enum RTEKind");
        }
      }
    case "WCOKind":
      {
        switch (key) {
          case "WCO_VIEW_CHECK":
            return 0;
          case "WCO_RLS_INSERT_CHECK":
            return 1;
          case "WCO_RLS_UPDATE_CHECK":
            return 2;
          case "WCO_RLS_CONFLICT_CHECK":
            return 3;
          case "WCO_RLS_MERGE_UPDATE_CHECK":
            return 4;
          case "WCO_RLS_MERGE_DELETE_CHECK":
            return 5;
          case 0:
            return "WCO_VIEW_CHECK";
          case 1:
            return "WCO_RLS_INSERT_CHECK";
          case 2:
            return "WCO_RLS_UPDATE_CHECK";
          case 3:
            return "WCO_RLS_CONFLICT_CHECK";
          case 4:
            return "WCO_RLS_MERGE_UPDATE_CHECK";
          case 5:
            return "WCO_RLS_MERGE_DELETE_CHECK";
          default:
            throw new Error("Key not recognized in enum WCOKind");
        }
      }
    case "GroupingSetKind":
      {
        switch (key) {
          case "GROUPING_SET_EMPTY":
            return 0;
          case "GROUPING_SET_SIMPLE":
            return 1;
          case "GROUPING_SET_ROLLUP":
            return 2;
          case "GROUPING_SET_CUBE":
            return 3;
          case "GROUPING_SET_SETS":
            return 4;
          case 0:
            return "GROUPING_SET_EMPTY";
          case 1:
            return "GROUPING_SET_SIMPLE";
          case 2:
            return "GROUPING_SET_ROLLUP";
          case 3:
            return "GROUPING_SET_CUBE";
          case 4:
            return "GROUPING_SET_SETS";
          default:
            throw new Error("Key not recognized in enum GroupingSetKind");
        }
      }
    case "CTEMaterialize":
      {
        switch (key) {
          case "CTEMaterializeDefault":
            return 0;
          case "CTEMaterializeAlways":
            return 1;
          case "CTEMaterializeNever":
            return 2;
          case 0:
            return "CTEMaterializeDefault";
          case 1:
            return "CTEMaterializeAlways";
          case 2:
            return "CTEMaterializeNever";
          default:
            throw new Error("Key not recognized in enum CTEMaterialize");
        }
      }
    case "SetOperation":
      {
        switch (key) {
          case "SETOP_NONE":
            return 0;
          case "SETOP_UNION":
            return 1;
          case "SETOP_INTERSECT":
            return 2;
          case "SETOP_EXCEPT":
            return 3;
          case 0:
            return "SETOP_NONE";
          case 1:
            return "SETOP_UNION";
          case 2:
            return "SETOP_INTERSECT";
          case 3:
            return "SETOP_EXCEPT";
          default:
            throw new Error("Key not recognized in enum SetOperation");
        }
      }
    case "ObjectType":
      {
        switch (key) {
          case "OBJECT_ACCESS_METHOD":
            return 0;
          case "OBJECT_AGGREGATE":
            return 1;
          case "OBJECT_AMOP":
            return 2;
          case "OBJECT_AMPROC":
            return 3;
          case "OBJECT_ATTRIBUTE":
            return 4;
          case "OBJECT_CAST":
            return 5;
          case "OBJECT_COLUMN":
            return 6;
          case "OBJECT_COLLATION":
            return 7;
          case "OBJECT_CONVERSION":
            return 8;
          case "OBJECT_DATABASE":
            return 9;
          case "OBJECT_DEFAULT":
            return 10;
          case "OBJECT_DEFACL":
            return 11;
          case "OBJECT_DOMAIN":
            return 12;
          case "OBJECT_DOMCONSTRAINT":
            return 13;
          case "OBJECT_EVENT_TRIGGER":
            return 14;
          case "OBJECT_EXTENSION":
            return 15;
          case "OBJECT_FDW":
            return 16;
          case "OBJECT_FOREIGN_SERVER":
            return 17;
          case "OBJECT_FOREIGN_TABLE":
            return 18;
          case "OBJECT_FUNCTION":
            return 19;
          case "OBJECT_INDEX":
            return 20;
          case "OBJECT_LANGUAGE":
            return 21;
          case "OBJECT_LARGEOBJECT":
            return 22;
          case "OBJECT_MATVIEW":
            return 23;
          case "OBJECT_OPCLASS":
            return 24;
          case "OBJECT_OPERATOR":
            return 25;
          case "OBJECT_OPFAMILY":
            return 26;
          case "OBJECT_PARAMETER_ACL":
            return 27;
          case "OBJECT_POLICY":
            return 28;
          case "OBJECT_PROCEDURE":
            return 29;
          case "OBJECT_PUBLICATION":
            return 30;
          case "OBJECT_PUBLICATION_NAMESPACE":
            return 31;
          case "OBJECT_PUBLICATION_REL":
            return 32;
          case "OBJECT_ROLE":
            return 33;
          case "OBJECT_ROUTINE":
            return 34;
          case "OBJECT_RULE":
            return 35;
          case "OBJECT_SCHEMA":
            return 36;
          case "OBJECT_SEQUENCE":
            return 37;
          case "OBJECT_SUBSCRIPTION":
            return 38;
          case "OBJECT_STATISTIC_EXT":
            return 39;
          case "OBJECT_TABCONSTRAINT":
            return 40;
          case "OBJECT_TABLE":
            return 41;
          case "OBJECT_TABLESPACE":
            return 42;
          case "OBJECT_TRANSFORM":
            return 43;
          case "OBJECT_TRIGGER":
            return 44;
          case "OBJECT_TSCONFIGURATION":
            return 45;
          case "OBJECT_TSDICTIONARY":
            return 46;
          case "OBJECT_TSPARSER":
            return 47;
          case "OBJECT_TSTEMPLATE":
            return 48;
          case "OBJECT_TYPE":
            return 49;
          case "OBJECT_USER_MAPPING":
            return 50;
          case "OBJECT_VIEW":
            return 51;
          case 0:
            return "OBJECT_ACCESS_METHOD";
          case 1:
            return "OBJECT_AGGREGATE";
          case 2:
            return "OBJECT_AMOP";
          case 3:
            return "OBJECT_AMPROC";
          case 4:
            return "OBJECT_ATTRIBUTE";
          case 5:
            return "OBJECT_CAST";
          case 6:
            return "OBJECT_COLUMN";
          case 7:
            return "OBJECT_COLLATION";
          case 8:
            return "OBJECT_CONVERSION";
          case 9:
            return "OBJECT_DATABASE";
          case 10:
            return "OBJECT_DEFAULT";
          case 11:
            return "OBJECT_DEFACL";
          case 12:
            return "OBJECT_DOMAIN";
          case 13:
            return "OBJECT_DOMCONSTRAINT";
          case 14:
            return "OBJECT_EVENT_TRIGGER";
          case 15:
            return "OBJECT_EXTENSION";
          case 16:
            return "OBJECT_FDW";
          case 17:
            return "OBJECT_FOREIGN_SERVER";
          case 18:
            return "OBJECT_FOREIGN_TABLE";
          case 19:
            return "OBJECT_FUNCTION";
          case 20:
            return "OBJECT_INDEX";
          case 21:
            return "OBJECT_LANGUAGE";
          case 22:
            return "OBJECT_LARGEOBJECT";
          case 23:
            return "OBJECT_MATVIEW";
          case 24:
            return "OBJECT_OPCLASS";
          case 25:
            return "OBJECT_OPERATOR";
          case 26:
            return "OBJECT_OPFAMILY";
          case 27:
            return "OBJECT_PARAMETER_ACL";
          case 28:
            return "OBJECT_POLICY";
          case 29:
            return "OBJECT_PROCEDURE";
          case 30:
            return "OBJECT_PUBLICATION";
          case 31:
            return "OBJECT_PUBLICATION_NAMESPACE";
          case 32:
            return "OBJECT_PUBLICATION_REL";
          case 33:
            return "OBJECT_ROLE";
          case 34:
            return "OBJECT_ROUTINE";
          case 35:
            return "OBJECT_RULE";
          case 36:
            return "OBJECT_SCHEMA";
          case 37:
            return "OBJECT_SEQUENCE";
          case 38:
            return "OBJECT_SUBSCRIPTION";
          case 39:
            return "OBJECT_STATISTIC_EXT";
          case 40:
            return "OBJECT_TABCONSTRAINT";
          case 41:
            return "OBJECT_TABLE";
          case 42:
            return "OBJECT_TABLESPACE";
          case 43:
            return "OBJECT_TRANSFORM";
          case 44:
            return "OBJECT_TRIGGER";
          case 45:
            return "OBJECT_TSCONFIGURATION";
          case 46:
            return "OBJECT_TSDICTIONARY";
          case 47:
            return "OBJECT_TSPARSER";
          case 48:
            return "OBJECT_TSTEMPLATE";
          case 49:
            return "OBJECT_TYPE";
          case 50:
            return "OBJECT_USER_MAPPING";
          case 51:
            return "OBJECT_VIEW";
          default:
            throw new Error("Key not recognized in enum ObjectType");
        }
      }
    case "DropBehavior":
      {
        switch (key) {
          case "DROP_RESTRICT":
            return 0;
          case "DROP_CASCADE":
            return 1;
          case 0:
            return "DROP_RESTRICT";
          case 1:
            return "DROP_CASCADE";
          default:
            throw new Error("Key not recognized in enum DropBehavior");
        }
      }
    case "AlterTableType":
      {
        switch (key) {
          case "AT_AddColumn":
            return 0;
          case "AT_AddColumnToView":
            return 1;
          case "AT_ColumnDefault":
            return 2;
          case "AT_CookedColumnDefault":
            return 3;
          case "AT_DropNotNull":
            return 4;
          case "AT_SetNotNull":
            return 5;
          case "AT_DropExpression":
            return 6;
          case "AT_CheckNotNull":
            return 7;
          case "AT_SetStatistics":
            return 8;
          case "AT_SetOptions":
            return 9;
          case "AT_ResetOptions":
            return 10;
          case "AT_SetStorage":
            return 11;
          case "AT_SetCompression":
            return 12;
          case "AT_DropColumn":
            return 13;
          case "AT_AddIndex":
            return 14;
          case "AT_ReAddIndex":
            return 15;
          case "AT_AddConstraint":
            return 16;
          case "AT_ReAddConstraint":
            return 17;
          case "AT_ReAddDomainConstraint":
            return 18;
          case "AT_AlterConstraint":
            return 19;
          case "AT_ValidateConstraint":
            return 20;
          case "AT_AddIndexConstraint":
            return 21;
          case "AT_DropConstraint":
            return 22;
          case "AT_ReAddComment":
            return 23;
          case "AT_AlterColumnType":
            return 24;
          case "AT_AlterColumnGenericOptions":
            return 25;
          case "AT_ChangeOwner":
            return 26;
          case "AT_ClusterOn":
            return 27;
          case "AT_DropCluster":
            return 28;
          case "AT_SetLogged":
            return 29;
          case "AT_SetUnLogged":
            return 30;
          case "AT_DropOids":
            return 31;
          case "AT_SetAccessMethod":
            return 32;
          case "AT_SetTableSpace":
            return 33;
          case "AT_SetRelOptions":
            return 34;
          case "AT_ResetRelOptions":
            return 35;
          case "AT_ReplaceRelOptions":
            return 36;
          case "AT_EnableTrig":
            return 37;
          case "AT_EnableAlwaysTrig":
            return 38;
          case "AT_EnableReplicaTrig":
            return 39;
          case "AT_DisableTrig":
            return 40;
          case "AT_EnableTrigAll":
            return 41;
          case "AT_DisableTrigAll":
            return 42;
          case "AT_EnableTrigUser":
            return 43;
          case "AT_DisableTrigUser":
            return 44;
          case "AT_EnableRule":
            return 45;
          case "AT_EnableAlwaysRule":
            return 46;
          case "AT_EnableReplicaRule":
            return 47;
          case "AT_DisableRule":
            return 48;
          case "AT_AddInherit":
            return 49;
          case "AT_DropInherit":
            return 50;
          case "AT_AddOf":
            return 51;
          case "AT_DropOf":
            return 52;
          case "AT_ReplicaIdentity":
            return 53;
          case "AT_EnableRowSecurity":
            return 54;
          case "AT_DisableRowSecurity":
            return 55;
          case "AT_ForceRowSecurity":
            return 56;
          case "AT_NoForceRowSecurity":
            return 57;
          case "AT_GenericOptions":
            return 58;
          case "AT_AttachPartition":
            return 59;
          case "AT_DetachPartition":
            return 60;
          case "AT_DetachPartitionFinalize":
            return 61;
          case "AT_AddIdentity":
            return 62;
          case "AT_SetIdentity":
            return 63;
          case "AT_DropIdentity":
            return 64;
          case "AT_ReAddStatistics":
            return 65;
          case 0:
            return "AT_AddColumn";
          case 1:
            return "AT_AddColumnToView";
          case 2:
            return "AT_ColumnDefault";
          case 3:
            return "AT_CookedColumnDefault";
          case 4:
            return "AT_DropNotNull";
          case 5:
            return "AT_SetNotNull";
          case 6:
            return "AT_DropExpression";
          case 7:
            return "AT_CheckNotNull";
          case 8:
            return "AT_SetStatistics";
          case 9:
            return "AT_SetOptions";
          case 10:
            return "AT_ResetOptions";
          case 11:
            return "AT_SetStorage";
          case 12:
            return "AT_SetCompression";
          case 13:
            return "AT_DropColumn";
          case 14:
            return "AT_AddIndex";
          case 15:
            return "AT_ReAddIndex";
          case 16:
            return "AT_AddConstraint";
          case 17:
            return "AT_ReAddConstraint";
          case 18:
            return "AT_ReAddDomainConstraint";
          case 19:
            return "AT_AlterConstraint";
          case 20:
            return "AT_ValidateConstraint";
          case 21:
            return "AT_AddIndexConstraint";
          case 22:
            return "AT_DropConstraint";
          case 23:
            return "AT_ReAddComment";
          case 24:
            return "AT_AlterColumnType";
          case 25:
            return "AT_AlterColumnGenericOptions";
          case 26:
            return "AT_ChangeOwner";
          case 27:
            return "AT_ClusterOn";
          case 28:
            return "AT_DropCluster";
          case 29:
            return "AT_SetLogged";
          case 30:
            return "AT_SetUnLogged";
          case 31:
            return "AT_DropOids";
          case 32:
            return "AT_SetAccessMethod";
          case 33:
            return "AT_SetTableSpace";
          case 34:
            return "AT_SetRelOptions";
          case 35:
            return "AT_ResetRelOptions";
          case 36:
            return "AT_ReplaceRelOptions";
          case 37:
            return "AT_EnableTrig";
          case 38:
            return "AT_EnableAlwaysTrig";
          case 39:
            return "AT_EnableReplicaTrig";
          case 40:
            return "AT_DisableTrig";
          case 41:
            return "AT_EnableTrigAll";
          case 42:
            return "AT_DisableTrigAll";
          case 43:
            return "AT_EnableTrigUser";
          case 44:
            return "AT_DisableTrigUser";
          case 45:
            return "AT_EnableRule";
          case 46:
            return "AT_EnableAlwaysRule";
          case 47:
            return "AT_EnableReplicaRule";
          case 48:
            return "AT_DisableRule";
          case 49:
            return "AT_AddInherit";
          case 50:
            return "AT_DropInherit";
          case 51:
            return "AT_AddOf";
          case 52:
            return "AT_DropOf";
          case 53:
            return "AT_ReplicaIdentity";
          case 54:
            return "AT_EnableRowSecurity";
          case 55:
            return "AT_DisableRowSecurity";
          case 56:
            return "AT_ForceRowSecurity";
          case 57:
            return "AT_NoForceRowSecurity";
          case 58:
            return "AT_GenericOptions";
          case 59:
            return "AT_AttachPartition";
          case 60:
            return "AT_DetachPartition";
          case 61:
            return "AT_DetachPartitionFinalize";
          case 62:
            return "AT_AddIdentity";
          case 63:
            return "AT_SetIdentity";
          case 64:
            return "AT_DropIdentity";
          case 65:
            return "AT_ReAddStatistics";
          default:
            throw new Error("Key not recognized in enum AlterTableType");
        }
      }
    case "GrantTargetType":
      {
        switch (key) {
          case "ACL_TARGET_OBJECT":
            return 0;
          case "ACL_TARGET_ALL_IN_SCHEMA":
            return 1;
          case "ACL_TARGET_DEFAULTS":
            return 2;
          case 0:
            return "ACL_TARGET_OBJECT";
          case 1:
            return "ACL_TARGET_ALL_IN_SCHEMA";
          case 2:
            return "ACL_TARGET_DEFAULTS";
          default:
            throw new Error("Key not recognized in enum GrantTargetType");
        }
      }
    case "VariableSetKind":
      {
        switch (key) {
          case "VAR_SET_VALUE":
            return 0;
          case "VAR_SET_DEFAULT":
            return 1;
          case "VAR_SET_CURRENT":
            return 2;
          case "VAR_SET_MULTI":
            return 3;
          case "VAR_RESET":
            return 4;
          case "VAR_RESET_ALL":
            return 5;
          case 0:
            return "VAR_SET_VALUE";
          case 1:
            return "VAR_SET_DEFAULT";
          case 2:
            return "VAR_SET_CURRENT";
          case 3:
            return "VAR_SET_MULTI";
          case 4:
            return "VAR_RESET";
          case 5:
            return "VAR_RESET_ALL";
          default:
            throw new Error("Key not recognized in enum VariableSetKind");
        }
      }
    case "ConstrType":
      {
        switch (key) {
          case "CONSTR_NULL":
            return 0;
          case "CONSTR_NOTNULL":
            return 1;
          case "CONSTR_DEFAULT":
            return 2;
          case "CONSTR_IDENTITY":
            return 3;
          case "CONSTR_GENERATED":
            return 4;
          case "CONSTR_CHECK":
            return 5;
          case "CONSTR_PRIMARY":
            return 6;
          case "CONSTR_UNIQUE":
            return 7;
          case "CONSTR_EXCLUSION":
            return 8;
          case "CONSTR_FOREIGN":
            return 9;
          case "CONSTR_ATTR_DEFERRABLE":
            return 10;
          case "CONSTR_ATTR_NOT_DEFERRABLE":
            return 11;
          case "CONSTR_ATTR_DEFERRED":
            return 12;
          case "CONSTR_ATTR_IMMEDIATE":
            return 13;
          case 0:
            return "CONSTR_NULL";
          case 1:
            return "CONSTR_NOTNULL";
          case 2:
            return "CONSTR_DEFAULT";
          case 3:
            return "CONSTR_IDENTITY";
          case 4:
            return "CONSTR_GENERATED";
          case 5:
            return "CONSTR_CHECK";
          case 6:
            return "CONSTR_PRIMARY";
          case 7:
            return "CONSTR_UNIQUE";
          case 8:
            return "CONSTR_EXCLUSION";
          case 9:
            return "CONSTR_FOREIGN";
          case 10:
            return "CONSTR_ATTR_DEFERRABLE";
          case 11:
            return "CONSTR_ATTR_NOT_DEFERRABLE";
          case 12:
            return "CONSTR_ATTR_DEFERRED";
          case 13:
            return "CONSTR_ATTR_IMMEDIATE";
          default:
            throw new Error("Key not recognized in enum ConstrType");
        }
      }
    case "ImportForeignSchemaType":
      {
        switch (key) {
          case "FDW_IMPORT_SCHEMA_ALL":
            return 0;
          case "FDW_IMPORT_SCHEMA_LIMIT_TO":
            return 1;
          case "FDW_IMPORT_SCHEMA_EXCEPT":
            return 2;
          case 0:
            return "FDW_IMPORT_SCHEMA_ALL";
          case 1:
            return "FDW_IMPORT_SCHEMA_LIMIT_TO";
          case 2:
            return "FDW_IMPORT_SCHEMA_EXCEPT";
          default:
            throw new Error("Key not recognized in enum ImportForeignSchemaType");
        }
      }
    case "RoleStmtType":
      {
        switch (key) {
          case "ROLESTMT_ROLE":
            return 0;
          case "ROLESTMT_USER":
            return 1;
          case "ROLESTMT_GROUP":
            return 2;
          case 0:
            return "ROLESTMT_ROLE";
          case 1:
            return "ROLESTMT_USER";
          case 2:
            return "ROLESTMT_GROUP";
          default:
            throw new Error("Key not recognized in enum RoleStmtType");
        }
      }
    case "FetchDirection":
      {
        switch (key) {
          case "FETCH_FORWARD":
            return 0;
          case "FETCH_BACKWARD":
            return 1;
          case "FETCH_ABSOLUTE":
            return 2;
          case "FETCH_RELATIVE":
            return 3;
          case 0:
            return "FETCH_FORWARD";
          case 1:
            return "FETCH_BACKWARD";
          case 2:
            return "FETCH_ABSOLUTE";
          case 3:
            return "FETCH_RELATIVE";
          default:
            throw new Error("Key not recognized in enum FetchDirection");
        }
      }
    case "FunctionParameterMode":
      {
        switch (key) {
          case "FUNC_PARAM_IN":
            return 0;
          case "FUNC_PARAM_OUT":
            return 1;
          case "FUNC_PARAM_INOUT":
            return 2;
          case "FUNC_PARAM_VARIADIC":
            return 3;
          case "FUNC_PARAM_TABLE":
            return 4;
          case "FUNC_PARAM_DEFAULT":
            return 5;
          case 0:
            return "FUNC_PARAM_IN";
          case 1:
            return "FUNC_PARAM_OUT";
          case 2:
            return "FUNC_PARAM_INOUT";
          case 3:
            return "FUNC_PARAM_VARIADIC";
          case 4:
            return "FUNC_PARAM_TABLE";
          case 5:
            return "FUNC_PARAM_DEFAULT";
          default:
            throw new Error("Key not recognized in enum FunctionParameterMode");
        }
      }
    case "TransactionStmtKind":
      {
        switch (key) {
          case "TRANS_STMT_BEGIN":
            return 0;
          case "TRANS_STMT_START":
            return 1;
          case "TRANS_STMT_COMMIT":
            return 2;
          case "TRANS_STMT_ROLLBACK":
            return 3;
          case "TRANS_STMT_SAVEPOINT":
            return 4;
          case "TRANS_STMT_RELEASE":
            return 5;
          case "TRANS_STMT_ROLLBACK_TO":
            return 6;
          case "TRANS_STMT_PREPARE":
            return 7;
          case "TRANS_STMT_COMMIT_PREPARED":
            return 8;
          case "TRANS_STMT_ROLLBACK_PREPARED":
            return 9;
          case 0:
            return "TRANS_STMT_BEGIN";
          case 1:
            return "TRANS_STMT_START";
          case 2:
            return "TRANS_STMT_COMMIT";
          case 3:
            return "TRANS_STMT_ROLLBACK";
          case 4:
            return "TRANS_STMT_SAVEPOINT";
          case 5:
            return "TRANS_STMT_RELEASE";
          case 6:
            return "TRANS_STMT_ROLLBACK_TO";
          case 7:
            return "TRANS_STMT_PREPARE";
          case 8:
            return "TRANS_STMT_COMMIT_PREPARED";
          case 9:
            return "TRANS_STMT_ROLLBACK_PREPARED";
          default:
            throw new Error("Key not recognized in enum TransactionStmtKind");
        }
      }
    case "ViewCheckOption":
      {
        switch (key) {
          case "NO_CHECK_OPTION":
            return 0;
          case "LOCAL_CHECK_OPTION":
            return 1;
          case "CASCADED_CHECK_OPTION":
            return 2;
          case 0:
            return "NO_CHECK_OPTION";
          case 1:
            return "LOCAL_CHECK_OPTION";
          case 2:
            return "CASCADED_CHECK_OPTION";
          default:
            throw new Error("Key not recognized in enum ViewCheckOption");
        }
      }
    case "DiscardMode":
      {
        switch (key) {
          case "DISCARD_ALL":
            return 0;
          case "DISCARD_PLANS":
            return 1;
          case "DISCARD_SEQUENCES":
            return 2;
          case "DISCARD_TEMP":
            return 3;
          case 0:
            return "DISCARD_ALL";
          case 1:
            return "DISCARD_PLANS";
          case 2:
            return "DISCARD_SEQUENCES";
          case 3:
            return "DISCARD_TEMP";
          default:
            throw new Error("Key not recognized in enum DiscardMode");
        }
      }
    case "ReindexObjectType":
      {
        switch (key) {
          case "REINDEX_OBJECT_INDEX":
            return 0;
          case "REINDEX_OBJECT_TABLE":
            return 1;
          case "REINDEX_OBJECT_SCHEMA":
            return 2;
          case "REINDEX_OBJECT_SYSTEM":
            return 3;
          case "REINDEX_OBJECT_DATABASE":
            return 4;
          case 0:
            return "REINDEX_OBJECT_INDEX";
          case 1:
            return "REINDEX_OBJECT_TABLE";
          case 2:
            return "REINDEX_OBJECT_SCHEMA";
          case 3:
            return "REINDEX_OBJECT_SYSTEM";
          case 4:
            return "REINDEX_OBJECT_DATABASE";
          default:
            throw new Error("Key not recognized in enum ReindexObjectType");
        }
      }
    case "AlterTSConfigType":
      {
        switch (key) {
          case "ALTER_TSCONFIG_ADD_MAPPING":
            return 0;
          case "ALTER_TSCONFIG_ALTER_MAPPING_FOR_TOKEN":
            return 1;
          case "ALTER_TSCONFIG_REPLACE_DICT":
            return 2;
          case "ALTER_TSCONFIG_REPLACE_DICT_FOR_TOKEN":
            return 3;
          case "ALTER_TSCONFIG_DROP_MAPPING":
            return 4;
          case 0:
            return "ALTER_TSCONFIG_ADD_MAPPING";
          case 1:
            return "ALTER_TSCONFIG_ALTER_MAPPING_FOR_TOKEN";
          case 2:
            return "ALTER_TSCONFIG_REPLACE_DICT";
          case 3:
            return "ALTER_TSCONFIG_REPLACE_DICT_FOR_TOKEN";
          case 4:
            return "ALTER_TSCONFIG_DROP_MAPPING";
          default:
            throw new Error("Key not recognized in enum AlterTSConfigType");
        }
      }
    case "PublicationObjSpecType":
      {
        switch (key) {
          case "PUBLICATIONOBJ_TABLE":
            return 0;
          case "PUBLICATIONOBJ_TABLES_IN_SCHEMA":
            return 1;
          case "PUBLICATIONOBJ_TABLES_IN_CUR_SCHEMA":
            return 2;
          case "PUBLICATIONOBJ_CONTINUATION":
            return 3;
          case 0:
            return "PUBLICATIONOBJ_TABLE";
          case 1:
            return "PUBLICATIONOBJ_TABLES_IN_SCHEMA";
          case 2:
            return "PUBLICATIONOBJ_TABLES_IN_CUR_SCHEMA";
          case 3:
            return "PUBLICATIONOBJ_CONTINUATION";
          default:
            throw new Error("Key not recognized in enum PublicationObjSpecType");
        }
      }
    case "AlterPublicationAction":
      {
        switch (key) {
          case "AP_AddObjects":
            return 0;
          case "AP_DropObjects":
            return 1;
          case "AP_SetObjects":
            return 2;
          case 0:
            return "AP_AddObjects";
          case 1:
            return "AP_DropObjects";
          case 2:
            return "AP_SetObjects";
          default:
            throw new Error("Key not recognized in enum AlterPublicationAction");
        }
      }
    case "AlterSubscriptionType":
      {
        switch (key) {
          case "ALTER_SUBSCRIPTION_OPTIONS":
            return 0;
          case "ALTER_SUBSCRIPTION_CONNECTION":
            return 1;
          case "ALTER_SUBSCRIPTION_SET_PUBLICATION":
            return 2;
          case "ALTER_SUBSCRIPTION_ADD_PUBLICATION":
            return 3;
          case "ALTER_SUBSCRIPTION_DROP_PUBLICATION":
            return 4;
          case "ALTER_SUBSCRIPTION_REFRESH":
            return 5;
          case "ALTER_SUBSCRIPTION_ENABLED":
            return 6;
          case "ALTER_SUBSCRIPTION_SKIP":
            return 7;
          case 0:
            return "ALTER_SUBSCRIPTION_OPTIONS";
          case 1:
            return "ALTER_SUBSCRIPTION_CONNECTION";
          case 2:
            return "ALTER_SUBSCRIPTION_SET_PUBLICATION";
          case 3:
            return "ALTER_SUBSCRIPTION_ADD_PUBLICATION";
          case 4:
            return "ALTER_SUBSCRIPTION_DROP_PUBLICATION";
          case 5:
            return "ALTER_SUBSCRIPTION_REFRESH";
          case 6:
            return "ALTER_SUBSCRIPTION_ENABLED";
          case 7:
            return "ALTER_SUBSCRIPTION_SKIP";
          default:
            throw new Error("Key not recognized in enum AlterSubscriptionType");
        }
      }
    case "OnCommitAction":
      {
        switch (key) {
          case "ONCOMMIT_NOOP":
            return 0;
          case "ONCOMMIT_PRESERVE_ROWS":
            return 1;
          case "ONCOMMIT_DELETE_ROWS":
            return 2;
          case "ONCOMMIT_DROP":
            return 3;
          case 0:
            return "ONCOMMIT_NOOP";
          case 1:
            return "ONCOMMIT_PRESERVE_ROWS";
          case 2:
            return "ONCOMMIT_DELETE_ROWS";
          case 3:
            return "ONCOMMIT_DROP";
          default:
            throw new Error("Key not recognized in enum OnCommitAction");
        }
      }
    case "ParamKind":
      {
        switch (key) {
          case "PARAM_EXTERN":
            return 0;
          case "PARAM_EXEC":
            return 1;
          case "PARAM_SUBLINK":
            return 2;
          case "PARAM_MULTIEXPR":
            return 3;
          case 0:
            return "PARAM_EXTERN";
          case 1:
            return "PARAM_EXEC";
          case 2:
            return "PARAM_SUBLINK";
          case 3:
            return "PARAM_MULTIEXPR";
          default:
            throw new Error("Key not recognized in enum ParamKind");
        }
      }
    case "CoercionContext":
      {
        switch (key) {
          case "COERCION_IMPLICIT":
            return 0;
          case "COERCION_ASSIGNMENT":
            return 1;
          case "COERCION_PLPGSQL":
            return 2;
          case "COERCION_EXPLICIT":
            return 3;
          case 0:
            return "COERCION_IMPLICIT";
          case 1:
            return "COERCION_ASSIGNMENT";
          case 2:
            return "COERCION_PLPGSQL";
          case 3:
            return "COERCION_EXPLICIT";
          default:
            throw new Error("Key not recognized in enum CoercionContext");
        }
      }
    case "CoercionForm":
      {
        switch (key) {
          case "COERCE_EXPLICIT_CALL":
            return 0;
          case "COERCE_EXPLICIT_CAST":
            return 1;
          case "COERCE_IMPLICIT_CAST":
            return 2;
          case "COERCE_SQL_SYNTAX":
            return 3;
          case 0:
            return "COERCE_EXPLICIT_CALL";
          case 1:
            return "COERCE_EXPLICIT_CAST";
          case 2:
            return "COERCE_IMPLICIT_CAST";
          case 3:
            return "COERCE_SQL_SYNTAX";
          default:
            throw new Error("Key not recognized in enum CoercionForm");
        }
      }
    case "BoolExprType":
      {
        switch (key) {
          case "AND_EXPR":
            return 0;
          case "OR_EXPR":
            return 1;
          case "NOT_EXPR":
            return 2;
          case 0:
            return "AND_EXPR";
          case 1:
            return "OR_EXPR";
          case 2:
            return "NOT_EXPR";
          default:
            throw new Error("Key not recognized in enum BoolExprType");
        }
      }
    case "SubLinkType":
      {
        switch (key) {
          case "EXISTS_SUBLINK":
            return 0;
          case "ALL_SUBLINK":
            return 1;
          case "ANY_SUBLINK":
            return 2;
          case "ROWCOMPARE_SUBLINK":
            return 3;
          case "EXPR_SUBLINK":
            return 4;
          case "MULTIEXPR_SUBLINK":
            return 5;
          case "ARRAY_SUBLINK":
            return 6;
          case "CTE_SUBLINK":
            return 7;
          case 0:
            return "EXISTS_SUBLINK";
          case 1:
            return "ALL_SUBLINK";
          case 2:
            return "ANY_SUBLINK";
          case 3:
            return "ROWCOMPARE_SUBLINK";
          case 4:
            return "EXPR_SUBLINK";
          case 5:
            return "MULTIEXPR_SUBLINK";
          case 6:
            return "ARRAY_SUBLINK";
          case 7:
            return "CTE_SUBLINK";
          default:
            throw new Error("Key not recognized in enum SubLinkType");
        }
      }
    case "RowCompareType":
      {
        switch (key) {
          case "ROWCOMPARE_LT":
            return 0;
          case "ROWCOMPARE_LE":
            return 1;
          case "ROWCOMPARE_EQ":
            return 2;
          case "ROWCOMPARE_GE":
            return 3;
          case "ROWCOMPARE_GT":
            return 4;
          case "ROWCOMPARE_NE":
            return 5;
          case 0:
            return "ROWCOMPARE_LT";
          case 1:
            return "ROWCOMPARE_LE";
          case 2:
            return "ROWCOMPARE_EQ";
          case 3:
            return "ROWCOMPARE_GE";
          case 4:
            return "ROWCOMPARE_GT";
          case 5:
            return "ROWCOMPARE_NE";
          default:
            throw new Error("Key not recognized in enum RowCompareType");
        }
      }
    case "MinMaxOp":
      {
        switch (key) {
          case "IS_GREATEST":
            return 0;
          case "IS_LEAST":
            return 1;
          case 0:
            return "IS_GREATEST";
          case 1:
            return "IS_LEAST";
          default:
            throw new Error("Key not recognized in enum MinMaxOp");
        }
      }
    case "SQLValueFunctionOp":
      {
        switch (key) {
          case "SVFOP_CURRENT_DATE":
            return 0;
          case "SVFOP_CURRENT_TIME":
            return 1;
          case "SVFOP_CURRENT_TIME_N":
            return 2;
          case "SVFOP_CURRENT_TIMESTAMP":
            return 3;
          case "SVFOP_CURRENT_TIMESTAMP_N":
            return 4;
          case "SVFOP_LOCALTIME":
            return 5;
          case "SVFOP_LOCALTIME_N":
            return 6;
          case "SVFOP_LOCALTIMESTAMP":
            return 7;
          case "SVFOP_LOCALTIMESTAMP_N":
            return 8;
          case "SVFOP_CURRENT_ROLE":
            return 9;
          case "SVFOP_CURRENT_USER":
            return 10;
          case "SVFOP_USER":
            return 11;
          case "SVFOP_SESSION_USER":
            return 12;
          case "SVFOP_CURRENT_CATALOG":
            return 13;
          case "SVFOP_CURRENT_SCHEMA":
            return 14;
          case 0:
            return "SVFOP_CURRENT_DATE";
          case 1:
            return "SVFOP_CURRENT_TIME";
          case 2:
            return "SVFOP_CURRENT_TIME_N";
          case 3:
            return "SVFOP_CURRENT_TIMESTAMP";
          case 4:
            return "SVFOP_CURRENT_TIMESTAMP_N";
          case 5:
            return "SVFOP_LOCALTIME";
          case 6:
            return "SVFOP_LOCALTIME_N";
          case 7:
            return "SVFOP_LOCALTIMESTAMP";
          case 8:
            return "SVFOP_LOCALTIMESTAMP_N";
          case 9:
            return "SVFOP_CURRENT_ROLE";
          case 10:
            return "SVFOP_CURRENT_USER";
          case 11:
            return "SVFOP_USER";
          case 12:
            return "SVFOP_SESSION_USER";
          case 13:
            return "SVFOP_CURRENT_CATALOG";
          case 14:
            return "SVFOP_CURRENT_SCHEMA";
          default:
            throw new Error("Key not recognized in enum SQLValueFunctionOp");
        }
      }
    case "XmlExprOp":
      {
        switch (key) {
          case "IS_XMLCONCAT":
            return 0;
          case "IS_XMLELEMENT":
            return 1;
          case "IS_XMLFOREST":
            return 2;
          case "IS_XMLPARSE":
            return 3;
          case "IS_XMLPI":
            return 4;
          case "IS_XMLROOT":
            return 5;
          case "IS_XMLSERIALIZE":
            return 6;
          case "IS_DOCUMENT":
            return 7;
          case 0:
            return "IS_XMLCONCAT";
          case 1:
            return "IS_XMLELEMENT";
          case 2:
            return "IS_XMLFOREST";
          case 3:
            return "IS_XMLPARSE";
          case 4:
            return "IS_XMLPI";
          case 5:
            return "IS_XMLROOT";
          case 6:
            return "IS_XMLSERIALIZE";
          case 7:
            return "IS_DOCUMENT";
          default:
            throw new Error("Key not recognized in enum XmlExprOp");
        }
      }
    case "XmlOptionType":
      {
        switch (key) {
          case "XMLOPTION_DOCUMENT":
            return 0;
          case "XMLOPTION_CONTENT":
            return 1;
          case 0:
            return "XMLOPTION_DOCUMENT";
          case 1:
            return "XMLOPTION_CONTENT";
          default:
            throw new Error("Key not recognized in enum XmlOptionType");
        }
      }
    case "JsonEncoding":
      {
        switch (key) {
          case "JS_ENC_DEFAULT":
            return 0;
          case "JS_ENC_UTF8":
            return 1;
          case "JS_ENC_UTF16":
            return 2;
          case "JS_ENC_UTF32":
            return 3;
          case 0:
            return "JS_ENC_DEFAULT";
          case 1:
            return "JS_ENC_UTF8";
          case 2:
            return "JS_ENC_UTF16";
          case 3:
            return "JS_ENC_UTF32";
          default:
            throw new Error("Key not recognized in enum JsonEncoding");
        }
      }
    case "JsonFormatType":
      {
        switch (key) {
          case "JS_FORMAT_DEFAULT":
            return 0;
          case "JS_FORMAT_JSON":
            return 1;
          case "JS_FORMAT_JSONB":
            return 2;
          case 0:
            return "JS_FORMAT_DEFAULT";
          case 1:
            return "JS_FORMAT_JSON";
          case 2:
            return "JS_FORMAT_JSONB";
          default:
            throw new Error("Key not recognized in enum JsonFormatType");
        }
      }
    case "JsonConstructorType":
      {
        switch (key) {
          case "JSCTOR_JSON_OBJECT":
            return 0;
          case "JSCTOR_JSON_ARRAY":
            return 1;
          case "JSCTOR_JSON_OBJECTAGG":
            return 2;
          case "JSCTOR_JSON_ARRAYAGG":
            return 3;
          case 0:
            return "JSCTOR_JSON_OBJECT";
          case 1:
            return "JSCTOR_JSON_ARRAY";
          case 2:
            return "JSCTOR_JSON_OBJECTAGG";
          case 3:
            return "JSCTOR_JSON_ARRAYAGG";
          default:
            throw new Error("Key not recognized in enum JsonConstructorType");
        }
      }
    case "JsonValueType":
      {
        switch (key) {
          case "JS_TYPE_ANY":
            return 0;
          case "JS_TYPE_OBJECT":
            return 1;
          case "JS_TYPE_ARRAY":
            return 2;
          case "JS_TYPE_SCALAR":
            return 3;
          case 0:
            return "JS_TYPE_ANY";
          case 1:
            return "JS_TYPE_OBJECT";
          case 2:
            return "JS_TYPE_ARRAY";
          case 3:
            return "JS_TYPE_SCALAR";
          default:
            throw new Error("Key not recognized in enum JsonValueType");
        }
      }
    case "NullTestType":
      {
        switch (key) {
          case "IS_NULL":
            return 0;
          case "IS_NOT_NULL":
            return 1;
          case 0:
            return "IS_NULL";
          case 1:
            return "IS_NOT_NULL";
          default:
            throw new Error("Key not recognized in enum NullTestType");
        }
      }
    case "BoolTestType":
      {
        switch (key) {
          case "IS_TRUE":
            return 0;
          case "IS_NOT_TRUE":
            return 1;
          case "IS_FALSE":
            return 2;
          case "IS_NOT_FALSE":
            return 3;
          case "IS_UNKNOWN":
            return 4;
          case "IS_NOT_UNKNOWN":
            return 5;
          case 0:
            return "IS_TRUE";
          case 1:
            return "IS_NOT_TRUE";
          case 2:
            return "IS_FALSE";
          case 3:
            return "IS_NOT_FALSE";
          case 4:
            return "IS_UNKNOWN";
          case 5:
            return "IS_NOT_UNKNOWN";
          default:
            throw new Error("Key not recognized in enum BoolTestType");
        }
      }
    case "CmdType":
      {
        switch (key) {
          case "CMD_UNKNOWN":
            return 0;
          case "CMD_SELECT":
            return 1;
          case "CMD_UPDATE":
            return 2;
          case "CMD_INSERT":
            return 3;
          case "CMD_DELETE":
            return 4;
          case "CMD_MERGE":
            return 5;
          case "CMD_UTILITY":
            return 6;
          case "CMD_NOTHING":
            return 7;
          case 0:
            return "CMD_UNKNOWN";
          case 1:
            return "CMD_SELECT";
          case 2:
            return "CMD_UPDATE";
          case 3:
            return "CMD_INSERT";
          case 4:
            return "CMD_DELETE";
          case 5:
            return "CMD_MERGE";
          case 6:
            return "CMD_UTILITY";
          case 7:
            return "CMD_NOTHING";
          default:
            throw new Error("Key not recognized in enum CmdType");
        }
      }
    case "JoinType":
      {
        switch (key) {
          case "JOIN_INNER":
            return 0;
          case "JOIN_LEFT":
            return 1;
          case "JOIN_FULL":
            return 2;
          case "JOIN_RIGHT":
            return 3;
          case "JOIN_SEMI":
            return 4;
          case "JOIN_ANTI":
            return 5;
          case "JOIN_RIGHT_ANTI":
            return 6;
          case "JOIN_UNIQUE_OUTER":
            return 7;
          case "JOIN_UNIQUE_INNER":
            return 8;
          case 0:
            return "JOIN_INNER";
          case 1:
            return "JOIN_LEFT";
          case 2:
            return "JOIN_FULL";
          case 3:
            return "JOIN_RIGHT";
          case 4:
            return "JOIN_SEMI";
          case 5:
            return "JOIN_ANTI";
          case 6:
            return "JOIN_RIGHT_ANTI";
          case 7:
            return "JOIN_UNIQUE_OUTER";
          case 8:
            return "JOIN_UNIQUE_INNER";
          default:
            throw new Error("Key not recognized in enum JoinType");
        }
      }
    case "AggStrategy":
      {
        switch (key) {
          case "AGG_PLAIN":
            return 0;
          case "AGG_SORTED":
            return 1;
          case "AGG_HASHED":
            return 2;
          case "AGG_MIXED":
            return 3;
          case 0:
            return "AGG_PLAIN";
          case 1:
            return "AGG_SORTED";
          case 2:
            return "AGG_HASHED";
          case 3:
            return "AGG_MIXED";
          default:
            throw new Error("Key not recognized in enum AggStrategy");
        }
      }
    case "AggSplit":
      {
        switch (key) {
          case "AGGSPLIT_SIMPLE":
            return 0;
          case "AGGSPLIT_INITIAL_SERIAL":
            return 1;
          case "AGGSPLIT_FINAL_DESERIAL":
            return 2;
          case 0:
            return "AGGSPLIT_SIMPLE";
          case 1:
            return "AGGSPLIT_INITIAL_SERIAL";
          case 2:
            return "AGGSPLIT_FINAL_DESERIAL";
          default:
            throw new Error("Key not recognized in enum AggSplit");
        }
      }
    case "SetOpCmd":
      {
        switch (key) {
          case "SETOPCMD_INTERSECT":
            return 0;
          case "SETOPCMD_INTERSECT_ALL":
            return 1;
          case "SETOPCMD_EXCEPT":
            return 2;
          case "SETOPCMD_EXCEPT_ALL":
            return 3;
          case 0:
            return "SETOPCMD_INTERSECT";
          case 1:
            return "SETOPCMD_INTERSECT_ALL";
          case 2:
            return "SETOPCMD_EXCEPT";
          case 3:
            return "SETOPCMD_EXCEPT_ALL";
          default:
            throw new Error("Key not recognized in enum SetOpCmd");
        }
      }
    case "SetOpStrategy":
      {
        switch (key) {
          case "SETOP_SORTED":
            return 0;
          case "SETOP_HASHED":
            return 1;
          case 0:
            return "SETOP_SORTED";
          case 1:
            return "SETOP_HASHED";
          default:
            throw new Error("Key not recognized in enum SetOpStrategy");
        }
      }
    case "OnConflictAction":
      {
        switch (key) {
          case "ONCONFLICT_NONE":
            return 0;
          case "ONCONFLICT_NOTHING":
            return 1;
          case "ONCONFLICT_UPDATE":
            return 2;
          case 0:
            return "ONCONFLICT_NONE";
          case 1:
            return "ONCONFLICT_NOTHING";
          case 2:
            return "ONCONFLICT_UPDATE";
          default:
            throw new Error("Key not recognized in enum OnConflictAction");
        }
      }
    case "LimitOption":
      {
        switch (key) {
          case "LIMIT_OPTION_DEFAULT":
            return 0;
          case "LIMIT_OPTION_COUNT":
            return 1;
          case "LIMIT_OPTION_WITH_TIES":
            return 2;
          case 0:
            return "LIMIT_OPTION_DEFAULT";
          case 1:
            return "LIMIT_OPTION_COUNT";
          case 2:
            return "LIMIT_OPTION_WITH_TIES";
          default:
            throw new Error("Key not recognized in enum LimitOption");
        }
      }
    case "LockClauseStrength":
      {
        switch (key) {
          case "LCS_NONE":
            return 0;
          case "LCS_FORKEYSHARE":
            return 1;
          case "LCS_FORSHARE":
            return 2;
          case "LCS_FORNOKEYUPDATE":
            return 3;
          case "LCS_FORUPDATE":
            return 4;
          case 0:
            return "LCS_NONE";
          case 1:
            return "LCS_FORKEYSHARE";
          case 2:
            return "LCS_FORSHARE";
          case 3:
            return "LCS_FORNOKEYUPDATE";
          case 4:
            return "LCS_FORUPDATE";
          default:
            throw new Error("Key not recognized in enum LockClauseStrength");
        }
      }
    case "LockWaitPolicy":
      {
        switch (key) {
          case "LockWaitBlock":
            return 0;
          case "LockWaitSkip":
            return 1;
          case "LockWaitError":
            return 2;
          case 0:
            return "LockWaitBlock";
          case 1:
            return "LockWaitSkip";
          case 2:
            return "LockWaitError";
          default:
            throw new Error("Key not recognized in enum LockWaitPolicy");
        }
      }
    case "LockTupleMode":
      {
        switch (key) {
          case "LockTupleKeyShare":
            return 0;
          case "LockTupleShare":
            return 1;
          case "LockTupleNoKeyExclusive":
            return 2;
          case "LockTupleExclusive":
            return 3;
          case 0:
            return "LockTupleKeyShare";
          case 1:
            return "LockTupleShare";
          case 2:
            return "LockTupleNoKeyExclusive";
          case 3:
            return "LockTupleExclusive";
          default:
            throw new Error("Key not recognized in enum LockTupleMode");
        }
      }
    case "KeywordKind":
      {
        switch (key) {
          case "NO_KEYWORD":
            return 0;
          case "UNRESERVED_KEYWORD":
            return 1;
          case "COL_NAME_KEYWORD":
            return 2;
          case "TYPE_FUNC_NAME_KEYWORD":
            return 3;
          case "RESERVED_KEYWORD":
            return 4;
          case 0:
            return "NO_KEYWORD";
          case 1:
            return "UNRESERVED_KEYWORD";
          case 2:
            return "COL_NAME_KEYWORD";
          case 3:
            return "TYPE_FUNC_NAME_KEYWORD";
          case 4:
            return "RESERVED_KEYWORD";
          default:
            throw new Error("Key not recognized in enum KeywordKind");
        }
      }
    case "Token":
      {
        switch (key) {
          case "NUL":
            return 0;
          case "ASCII_36":
            return 36;
          case "ASCII_37":
            return 37;
          case "ASCII_40":
            return 40;
          case "ASCII_41":
            return 41;
          case "ASCII_42":
            return 42;
          case "ASCII_43":
            return 43;
          case "ASCII_44":
            return 44;
          case "ASCII_45":
            return 45;
          case "ASCII_46":
            return 46;
          case "ASCII_47":
            return 47;
          case "ASCII_58":
            return 58;
          case "ASCII_59":
            return 59;
          case "ASCII_60":
            return 60;
          case "ASCII_61":
            return 61;
          case "ASCII_62":
            return 62;
          case "ASCII_63":
            return 63;
          case "ASCII_91":
            return 91;
          case "ASCII_92":
            return 92;
          case "ASCII_93":
            return 93;
          case "ASCII_94":
            return 94;
          case "IDENT":
            return 258;
          case "UIDENT":
            return 259;
          case "FCONST":
            return 260;
          case "SCONST":
            return 261;
          case "USCONST":
            return 262;
          case "BCONST":
            return 263;
          case "XCONST":
            return 264;
          case "Op":
            return 265;
          case "ICONST":
            return 266;
          case "PARAM":
            return 267;
          case "TYPECAST":
            return 268;
          case "DOT_DOT":
            return 269;
          case "COLON_EQUALS":
            return 270;
          case "EQUALS_GREATER":
            return 271;
          case "LESS_EQUALS":
            return 272;
          case "GREATER_EQUALS":
            return 273;
          case "NOT_EQUALS":
            return 274;
          case "SQL_COMMENT":
            return 275;
          case "C_COMMENT":
            return 276;
          case "ABORT_P":
            return 277;
          case "ABSENT":
            return 278;
          case "ABSOLUTE_P":
            return 279;
          case "ACCESS":
            return 280;
          case "ACTION":
            return 281;
          case "ADD_P":
            return 282;
          case "ADMIN":
            return 283;
          case "AFTER":
            return 284;
          case "AGGREGATE":
            return 285;
          case "ALL":
            return 286;
          case "ALSO":
            return 287;
          case "ALTER":
            return 288;
          case "ALWAYS":
            return 289;
          case "ANALYSE":
            return 290;
          case "ANALYZE":
            return 291;
          case "AND":
            return 292;
          case "ANY":
            return 293;
          case "ARRAY":
            return 294;
          case "AS":
            return 295;
          case "ASC":
            return 296;
          case "ASENSITIVE":
            return 297;
          case "ASSERTION":
            return 298;
          case "ASSIGNMENT":
            return 299;
          case "ASYMMETRIC":
            return 300;
          case "ATOMIC":
            return 301;
          case "AT":
            return 302;
          case "ATTACH":
            return 303;
          case "ATTRIBUTE":
            return 304;
          case "AUTHORIZATION":
            return 305;
          case "BACKWARD":
            return 306;
          case "BEFORE":
            return 307;
          case "BEGIN_P":
            return 308;
          case "BETWEEN":
            return 309;
          case "BIGINT":
            return 310;
          case "BINARY":
            return 311;
          case "BIT":
            return 312;
          case "BOOLEAN_P":
            return 313;
          case "BOTH":
            return 314;
          case "BREADTH":
            return 315;
          case "BY":
            return 316;
          case "CACHE":
            return 317;
          case "CALL":
            return 318;
          case "CALLED":
            return 319;
          case "CASCADE":
            return 320;
          case "CASCADED":
            return 321;
          case "CASE":
            return 322;
          case "CAST":
            return 323;
          case "CATALOG_P":
            return 324;
          case "CHAIN":
            return 325;
          case "CHAR_P":
            return 326;
          case "CHARACTER":
            return 327;
          case "CHARACTERISTICS":
            return 328;
          case "CHECK":
            return 329;
          case "CHECKPOINT":
            return 330;
          case "CLASS":
            return 331;
          case "CLOSE":
            return 332;
          case "CLUSTER":
            return 333;
          case "COALESCE":
            return 334;
          case "COLLATE":
            return 335;
          case "COLLATION":
            return 336;
          case "COLUMN":
            return 337;
          case "COLUMNS":
            return 338;
          case "COMMENT":
            return 339;
          case "COMMENTS":
            return 340;
          case "COMMIT":
            return 341;
          case "COMMITTED":
            return 342;
          case "COMPRESSION":
            return 343;
          case "CONCURRENTLY":
            return 344;
          case "CONFIGURATION":
            return 345;
          case "CONFLICT":
            return 346;
          case "CONNECTION":
            return 347;
          case "CONSTRAINT":
            return 348;
          case "CONSTRAINTS":
            return 349;
          case "CONTENT_P":
            return 350;
          case "CONTINUE_P":
            return 351;
          case "CONVERSION_P":
            return 352;
          case "COPY":
            return 353;
          case "COST":
            return 354;
          case "CREATE":
            return 355;
          case "CROSS":
            return 356;
          case "CSV":
            return 357;
          case "CUBE":
            return 358;
          case "CURRENT_P":
            return 359;
          case "CURRENT_CATALOG":
            return 360;
          case "CURRENT_DATE":
            return 361;
          case "CURRENT_ROLE":
            return 362;
          case "CURRENT_SCHEMA":
            return 363;
          case "CURRENT_TIME":
            return 364;
          case "CURRENT_TIMESTAMP":
            return 365;
          case "CURRENT_USER":
            return 366;
          case "CURSOR":
            return 367;
          case "CYCLE":
            return 368;
          case "DATA_P":
            return 369;
          case "DATABASE":
            return 370;
          case "DAY_P":
            return 371;
          case "DEALLOCATE":
            return 372;
          case "DEC":
            return 373;
          case "DECIMAL_P":
            return 374;
          case "DECLARE":
            return 375;
          case "DEFAULT":
            return 376;
          case "DEFAULTS":
            return 377;
          case "DEFERRABLE":
            return 378;
          case "DEFERRED":
            return 379;
          case "DEFINER":
            return 380;
          case "DELETE_P":
            return 381;
          case "DELIMITER":
            return 382;
          case "DELIMITERS":
            return 383;
          case "DEPENDS":
            return 384;
          case "DEPTH":
            return 385;
          case "DESC":
            return 386;
          case "DETACH":
            return 387;
          case "DICTIONARY":
            return 388;
          case "DISABLE_P":
            return 389;
          case "DISCARD":
            return 390;
          case "DISTINCT":
            return 391;
          case "DO":
            return 392;
          case "DOCUMENT_P":
            return 393;
          case "DOMAIN_P":
            return 394;
          case "DOUBLE_P":
            return 395;
          case "DROP":
            return 396;
          case "EACH":
            return 397;
          case "ELSE":
            return 398;
          case "ENABLE_P":
            return 399;
          case "ENCODING":
            return 400;
          case "ENCRYPTED":
            return 401;
          case "END_P":
            return 402;
          case "ENUM_P":
            return 403;
          case "ESCAPE":
            return 404;
          case "EVENT":
            return 405;
          case "EXCEPT":
            return 406;
          case "EXCLUDE":
            return 407;
          case "EXCLUDING":
            return 408;
          case "EXCLUSIVE":
            return 409;
          case "EXECUTE":
            return 410;
          case "EXISTS":
            return 411;
          case "EXPLAIN":
            return 412;
          case "EXPRESSION":
            return 413;
          case "EXTENSION":
            return 414;
          case "EXTERNAL":
            return 415;
          case "EXTRACT":
            return 416;
          case "FALSE_P":
            return 417;
          case "FAMILY":
            return 418;
          case "FETCH":
            return 419;
          case "FILTER":
            return 420;
          case "FINALIZE":
            return 421;
          case "FIRST_P":
            return 422;
          case "FLOAT_P":
            return 423;
          case "FOLLOWING":
            return 424;
          case "FOR":
            return 425;
          case "FORCE":
            return 426;
          case "FOREIGN":
            return 427;
          case "FORMAT":
            return 428;
          case "FORWARD":
            return 429;
          case "FREEZE":
            return 430;
          case "FROM":
            return 431;
          case "FULL":
            return 432;
          case "FUNCTION":
            return 433;
          case "FUNCTIONS":
            return 434;
          case "GENERATED":
            return 435;
          case "GLOBAL":
            return 436;
          case "GRANT":
            return 437;
          case "GRANTED":
            return 438;
          case "GREATEST":
            return 439;
          case "GROUP_P":
            return 440;
          case "GROUPING":
            return 441;
          case "GROUPS":
            return 442;
          case "HANDLER":
            return 443;
          case "HAVING":
            return 444;
          case "HEADER_P":
            return 445;
          case "HOLD":
            return 446;
          case "HOUR_P":
            return 447;
          case "IDENTITY_P":
            return 448;
          case "IF_P":
            return 449;
          case "ILIKE":
            return 450;
          case "IMMEDIATE":
            return 451;
          case "IMMUTABLE":
            return 452;
          case "IMPLICIT_P":
            return 453;
          case "IMPORT_P":
            return 454;
          case "IN_P":
            return 455;
          case "INCLUDE":
            return 456;
          case "INCLUDING":
            return 457;
          case "INCREMENT":
            return 458;
          case "INDENT":
            return 459;
          case "INDEX":
            return 460;
          case "INDEXES":
            return 461;
          case "INHERIT":
            return 462;
          case "INHERITS":
            return 463;
          case "INITIALLY":
            return 464;
          case "INLINE_P":
            return 465;
          case "INNER_P":
            return 466;
          case "INOUT":
            return 467;
          case "INPUT_P":
            return 468;
          case "INSENSITIVE":
            return 469;
          case "INSERT":
            return 470;
          case "INSTEAD":
            return 471;
          case "INT_P":
            return 472;
          case "INTEGER":
            return 473;
          case "INTERSECT":
            return 474;
          case "INTERVAL":
            return 475;
          case "INTO":
            return 476;
          case "INVOKER":
            return 477;
          case "IS":
            return 478;
          case "ISNULL":
            return 479;
          case "ISOLATION":
            return 480;
          case "JOIN":
            return 481;
          case "JSON":
            return 482;
          case "JSON_ARRAY":
            return 483;
          case "JSON_ARRAYAGG":
            return 484;
          case "JSON_OBJECT":
            return 485;
          case "JSON_OBJECTAGG":
            return 486;
          case "KEY":
            return 487;
          case "KEYS":
            return 488;
          case "LABEL":
            return 489;
          case "LANGUAGE":
            return 490;
          case "LARGE_P":
            return 491;
          case "LAST_P":
            return 492;
          case "LATERAL_P":
            return 493;
          case "LEADING":
            return 494;
          case "LEAKPROOF":
            return 495;
          case "LEAST":
            return 496;
          case "LEFT":
            return 497;
          case "LEVEL":
            return 498;
          case "LIKE":
            return 499;
          case "LIMIT":
            return 500;
          case "LISTEN":
            return 501;
          case "LOAD":
            return 502;
          case "LOCAL":
            return 503;
          case "LOCALTIME":
            return 504;
          case "LOCALTIMESTAMP":
            return 505;
          case "LOCATION":
            return 506;
          case "LOCK_P":
            return 507;
          case "LOCKED":
            return 508;
          case "LOGGED":
            return 509;
          case "MAPPING":
            return 510;
          case "MATCH":
            return 511;
          case "MATCHED":
            return 512;
          case "MATERIALIZED":
            return 513;
          case "MAXVALUE":
            return 514;
          case "MERGE":
            return 515;
          case "METHOD":
            return 516;
          case "MINUTE_P":
            return 517;
          case "MINVALUE":
            return 518;
          case "MODE":
            return 519;
          case "MONTH_P":
            return 520;
          case "MOVE":
            return 521;
          case "NAME_P":
            return 522;
          case "NAMES":
            return 523;
          case "NATIONAL":
            return 524;
          case "NATURAL":
            return 525;
          case "NCHAR":
            return 526;
          case "NEW":
            return 527;
          case "NEXT":
            return 528;
          case "NFC":
            return 529;
          case "NFD":
            return 530;
          case "NFKC":
            return 531;
          case "NFKD":
            return 532;
          case "NO":
            return 533;
          case "NONE":
            return 534;
          case "NORMALIZE":
            return 535;
          case "NORMALIZED":
            return 536;
          case "NOT":
            return 537;
          case "NOTHING":
            return 538;
          case "NOTIFY":
            return 539;
          case "NOTNULL":
            return 540;
          case "NOWAIT":
            return 541;
          case "NULL_P":
            return 542;
          case "NULLIF":
            return 543;
          case "NULLS_P":
            return 544;
          case "NUMERIC":
            return 545;
          case "OBJECT_P":
            return 546;
          case "OF":
            return 547;
          case "OFF":
            return 548;
          case "OFFSET":
            return 549;
          case "OIDS":
            return 550;
          case "OLD":
            return 551;
          case "ON":
            return 552;
          case "ONLY":
            return 553;
          case "OPERATOR":
            return 554;
          case "OPTION":
            return 555;
          case "OPTIONS":
            return 556;
          case "OR":
            return 557;
          case "ORDER":
            return 558;
          case "ORDINALITY":
            return 559;
          case "OTHERS":
            return 560;
          case "OUT_P":
            return 561;
          case "OUTER_P":
            return 562;
          case "OVER":
            return 563;
          case "OVERLAPS":
            return 564;
          case "OVERLAY":
            return 565;
          case "OVERRIDING":
            return 566;
          case "OWNED":
            return 567;
          case "OWNER":
            return 568;
          case "PARALLEL":
            return 569;
          case "PARAMETER":
            return 570;
          case "PARSER":
            return 571;
          case "PARTIAL":
            return 572;
          case "PARTITION":
            return 573;
          case "PASSING":
            return 574;
          case "PASSWORD":
            return 575;
          case "PLACING":
            return 576;
          case "PLANS":
            return 577;
          case "POLICY":
            return 578;
          case "POSITION":
            return 579;
          case "PRECEDING":
            return 580;
          case "PRECISION":
            return 581;
          case "PRESERVE":
            return 582;
          case "PREPARE":
            return 583;
          case "PREPARED":
            return 584;
          case "PRIMARY":
            return 585;
          case "PRIOR":
            return 586;
          case "PRIVILEGES":
            return 587;
          case "PROCEDURAL":
            return 588;
          case "PROCEDURE":
            return 589;
          case "PROCEDURES":
            return 590;
          case "PROGRAM":
            return 591;
          case "PUBLICATION":
            return 592;
          case "QUOTE":
            return 593;
          case "RANGE":
            return 594;
          case "READ":
            return 595;
          case "REAL":
            return 596;
          case "REASSIGN":
            return 597;
          case "RECHECK":
            return 598;
          case "RECURSIVE":
            return 599;
          case "REF_P":
            return 600;
          case "REFERENCES":
            return 601;
          case "REFERENCING":
            return 602;
          case "REFRESH":
            return 603;
          case "REINDEX":
            return 604;
          case "RELATIVE_P":
            return 605;
          case "RELEASE":
            return 606;
          case "RENAME":
            return 607;
          case "REPEATABLE":
            return 608;
          case "REPLACE":
            return 609;
          case "REPLICA":
            return 610;
          case "RESET":
            return 611;
          case "RESTART":
            return 612;
          case "RESTRICT":
            return 613;
          case "RETURN":
            return 614;
          case "RETURNING":
            return 615;
          case "RETURNS":
            return 616;
          case "REVOKE":
            return 617;
          case "RIGHT":
            return 618;
          case "ROLE":
            return 619;
          case "ROLLBACK":
            return 620;
          case "ROLLUP":
            return 621;
          case "ROUTINE":
            return 622;
          case "ROUTINES":
            return 623;
          case "ROW":
            return 624;
          case "ROWS":
            return 625;
          case "RULE":
            return 626;
          case "SAVEPOINT":
            return 627;
          case "SCALAR":
            return 628;
          case "SCHEMA":
            return 629;
          case "SCHEMAS":
            return 630;
          case "SCROLL":
            return 631;
          case "SEARCH":
            return 632;
          case "SECOND_P":
            return 633;
          case "SECURITY":
            return 634;
          case "SELECT":
            return 635;
          case "SEQUENCE":
            return 636;
          case "SEQUENCES":
            return 637;
          case "SERIALIZABLE":
            return 638;
          case "SERVER":
            return 639;
          case "SESSION":
            return 640;
          case "SESSION_USER":
            return 641;
          case "SET":
            return 642;
          case "SETS":
            return 643;
          case "SETOF":
            return 644;
          case "SHARE":
            return 645;
          case "SHOW":
            return 646;
          case "SIMILAR":
            return 647;
          case "SIMPLE":
            return 648;
          case "SKIP":
            return 649;
          case "SMALLINT":
            return 650;
          case "SNAPSHOT":
            return 651;
          case "SOME":
            return 652;
          case "SQL_P":
            return 653;
          case "STABLE":
            return 654;
          case "STANDALONE_P":
            return 655;
          case "START":
            return 656;
          case "STATEMENT":
            return 657;
          case "STATISTICS":
            return 658;
          case "STDIN":
            return 659;
          case "STDOUT":
            return 660;
          case "STORAGE":
            return 661;
          case "STORED":
            return 662;
          case "STRICT_P":
            return 663;
          case "STRIP_P":
            return 664;
          case "SUBSCRIPTION":
            return 665;
          case "SUBSTRING":
            return 666;
          case "SUPPORT":
            return 667;
          case "SYMMETRIC":
            return 668;
          case "SYSID":
            return 669;
          case "SYSTEM_P":
            return 670;
          case "SYSTEM_USER":
            return 671;
          case "TABLE":
            return 672;
          case "TABLES":
            return 673;
          case "TABLESAMPLE":
            return 674;
          case "TABLESPACE":
            return 675;
          case "TEMP":
            return 676;
          case "TEMPLATE":
            return 677;
          case "TEMPORARY":
            return 678;
          case "TEXT_P":
            return 679;
          case "THEN":
            return 680;
          case "TIES":
            return 681;
          case "TIME":
            return 682;
          case "TIMESTAMP":
            return 683;
          case "TO":
            return 684;
          case "TRAILING":
            return 685;
          case "TRANSACTION":
            return 686;
          case "TRANSFORM":
            return 687;
          case "TREAT":
            return 688;
          case "TRIGGER":
            return 689;
          case "TRIM":
            return 690;
          case "TRUE_P":
            return 691;
          case "TRUNCATE":
            return 692;
          case "TRUSTED":
            return 693;
          case "TYPE_P":
            return 694;
          case "TYPES_P":
            return 695;
          case "UESCAPE":
            return 696;
          case "UNBOUNDED":
            return 697;
          case "UNCOMMITTED":
            return 698;
          case "UNENCRYPTED":
            return 699;
          case "UNION":
            return 700;
          case "UNIQUE":
            return 701;
          case "UNKNOWN":
            return 702;
          case "UNLISTEN":
            return 703;
          case "UNLOGGED":
            return 704;
          case "UNTIL":
            return 705;
          case "UPDATE":
            return 706;
          case "USER":
            return 707;
          case "USING":
            return 708;
          case "VACUUM":
            return 709;
          case "VALID":
            return 710;
          case "VALIDATE":
            return 711;
          case "VALIDATOR":
            return 712;
          case "VALUE_P":
            return 713;
          case "VALUES":
            return 714;
          case "VARCHAR":
            return 715;
          case "VARIADIC":
            return 716;
          case "VARYING":
            return 717;
          case "VERBOSE":
            return 718;
          case "VERSION_P":
            return 719;
          case "VIEW":
            return 720;
          case "VIEWS":
            return 721;
          case "VOLATILE":
            return 722;
          case "WHEN":
            return 723;
          case "WHERE":
            return 724;
          case "WHITESPACE_P":
            return 725;
          case "WINDOW":
            return 726;
          case "WITH":
            return 727;
          case "WITHIN":
            return 728;
          case "WITHOUT":
            return 729;
          case "WORK":
            return 730;
          case "WRAPPER":
            return 731;
          case "WRITE":
            return 732;
          case "XML_P":
            return 733;
          case "XMLATTRIBUTES":
            return 734;
          case "XMLCONCAT":
            return 735;
          case "XMLELEMENT":
            return 736;
          case "XMLEXISTS":
            return 737;
          case "XMLFOREST":
            return 738;
          case "XMLNAMESPACES":
            return 739;
          case "XMLPARSE":
            return 740;
          case "XMLPI":
            return 741;
          case "XMLROOT":
            return 742;
          case "XMLSERIALIZE":
            return 743;
          case "XMLTABLE":
            return 744;
          case "YEAR_P":
            return 745;
          case "YES_P":
            return 746;
          case "ZONE":
            return 747;
          case "FORMAT_LA":
            return 748;
          case "NOT_LA":
            return 749;
          case "NULLS_LA":
            return 750;
          case "WITH_LA":
            return 751;
          case "WITHOUT_LA":
            return 752;
          case "MODE_TYPE_NAME":
            return 753;
          case "MODE_PLPGSQL_EXPR":
            return 754;
          case "MODE_PLPGSQL_ASSIGN1":
            return 755;
          case "MODE_PLPGSQL_ASSIGN2":
            return 756;
          case "MODE_PLPGSQL_ASSIGN3":
            return 757;
          case "UMINUS":
            return 758;
          case 0:
            return "NUL";
          case 36:
            return "ASCII_36";
          case 37:
            return "ASCII_37";
          case 40:
            return "ASCII_40";
          case 41:
            return "ASCII_41";
          case 42:
            return "ASCII_42";
          case 43:
            return "ASCII_43";
          case 44:
            return "ASCII_44";
          case 45:
            return "ASCII_45";
          case 46:
            return "ASCII_46";
          case 47:
            return "ASCII_47";
          case 58:
            return "ASCII_58";
          case 59:
            return "ASCII_59";
          case 60:
            return "ASCII_60";
          case 61:
            return "ASCII_61";
          case 62:
            return "ASCII_62";
          case 63:
            return "ASCII_63";
          case 91:
            return "ASCII_91";
          case 92:
            return "ASCII_92";
          case 93:
            return "ASCII_93";
          case 94:
            return "ASCII_94";
          case 258:
            return "IDENT";
          case 259:
            return "UIDENT";
          case 260:
            return "FCONST";
          case 261:
            return "SCONST";
          case 262:
            return "USCONST";
          case 263:
            return "BCONST";
          case 264:
            return "XCONST";
          case 265:
            return "Op";
          case 266:
            return "ICONST";
          case 267:
            return "PARAM";
          case 268:
            return "TYPECAST";
          case 269:
            return "DOT_DOT";
          case 270:
            return "COLON_EQUALS";
          case 271:
            return "EQUALS_GREATER";
          case 272:
            return "LESS_EQUALS";
          case 273:
            return "GREATER_EQUALS";
          case 274:
            return "NOT_EQUALS";
          case 275:
            return "SQL_COMMENT";
          case 276:
            return "C_COMMENT";
          case 277:
            return "ABORT_P";
          case 278:
            return "ABSENT";
          case 279:
            return "ABSOLUTE_P";
          case 280:
            return "ACCESS";
          case 281:
            return "ACTION";
          case 282:
            return "ADD_P";
          case 283:
            return "ADMIN";
          case 284:
            return "AFTER";
          case 285:
            return "AGGREGATE";
          case 286:
            return "ALL";
          case 287:
            return "ALSO";
          case 288:
            return "ALTER";
          case 289:
            return "ALWAYS";
          case 290:
            return "ANALYSE";
          case 291:
            return "ANALYZE";
          case 292:
            return "AND";
          case 293:
            return "ANY";
          case 294:
            return "ARRAY";
          case 295:
            return "AS";
          case 296:
            return "ASC";
          case 297:
            return "ASENSITIVE";
          case 298:
            return "ASSERTION";
          case 299:
            return "ASSIGNMENT";
          case 300:
            return "ASYMMETRIC";
          case 301:
            return "ATOMIC";
          case 302:
            return "AT";
          case 303:
            return "ATTACH";
          case 304:
            return "ATTRIBUTE";
          case 305:
            return "AUTHORIZATION";
          case 306:
            return "BACKWARD";
          case 307:
            return "BEFORE";
          case 308:
            return "BEGIN_P";
          case 309:
            return "BETWEEN";
          case 310:
            return "BIGINT";
          case 311:
            return "BINARY";
          case 312:
            return "BIT";
          case 313:
            return "BOOLEAN_P";
          case 314:
            return "BOTH";
          case 315:
            return "BREADTH";
          case 316:
            return "BY";
          case 317:
            return "CACHE";
          case 318:
            return "CALL";
          case 319:
            return "CALLED";
          case 320:
            return "CASCADE";
          case 321:
            return "CASCADED";
          case 322:
            return "CASE";
          case 323:
            return "CAST";
          case 324:
            return "CATALOG_P";
          case 325:
            return "CHAIN";
          case 326:
            return "CHAR_P";
          case 327:
            return "CHARACTER";
          case 328:
            return "CHARACTERISTICS";
          case 329:
            return "CHECK";
          case 330:
            return "CHECKPOINT";
          case 331:
            return "CLASS";
          case 332:
            return "CLOSE";
          case 333:
            return "CLUSTER";
          case 334:
            return "COALESCE";
          case 335:
            return "COLLATE";
          case 336:
            return "COLLATION";
          case 337:
            return "COLUMN";
          case 338:
            return "COLUMNS";
          case 339:
            return "COMMENT";
          case 340:
            return "COMMENTS";
          case 341:
            return "COMMIT";
          case 342:
            return "COMMITTED";
          case 343:
            return "COMPRESSION";
          case 344:
            return "CONCURRENTLY";
          case 345:
            return "CONFIGURATION";
          case 346:
            return "CONFLICT";
          case 347:
            return "CONNECTION";
          case 348:
            return "CONSTRAINT";
          case 349:
            return "CONSTRAINTS";
          case 350:
            return "CONTENT_P";
          case 351:
            return "CONTINUE_P";
          case 352:
            return "CONVERSION_P";
          case 353:
            return "COPY";
          case 354:
            return "COST";
          case 355:
            return "CREATE";
          case 356:
            return "CROSS";
          case 357:
            return "CSV";
          case 358:
            return "CUBE";
          case 359:
            return "CURRENT_P";
          case 360:
            return "CURRENT_CATALOG";
          case 361:
            return "CURRENT_DATE";
          case 362:
            return "CURRENT_ROLE";
          case 363:
            return "CURRENT_SCHEMA";
          case 364:
            return "CURRENT_TIME";
          case 365:
            return "CURRENT_TIMESTAMP";
          case 366:
            return "CURRENT_USER";
          case 367:
            return "CURSOR";
          case 368:
            return "CYCLE";
          case 369:
            return "DATA_P";
          case 370:
            return "DATABASE";
          case 371:
            return "DAY_P";
          case 372:
            return "DEALLOCATE";
          case 373:
            return "DEC";
          case 374:
            return "DECIMAL_P";
          case 375:
            return "DECLARE";
          case 376:
            return "DEFAULT";
          case 377:
            return "DEFAULTS";
          case 378:
            return "DEFERRABLE";
          case 379:
            return "DEFERRED";
          case 380:
            return "DEFINER";
          case 381:
            return "DELETE_P";
          case 382:
            return "DELIMITER";
          case 383:
            return "DELIMITERS";
          case 384:
            return "DEPENDS";
          case 385:
            return "DEPTH";
          case 386:
            return "DESC";
          case 387:
            return "DETACH";
          case 388:
            return "DICTIONARY";
          case 389:
            return "DISABLE_P";
          case 390:
            return "DISCARD";
          case 391:
            return "DISTINCT";
          case 392:
            return "DO";
          case 393:
            return "DOCUMENT_P";
          case 394:
            return "DOMAIN_P";
          case 395:
            return "DOUBLE_P";
          case 396:
            return "DROP";
          case 397:
            return "EACH";
          case 398:
            return "ELSE";
          case 399:
            return "ENABLE_P";
          case 400:
            return "ENCODING";
          case 401:
            return "ENCRYPTED";
          case 402:
            return "END_P";
          case 403:
            return "ENUM_P";
          case 404:
            return "ESCAPE";
          case 405:
            return "EVENT";
          case 406:
            return "EXCEPT";
          case 407:
            return "EXCLUDE";
          case 408:
            return "EXCLUDING";
          case 409:
            return "EXCLUSIVE";
          case 410:
            return "EXECUTE";
          case 411:
            return "EXISTS";
          case 412:
            return "EXPLAIN";
          case 413:
            return "EXPRESSION";
          case 414:
            return "EXTENSION";
          case 415:
            return "EXTERNAL";
          case 416:
            return "EXTRACT";
          case 417:
            return "FALSE_P";
          case 418:
            return "FAMILY";
          case 419:
            return "FETCH";
          case 420:
            return "FILTER";
          case 421:
            return "FINALIZE";
          case 422:
            return "FIRST_P";
          case 423:
            return "FLOAT_P";
          case 424:
            return "FOLLOWING";
          case 425:
            return "FOR";
          case 426:
            return "FORCE";
          case 427:
            return "FOREIGN";
          case 428:
            return "FORMAT";
          case 429:
            return "FORWARD";
          case 430:
            return "FREEZE";
          case 431:
            return "FROM";
          case 432:
            return "FULL";
          case 433:
            return "FUNCTION";
          case 434:
            return "FUNCTIONS";
          case 435:
            return "GENERATED";
          case 436:
            return "GLOBAL";
          case 437:
            return "GRANT";
          case 438:
            return "GRANTED";
          case 439:
            return "GREATEST";
          case 440:
            return "GROUP_P";
          case 441:
            return "GROUPING";
          case 442:
            return "GROUPS";
          case 443:
            return "HANDLER";
          case 444:
            return "HAVING";
          case 445:
            return "HEADER_P";
          case 446:
            return "HOLD";
          case 447:
            return "HOUR_P";
          case 448:
            return "IDENTITY_P";
          case 449:
            return "IF_P";
          case 450:
            return "ILIKE";
          case 451:
            return "IMMEDIATE";
          case 452:
            return "IMMUTABLE";
          case 453:
            return "IMPLICIT_P";
          case 454:
            return "IMPORT_P";
          case 455:
            return "IN_P";
          case 456:
            return "INCLUDE";
          case 457:
            return "INCLUDING";
          case 458:
            return "INCREMENT";
          case 459:
            return "INDENT";
          case 460:
            return "INDEX";
          case 461:
            return "INDEXES";
          case 462:
            return "INHERIT";
          case 463:
            return "INHERITS";
          case 464:
            return "INITIALLY";
          case 465:
            return "INLINE_P";
          case 466:
            return "INNER_P";
          case 467:
            return "INOUT";
          case 468:
            return "INPUT_P";
          case 469:
            return "INSENSITIVE";
          case 470:
            return "INSERT";
          case 471:
            return "INSTEAD";
          case 472:
            return "INT_P";
          case 473:
            return "INTEGER";
          case 474:
            return "INTERSECT";
          case 475:
            return "INTERVAL";
          case 476:
            return "INTO";
          case 477:
            return "INVOKER";
          case 478:
            return "IS";
          case 479:
            return "ISNULL";
          case 480:
            return "ISOLATION";
          case 481:
            return "JOIN";
          case 482:
            return "JSON";
          case 483:
            return "JSON_ARRAY";
          case 484:
            return "JSON_ARRAYAGG";
          case 485:
            return "JSON_OBJECT";
          case 486:
            return "JSON_OBJECTAGG";
          case 487:
            return "KEY";
          case 488:
            return "KEYS";
          case 489:
            return "LABEL";
          case 490:
            return "LANGUAGE";
          case 491:
            return "LARGE_P";
          case 492:
            return "LAST_P";
          case 493:
            return "LATERAL_P";
          case 494:
            return "LEADING";
          case 495:
            return "LEAKPROOF";
          case 496:
            return "LEAST";
          case 497:
            return "LEFT";
          case 498:
            return "LEVEL";
          case 499:
            return "LIKE";
          case 500:
            return "LIMIT";
          case 501:
            return "LISTEN";
          case 502:
            return "LOAD";
          case 503:
            return "LOCAL";
          case 504:
            return "LOCALTIME";
          case 505:
            return "LOCALTIMESTAMP";
          case 506:
            return "LOCATION";
          case 507:
            return "LOCK_P";
          case 508:
            return "LOCKED";
          case 509:
            return "LOGGED";
          case 510:
            return "MAPPING";
          case 511:
            return "MATCH";
          case 512:
            return "MATCHED";
          case 513:
            return "MATERIALIZED";
          case 514:
            return "MAXVALUE";
          case 515:
            return "MERGE";
          case 516:
            return "METHOD";
          case 517:
            return "MINUTE_P";
          case 518:
            return "MINVALUE";
          case 519:
            return "MODE";
          case 520:
            return "MONTH_P";
          case 521:
            return "MOVE";
          case 522:
            return "NAME_P";
          case 523:
            return "NAMES";
          case 524:
            return "NATIONAL";
          case 525:
            return "NATURAL";
          case 526:
            return "NCHAR";
          case 527:
            return "NEW";
          case 528:
            return "NEXT";
          case 529:
            return "NFC";
          case 530:
            return "NFD";
          case 531:
            return "NFKC";
          case 532:
            return "NFKD";
          case 533:
            return "NO";
          case 534:
            return "NONE";
          case 535:
            return "NORMALIZE";
          case 536:
            return "NORMALIZED";
          case 537:
            return "NOT";
          case 538:
            return "NOTHING";
          case 539:
            return "NOTIFY";
          case 540:
            return "NOTNULL";
          case 541:
            return "NOWAIT";
          case 542:
            return "NULL_P";
          case 543:
            return "NULLIF";
          case 544:
            return "NULLS_P";
          case 545:
            return "NUMERIC";
          case 546:
            return "OBJECT_P";
          case 547:
            return "OF";
          case 548:
            return "OFF";
          case 549:
            return "OFFSET";
          case 550:
            return "OIDS";
          case 551:
            return "OLD";
          case 552:
            return "ON";
          case 553:
            return "ONLY";
          case 554:
            return "OPERATOR";
          case 555:
            return "OPTION";
          case 556:
            return "OPTIONS";
          case 557:
            return "OR";
          case 558:
            return "ORDER";
          case 559:
            return "ORDINALITY";
          case 560:
            return "OTHERS";
          case 561:
            return "OUT_P";
          case 562:
            return "OUTER_P";
          case 563:
            return "OVER";
          case 564:
            return "OVERLAPS";
          case 565:
            return "OVERLAY";
          case 566:
            return "OVERRIDING";
          case 567:
            return "OWNED";
          case 568:
            return "OWNER";
          case 569:
            return "PARALLEL";
          case 570:
            return "PARAMETER";
          case 571:
            return "PARSER";
          case 572:
            return "PARTIAL";
          case 573:
            return "PARTITION";
          case 574:
            return "PASSING";
          case 575:
            return "PASSWORD";
          case 576:
            return "PLACING";
          case 577:
            return "PLANS";
          case 578:
            return "POLICY";
          case 579:
            return "POSITION";
          case 580:
            return "PRECEDING";
          case 581:
            return "PRECISION";
          case 582:
            return "PRESERVE";
          case 583:
            return "PREPARE";
          case 584:
            return "PREPARED";
          case 585:
            return "PRIMARY";
          case 586:
            return "PRIOR";
          case 587:
            return "PRIVILEGES";
          case 588:
            return "PROCEDURAL";
          case 589:
            return "PROCEDURE";
          case 590:
            return "PROCEDURES";
          case 591:
            return "PROGRAM";
          case 592:
            return "PUBLICATION";
          case 593:
            return "QUOTE";
          case 594:
            return "RANGE";
          case 595:
            return "READ";
          case 596:
            return "REAL";
          case 597:
            return "REASSIGN";
          case 598:
            return "RECHECK";
          case 599:
            return "RECURSIVE";
          case 600:
            return "REF_P";
          case 601:
            return "REFERENCES";
          case 602:
            return "REFERENCING";
          case 603:
            return "REFRESH";
          case 604:
            return "REINDEX";
          case 605:
            return "RELATIVE_P";
          case 606:
            return "RELEASE";
          case 607:
            return "RENAME";
          case 608:
            return "REPEATABLE";
          case 609:
            return "REPLACE";
          case 610:
            return "REPLICA";
          case 611:
            return "RESET";
          case 612:
            return "RESTART";
          case 613:
            return "RESTRICT";
          case 614:
            return "RETURN";
          case 615:
            return "RETURNING";
          case 616:
            return "RETURNS";
          case 617:
            return "REVOKE";
          case 618:
            return "RIGHT";
          case 619:
            return "ROLE";
          case 620:
            return "ROLLBACK";
          case 621:
            return "ROLLUP";
          case 622:
            return "ROUTINE";
          case 623:
            return "ROUTINES";
          case 624:
            return "ROW";
          case 625:
            return "ROWS";
          case 626:
            return "RULE";
          case 627:
            return "SAVEPOINT";
          case 628:
            return "SCALAR";
          case 629:
            return "SCHEMA";
          case 630:
            return "SCHEMAS";
          case 631:
            return "SCROLL";
          case 632:
            return "SEARCH";
          case 633:
            return "SECOND_P";
          case 634:
            return "SECURITY";
          case 635:
            return "SELECT";
          case 636:
            return "SEQUENCE";
          case 637:
            return "SEQUENCES";
          case 638:
            return "SERIALIZABLE";
          case 639:
            return "SERVER";
          case 640:
            return "SESSION";
          case 641:
            return "SESSION_USER";
          case 642:
            return "SET";
          case 643:
            return "SETS";
          case 644:
            return "SETOF";
          case 645:
            return "SHARE";
          case 646:
            return "SHOW";
          case 647:
            return "SIMILAR";
          case 648:
            return "SIMPLE";
          case 649:
            return "SKIP";
          case 650:
            return "SMALLINT";
          case 651:
            return "SNAPSHOT";
          case 652:
            return "SOME";
          case 653:
            return "SQL_P";
          case 654:
            return "STABLE";
          case 655:
            return "STANDALONE_P";
          case 656:
            return "START";
          case 657:
            return "STATEMENT";
          case 658:
            return "STATISTICS";
          case 659:
            return "STDIN";
          case 660:
            return "STDOUT";
          case 661:
            return "STORAGE";
          case 662:
            return "STORED";
          case 663:
            return "STRICT_P";
          case 664:
            return "STRIP_P";
          case 665:
            return "SUBSCRIPTION";
          case 666:
            return "SUBSTRING";
          case 667:
            return "SUPPORT";
          case 668:
            return "SYMMETRIC";
          case 669:
            return "SYSID";
          case 670:
            return "SYSTEM_P";
          case 671:
            return "SYSTEM_USER";
          case 672:
            return "TABLE";
          case 673:
            return "TABLES";
          case 674:
            return "TABLESAMPLE";
          case 675:
            return "TABLESPACE";
          case 676:
            return "TEMP";
          case 677:
            return "TEMPLATE";
          case 678:
            return "TEMPORARY";
          case 679:
            return "TEXT_P";
          case 680:
            return "THEN";
          case 681:
            return "TIES";
          case 682:
            return "TIME";
          case 683:
            return "TIMESTAMP";
          case 684:
            return "TO";
          case 685:
            return "TRAILING";
          case 686:
            return "TRANSACTION";
          case 687:
            return "TRANSFORM";
          case 688:
            return "TREAT";
          case 689:
            return "TRIGGER";
          case 690:
            return "TRIM";
          case 691:
            return "TRUE_P";
          case 692:
            return "TRUNCATE";
          case 693:
            return "TRUSTED";
          case 694:
            return "TYPE_P";
          case 695:
            return "TYPES_P";
          case 696:
            return "UESCAPE";
          case 697:
            return "UNBOUNDED";
          case 698:
            return "UNCOMMITTED";
          case 699:
            return "UNENCRYPTED";
          case 700:
            return "UNION";
          case 701:
            return "UNIQUE";
          case 702:
            return "UNKNOWN";
          case 703:
            return "UNLISTEN";
          case 704:
            return "UNLOGGED";
          case 705:
            return "UNTIL";
          case 706:
            return "UPDATE";
          case 707:
            return "USER";
          case 708:
            return "USING";
          case 709:
            return "VACUUM";
          case 710:
            return "VALID";
          case 711:
            return "VALIDATE";
          case 712:
            return "VALIDATOR";
          case 713:
            return "VALUE_P";
          case 714:
            return "VALUES";
          case 715:
            return "VARCHAR";
          case 716:
            return "VARIADIC";
          case 717:
            return "VARYING";
          case 718:
            return "VERBOSE";
          case 719:
            return "VERSION_P";
          case 720:
            return "VIEW";
          case 721:
            return "VIEWS";
          case 722:
            return "VOLATILE";
          case 723:
            return "WHEN";
          case 724:
            return "WHERE";
          case 725:
            return "WHITESPACE_P";
          case 726:
            return "WINDOW";
          case 727:
            return "WITH";
          case 728:
            return "WITHIN";
          case 729:
            return "WITHOUT";
          case 730:
            return "WORK";
          case 731:
            return "WRAPPER";
          case 732:
            return "WRITE";
          case 733:
            return "XML_P";
          case 734:
            return "XMLATTRIBUTES";
          case 735:
            return "XMLCONCAT";
          case 736:
            return "XMLELEMENT";
          case 737:
            return "XMLEXISTS";
          case 738:
            return "XMLFOREST";
          case 739:
            return "XMLNAMESPACES";
          case 740:
            return "XMLPARSE";
          case 741:
            return "XMLPI";
          case 742:
            return "XMLROOT";
          case 743:
            return "XMLSERIALIZE";
          case 744:
            return "XMLTABLE";
          case 745:
            return "YEAR_P";
          case 746:
            return "YES_P";
          case 747:
            return "ZONE";
          case 748:
            return "FORMAT_LA";
          case 749:
            return "NOT_LA";
          case 750:
            return "NULLS_LA";
          case 751:
            return "WITH_LA";
          case 752:
            return "WITHOUT_LA";
          case 753:
            return "MODE_TYPE_NAME";
          case 754:
            return "MODE_PLPGSQL_EXPR";
          case 755:
            return "MODE_PLPGSQL_ASSIGN1";
          case 756:
            return "MODE_PLPGSQL_ASSIGN2";
          case 757:
            return "MODE_PLPGSQL_ASSIGN3";
          case 758:
            return "UMINUS";
          default:
            throw new Error("Key not recognized in enum Token");
        }
      }
    default:
      throw new Error("Enum type not recognized");
  }
};