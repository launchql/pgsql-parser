import { A_ArrayExpr, A_Const, A_Expr, A_Indices, A_Indirection, A_Star, AccessPriv, Alias, AlterDefaultPrivilegesStmt, AlterDomainStmt, AlterEnumStmt, AlterObjectSchemaStmt, AlterOwnerStmt, AlterSeqStmt, AlterTableCmd, AlterTableStmt, BitString, BooleanTest, BoolExpr, CallStmt, CaseExpr, CaseWhen, CoalesceExpr, CollateClause, ColumnDef, ColumnRef, CommentStmt, CommonTableExpr, CompositeTypeStmt, Constraint, CopyStmt, CreateDomainStmt, CreateEnumStmt, CreateExtensionStmt, CreateFunctionStmt, CreatePolicyStmt, CreateRoleStmt, CreateSchemaStmt, CreateSeqStmt, CreateStmt, CreateTableAsStmt, CreateTrigStmt, DefElem, DefineStmt, DeleteStmt, DoStmt, DropStmt, ExplainStmt, Float, FuncCall, FunctionParameter, GrantRoleStmt, GrantStmt, GroupingFunc, GroupingSet, IndexElem, IndexStmt, InsertStmt, Integer, IntoClause, JoinExpr, LockingClause, LockStmt, MinMaxExpr, MultiAssignRef, NamedArgExpr, NullTest, ObjectWithArgs, ParamRef, RangeFunction, RangeSubselect, RangeTableSample, RangeVar, RawStmt, RenameStmt, ResTarget, RoleSpec, RowExpr, RuleStmt, SelectStmt, SetToDefault, SortBy, SQLValueFunction, String as TString, SubLink, TransactionStmt, TruncateStmt, TypeCast, TypeName, UpdateStmt, VariableSetStmt, VariableShowStmt, ViewStmt, WindowDef, WithClause } from '@pgsql/types';
export default class Deparser {
    static deparse(query: any, opts: any): any;
    constructor(tree: any, opts?: {});
    deparseQuery(): any;
    deparseNodes(nodes: any, context: any): any;
    deparseReturningList(list: any, context: any): any;
    list(nodes: any, separator: string, prefix: string, context: any): any;
    listQuotes(nodes: any, separator?: string): any;
    quote(value: any): any;
    escape(literal: any): string;
    getPgCatalogTypeName(typeName: any, size: any): string;
    type(names: any, args: any): any;
    deparse(item: any, context: any): any;
    RawStmt(node: RawStmt, context?: {}): any;
    RuleStmt(node: RuleStmt, context?: {}): string;
    A_Expr(node: A_Expr, context?: {}): string;
    Alias(node: Alias, context?: {}): string;
    A_ArrayExpr(node: A_ArrayExpr): string;
    A_Const(node: A_Const, context?: {}): any;
    A_Indices(node: A_Indices, context?: {}): string;
    A_Indirection(node: A_Indirection, context?: {}): string;
    A_Star(node: A_Star): string;
    BitString(node: BitString): string;
    BoolExpr(node: BoolExpr, context?: {}): string;
    BooleanTest(node: BooleanTest, context?: {}): string;
    CaseExpr(node: CaseExpr, context?: {}): string;
    CoalesceExpr(node: CoalesceExpr, context?: {}): string;
    CollateClause(node: CollateClause, context?: {}): string;
    CompositeTypeStmt(node: CompositeTypeStmt, context?: {}): string;
    RenameStmt(node: RenameStmt, context?: {}): string;
    AlterOwnerStmt(node: AlterOwnerStmt, context?: {}): string;
    AlterObjectSchemaStmt(node: AlterObjectSchemaStmt, context?: {}): string;
    ColumnDef(node: ColumnDef, context?: {}): any;
    SQLValueFunction(node: SQLValueFunction): "CURRENT_USER" | "SESSION_USER" | "CURRENT_DATE" | "CURRENT_TIMESTAMP";
    ColumnRef(node: ColumnRef, context?: {}): any;
    CommentStmt(node: CommentStmt, context?: {}): string;
    CommonTableExpr(node: CommonTableExpr, context?: {}): string;
    DefineStmt(node: DefineStmt, context?: {}): string;
    DefElem(node: DefElem, context?: {}): any;
    DoStmt(node: DoStmt): string;
    Float(node: Float): any;
    FuncCall(node: FuncCall, context?: {}): string;
    GroupingFunc(node: GroupingFunc, context?: {}): string;
    GroupingSet(node: GroupingSet, context?: {}): string;
    IndexStmt(node: IndexStmt, context?: {}): string;
    IndexElem(node: IndexElem, context?: {}): any;
    InsertStmt(node: InsertStmt, context?: {}): string;
    SetToDefault(node: SetToDefault): string;
    MultiAssignRef(node: MultiAssignRef, context?: {}): string;
    DeleteStmt(node: DeleteStmt, context?: {}): string;
    UpdateStmt(node: UpdateStmt, context?: {}): string;
    Integer(node: Integer, context?: {}): string;
    IntoClause(node: IntoClause, context?: {}): string;
    JoinExpr(node: JoinExpr, context?: {}): string;
    LockingClause(node: LockingClause, context?: {}): string;
    LockStmt(node: LockStmt, context?: {}): string;
    MinMaxExpr(node: MinMaxExpr, context?: {}): string;
    NamedArgExpr(node: NamedArgExpr, context?: {}): string;
    Null(node: any): string;
    NullTest(node: NullTest, context?: {}): string;
    ParamRef(node: ParamRef): string;
    RangeFunction(node: RangeFunction, context?: {}): string;
    RangeSubselect(node: RangeSubselect, context?: {}): string;
    RangeTableSample(node: RangeTableSample, context?: {}): string;
    RangeVar(node: RangeVar, context?: {}): string;
    ResTarget(node: ResTarget, context?: {}): any;
    RowExpr(node: RowExpr, context?: {}): string;
    ExplainStmt(node: ExplainStmt, context?: {}): string;
    SelectStmt(node: SelectStmt, context?: {}): string;
    TruncateStmt(node: TruncateStmt, context?: {}): string;
    AlterDefaultPrivilegesStmt(node: AlterDefaultPrivilegesStmt, context?: {}): string;
    AlterTableStmt(node: AlterTableStmt, context?: {}): string;
    AlterTableCmd(node: AlterTableCmd, context?: {}): string;
    CreateEnumStmt(node: CreateEnumStmt, context?: {}): string;
    AlterEnumStmt(node: AlterEnumStmt, context?: {}): string;
    AlterDomainStmt(node: AlterDomainStmt, context?: {}): string;
    CreateExtensionStmt(node: CreateExtensionStmt): string;
    DropStmt(node: DropStmt, context?: {}): string;
    CreatePolicyStmt(node: CreatePolicyStmt, context?: {}): string;
    AlterPolicyStmt(node: any, context?: {}): string;
    ViewStmt(node: ViewStmt, context?: {}): string;
    CreateSeqStmt(node: CreateSeqStmt, context?: {}): string;
    AlterSeqStmt(node: AlterSeqStmt, context?: {}): string;
    CreateTableAsStmt(node: CreateTableAsStmt, context?: {}): string;
    CreateTrigStmt(node: CreateTrigStmt, context?: {}): string;
    CreateDomainStmt(node: CreateDomainStmt, context?: {}): string;
    CreateStmt(node: CreateStmt, context?: {}): string;
    ConstraintStmt(node: any): string;
    ReferenceConstraint(node: any, context?: {}): string;
    ExclusionConstraint(node: any, context?: {}): string;
    Constraint(node: Constraint, context?: {}): string;
    AccessPriv(node: AccessPriv): string;
    VariableSetStmt(node: VariableSetStmt): string;
    VariableShowStmt(node: VariableShowStmt): string;
    FuncWithArgs(node: any, context?: {}): string;
    FunctionParameter(node: FunctionParameter, context?: {}): string;
    CreateFunctionStmt(node: CreateFunctionStmt, context?: {}): string;
    CreateSchemaStmt(node: CreateSchemaStmt): string;
    RoleSpec(node: RoleSpec): any;
    GrantStmt(node: GrantStmt): string;
    GrantRoleStmt(node: GrantRoleStmt, context?: {}): string;
    CreateRoleStmt(node: CreateRoleStmt, context?: {}): string;
    TransactionStmt(node: TransactionStmt, context?: {}): string;
    SortBy(node: SortBy, context?: {}): string;
    ObjectWithArgs(node: ObjectWithArgs, context?: {}): string;
    String(node: TString): any;
    SubLink(node: SubLink, context?: {}): string;
    TypeCast(node: TypeCast, context?: {}): string;
    TypeName(node: TypeName, context?: {}): string;
    CaseWhen(node: CaseWhen, context?: {}): string;
    WindowDef(node: WindowDef, context?: {}): string;
    WithClause(node: WithClause, context?: {}): string;
    CopyStmt(node: CopyStmt, context?: {}): string;
    CallStmt(node: CallStmt, context?: {}): string;
    deparseFrameOptions(options: any, refName: any, startOffset: any, endOffset: any): string;
    deparseInterval(node: TypeName): string;
    interval(mask: any): any;
}
