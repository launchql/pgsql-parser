import { format } from 'util';

const fail = (type, node) => {
  throw new Error(format('Unhandled %s node: %s', type, JSON.stringify(node)));
};

export const TYPE_NAMES = {
  OBJECT_ACCESS_METHOD: 'ACCESS METHOD',
  OBJECT_AGGREGATE: 'AGGREGATE',
  OBJECT_ATTRIBUTE: 'ATTRIBUTE',
  OBJECT_CAST: 'CAST',
  OBJECT_COLLATION: 'COLLATION',
  OBJECT_COLUMN: 'COLUMN',
  OBJECT_CONVERSION: 'CONVERSION',
  OBJECT_DATABASE: 'DATABASE',
  OBJECT_DOMAIN: 'DOMAIN',
  OBJECT_DOMCONSTRAINT: 'CONSTRAINT',
  OBJECT_EVENT_TRIGGER: 'EVENT TRIGGER',
  OBJECT_EXTENSION: 'EXTENSION',
  OBJECT_FDW: 'FOREIGN DATA WRAPPER',
  OBJECT_FOREIGN_SERVER: 'SERVER',
  OBJECT_FOREIGN_TABLE: 'FOREIGN TABLE',
  OBJECT_FUNCTION: 'FUNCTION',
  OBJECT_INDEX: 'INDEX',
  OBJECT_LANGUAGE: 'LANGUAGE',
  OBJECT_LARGEOBJECT: 'LARGE OBJECT',
  OBJECT_MATVIEW: 'MATERIALIZED VIEW',
  OBJECT_OPCLASS: 'OPERATOR CLASS',
  OBJECT_OPERATOR: 'OPERATOR',
  OBJECT_OPFAMILY: 'OPERATOR FAMILY',
  OBJECT_POLICY: 'POLICY',
  OBJECT_PROCEDURE: 'PROCEDURE',
  OBJECT_PUBLICATION: 'PUBLICATION',
  OBJECT_ROLE: 'ROLE',
  OBJECT_ROUTINE: 'ROUTINE',
  OBJECT_RULE: 'RULE',
  OBJECT_SCHEMA: 'SCHEMA',
  OBJECT_SEQUENCE: 'SEQUENCE',
  OBJECT_STATISTIC_EXT: 'STATISTICS',
  OBJECT_SUBSCRIPTION: 'SUBSCRIPTION',
  OBJECT_TABCONSTRAINT: 'CONSTRAINT',
  OBJECT_TABLE: 'TABLE',
  OBJECT_TABLESPACE: 'TABLESPACE',
  OBJECT_TRANSFORM: 'TRANSFORM',
  OBJECT_TRIGGER: 'TRIGGER',
  OBJECT_TSCONFIGURATION: 'TEXT SEARCH CONFIGURATION',
  OBJECT_TSDICTIONARY: 'TEXT SEARCH DICTIONARY',
  OBJECT_TSPARSER: 'TEXT SEARCH PARSER',
  OBJECT_TSTEMPLATE: 'TEXT SEARCH TEMPLATE',
  OBJECT_TYPE: 'TYPE',
  OBJECT_VIEW: 'VIEW'
};

export const objtypeName = (arg) => {
  return TYPE_NAMES[arg];
};

export const getConstraintFromConstrType = (type) => {
  switch (type) {
    case 'CONSTR_NULL':
      return 'NULL';
    case 'CONSTR_NOTNULL':
      return 'NOT NULL';
    case 'CONSTR_DEFAULT':
      return 'DEFAULT';
    case 'CONSTR_CHECK':
      return 'CHECK';
    case 'CONSTR_PRIMARY':
      return 'PRIMARY KEY';
    case 'CONSTR_UNIQUE':
      return 'UNIQUE';
    case 'CONSTR_EXCLUSION':
      return 'EXCLUDE';
    case 'CONSTR_FOREIGN':
      return 'REFERENCES';

    case 'CONSTR_GENERATED':
      return 'GENERATED';

    case 'CONSTR_IDENTITY':
      return 'IDENTITY';

    case 'CONSTR_ATTR_DEFERRABLE':
    case 'CONSTR_ATTR_NOT_DEFERRABLE':
    case 'CONSTR_ATTR_DEFERRED':
    case 'CONSTR_ATTR_IMMEDIATE':
    default:
      return fail(type, 'ConstrType');
  }
};
