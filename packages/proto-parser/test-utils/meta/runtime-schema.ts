/**
* This file was automatically generated by pg-proto-parser@1.29.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source proto file,
* and run the pg-proto-parser generate command to regenerate this file.
*/
export interface FieldSpec {
  name: string;
  type: string;
  isArray: boolean;
  optional: boolean;
}
export interface NodeSpec {
  name: string;
  fields: FieldSpec[];
}
export const runtimeSchema: NodeSpec[] = [
  {
    name: 'A_ArrayExpr',
    fields: [
      {
        name: 'elements',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'A_Const',
    fields: [
      {
        name: 'boolval',
        type: 'Boolean',
        isArray: false,
        optional: true
      },
      {
        name: 'bsval',
        type: 'BitString',
        isArray: false,
        optional: true
      },
      {
        name: 'fval',
        type: 'Float',
        isArray: false,
        optional: true
      },
      {
        name: 'isnull',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'ival',
        type: 'Integer',
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'sval',
        type: 'String',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'A_Expr',
    fields: [
      {
        name: 'kind',
        type: 'A_Expr_Kind',
        isArray: false,
        optional: true
      },
      {
        name: 'lexpr',
        type: 'Node',
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'name',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'rexpr',
        type: 'Node',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'A_Indices',
    fields: [
      {
        name: 'is_slice',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'lidx',
        type: 'Node',
        isArray: false,
        optional: true
      },
      {
        name: 'uidx',
        type: 'Node',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'A_Indirection',
    fields: [
      {
        name: 'arg',
        type: 'Node',
        isArray: false,
        optional: true
      },
      {
        name: 'indirection',
        type: 'Node',
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'A_Star',
    fields: [

    ]
  },
  {
    name: 'AccessPriv',
    fields: [
      {
        name: 'cols',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'priv_name',
        type: 'string',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'Aggref',
    fields: [
      {
        name: 'aggargtypes',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'aggcollid',
        type: 'uint32',
        isArray: false,
        optional: true
      },
      {
        name: 'aggdirectargs',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'aggdistinct',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'aggfilter',
        type: 'Node',
        isArray: false,
        optional: true
      },
      {
        name: 'aggfnoid',
        type: 'uint32',
        isArray: false,
        optional: true
      },
      {
        name: 'aggkind',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'agglevelsup',
        type: 'uint32',
        isArray: false,
        optional: true
      },
      {
        name: 'aggno',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'aggorder',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'aggsplit',
        type: 'AggSplit',
        isArray: false,
        optional: true
      },
      {
        name: 'aggstar',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'aggtransno',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'aggtype',
        type: 'uint32',
        isArray: false,
        optional: true
      },
      {
        name: 'aggvariadic',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'args',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'inputcollid',
        type: 'uint32',
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'Alias',
    fields: [
      {
        name: 'aliasname',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'colnames',
        type: 'Node',
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'AlterCollationStmt',
    fields: [
      {
        name: 'collname',
        type: 'Node',
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'AlterDatabaseRefreshCollStmt',
    fields: [
      {
        name: 'dbname',
        type: 'string',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'AlterDatabaseSetStmt',
    fields: [
      {
        name: 'dbname',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'setstmt',
        type: 'VariableSetStmt',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'AlterDatabaseStmt',
    fields: [
      {
        name: 'dbname',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'AlterDefaultPrivilegesStmt',
    fields: [
      {
        name: 'action',
        type: 'GrantStmt',
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'AlterDomainStmt',
    fields: [
      {
        name: 'behavior',
        type: 'DropBehavior',
        isArray: false,
        optional: true
      },
      {
        name: 'def',
        type: 'Node',
        isArray: false,
        optional: true
      },
      {
        name: 'missing_ok',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'name',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'subtype',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'typeName',
        type: 'Node',
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'AlterEnumStmt',
    fields: [
      {
        name: 'newVal',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'newValIsAfter',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'newValNeighbor',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'oldVal',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'skipIfNewValExists',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'typeName',
        type: 'Node',
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'AlterEventTrigStmt',
    fields: [
      {
        name: 'tgenabled',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'trigname',
        type: 'string',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'AlterExtensionContentsStmt',
    fields: [
      {
        name: 'action',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'extname',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'object',
        type: 'Node',
        isArray: false,
        optional: true
      },
      {
        name: 'objtype',
        type: 'ObjectType',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'AlterExtensionStmt',
    fields: [
      {
        name: 'extname',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'AlterFdwStmt',
    fields: [
      {
        name: 'fdwname',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'func_options',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'AlterForeignServerStmt',
    fields: [
      {
        name: 'has_version',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'servername',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'version',
        type: 'string',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'AlterFunctionStmt',
    fields: [
      {
        name: 'actions',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'func',
        type: 'ObjectWithArgs',
        isArray: false,
        optional: true
      },
      {
        name: 'objtype',
        type: 'ObjectType',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'AlternativeSubPlan',
    fields: [
      {
        name: 'subplans',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'AlterObjectDependsStmt',
    fields: [
      {
        name: 'extname',
        type: 'String',
        isArray: false,
        optional: true
      },
      {
        name: 'object',
        type: 'Node',
        isArray: false,
        optional: true
      },
      {
        name: 'objectType',
        type: 'ObjectType',
        isArray: false,
        optional: true
      },
      {
        name: 'relation',
        type: 'RangeVar',
        isArray: false,
        optional: true
      },
      {
        name: 'remove',
        type: 'bool',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'AlterObjectSchemaStmt',
    fields: [
      {
        name: 'missing_ok',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'newschema',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'object',
        type: 'Node',
        isArray: false,
        optional: true
      },
      {
        name: 'objectType',
        type: 'ObjectType',
        isArray: false,
        optional: true
      },
      {
        name: 'relation',
        type: 'RangeVar',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'AlterOperatorStmt',
    fields: [
      {
        name: 'opername',
        type: 'ObjectWithArgs',
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'AlterOpFamilyStmt',
    fields: [
      {
        name: 'amname',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'isDrop',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'items',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'opfamilyname',
        type: 'Node',
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'AlterOwnerStmt',
    fields: [
      {
        name: 'newowner',
        type: 'RoleSpec',
        isArray: false,
        optional: true
      },
      {
        name: 'object',
        type: 'Node',
        isArray: false,
        optional: true
      },
      {
        name: 'objectType',
        type: 'ObjectType',
        isArray: false,
        optional: true
      },
      {
        name: 'relation',
        type: 'RangeVar',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'AlterPolicyStmt',
    fields: [
      {
        name: 'policy_name',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'qual',
        type: 'Node',
        isArray: false,
        optional: true
      },
      {
        name: 'roles',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'table',
        type: 'RangeVar',
        isArray: false,
        optional: true
      },
      {
        name: 'with_check',
        type: 'Node',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'AlterPublicationStmt',
    fields: [
      {
        name: 'action',
        type: 'AlterPublicationAction',
        isArray: false,
        optional: true
      },
      {
        name: 'for_all_tables',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'pubname',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'pubobjects',
        type: 'Node',
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'AlterRoleSetStmt',
    fields: [
      {
        name: 'database',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'role',
        type: 'RoleSpec',
        isArray: false,
        optional: true
      },
      {
        name: 'setstmt',
        type: 'VariableSetStmt',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'AlterRoleStmt',
    fields: [
      {
        name: 'action',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'role',
        type: 'RoleSpec',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'AlterSeqStmt',
    fields: [
      {
        name: 'for_identity',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'missing_ok',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'sequence',
        type: 'RangeVar',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'AlterStatsStmt',
    fields: [
      {
        name: 'defnames',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'missing_ok',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'stxstattarget',
        type: 'Node',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'AlterSubscriptionStmt',
    fields: [
      {
        name: 'conninfo',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'kind',
        type: 'AlterSubscriptionType',
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'publication',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'subname',
        type: 'string',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'AlterSystemStmt',
    fields: [
      {
        name: 'setstmt',
        type: 'VariableSetStmt',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'AlterTableCmd',
    fields: [
      {
        name: 'behavior',
        type: 'DropBehavior',
        isArray: false,
        optional: true
      },
      {
        name: 'def',
        type: 'Node',
        isArray: false,
        optional: true
      },
      {
        name: 'missing_ok',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'name',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'newowner',
        type: 'RoleSpec',
        isArray: false,
        optional: true
      },
      {
        name: 'num',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'recurse',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'subtype',
        type: 'AlterTableType',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'AlterTableMoveAllStmt',
    fields: [
      {
        name: 'new_tablespacename',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'nowait',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'objtype',
        type: 'ObjectType',
        isArray: false,
        optional: true
      },
      {
        name: 'orig_tablespacename',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'roles',
        type: 'Node',
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'AlterTableSpaceOptionsStmt',
    fields: [
      {
        name: 'isReset',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'tablespacename',
        type: 'string',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'AlterTableStmt',
    fields: [
      {
        name: 'cmds',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'missing_ok',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'objtype',
        type: 'ObjectType',
        isArray: false,
        optional: true
      },
      {
        name: 'relation',
        type: 'RangeVar',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'AlterTSConfigurationStmt',
    fields: [
      {
        name: 'cfgname',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'dicts',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'kind',
        type: 'AlterTSConfigType',
        isArray: false,
        optional: true
      },
      {
        name: 'missing_ok',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'override',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'replace',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'tokentype',
        type: 'Node',
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'AlterTSDictionaryStmt',
    fields: [
      {
        name: 'dictname',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'AlterTypeStmt',
    fields: [
      {
        name: 'options',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'typeName',
        type: 'Node',
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'AlterUserMappingStmt',
    fields: [
      {
        name: 'options',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'servername',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'user',
        type: 'RoleSpec',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'ArrayCoerceExpr',
    fields: [
      {
        name: 'arg',
        type: 'Node',
        isArray: false,
        optional: true
      },
      {
        name: 'coerceformat',
        type: 'CoercionForm',
        isArray: false,
        optional: true
      },
      {
        name: 'elemexpr',
        type: 'Node',
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'resultcollid',
        type: 'uint32',
        isArray: false,
        optional: true
      },
      {
        name: 'resulttype',
        type: 'uint32',
        isArray: false,
        optional: true
      },
      {
        name: 'resulttypmod',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'ArrayExpr',
    fields: [
      {
        name: 'array_collid',
        type: 'uint32',
        isArray: false,
        optional: true
      },
      {
        name: 'array_typeid',
        type: 'uint32',
        isArray: false,
        optional: true
      },
      {
        name: 'element_typeid',
        type: 'uint32',
        isArray: false,
        optional: true
      },
      {
        name: 'elements',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'multidims',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'BitString',
    fields: [
      {
        name: 'bsval',
        type: 'string',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'Boolean',
    fields: [
      {
        name: 'boolval',
        type: 'bool',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'BooleanTest',
    fields: [
      {
        name: 'arg',
        type: 'Node',
        isArray: false,
        optional: true
      },
      {
        name: 'booltesttype',
        type: 'BoolTestType',
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'BoolExpr',
    fields: [
      {
        name: 'args',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'boolop',
        type: 'BoolExprType',
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CallContext',
    fields: [
      {
        name: 'atomic',
        type: 'bool',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CallStmt',
    fields: [
      {
        name: 'funccall',
        type: 'FuncCall',
        isArray: false,
        optional: true
      },
      {
        name: 'funcexpr',
        type: 'FuncExpr',
        isArray: false,
        optional: true
      },
      {
        name: 'outargs',
        type: 'Node',
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'CaseExpr',
    fields: [
      {
        name: 'arg',
        type: 'Node',
        isArray: false,
        optional: true
      },
      {
        name: 'args',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'casecollid',
        type: 'uint32',
        isArray: false,
        optional: true
      },
      {
        name: 'casetype',
        type: 'uint32',
        isArray: false,
        optional: true
      },
      {
        name: 'defresult',
        type: 'Node',
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CaseTestExpr',
    fields: [
      {
        name: 'collation',
        type: 'uint32',
        isArray: false,
        optional: true
      },
      {
        name: 'typeId',
        type: 'uint32',
        isArray: false,
        optional: true
      },
      {
        name: 'typeMod',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CaseWhen',
    fields: [
      {
        name: 'expr',
        type: 'Node',
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'result',
        type: 'Node',
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CheckPointStmt',
    fields: [

    ]
  },
  {
    name: 'ClosePortalStmt',
    fields: [
      {
        name: 'portalname',
        type: 'string',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'ClusterStmt',
    fields: [
      {
        name: 'indexname',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'params',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'relation',
        type: 'RangeVar',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CoalesceExpr',
    fields: [
      {
        name: 'args',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'coalescecollid',
        type: 'uint32',
        isArray: false,
        optional: true
      },
      {
        name: 'coalescetype',
        type: 'uint32',
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CoerceToDomain',
    fields: [
      {
        name: 'arg',
        type: 'Node',
        isArray: false,
        optional: true
      },
      {
        name: 'coercionformat',
        type: 'CoercionForm',
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'resultcollid',
        type: 'uint32',
        isArray: false,
        optional: true
      },
      {
        name: 'resulttype',
        type: 'uint32',
        isArray: false,
        optional: true
      },
      {
        name: 'resulttypmod',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CoerceToDomainValue',
    fields: [
      {
        name: 'collation',
        type: 'uint32',
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'typeId',
        type: 'uint32',
        isArray: false,
        optional: true
      },
      {
        name: 'typeMod',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CoerceViaIO',
    fields: [
      {
        name: 'arg',
        type: 'Node',
        isArray: false,
        optional: true
      },
      {
        name: 'coerceformat',
        type: 'CoercionForm',
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'resultcollid',
        type: 'uint32',
        isArray: false,
        optional: true
      },
      {
        name: 'resulttype',
        type: 'uint32',
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CollateClause',
    fields: [
      {
        name: 'arg',
        type: 'Node',
        isArray: false,
        optional: true
      },
      {
        name: 'collname',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CollateExpr',
    fields: [
      {
        name: 'arg',
        type: 'Node',
        isArray: false,
        optional: true
      },
      {
        name: 'collOid',
        type: 'uint32',
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'ColumnDef',
    fields: [
      {
        name: 'collClause',
        type: 'CollateClause',
        isArray: false,
        optional: true
      },
      {
        name: 'collOid',
        type: 'uint32',
        isArray: false,
        optional: true
      },
      {
        name: 'colname',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'compression',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'constraints',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'cooked_default',
        type: 'Node',
        isArray: false,
        optional: true
      },
      {
        name: 'fdwoptions',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'generated',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'identity',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'identitySequence',
        type: 'RangeVar',
        isArray: false,
        optional: true
      },
      {
        name: 'inhcount',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'is_from_type',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'is_local',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'is_not_null',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'raw_default',
        type: 'Node',
        isArray: false,
        optional: true
      },
      {
        name: 'storage',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'storage_name',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'typeName',
        type: 'TypeName',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'ColumnRef',
    fields: [
      {
        name: 'fields',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CommentStmt',
    fields: [
      {
        name: 'comment',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'object',
        type: 'Node',
        isArray: false,
        optional: true
      },
      {
        name: 'objtype',
        type: 'ObjectType',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CommonTableExpr',
    fields: [
      {
        name: 'aliascolnames',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'ctecolcollations',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'ctecolnames',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'ctecoltypes',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'ctecoltypmods',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'ctematerialized',
        type: 'CTEMaterialize',
        isArray: false,
        optional: true
      },
      {
        name: 'ctename',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'ctequery',
        type: 'Node',
        isArray: false,
        optional: true
      },
      {
        name: 'cterecursive',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'cterefcount',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'cycle_clause',
        type: 'CTECycleClause',
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'search_clause',
        type: 'CTESearchClause',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CompositeTypeStmt',
    fields: [
      {
        name: 'coldeflist',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'typevar',
        type: 'RangeVar',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'Constraint',
    fields: [
      {
        name: 'access_method',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'conname',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'contype',
        type: 'ConstrType',
        isArray: false,
        optional: true
      },
      {
        name: 'cooked_expr',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'deferrable',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'exclusions',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'fk_attrs',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'fk_del_action',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'fk_del_set_cols',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'fk_matchtype',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'fk_upd_action',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'generated_when',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'including',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'indexname',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'indexspace',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'inhcount',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'initdeferred',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'initially_valid',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'is_no_inherit',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'keys',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'nulls_not_distinct',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'old_conpfeqop',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'old_pktable_oid',
        type: 'uint32',
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'pk_attrs',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'pktable',
        type: 'RangeVar',
        isArray: false,
        optional: true
      },
      {
        name: 'raw_expr',
        type: 'Node',
        isArray: false,
        optional: true
      },
      {
        name: 'reset_default_tblspc',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'skip_validation',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'where_clause',
        type: 'Node',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'ConstraintsSetStmt',
    fields: [
      {
        name: 'constraints',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'deferred',
        type: 'bool',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'ConvertRowtypeExpr',
    fields: [
      {
        name: 'arg',
        type: 'Node',
        isArray: false,
        optional: true
      },
      {
        name: 'convertformat',
        type: 'CoercionForm',
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'resulttype',
        type: 'uint32',
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CopyStmt',
    fields: [
      {
        name: 'attlist',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'filename',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'is_from',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'is_program',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'query',
        type: 'Node',
        isArray: false,
        optional: true
      },
      {
        name: 'relation',
        type: 'RangeVar',
        isArray: false,
        optional: true
      },
      {
        name: 'whereClause',
        type: 'Node',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CreateAmStmt',
    fields: [
      {
        name: 'amname',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'amtype',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'handler_name',
        type: 'Node',
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'CreateCastStmt',
    fields: [
      {
        name: 'context',
        type: 'CoercionContext',
        isArray: false,
        optional: true
      },
      {
        name: 'func',
        type: 'ObjectWithArgs',
        isArray: false,
        optional: true
      },
      {
        name: 'inout',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'sourcetype',
        type: 'TypeName',
        isArray: false,
        optional: true
      },
      {
        name: 'targettype',
        type: 'TypeName',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CreateConversionStmt',
    fields: [
      {
        name: 'conversion_name',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'def',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'for_encoding_name',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'func_name',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'to_encoding_name',
        type: 'string',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CreatedbStmt',
    fields: [
      {
        name: 'dbname',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'CreateDomainStmt',
    fields: [
      {
        name: 'collClause',
        type: 'CollateClause',
        isArray: false,
        optional: true
      },
      {
        name: 'constraints',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'domainname',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'typeName',
        type: 'TypeName',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CreateEnumStmt',
    fields: [
      {
        name: 'typeName',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'vals',
        type: 'Node',
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'CreateEventTrigStmt',
    fields: [
      {
        name: 'eventname',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'funcname',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'trigname',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'whenclause',
        type: 'Node',
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'CreateExtensionStmt',
    fields: [
      {
        name: 'extname',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'if_not_exists',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'CreateFdwStmt',
    fields: [
      {
        name: 'fdwname',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'func_options',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'CreateForeignServerStmt',
    fields: [
      {
        name: 'fdwname',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'if_not_exists',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'servername',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'servertype',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'version',
        type: 'string',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CreateForeignTableStmt',
    fields: [
      {
        name: 'base',
        type: 'CreateStmt',
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'servername',
        type: 'string',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CreateFunctionStmt',
    fields: [
      {
        name: 'funcname',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'is_procedure',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'parameters',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'replace',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'returnType',
        type: 'TypeName',
        isArray: false,
        optional: true
      },
      {
        name: 'sql_body',
        type: 'Node',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CreateOpClassItem',
    fields: [
      {
        name: 'class_args',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'itemtype',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'name',
        type: 'ObjectWithArgs',
        isArray: false,
        optional: true
      },
      {
        name: 'number',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'order_family',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'storedtype',
        type: 'TypeName',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CreateOpClassStmt',
    fields: [
      {
        name: 'amname',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'datatype',
        type: 'TypeName',
        isArray: false,
        optional: true
      },
      {
        name: 'isDefault',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'items',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'opclassname',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'opfamilyname',
        type: 'Node',
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'CreateOpFamilyStmt',
    fields: [
      {
        name: 'amname',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'opfamilyname',
        type: 'Node',
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'CreatePLangStmt',
    fields: [
      {
        name: 'plhandler',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'plinline',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'plname',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'pltrusted',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'plvalidator',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'replace',
        type: 'bool',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CreatePolicyStmt',
    fields: [
      {
        name: 'cmd_name',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'permissive',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'policy_name',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'qual',
        type: 'Node',
        isArray: false,
        optional: true
      },
      {
        name: 'roles',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'table',
        type: 'RangeVar',
        isArray: false,
        optional: true
      },
      {
        name: 'with_check',
        type: 'Node',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CreatePublicationStmt',
    fields: [
      {
        name: 'for_all_tables',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'pubname',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'pubobjects',
        type: 'Node',
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'CreateRangeStmt',
    fields: [
      {
        name: 'params',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'typeName',
        type: 'Node',
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'CreateRoleStmt',
    fields: [
      {
        name: 'options',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'role',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'stmt_type',
        type: 'RoleStmtType',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CreateSchemaStmt',
    fields: [
      {
        name: 'authrole',
        type: 'RoleSpec',
        isArray: false,
        optional: true
      },
      {
        name: 'if_not_exists',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'schemaElts',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'schemaname',
        type: 'string',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CreateSeqStmt',
    fields: [
      {
        name: 'for_identity',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'if_not_exists',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'ownerId',
        type: 'uint32',
        isArray: false,
        optional: true
      },
      {
        name: 'sequence',
        type: 'RangeVar',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CreateStatsStmt',
    fields: [
      {
        name: 'defnames',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'exprs',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'if_not_exists',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'relations',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'stat_types',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'stxcomment',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'transformed',
        type: 'bool',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CreateStmt',
    fields: [
      {
        name: 'accessMethod',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'constraints',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'if_not_exists',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'inhRelations',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'ofTypename',
        type: 'TypeName',
        isArray: false,
        optional: true
      },
      {
        name: 'oncommit',
        type: 'OnCommitAction',
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'partbound',
        type: 'PartitionBoundSpec',
        isArray: false,
        optional: true
      },
      {
        name: 'partspec',
        type: 'PartitionSpec',
        isArray: false,
        optional: true
      },
      {
        name: 'relation',
        type: 'RangeVar',
        isArray: false,
        optional: true
      },
      {
        name: 'tableElts',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'tablespacename',
        type: 'string',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CreateSubscriptionStmt',
    fields: [
      {
        name: 'conninfo',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'publication',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'subname',
        type: 'string',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CreateTableAsStmt',
    fields: [
      {
        name: 'if_not_exists',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'into',
        type: 'IntoClause',
        isArray: false,
        optional: true
      },
      {
        name: 'is_select_into',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'objtype',
        type: 'ObjectType',
        isArray: false,
        optional: true
      },
      {
        name: 'query',
        type: 'Node',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CreateTableSpaceStmt',
    fields: [
      {
        name: 'location',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'owner',
        type: 'RoleSpec',
        isArray: false,
        optional: true
      },
      {
        name: 'tablespacename',
        type: 'string',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CreateTransformStmt',
    fields: [
      {
        name: 'fromsql',
        type: 'ObjectWithArgs',
        isArray: false,
        optional: true
      },
      {
        name: 'lang',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'replace',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'tosql',
        type: 'ObjectWithArgs',
        isArray: false,
        optional: true
      },
      {
        name: 'type_name',
        type: 'TypeName',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CreateTrigStmt',
    fields: [
      {
        name: 'args',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'columns',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'constrrel',
        type: 'RangeVar',
        isArray: false,
        optional: true
      },
      {
        name: 'deferrable',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'events',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'funcname',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'initdeferred',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'isconstraint',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'relation',
        type: 'RangeVar',
        isArray: false,
        optional: true
      },
      {
        name: 'replace',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'row',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'timing',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'transitionRels',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'trigname',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'whenClause',
        type: 'Node',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CreateUserMappingStmt',
    fields: [
      {
        name: 'if_not_exists',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'servername',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'user',
        type: 'RoleSpec',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CTECycleClause',
    fields: [
      {
        name: 'cycle_col_list',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'cycle_mark_collation',
        type: 'uint32',
        isArray: false,
        optional: true
      },
      {
        name: 'cycle_mark_column',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'cycle_mark_default',
        type: 'Node',
        isArray: false,
        optional: true
      },
      {
        name: 'cycle_mark_neop',
        type: 'uint32',
        isArray: false,
        optional: true
      },
      {
        name: 'cycle_mark_type',
        type: 'uint32',
        isArray: false,
        optional: true
      },
      {
        name: 'cycle_mark_typmod',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'cycle_mark_value',
        type: 'Node',
        isArray: false,
        optional: true
      },
      {
        name: 'cycle_path_column',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CTESearchClause',
    fields: [
      {
        name: 'location',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'search_breadth_first',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'search_col_list',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'search_seq_column',
        type: 'string',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CurrentOfExpr',
    fields: [
      {
        name: 'cursor_name',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'cursor_param',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'cvarno',
        type: 'uint32',
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'DeallocateStmt',
    fields: [
      {
        name: 'isall',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'name',
        type: 'string',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'DeclareCursorStmt',
    fields: [
      {
        name: 'options',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'portalname',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'query',
        type: 'Node',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'DefElem',
    fields: [
      {
        name: 'arg',
        type: 'Node',
        isArray: false,
        optional: true
      },
      {
        name: 'defaction',
        type: 'DefElemAction',
        isArray: false,
        optional: true
      },
      {
        name: 'defname',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'defnamespace',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'DefineStmt',
    fields: [
      {
        name: 'args',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'definition',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'defnames',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'if_not_exists',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'kind',
        type: 'ObjectType',
        isArray: false,
        optional: true
      },
      {
        name: 'oldstyle',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'replace',
        type: 'bool',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'DeleteStmt',
    fields: [
      {
        name: 'relation',
        type: 'RangeVar',
        isArray: false,
        optional: true
      },
      {
        name: 'returningList',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'usingClause',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'whereClause',
        type: 'Node',
        isArray: false,
        optional: true
      },
      {
        name: 'withClause',
        type: 'WithClause',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'DiscardStmt',
    fields: [
      {
        name: 'target',
        type: 'DiscardMode',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'DistinctExpr',
    fields: [
      {
        name: 'args',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'inputcollid',
        type: 'uint32',
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'opcollid',
        type: 'uint32',
        isArray: false,
        optional: true
      },
      {
        name: 'opno',
        type: 'uint32',
        isArray: false,
        optional: true
      },
      {
        name: 'opresulttype',
        type: 'uint32',
        isArray: false,
        optional: true
      },
      {
        name: 'opretset',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'DoStmt',
    fields: [
      {
        name: 'args',
        type: 'Node',
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'DropdbStmt',
    fields: [
      {
        name: 'dbname',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'missing_ok',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'DropOwnedStmt',
    fields: [
      {
        name: 'behavior',
        type: 'DropBehavior',
        isArray: false,
        optional: true
      },
      {
        name: 'roles',
        type: 'Node',
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'DropRoleStmt',
    fields: [
      {
        name: 'missing_ok',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'roles',
        type: 'Node',
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'DropStmt',
    fields: [
      {
        name: 'behavior',
        type: 'DropBehavior',
        isArray: false,
        optional: true
      },
      {
        name: 'concurrent',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'missing_ok',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'objects',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'removeType',
        type: 'ObjectType',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'DropSubscriptionStmt',
    fields: [
      {
        name: 'behavior',
        type: 'DropBehavior',
        isArray: false,
        optional: true
      },
      {
        name: 'missing_ok',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'subname',
        type: 'string',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'DropTableSpaceStmt',
    fields: [
      {
        name: 'missing_ok',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'tablespacename',
        type: 'string',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'DropUserMappingStmt',
    fields: [
      {
        name: 'missing_ok',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'servername',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'user',
        type: 'RoleSpec',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'ExecuteStmt',
    fields: [
      {
        name: 'name',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'params',
        type: 'Node',
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'ExplainStmt',
    fields: [
      {
        name: 'options',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'query',
        type: 'Node',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'FetchStmt',
    fields: [
      {
        name: 'direction',
        type: 'FetchDirection',
        isArray: false,
        optional: true
      },
      {
        name: 'howMany',
        type: 'int64',
        isArray: false,
        optional: true
      },
      {
        name: 'ismove',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'portalname',
        type: 'string',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'FieldSelect',
    fields: [
      {
        name: 'arg',
        type: 'Node',
        isArray: false,
        optional: true
      },
      {
        name: 'fieldnum',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'resultcollid',
        type: 'uint32',
        isArray: false,
        optional: true
      },
      {
        name: 'resulttype',
        type: 'uint32',
        isArray: false,
        optional: true
      },
      {
        name: 'resulttypmod',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'FieldStore',
    fields: [
      {
        name: 'arg',
        type: 'Node',
        isArray: false,
        optional: true
      },
      {
        name: 'fieldnums',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'newvals',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'resulttype',
        type: 'uint32',
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'Float',
    fields: [
      {
        name: 'fval',
        type: 'string',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'FromExpr',
    fields: [
      {
        name: 'fromlist',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'quals',
        type: 'Node',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'FuncCall',
    fields: [
      {
        name: 'agg_distinct',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'agg_filter',
        type: 'Node',
        isArray: false,
        optional: true
      },
      {
        name: 'agg_order',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'agg_star',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'agg_within_group',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'args',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'func_variadic',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'funcformat',
        type: 'CoercionForm',
        isArray: false,
        optional: true
      },
      {
        name: 'funcname',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'over',
        type: 'WindowDef',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'FuncExpr',
    fields: [
      {
        name: 'args',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'funccollid',
        type: 'uint32',
        isArray: false,
        optional: true
      },
      {
        name: 'funcformat',
        type: 'CoercionForm',
        isArray: false,
        optional: true
      },
      {
        name: 'funcid',
        type: 'uint32',
        isArray: false,
        optional: true
      },
      {
        name: 'funcresulttype',
        type: 'uint32',
        isArray: false,
        optional: true
      },
      {
        name: 'funcretset',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'funcvariadic',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'inputcollid',
        type: 'uint32',
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'FunctionParameter',
    fields: [
      {
        name: 'argType',
        type: 'TypeName',
        isArray: false,
        optional: true
      },
      {
        name: 'defexpr',
        type: 'Node',
        isArray: false,
        optional: true
      },
      {
        name: 'mode',
        type: 'FunctionParameterMode',
        isArray: false,
        optional: true
      },
      {
        name: 'name',
        type: 'string',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'GrantRoleStmt',
    fields: [
      {
        name: 'behavior',
        type: 'DropBehavior',
        isArray: false,
        optional: true
      },
      {
        name: 'granted_roles',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'grantee_roles',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'grantor',
        type: 'RoleSpec',
        isArray: false,
        optional: true
      },
      {
        name: 'is_grant',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'opt',
        type: 'Node',
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'GrantStmt',
    fields: [
      {
        name: 'behavior',
        type: 'DropBehavior',
        isArray: false,
        optional: true
      },
      {
        name: 'grant_option',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'grantees',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'grantor',
        type: 'RoleSpec',
        isArray: false,
        optional: true
      },
      {
        name: 'is_grant',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'objects',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'objtype',
        type: 'ObjectType',
        isArray: false,
        optional: true
      },
      {
        name: 'privileges',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'targtype',
        type: 'GrantTargetType',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'GroupingFunc',
    fields: [
      {
        name: 'agglevelsup',
        type: 'uint32',
        isArray: false,
        optional: true
      },
      {
        name: 'args',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'refs',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'GroupingSet',
    fields: [
      {
        name: 'content',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'kind',
        type: 'GroupingSetKind',
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'ImportForeignSchemaStmt',
    fields: [
      {
        name: 'list_type',
        type: 'ImportForeignSchemaType',
        isArray: false,
        optional: true
      },
      {
        name: 'local_schema',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'remote_schema',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'server_name',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'table_list',
        type: 'Node',
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'IndexElem',
    fields: [
      {
        name: 'collation',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'expr',
        type: 'Node',
        isArray: false,
        optional: true
      },
      {
        name: 'indexcolname',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'name',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'nulls_ordering',
        type: 'SortByNulls',
        isArray: false,
        optional: true
      },
      {
        name: 'opclass',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'opclassopts',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'ordering',
        type: 'SortByDir',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'IndexStmt',
    fields: [
      {
        name: 'accessMethod',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'concurrent',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'deferrable',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'excludeOpNames',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'idxcomment',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'idxname',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'if_not_exists',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'indexIncludingParams',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'indexOid',
        type: 'uint32',
        isArray: false,
        optional: true
      },
      {
        name: 'indexParams',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'initdeferred',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'isconstraint',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'nulls_not_distinct',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'oldCreateSubid',
        type: 'uint32',
        isArray: false,
        optional: true
      },
      {
        name: 'oldFirstRelfilelocatorSubid',
        type: 'uint32',
        isArray: false,
        optional: true
      },
      {
        name: 'oldNumber',
        type: 'uint32',
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'primary',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'relation',
        type: 'RangeVar',
        isArray: false,
        optional: true
      },
      {
        name: 'reset_default_tblspc',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'tableSpace',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'transformed',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'unique',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'whereClause',
        type: 'Node',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'InferClause',
    fields: [
      {
        name: 'conname',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'indexElems',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'whereClause',
        type: 'Node',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'InferenceElem',
    fields: [
      {
        name: 'expr',
        type: 'Node',
        isArray: false,
        optional: true
      },
      {
        name: 'infercollid',
        type: 'uint32',
        isArray: false,
        optional: true
      },
      {
        name: 'inferopclass',
        type: 'uint32',
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'InlineCodeBlock',
    fields: [
      {
        name: 'atomic',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'langIsTrusted',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'langOid',
        type: 'uint32',
        isArray: false,
        optional: true
      },
      {
        name: 'source_text',
        type: 'string',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'InsertStmt',
    fields: [
      {
        name: 'cols',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'onConflictClause',
        type: 'OnConflictClause',
        isArray: false,
        optional: true
      },
      {
        name: 'override',
        type: 'OverridingKind',
        isArray: false,
        optional: true
      },
      {
        name: 'relation',
        type: 'RangeVar',
        isArray: false,
        optional: true
      },
      {
        name: 'returningList',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'selectStmt',
        type: 'Node',
        isArray: false,
        optional: true
      },
      {
        name: 'withClause',
        type: 'WithClause',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'Integer',
    fields: [
      {
        name: 'ival',
        type: 'int32',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'IntList',
    fields: [
      {
        name: 'items',
        type: 'Node',
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'IntoClause',
    fields: [
      {
        name: 'accessMethod',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'colNames',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'onCommit',
        type: 'OnCommitAction',
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'rel',
        type: 'RangeVar',
        isArray: false,
        optional: true
      },
      {
        name: 'skipData',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'tableSpaceName',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'viewQuery',
        type: 'Node',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'JoinExpr',
    fields: [
      {
        name: 'alias',
        type: 'Alias',
        isArray: false,
        optional: true
      },
      {
        name: 'isNatural',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'join_using_alias',
        type: 'Alias',
        isArray: false,
        optional: true
      },
      {
        name: 'jointype',
        type: 'JoinType',
        isArray: false,
        optional: true
      },
      {
        name: 'larg',
        type: 'Node',
        isArray: false,
        optional: true
      },
      {
        name: 'quals',
        type: 'Node',
        isArray: false,
        optional: true
      },
      {
        name: 'rarg',
        type: 'Node',
        isArray: false,
        optional: true
      },
      {
        name: 'rtindex',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'usingClause',
        type: 'Node',
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'JsonAggConstructor',
    fields: [
      {
        name: 'agg_filter',
        type: 'Node',
        isArray: false,
        optional: true
      },
      {
        name: 'agg_order',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'output',
        type: 'JsonOutput',
        isArray: false,
        optional: true
      },
      {
        name: 'over',
        type: 'WindowDef',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'JsonArgument',
    fields: [
      {
        name: 'name',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'val',
        type: 'JsonValueExpr',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'JsonArrayAgg',
    fields: [
      {
        name: 'absent_on_null',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'arg',
        type: 'JsonValueExpr',
        isArray: false,
        optional: true
      },
      {
        name: 'constructor',
        type: 'JsonAggConstructor',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'JsonArrayConstructor',
    fields: [
      {
        name: 'absent_on_null',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'exprs',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'output',
        type: 'JsonOutput',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'JsonArrayQueryConstructor',
    fields: [
      {
        name: 'absent_on_null',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'format',
        type: 'JsonFormat',
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'output',
        type: 'JsonOutput',
        isArray: false,
        optional: true
      },
      {
        name: 'query',
        type: 'Node',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'JsonBehavior',
    fields: [
      {
        name: 'btype',
        type: 'JsonBehaviorType',
        isArray: false,
        optional: true
      },
      {
        name: 'coerce',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'expr',
        type: 'Node',
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'JsonConstructorExpr',
    fields: [
      {
        name: 'absent_on_null',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'args',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'coercion',
        type: 'Node',
        isArray: false,
        optional: true
      },
      {
        name: 'func',
        type: 'Node',
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'returning',
        type: 'JsonReturning',
        isArray: false,
        optional: true
      },
      {
        name: 'type',
        type: 'JsonConstructorType',
        isArray: false,
        optional: true
      },
      {
        name: 'unique',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'JsonExpr',
    fields: [
      {
        name: 'collation',
        type: 'uint32',
        isArray: false,
        optional: true
      },
      {
        name: 'column_name',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'format',
        type: 'JsonFormat',
        isArray: false,
        optional: true
      },
      {
        name: 'formatted_expr',
        type: 'Node',
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'omit_quotes',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'on_empty',
        type: 'JsonBehavior',
        isArray: false,
        optional: true
      },
      {
        name: 'on_error',
        type: 'JsonBehavior',
        isArray: false,
        optional: true
      },
      {
        name: 'op',
        type: 'JsonExprOp',
        isArray: false,
        optional: true
      },
      {
        name: 'passing_names',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'passing_values',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'path_spec',
        type: 'Node',
        isArray: false,
        optional: true
      },
      {
        name: 'returning',
        type: 'JsonReturning',
        isArray: false,
        optional: true
      },
      {
        name: 'use_io_coercion',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'use_json_coercion',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'wrapper',
        type: 'JsonWrapper',
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'JsonFormat',
    fields: [
      {
        name: 'encoding',
        type: 'JsonEncoding',
        isArray: false,
        optional: true
      },
      {
        name: 'format_type',
        type: 'JsonFormatType',
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'JsonFuncExpr',
    fields: [
      {
        name: 'column_name',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'context_item',
        type: 'JsonValueExpr',
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'on_empty',
        type: 'JsonBehavior',
        isArray: false,
        optional: true
      },
      {
        name: 'on_error',
        type: 'JsonBehavior',
        isArray: false,
        optional: true
      },
      {
        name: 'op',
        type: 'JsonExprOp',
        isArray: false,
        optional: true
      },
      {
        name: 'output',
        type: 'JsonOutput',
        isArray: false,
        optional: true
      },
      {
        name: 'passing',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'pathspec',
        type: 'Node',
        isArray: false,
        optional: true
      },
      {
        name: 'quotes',
        type: 'JsonQuotes',
        isArray: false,
        optional: true
      },
      {
        name: 'wrapper',
        type: 'JsonWrapper',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'JsonIsPredicate',
    fields: [
      {
        name: 'expr',
        type: 'Node',
        isArray: false,
        optional: true
      },
      {
        name: 'format',
        type: 'JsonFormat',
        isArray: false,
        optional: true
      },
      {
        name: 'item_type',
        type: 'JsonValueType',
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'unique_keys',
        type: 'bool',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'JsonKeyValue',
    fields: [
      {
        name: 'key',
        type: 'Node',
        isArray: false,
        optional: true
      },
      {
        name: 'value',
        type: 'JsonValueExpr',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'JsonObjectAgg',
    fields: [
      {
        name: 'absent_on_null',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'arg',
        type: 'JsonKeyValue',
        isArray: false,
        optional: true
      },
      {
        name: 'constructor',
        type: 'JsonAggConstructor',
        isArray: false,
        optional: true
      },
      {
        name: 'unique',
        type: 'bool',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'JsonObjectConstructor',
    fields: [
      {
        name: 'absent_on_null',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'exprs',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'output',
        type: 'JsonOutput',
        isArray: false,
        optional: true
      },
      {
        name: 'unique',
        type: 'bool',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'JsonOutput',
    fields: [
      {
        name: 'returning',
        type: 'JsonReturning',
        isArray: false,
        optional: true
      },
      {
        name: 'typeName',
        type: 'TypeName',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'JsonParseExpr',
    fields: [
      {
        name: 'expr',
        type: 'JsonValueExpr',
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'output',
        type: 'JsonOutput',
        isArray: false,
        optional: true
      },
      {
        name: 'unique_keys',
        type: 'bool',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'JsonReturning',
    fields: [
      {
        name: 'format',
        type: 'JsonFormat',
        isArray: false,
        optional: true
      },
      {
        name: 'typid',
        type: 'uint32',
        isArray: false,
        optional: true
      },
      {
        name: 'typmod',
        type: 'int32',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'JsonScalarExpr',
    fields: [
      {
        name: 'expr',
        type: 'Node',
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'output',
        type: 'JsonOutput',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'JsonSerializeExpr',
    fields: [
      {
        name: 'expr',
        type: 'JsonValueExpr',
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'output',
        type: 'JsonOutput',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'JsonTable',
    fields: [
      {
        name: 'alias',
        type: 'Alias',
        isArray: false,
        optional: true
      },
      {
        name: 'columns',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'context_item',
        type: 'JsonValueExpr',
        isArray: false,
        optional: true
      },
      {
        name: 'lateral',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'on_error',
        type: 'JsonBehavior',
        isArray: false,
        optional: true
      },
      {
        name: 'passing',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'pathspec',
        type: 'JsonTablePathSpec',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'JsonTableColumn',
    fields: [
      {
        name: 'coltype',
        type: 'JsonTableColumnType',
        isArray: false,
        optional: true
      },
      {
        name: 'columns',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'format',
        type: 'JsonFormat',
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'name',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'on_empty',
        type: 'JsonBehavior',
        isArray: false,
        optional: true
      },
      {
        name: 'on_error',
        type: 'JsonBehavior',
        isArray: false,
        optional: true
      },
      {
        name: 'pathspec',
        type: 'JsonTablePathSpec',
        isArray: false,
        optional: true
      },
      {
        name: 'quotes',
        type: 'JsonQuotes',
        isArray: false,
        optional: true
      },
      {
        name: 'typeName',
        type: 'TypeName',
        isArray: false,
        optional: true
      },
      {
        name: 'wrapper',
        type: 'JsonWrapper',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'JsonTablePath',
    fields: [
      {
        name: 'name',
        type: 'string',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'JsonTablePathScan',
    fields: [
      {
        name: 'child',
        type: 'Node',
        isArray: false,
        optional: true
      },
      {
        name: 'colMax',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'colMin',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'errorOnError',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'path',
        type: 'JsonTablePath',
        isArray: false,
        optional: true
      },
      {
        name: 'plan',
        type: 'Node',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'JsonTablePathSpec',
    fields: [
      {
        name: 'location',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'name',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'name_location',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'string',
        type: 'Node',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'JsonTableSiblingJoin',
    fields: [
      {
        name: 'lplan',
        type: 'Node',
        isArray: false,
        optional: true
      },
      {
        name: 'plan',
        type: 'Node',
        isArray: false,
        optional: true
      },
      {
        name: 'rplan',
        type: 'Node',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'JsonValueExpr',
    fields: [
      {
        name: 'format',
        type: 'JsonFormat',
        isArray: false,
        optional: true
      },
      {
        name: 'formatted_expr',
        type: 'Node',
        isArray: false,
        optional: true
      },
      {
        name: 'raw_expr',
        type: 'Node',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'List',
    fields: [
      {
        name: 'items',
        type: 'Node',
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'ListenStmt',
    fields: [
      {
        name: 'conditionname',
        type: 'string',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'LoadStmt',
    fields: [
      {
        name: 'filename',
        type: 'string',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'LockingClause',
    fields: [
      {
        name: 'lockedRels',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'strength',
        type: 'LockClauseStrength',
        isArray: false,
        optional: true
      },
      {
        name: 'waitPolicy',
        type: 'LockWaitPolicy',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'LockStmt',
    fields: [
      {
        name: 'mode',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'nowait',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'relations',
        type: 'Node',
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'MergeAction',
    fields: [
      {
        name: 'commandType',
        type: 'CmdType',
        isArray: false,
        optional: true
      },
      {
        name: 'matchKind',
        type: 'MergeMatchKind',
        isArray: false,
        optional: true
      },
      {
        name: 'override',
        type: 'OverridingKind',
        isArray: false,
        optional: true
      },
      {
        name: 'qual',
        type: 'Node',
        isArray: false,
        optional: true
      },
      {
        name: 'targetList',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'updateColnos',
        type: 'Node',
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'MergeStmt',
    fields: [
      {
        name: 'joinCondition',
        type: 'Node',
        isArray: false,
        optional: true
      },
      {
        name: 'mergeWhenClauses',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'relation',
        type: 'RangeVar',
        isArray: false,
        optional: true
      },
      {
        name: 'returningList',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'sourceRelation',
        type: 'Node',
        isArray: false,
        optional: true
      },
      {
        name: 'withClause',
        type: 'WithClause',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'MergeSupportFunc',
    fields: [
      {
        name: 'location',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'msfcollid',
        type: 'uint32',
        isArray: false,
        optional: true
      },
      {
        name: 'msftype',
        type: 'uint32',
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'MergeWhenClause',
    fields: [
      {
        name: 'commandType',
        type: 'CmdType',
        isArray: false,
        optional: true
      },
      {
        name: 'condition',
        type: 'Node',
        isArray: false,
        optional: true
      },
      {
        name: 'matchKind',
        type: 'MergeMatchKind',
        isArray: false,
        optional: true
      },
      {
        name: 'override',
        type: 'OverridingKind',
        isArray: false,
        optional: true
      },
      {
        name: 'targetList',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'values',
        type: 'Node',
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'MinMaxExpr',
    fields: [
      {
        name: 'args',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'inputcollid',
        type: 'uint32',
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'minmaxcollid',
        type: 'uint32',
        isArray: false,
        optional: true
      },
      {
        name: 'minmaxtype',
        type: 'uint32',
        isArray: false,
        optional: true
      },
      {
        name: 'op',
        type: 'MinMaxOp',
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'MultiAssignRef',
    fields: [
      {
        name: 'colno',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'ncolumns',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'source',
        type: 'Node',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'NamedArgExpr',
    fields: [
      {
        name: 'arg',
        type: 'Node',
        isArray: false,
        optional: true
      },
      {
        name: 'argnumber',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'name',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'NextValueExpr',
    fields: [
      {
        name: 'seqid',
        type: 'uint32',
        isArray: false,
        optional: true
      },
      {
        name: 'typeId',
        type: 'uint32',
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'NotifyStmt',
    fields: [
      {
        name: 'conditionname',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'payload',
        type: 'string',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'NullIfExpr',
    fields: [
      {
        name: 'args',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'inputcollid',
        type: 'uint32',
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'opcollid',
        type: 'uint32',
        isArray: false,
        optional: true
      },
      {
        name: 'opno',
        type: 'uint32',
        isArray: false,
        optional: true
      },
      {
        name: 'opresulttype',
        type: 'uint32',
        isArray: false,
        optional: true
      },
      {
        name: 'opretset',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'NullTest',
    fields: [
      {
        name: 'arg',
        type: 'Node',
        isArray: false,
        optional: true
      },
      {
        name: 'argisrow',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'nulltesttype',
        type: 'NullTestType',
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'ObjectWithArgs',
    fields: [
      {
        name: 'args_unspecified',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'objargs',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'objfuncargs',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'objname',
        type: 'Node',
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'OidList',
    fields: [
      {
        name: 'items',
        type: 'Node',
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'OnConflictClause',
    fields: [
      {
        name: 'action',
        type: 'OnConflictAction',
        isArray: false,
        optional: true
      },
      {
        name: 'infer',
        type: 'InferClause',
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'targetList',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'whereClause',
        type: 'Node',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'OnConflictExpr',
    fields: [
      {
        name: 'action',
        type: 'OnConflictAction',
        isArray: false,
        optional: true
      },
      {
        name: 'arbiterElems',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'arbiterWhere',
        type: 'Node',
        isArray: false,
        optional: true
      },
      {
        name: 'constraint',
        type: 'uint32',
        isArray: false,
        optional: true
      },
      {
        name: 'exclRelIndex',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'exclRelTlist',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'onConflictSet',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'onConflictWhere',
        type: 'Node',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'OpExpr',
    fields: [
      {
        name: 'args',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'inputcollid',
        type: 'uint32',
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'opcollid',
        type: 'uint32',
        isArray: false,
        optional: true
      },
      {
        name: 'opno',
        type: 'uint32',
        isArray: false,
        optional: true
      },
      {
        name: 'opresulttype',
        type: 'uint32',
        isArray: false,
        optional: true
      },
      {
        name: 'opretset',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'Param',
    fields: [
      {
        name: 'location',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'paramcollid',
        type: 'uint32',
        isArray: false,
        optional: true
      },
      {
        name: 'paramid',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'paramkind',
        type: 'ParamKind',
        isArray: false,
        optional: true
      },
      {
        name: 'paramtype',
        type: 'uint32',
        isArray: false,
        optional: true
      },
      {
        name: 'paramtypmod',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'ParamRef',
    fields: [
      {
        name: 'location',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'number',
        type: 'int32',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'ParseResult',
    fields: [
      {
        name: 'stmts',
        type: 'RawStmt',
        isArray: true,
        optional: true
      },
      {
        name: 'version',
        type: 'int32',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'PartitionBoundSpec',
    fields: [
      {
        name: 'is_default',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'listdatums',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'lowerdatums',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'modulus',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'remainder',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'strategy',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'upperdatums',
        type: 'Node',
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'PartitionCmd',
    fields: [
      {
        name: 'bound',
        type: 'PartitionBoundSpec',
        isArray: false,
        optional: true
      },
      {
        name: 'concurrent',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'name',
        type: 'RangeVar',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'PartitionElem',
    fields: [
      {
        name: 'collation',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'expr',
        type: 'Node',
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'name',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'opclass',
        type: 'Node',
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'PartitionRangeDatum',
    fields: [
      {
        name: 'kind',
        type: 'PartitionRangeDatumKind',
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'value',
        type: 'Node',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'PartitionSpec',
    fields: [
      {
        name: 'location',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'partParams',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'strategy',
        type: 'PartitionStrategy',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'PLAssignStmt',
    fields: [
      {
        name: 'indirection',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'name',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'nnames',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'val',
        type: 'SelectStmt',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'PrepareStmt',
    fields: [
      {
        name: 'argtypes',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'name',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'query',
        type: 'Node',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'PublicationObjSpec',
    fields: [
      {
        name: 'location',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'name',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'pubobjtype',
        type: 'PublicationObjSpecType',
        isArray: false,
        optional: true
      },
      {
        name: 'pubtable',
        type: 'PublicationTable',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'PublicationTable',
    fields: [
      {
        name: 'columns',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'relation',
        type: 'RangeVar',
        isArray: false,
        optional: true
      },
      {
        name: 'whereClause',
        type: 'Node',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'Query',
    fields: [
      {
        name: 'canSetTag',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'commandType',
        type: 'CmdType',
        isArray: false,
        optional: true
      },
      {
        name: 'constraintDeps',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'cteList',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'distinctClause',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'groupClause',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'groupDistinct',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'groupingSets',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'hasAggs',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'hasDistinctOn',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'hasForUpdate',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'hasModifyingCTE',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'hasRecursive',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'hasRowSecurity',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'hasSubLinks',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'hasTargetSRFs',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'hasWindowFuncs',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'havingQual',
        type: 'Node',
        isArray: false,
        optional: true
      },
      {
        name: 'isReturn',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'jointree',
        type: 'FromExpr',
        isArray: false,
        optional: true
      },
      {
        name: 'limitCount',
        type: 'Node',
        isArray: false,
        optional: true
      },
      {
        name: 'limitOffset',
        type: 'Node',
        isArray: false,
        optional: true
      },
      {
        name: 'limitOption',
        type: 'LimitOption',
        isArray: false,
        optional: true
      },
      {
        name: 'mergeActionList',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'mergeJoinCondition',
        type: 'Node',
        isArray: false,
        optional: true
      },
      {
        name: 'mergeTargetRelation',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'onConflict',
        type: 'OnConflictExpr',
        isArray: false,
        optional: true
      },
      {
        name: 'override',
        type: 'OverridingKind',
        isArray: false,
        optional: true
      },
      {
        name: 'querySource',
        type: 'QuerySource',
        isArray: false,
        optional: true
      },
      {
        name: 'resultRelation',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'returningList',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'rowMarks',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'rtable',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'rteperminfos',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'setOperations',
        type: 'Node',
        isArray: false,
        optional: true
      },
      {
        name: 'sortClause',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'stmt_len',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'stmt_location',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'targetList',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'utilityStmt',
        type: 'Node',
        isArray: false,
        optional: true
      },
      {
        name: 'windowClause',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'withCheckOptions',
        type: 'Node',
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'RangeFunction',
    fields: [
      {
        name: 'alias',
        type: 'Alias',
        isArray: false,
        optional: true
      },
      {
        name: 'coldeflist',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'functions',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'is_rowsfrom',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'lateral',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'ordinality',
        type: 'bool',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'RangeSubselect',
    fields: [
      {
        name: 'alias',
        type: 'Alias',
        isArray: false,
        optional: true
      },
      {
        name: 'lateral',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'subquery',
        type: 'Node',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'RangeTableFunc',
    fields: [
      {
        name: 'alias',
        type: 'Alias',
        isArray: false,
        optional: true
      },
      {
        name: 'columns',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'docexpr',
        type: 'Node',
        isArray: false,
        optional: true
      },
      {
        name: 'lateral',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'namespaces',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'rowexpr',
        type: 'Node',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'RangeTableFuncCol',
    fields: [
      {
        name: 'coldefexpr',
        type: 'Node',
        isArray: false,
        optional: true
      },
      {
        name: 'colexpr',
        type: 'Node',
        isArray: false,
        optional: true
      },
      {
        name: 'colname',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'for_ordinality',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'is_not_null',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'typeName',
        type: 'TypeName',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'RangeTableSample',
    fields: [
      {
        name: 'args',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'method',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'relation',
        type: 'Node',
        isArray: false,
        optional: true
      },
      {
        name: 'repeatable',
        type: 'Node',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'RangeTblEntry',
    fields: [
      {
        name: 'alias',
        type: 'Alias',
        isArray: false,
        optional: true
      },
      {
        name: 'colcollations',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'coltypes',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'coltypmods',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'ctelevelsup',
        type: 'uint32',
        isArray: false,
        optional: true
      },
      {
        name: 'ctename',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'enrname',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'enrtuples',
        type: 'double',
        isArray: false,
        optional: true
      },
      {
        name: 'eref',
        type: 'Alias',
        isArray: false,
        optional: true
      },
      {
        name: 'funcordinality',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'functions',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'inFromCl',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'inh',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'join_using_alias',
        type: 'Alias',
        isArray: false,
        optional: true
      },
      {
        name: 'joinaliasvars',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'joinleftcols',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'joinmergedcols',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'joinrightcols',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'jointype',
        type: 'JoinType',
        isArray: false,
        optional: true
      },
      {
        name: 'lateral',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'perminfoindex',
        type: 'uint32',
        isArray: false,
        optional: true
      },
      {
        name: 'relid',
        type: 'uint32',
        isArray: false,
        optional: true
      },
      {
        name: 'relkind',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'rellockmode',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'rtekind',
        type: 'RTEKind',
        isArray: false,
        optional: true
      },
      {
        name: 'security_barrier',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'securityQuals',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'self_reference',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'subquery',
        type: 'Query',
        isArray: false,
        optional: true
      },
      {
        name: 'tablefunc',
        type: 'TableFunc',
        isArray: false,
        optional: true
      },
      {
        name: 'tablesample',
        type: 'TableSampleClause',
        isArray: false,
        optional: true
      },
      {
        name: 'values_lists',
        type: 'Node',
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'RangeTblFunction',
    fields: [
      {
        name: 'funccolcollations',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'funccolcount',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'funccolnames',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'funccoltypes',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'funccoltypmods',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'funcexpr',
        type: 'Node',
        isArray: false,
        optional: true
      },
      {
        name: 'funcparams',
        type: 'uint64',
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'RangeTblRef',
    fields: [
      {
        name: 'rtindex',
        type: 'int32',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'RangeVar',
    fields: [
      {
        name: 'alias',
        type: 'Alias',
        isArray: false,
        optional: true
      },
      {
        name: 'catalogname',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'inh',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'relname',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'relpersistence',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'schemaname',
        type: 'string',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'RawStmt',
    fields: [
      {
        name: 'stmt',
        type: 'Node',
        isArray: false,
        optional: true
      },
      {
        name: 'stmt_len',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'stmt_location',
        type: 'int32',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'ReassignOwnedStmt',
    fields: [
      {
        name: 'newrole',
        type: 'RoleSpec',
        isArray: false,
        optional: true
      },
      {
        name: 'roles',
        type: 'Node',
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'RefreshMatViewStmt',
    fields: [
      {
        name: 'concurrent',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'relation',
        type: 'RangeVar',
        isArray: false,
        optional: true
      },
      {
        name: 'skipData',
        type: 'bool',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'ReindexStmt',
    fields: [
      {
        name: 'kind',
        type: 'ReindexObjectType',
        isArray: false,
        optional: true
      },
      {
        name: 'name',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'params',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'relation',
        type: 'RangeVar',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'RelabelType',
    fields: [
      {
        name: 'arg',
        type: 'Node',
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'relabelformat',
        type: 'CoercionForm',
        isArray: false,
        optional: true
      },
      {
        name: 'resultcollid',
        type: 'uint32',
        isArray: false,
        optional: true
      },
      {
        name: 'resulttype',
        type: 'uint32',
        isArray: false,
        optional: true
      },
      {
        name: 'resulttypmod',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'RenameStmt',
    fields: [
      {
        name: 'behavior',
        type: 'DropBehavior',
        isArray: false,
        optional: true
      },
      {
        name: 'missing_ok',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'newname',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'object',
        type: 'Node',
        isArray: false,
        optional: true
      },
      {
        name: 'relation',
        type: 'RangeVar',
        isArray: false,
        optional: true
      },
      {
        name: 'relationType',
        type: 'ObjectType',
        isArray: false,
        optional: true
      },
      {
        name: 'renameType',
        type: 'ObjectType',
        isArray: false,
        optional: true
      },
      {
        name: 'subname',
        type: 'string',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'ReplicaIdentityStmt',
    fields: [
      {
        name: 'identity_type',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'name',
        type: 'string',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'ResTarget',
    fields: [
      {
        name: 'indirection',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'name',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'val',
        type: 'Node',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'ReturnStmt',
    fields: [
      {
        name: 'returnval',
        type: 'Node',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'RoleSpec',
    fields: [
      {
        name: 'location',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'rolename',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'roletype',
        type: 'RoleSpecType',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'RowCompareExpr',
    fields: [
      {
        name: 'inputcollids',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'largs',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'opfamilies',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'opnos',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'rargs',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'rctype',
        type: 'RowCompareType',
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'RowExpr',
    fields: [
      {
        name: 'args',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'colnames',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'row_format',
        type: 'CoercionForm',
        isArray: false,
        optional: true
      },
      {
        name: 'row_typeid',
        type: 'uint32',
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'RowMarkClause',
    fields: [
      {
        name: 'pushedDown',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'rti',
        type: 'uint32',
        isArray: false,
        optional: true
      },
      {
        name: 'strength',
        type: 'LockClauseStrength',
        isArray: false,
        optional: true
      },
      {
        name: 'waitPolicy',
        type: 'LockWaitPolicy',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'RTEPermissionInfo',
    fields: [
      {
        name: 'checkAsUser',
        type: 'uint32',
        isArray: false,
        optional: true
      },
      {
        name: 'inh',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'insertedCols',
        type: 'uint64',
        isArray: true,
        optional: true
      },
      {
        name: 'relid',
        type: 'uint32',
        isArray: false,
        optional: true
      },
      {
        name: 'requiredPerms',
        type: 'uint64',
        isArray: false,
        optional: true
      },
      {
        name: 'selectedCols',
        type: 'uint64',
        isArray: true,
        optional: true
      },
      {
        name: 'updatedCols',
        type: 'uint64',
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'RuleStmt',
    fields: [
      {
        name: 'actions',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'event',
        type: 'CmdType',
        isArray: false,
        optional: true
      },
      {
        name: 'instead',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'relation',
        type: 'RangeVar',
        isArray: false,
        optional: true
      },
      {
        name: 'replace',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'rulename',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'whereClause',
        type: 'Node',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'ScalarArrayOpExpr',
    fields: [
      {
        name: 'args',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'inputcollid',
        type: 'uint32',
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'opno',
        type: 'uint32',
        isArray: false,
        optional: true
      },
      {
        name: 'useOr',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'ScanResult',
    fields: [
      {
        name: 'tokens',
        type: 'ScanToken',
        isArray: true,
        optional: true
      },
      {
        name: 'version',
        type: 'int32',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'ScanToken',
    fields: [
      {
        name: 'end',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'keywordKind',
        type: 'KeywordKind',
        isArray: false,
        optional: true
      },
      {
        name: 'start',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'token',
        type: 'Token',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'SecLabelStmt',
    fields: [
      {
        name: 'label',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'object',
        type: 'Node',
        isArray: false,
        optional: true
      },
      {
        name: 'objtype',
        type: 'ObjectType',
        isArray: false,
        optional: true
      },
      {
        name: 'provider',
        type: 'string',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'SelectStmt',
    fields: [
      {
        name: 'all',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'distinctClause',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'fromClause',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'groupClause',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'groupDistinct',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'havingClause',
        type: 'Node',
        isArray: false,
        optional: true
      },
      {
        name: 'intoClause',
        type: 'IntoClause',
        isArray: false,
        optional: true
      },
      {
        name: 'larg',
        type: 'SelectStmt',
        isArray: false,
        optional: true
      },
      {
        name: 'limitCount',
        type: 'Node',
        isArray: false,
        optional: true
      },
      {
        name: 'limitOffset',
        type: 'Node',
        isArray: false,
        optional: true
      },
      {
        name: 'limitOption',
        type: 'LimitOption',
        isArray: false,
        optional: true
      },
      {
        name: 'lockingClause',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'op',
        type: 'SetOperation',
        isArray: false,
        optional: true
      },
      {
        name: 'rarg',
        type: 'SelectStmt',
        isArray: false,
        optional: true
      },
      {
        name: 'sortClause',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'targetList',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'valuesLists',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'whereClause',
        type: 'Node',
        isArray: false,
        optional: true
      },
      {
        name: 'windowClause',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'withClause',
        type: 'WithClause',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'SetOperationStmt',
    fields: [
      {
        name: 'all',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'colCollations',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'colTypes',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'colTypmods',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'groupClauses',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'larg',
        type: 'Node',
        isArray: false,
        optional: true
      },
      {
        name: 'op',
        type: 'SetOperation',
        isArray: false,
        optional: true
      },
      {
        name: 'rarg',
        type: 'Node',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'SetToDefault',
    fields: [
      {
        name: 'collation',
        type: 'uint32',
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'typeId',
        type: 'uint32',
        isArray: false,
        optional: true
      },
      {
        name: 'typeMod',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'SinglePartitionSpec',
    fields: [

    ]
  },
  {
    name: 'SortBy',
    fields: [
      {
        name: 'location',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'node',
        type: 'Node',
        isArray: false,
        optional: true
      },
      {
        name: 'sortby_dir',
        type: 'SortByDir',
        isArray: false,
        optional: true
      },
      {
        name: 'sortby_nulls',
        type: 'SortByNulls',
        isArray: false,
        optional: true
      },
      {
        name: 'useOp',
        type: 'Node',
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'SortGroupClause',
    fields: [
      {
        name: 'eqop',
        type: 'uint32',
        isArray: false,
        optional: true
      },
      {
        name: 'hashable',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'nulls_first',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'sortop',
        type: 'uint32',
        isArray: false,
        optional: true
      },
      {
        name: 'tleSortGroupRef',
        type: 'uint32',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'SQLValueFunction',
    fields: [
      {
        name: 'location',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'op',
        type: 'SQLValueFunctionOp',
        isArray: false,
        optional: true
      },
      {
        name: 'type',
        type: 'uint32',
        isArray: false,
        optional: true
      },
      {
        name: 'typmod',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'StatsElem',
    fields: [
      {
        name: 'expr',
        type: 'Node',
        isArray: false,
        optional: true
      },
      {
        name: 'name',
        type: 'string',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'String',
    fields: [
      {
        name: 'sval',
        type: 'string',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'SubLink',
    fields: [
      {
        name: 'location',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'operName',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'subLinkId',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'subLinkType',
        type: 'SubLinkType',
        isArray: false,
        optional: true
      },
      {
        name: 'subselect',
        type: 'Node',
        isArray: false,
        optional: true
      },
      {
        name: 'testexpr',
        type: 'Node',
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'SubPlan',
    fields: [
      {
        name: 'args',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'firstColCollation',
        type: 'uint32',
        isArray: false,
        optional: true
      },
      {
        name: 'firstColType',
        type: 'uint32',
        isArray: false,
        optional: true
      },
      {
        name: 'firstColTypmod',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'parallel_safe',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'paramIds',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'parParam',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'per_call_cost',
        type: 'double',
        isArray: false,
        optional: true
      },
      {
        name: 'plan_id',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'plan_name',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'setParam',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'startup_cost',
        type: 'double',
        isArray: false,
        optional: true
      },
      {
        name: 'subLinkType',
        type: 'SubLinkType',
        isArray: false,
        optional: true
      },
      {
        name: 'testexpr',
        type: 'Node',
        isArray: false,
        optional: true
      },
      {
        name: 'unknownEqFalse',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'useHashTable',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'SubscriptingRef',
    fields: [
      {
        name: 'refassgnexpr',
        type: 'Node',
        isArray: false,
        optional: true
      },
      {
        name: 'refcollid',
        type: 'uint32',
        isArray: false,
        optional: true
      },
      {
        name: 'refcontainertype',
        type: 'uint32',
        isArray: false,
        optional: true
      },
      {
        name: 'refelemtype',
        type: 'uint32',
        isArray: false,
        optional: true
      },
      {
        name: 'refexpr',
        type: 'Node',
        isArray: false,
        optional: true
      },
      {
        name: 'reflowerindexpr',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'refrestype',
        type: 'uint32',
        isArray: false,
        optional: true
      },
      {
        name: 'reftypmod',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'refupperindexpr',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'TableFunc',
    fields: [
      {
        name: 'colcollations',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'coldefexprs',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'colexprs',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'colnames',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'coltypes',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'coltypmods',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'colvalexprs',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'docexpr',
        type: 'Node',
        isArray: false,
        optional: true
      },
      {
        name: 'functype',
        type: 'TableFuncType',
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'notnulls',
        type: 'uint64',
        isArray: true,
        optional: true
      },
      {
        name: 'ns_names',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'ns_uris',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'ordinalitycol',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'passingvalexprs',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'plan',
        type: 'Node',
        isArray: false,
        optional: true
      },
      {
        name: 'rowexpr',
        type: 'Node',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'TableLikeClause',
    fields: [
      {
        name: 'options',
        type: 'uint32',
        isArray: false,
        optional: true
      },
      {
        name: 'relation',
        type: 'RangeVar',
        isArray: false,
        optional: true
      },
      {
        name: 'relationOid',
        type: 'uint32',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'TableSampleClause',
    fields: [
      {
        name: 'args',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'repeatable',
        type: 'Node',
        isArray: false,
        optional: true
      },
      {
        name: 'tsmhandler',
        type: 'uint32',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'TargetEntry',
    fields: [
      {
        name: 'expr',
        type: 'Node',
        isArray: false,
        optional: true
      },
      {
        name: 'resjunk',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'resname',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'resno',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'resorigcol',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'resorigtbl',
        type: 'uint32',
        isArray: false,
        optional: true
      },
      {
        name: 'ressortgroupref',
        type: 'uint32',
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'TransactionStmt',
    fields: [
      {
        name: 'chain',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'gid',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'kind',
        type: 'TransactionStmtKind',
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'savepoint_name',
        type: 'string',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'TriggerTransition',
    fields: [
      {
        name: 'isNew',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'isTable',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'name',
        type: 'string',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'TruncateStmt',
    fields: [
      {
        name: 'behavior',
        type: 'DropBehavior',
        isArray: false,
        optional: true
      },
      {
        name: 'relations',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'restart_seqs',
        type: 'bool',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'TypeCast',
    fields: [
      {
        name: 'arg',
        type: 'Node',
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'typeName',
        type: 'TypeName',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'TypeName',
    fields: [
      {
        name: 'arrayBounds',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'names',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'pct_type',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'setof',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'typemod',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'typeOid',
        type: 'uint32',
        isArray: false,
        optional: true
      },
      {
        name: 'typmods',
        type: 'Node',
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'UnlistenStmt',
    fields: [
      {
        name: 'conditionname',
        type: 'string',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'UpdateStmt',
    fields: [
      {
        name: 'fromClause',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'relation',
        type: 'RangeVar',
        isArray: false,
        optional: true
      },
      {
        name: 'returningList',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'targetList',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'whereClause',
        type: 'Node',
        isArray: false,
        optional: true
      },
      {
        name: 'withClause',
        type: 'WithClause',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'VacuumRelation',
    fields: [
      {
        name: 'oid',
        type: 'uint32',
        isArray: false,
        optional: true
      },
      {
        name: 'relation',
        type: 'RangeVar',
        isArray: false,
        optional: true
      },
      {
        name: 'va_cols',
        type: 'Node',
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'VacuumStmt',
    fields: [
      {
        name: 'is_vacuumcmd',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'rels',
        type: 'Node',
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'Var',
    fields: [
      {
        name: 'location',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'varattno',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'varcollid',
        type: 'uint32',
        isArray: false,
        optional: true
      },
      {
        name: 'varlevelsup',
        type: 'uint32',
        isArray: false,
        optional: true
      },
      {
        name: 'varno',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'varnullingrels',
        type: 'uint64',
        isArray: true,
        optional: true
      },
      {
        name: 'vartype',
        type: 'uint32',
        isArray: false,
        optional: true
      },
      {
        name: 'vartypmod',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'VariableSetStmt',
    fields: [
      {
        name: 'args',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'is_local',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'kind',
        type: 'VariableSetKind',
        isArray: false,
        optional: true
      },
      {
        name: 'name',
        type: 'string',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'VariableShowStmt',
    fields: [
      {
        name: 'name',
        type: 'string',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'ViewStmt',
    fields: [
      {
        name: 'aliases',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'query',
        type: 'Node',
        isArray: false,
        optional: true
      },
      {
        name: 'replace',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'view',
        type: 'RangeVar',
        isArray: false,
        optional: true
      },
      {
        name: 'withCheckOption',
        type: 'ViewCheckOption',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'WindowClause',
    fields: [
      {
        name: 'copiedOrder',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'endInRangeFunc',
        type: 'uint32',
        isArray: false,
        optional: true
      },
      {
        name: 'endOffset',
        type: 'Node',
        isArray: false,
        optional: true
      },
      {
        name: 'frameOptions',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'inRangeAsc',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'inRangeColl',
        type: 'uint32',
        isArray: false,
        optional: true
      },
      {
        name: 'inRangeNullsFirst',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'name',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'orderClause',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'partitionClause',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'refname',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'startInRangeFunc',
        type: 'uint32',
        isArray: false,
        optional: true
      },
      {
        name: 'startOffset',
        type: 'Node',
        isArray: false,
        optional: true
      },
      {
        name: 'winref',
        type: 'uint32',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'WindowDef',
    fields: [
      {
        name: 'endOffset',
        type: 'Node',
        isArray: false,
        optional: true
      },
      {
        name: 'frameOptions',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'name',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'orderClause',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'partitionClause',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'refname',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'startOffset',
        type: 'Node',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'WindowFunc',
    fields: [
      {
        name: 'aggfilter',
        type: 'Node',
        isArray: false,
        optional: true
      },
      {
        name: 'args',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'inputcollid',
        type: 'uint32',
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'runCondition',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'winagg',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'wincollid',
        type: 'uint32',
        isArray: false,
        optional: true
      },
      {
        name: 'winfnoid',
        type: 'uint32',
        isArray: false,
        optional: true
      },
      {
        name: 'winref',
        type: 'uint32',
        isArray: false,
        optional: true
      },
      {
        name: 'winstar',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'wintype',
        type: 'uint32',
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'WindowFuncRunCondition',
    fields: [
      {
        name: 'arg',
        type: 'Node',
        isArray: false,
        optional: true
      },
      {
        name: 'inputcollid',
        type: 'uint32',
        isArray: false,
        optional: true
      },
      {
        name: 'opno',
        type: 'uint32',
        isArray: false,
        optional: true
      },
      {
        name: 'wfunc_left',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'WithCheckOption',
    fields: [
      {
        name: 'cascaded',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'kind',
        type: 'WCOKind',
        isArray: false,
        optional: true
      },
      {
        name: 'polname',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'qual',
        type: 'Node',
        isArray: false,
        optional: true
      },
      {
        name: 'relname',
        type: 'string',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'WithClause',
    fields: [
      {
        name: 'ctes',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'recursive',
        type: 'bool',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'XmlExpr',
    fields: [
      {
        name: 'arg_names',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'args',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'indent',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'name',
        type: 'string',
        isArray: false,
        optional: true
      },
      {
        name: 'named_args',
        type: 'Node',
        isArray: true,
        optional: true
      },
      {
        name: 'op',
        type: 'XmlExprOp',
        isArray: false,
        optional: true
      },
      {
        name: 'type',
        type: 'uint32',
        isArray: false,
        optional: true
      },
      {
        name: 'typmod',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'xmloption',
        type: 'XmlOptionType',
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'XmlSerialize',
    fields: [
      {
        name: 'expr',
        type: 'Node',
        isArray: false,
        optional: true
      },
      {
        name: 'indent',
        type: 'bool',
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isArray: false,
        optional: true
      },
      {
        name: 'typeName',
        type: 'TypeName',
        isArray: false,
        optional: true
      },
      {
        name: 'xmloption',
        type: 'XmlOptionType',
        isArray: false,
        optional: true
      }
    ]
  }
];
