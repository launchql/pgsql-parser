import * as fs from 'fs';
import * as path from 'path';

/**
 * Script to generate deparser index files for each version
 * Creates index.ts files that use transformers to provide deparse functionality
 */

interface VersionConfig {
  version: number;
  directTransformerClass: string;
  directTransformerFile: string;
}

const VERSIONS_DIR = 'versions';

const versionConfigs: VersionConfig[] = [
  {
    version: 13,
    directTransformerClass: 'PG13ToPG17Transformer',
    directTransformerFile: './v13-to-v17'
  },
  {
    version: 14,
    directTransformerClass: 'PG14ToPG17Transformer',
    directTransformerFile: './v14-to-v17'
  },
  {
    version: 15,
    directTransformerClass: 'PG15ToPG17Transformer',
    directTransformerFile: './v15-to-v17'
  },
  {
    version: 16,
    directTransformerClass: 'PG16ToPG17Transformer',
    directTransformerFile: './v16-to-v17'
  }
];

function generateDeparserIndex(config: VersionConfig): string {
  return `/**
 * Deparser for PostgreSQL version ${config.version}
 * Auto-generated by generate-version-deparsers.ts
 */

import { Node, ParseResult } from '@pgsql/types';
import { 
  deparse as deparse17, 
  deparseSync as deparseSync17,
  DeparserOptions 
} from './deparser';
import { ${config.directTransformerClass} } from '${config.directTransformerFile}';

const tx = new ${config.directTransformerClass}();

export async function deparse(query: Node | Node[] | ParseResult, opts?: DeparserOptions): Promise<string> {
  const ast17 = tx.transform(query);
  return await deparse17(ast17, opts);
}

export function deparseSync(query: Node | Node[] | ParseResult, opts?: DeparserOptions): string {
  const ast17 = tx.transform(query);
  return deparseSync17(ast17, opts);
}

// Re-export DeparserOptions for convenience
export { DeparserOptions } from './deparser';
`;
}

function updateVersionDirectory(config: VersionConfig): void {
  const versionDir = path.join(VERSIONS_DIR, config.version.toString());
  
  if (!fs.existsSync(versionDir)) {
    console.error(`Version directory ${versionDir} does not exist!`);
    return;
  }

  // Remove old index.js if it exists
  const oldIndexPath = path.join(versionDir, 'index.js');
  if (fs.existsSync(oldIndexPath)) {
    fs.unlinkSync(oldIndexPath);
    console.log(`  ✓ Removed old index.js`);
  }

  // Generate new index.ts
  const indexContent = generateDeparserIndex(config);
  const indexPath = path.join(versionDir, 'index.ts');
  fs.writeFileSync(indexPath, indexContent);
  console.log(`  ✓ Created index.ts with deparser functionality`);
}

function updateReadme(version: number): void {
  const versionDir = path.join(VERSIONS_DIR, version.toString());
  const readmePath = path.join(versionDir, 'README.md');
  
  const readmeContent = `# PostgreSQL Version ${version} Deparser

This directory contains a deparser for PostgreSQL version ${version} that automatically transforms ASTs to v17 format before deparsing.

## Usage

\`\`\`javascript
import { deparse, deparseSync } from './index';

// Async deparse
const sql = await deparse(pgNode);

// Sync deparse
const sql = deparseSync(pgNode);

// With options
const sql = await deparse(pgNode, {
  paramPrefix: '$',
  trimSpace: true
});
\`\`\`

## How it Works

1. The deparser uses the \`PG${version}ToPG17Transformer\` to transform your v${version} AST to v17 format
2. It then uses the standard \`pgsql-deparser\` to generate SQL from the v17 AST
3. This ensures compatibility with the latest deparser while supporting older AST versions

## Files

- \`index.ts\` - Main deparser exports
- \`v${version}-to-v17.ts\` - Direct transformer to v17
- Other transformer files are dependencies for the direct transformer

## Note

These are type-stripped versions optimized for bundle size. For TypeScript support with full types, use the original source files from the main package.
`;

  fs.writeFileSync(readmePath, readmeContent);
  console.log(`  ✓ Updated README.md`);
}

function main(): void {
  console.log('Generating version-specific deparsers...\n');

  for (const config of versionConfigs) {
    console.log(`Processing version ${config.version}...`);
    updateVersionDirectory(config);
    updateReadme(config.version);
    console.log('');
  }

  console.log('Done! Version-specific deparsers have been generated.');
}

// Run the script
main();