import * as fs from 'fs';
import * as path from 'path';

/**
 * Script to organize transformers by source version
 * Creates a directory structure where each version has all transformers starting from that version
 */

interface TransformerMapping {
  sourceVersion: number;
  transformers: {
    fileName: string;
    className: string;
    targetVersion: number;
  }[];
}

const VERSIONS_DIR = 'versions';

// Define what transformers each version needs
const versionMappings: TransformerMapping[] = [
  {
    sourceVersion: 13,
    transformers: [
      { fileName: 'v13-to-v14.ts', className: 'V13ToV14Transformer', targetVersion: 14 },
      { fileName: 'direct/v13-to-v17.ts', className: 'PG13ToPG17Transformer', targetVersion: 17 }
    ]
  },
  {
    sourceVersion: 14,
    transformers: [
      { fileName: 'v14-to-v15.ts', className: 'V14ToV15Transformer', targetVersion: 15 },
      { fileName: 'direct/v14-to-v17.ts', className: 'PG14ToPG17Transformer', targetVersion: 17 }
    ]
  },
  {
    sourceVersion: 15,
    transformers: [
      { fileName: 'v15-to-v16.ts', className: 'V15ToV16Transformer', targetVersion: 16 },
      { fileName: 'direct/v15-to-v17.ts', className: 'PG15ToPG17Transformer', targetVersion: 17 }
    ]
  },
  {
    sourceVersion: 16,
    transformers: [
      { fileName: 'v16-to-v17.ts', className: 'V16ToV17Transformer', targetVersion: 17 },
      { fileName: 'direct/v16-to-v17.ts', className: 'PG16ToPG17Transformer', targetVersion: 17 }
    ]
  }
];

function copyTransformer(sourcePath: string, destPath: string): void {
  const content = fs.readFileSync(sourcePath, 'utf-8');
  fs.writeFileSync(destPath, content);
}

function createIndexFile(version: number, transformers: TransformerMapping['transformers']): string {
  const imports = transformers.map(t => {
    const importPath = `./${path.basename(t.fileName, '.ts')}`;
    return `export { ${t.className} } from '${importPath}';`;
  }).join('\n');

  return `/**
 * Transformers for PostgreSQL version ${version}
 * Auto-generated by organize-transformers-by-version.ts
 */

${imports}

// Export a convenience function to get all transformers for this version
export function getTransformersForV${version}() {
  return {
${transformers.map(t => `    to${t.targetVersion}: ${t.className}`).join(',\n')}
  };
}
`;
}

function createReadme(version: number, transformers: TransformerMapping['transformers']): string {
  const transformerList = transformers.map(t => 
    `- \`${t.className}\` - Transform from v${version} to v${t.targetVersion}`
  ).join('\n');

  return `# PostgreSQL Version ${version} Transformers

This directory contains all transformers that start from PostgreSQL version ${version}.

## Available Transformers

${transformerList}

## Usage

### Individual Transformers

\`\`\`javascript
import { ${transformers[0].className} } from './${path.basename(transformers[0].fileName, '.ts')}';

const transformer = new ${transformers[0].className}();
const result = transformer.transform(node);
\`\`\`

### All Transformers

\`\`\`javascript
import { getTransformersForV${version} } from './index';

const transformers = getTransformersForV${version}();
const v${transformers[0].targetVersion}Result = new transformers.to${transformers[0].targetVersion}().transform(node);
\`\`\`

## Files

${transformers.map(t => `- \`${path.basename(t.fileName)}\` - ${t.className}`).join('\n')}
- \`index.js\` - Exports all transformers and convenience function
- \`README.md\` - This file

## Note

These are type-stripped versions optimized for bundle size. For TypeScript support, use the original source files.
`;
}

function organizeByVersion(): void {
  console.log('Organizing transformers by version...\n');

  for (const mapping of versionMappings) {
    const versionDir = path.join(VERSIONS_DIR, mapping.sourceVersion.toString());
    
    // Create version directory
    if (!fs.existsSync(versionDir)) {
      fs.mkdirSync(versionDir, { recursive: true });
    }

    console.log(`Processing version ${mapping.sourceVersion}...`);

    // Copy transformers
    for (const transformer of mapping.transformers) {
      const sourcePath = path.join(VERSIONS_DIR, transformer.fileName);
      const destFileName = path.basename(transformer.fileName);
      const destPath = path.join(versionDir, destFileName);

      if (fs.existsSync(sourcePath)) {
        copyTransformer(sourcePath, destPath);
        console.log(`  ✓ Copied ${destFileName}`);
      } else {
        console.warn(`  ⚠ Source file not found: ${sourcePath}`);
      }
    }

    // Create index file
    const indexContent = createIndexFile(mapping.sourceVersion, mapping.transformers);
    fs.writeFileSync(path.join(versionDir, 'index.js'), indexContent);
    console.log(`  ✓ Created index.js`);

    // Create README
    const readmeContent = createReadme(mapping.sourceVersion, mapping.transformers);
    fs.writeFileSync(path.join(versionDir, 'README.md'), readmeContent);
    console.log(`  ✓ Created README.md`);

    console.log('');
  }

  // Also copy the base transformers that other versions might need
  console.log('Copying dependency transformers...');
  
  // v14 needs v14-to-v15 for its direct transformer
  const v14Dir = path.join(VERSIONS_DIR, '14');
  if (fs.existsSync(path.join(VERSIONS_DIR, 'v14-to-v15.ts'))) {
    copyTransformer(
      path.join(VERSIONS_DIR, 'v14-to-v15.ts'),
      path.join(v14Dir, 'v14-to-v15.ts')
    );
    console.log('  ✓ Copied v14-to-v15.ts to v14 directory (dependency)');
  }

  // v14 also needs v15-to-v16 and v16-to-v17
  if (fs.existsSync(path.join(VERSIONS_DIR, 'v15-to-v16.ts'))) {
    copyTransformer(
      path.join(VERSIONS_DIR, 'v15-to-v16.ts'),
      path.join(v14Dir, 'v15-to-v16.ts')
    );
    console.log('  ✓ Copied v15-to-v16.ts to v14 directory (dependency)');
  }

  if (fs.existsSync(path.join(VERSIONS_DIR, 'v16-to-v17.ts'))) {
    copyTransformer(
      path.join(VERSIONS_DIR, 'v16-to-v17.ts'),
      path.join(v14Dir, 'v16-to-v17.ts')
    );
    console.log('  ✓ Copied v16-to-v17.ts to v14 directory (dependency)');
  }

  // v13 needs all transformers for its direct transformer
  const v13Dir = path.join(VERSIONS_DIR, '13');
  const v13Dependencies = ['v13-to-v14.ts', 'v14-to-v15.ts', 'v15-to-v16.ts', 'v16-to-v17.ts'];
  for (const dep of v13Dependencies) {
    if (fs.existsSync(path.join(VERSIONS_DIR, dep))) {
      copyTransformer(
        path.join(VERSIONS_DIR, dep),
        path.join(v13Dir, dep)
      );
      console.log(`  ✓ Copied ${dep} to v13 directory (dependency)`);
    }
  }

  // v15 needs v15-to-v16 and v16-to-v17 for its direct transformer
  const v15Dir = path.join(VERSIONS_DIR, '15');
  const v15Dependencies = ['v15-to-v16.ts', 'v16-to-v17.ts'];
  for (const dep of v15Dependencies) {
    if (fs.existsSync(path.join(VERSIONS_DIR, dep))) {
      copyTransformer(
        path.join(VERSIONS_DIR, dep),
        path.join(v15Dir, dep)
      );
      console.log(`  ✓ Copied ${dep} to v15 directory (dependency)`);
    }
  }

  console.log('\nDone! Transformers are organized in version-specific directories.');
  
  // Copy deparser files
  console.log('\nCopying deparser files...');
  const { execSync } = require('child_process');
  try {
    execSync('npx ts-node scripts/strip-deparser-types.ts', { stdio: 'inherit' });
  } catch (error) {
    console.error('Failed to copy deparser files:', error);
  }
  
  // Now generate the deparser index files
  console.log('\nGenerating deparser index files...');
  try {
    execSync('npx ts-node scripts/generate-version-deparsers.ts', { stdio: 'inherit' });
  } catch (error) {
    console.error('Failed to generate deparser files:', error);
  }
}

// Run the script
organizeByVersion();