/**
* This file was automatically generated by pg-proto-parser@1.29.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source proto file,
* and run the pg-proto-parser generate command to regenerate this file.
*/
export type EnumType = "OverridingKind" | "QuerySource" | "SortByDir" | "SortByNulls" | "A_Expr_Kind" | "RoleSpecType" | "TableLikeOption" | "DefElemAction" | "PartitionRangeDatumKind" | "RTEKind" | "WCOKind" | "GroupingSetKind" | "CTEMaterialize" | "SetOperation" | "ObjectType" | "DropBehavior" | "AlterTableType" | "GrantTargetType" | "VariableSetKind" | "ConstrType" | "ImportForeignSchemaType" | "RoleStmtType" | "FetchDirection" | "FunctionParameterMode" | "TransactionStmtKind" | "ViewCheckOption" | "ClusterOption" | "DiscardMode" | "ReindexObjectType" | "AlterTSConfigType" | "AlterSubscriptionType" | "OnCommitAction" | "ParamKind" | "CoercionContext" | "CoercionForm" | "BoolExprType" | "SubLinkType" | "RowCompareType" | "MinMaxOp" | "SQLValueFunctionOp" | "XmlExprOp" | "XmlOptionType" | "NullTestType" | "BoolTestType" | "CmdType" | "JoinType" | "AggStrategy" | "AggSplit" | "SetOpCmd" | "SetOpStrategy" | "OnConflictAction" | "LimitOption" | "LockClauseStrength" | "LockWaitPolicy" | "LockTupleMode" | "KeywordKind" | "Token";
export const getEnumInt = (enumType: EnumType, key: string): number => {
  switch (enumType) {
    case "OverridingKind":
      {
        switch (key) {
          case "OVERRIDING_NOT_SET":
            return 0;
          case "OVERRIDING_USER_VALUE":
            return 1;
          case "OVERRIDING_SYSTEM_VALUE":
            return 2;
          default:
            throw new Error("Key not recognized in enum OverridingKind");
        }
      }
    case "QuerySource":
      {
        switch (key) {
          case "QSRC_ORIGINAL":
            return 0;
          case "QSRC_PARSER":
            return 1;
          case "QSRC_INSTEAD_RULE":
            return 2;
          case "QSRC_QUAL_INSTEAD_RULE":
            return 3;
          case "QSRC_NON_INSTEAD_RULE":
            return 4;
          default:
            throw new Error("Key not recognized in enum QuerySource");
        }
      }
    case "SortByDir":
      {
        switch (key) {
          case "SORTBY_DEFAULT":
            return 0;
          case "SORTBY_ASC":
            return 1;
          case "SORTBY_DESC":
            return 2;
          case "SORTBY_USING":
            return 3;
          default:
            throw new Error("Key not recognized in enum SortByDir");
        }
      }
    case "SortByNulls":
      {
        switch (key) {
          case "SORTBY_NULLS_DEFAULT":
            return 0;
          case "SORTBY_NULLS_FIRST":
            return 1;
          case "SORTBY_NULLS_LAST":
            return 2;
          default:
            throw new Error("Key not recognized in enum SortByNulls");
        }
      }
    case "A_Expr_Kind":
      {
        switch (key) {
          case "AEXPR_OP":
            return 0;
          case "AEXPR_OP_ANY":
            return 1;
          case "AEXPR_OP_ALL":
            return 2;
          case "AEXPR_DISTINCT":
            return 3;
          case "AEXPR_NOT_DISTINCT":
            return 4;
          case "AEXPR_NULLIF":
            return 5;
          case "AEXPR_OF":
            return 6;
          case "AEXPR_IN":
            return 7;
          case "AEXPR_LIKE":
            return 8;
          case "AEXPR_ILIKE":
            return 9;
          case "AEXPR_SIMILAR":
            return 10;
          case "AEXPR_BETWEEN":
            return 11;
          case "AEXPR_NOT_BETWEEN":
            return 12;
          case "AEXPR_BETWEEN_SYM":
            return 13;
          case "AEXPR_NOT_BETWEEN_SYM":
            return 14;
          case "AEXPR_PAREN":
            return 15;
          default:
            throw new Error("Key not recognized in enum A_Expr_Kind");
        }
      }
    case "RoleSpecType":
      {
        switch (key) {
          case "ROLESPEC_CSTRING":
            return 0;
          case "ROLESPEC_CURRENT_USER":
            return 1;
          case "ROLESPEC_SESSION_USER":
            return 2;
          case "ROLESPEC_PUBLIC":
            return 3;
          default:
            throw new Error("Key not recognized in enum RoleSpecType");
        }
      }
    case "TableLikeOption":
      {
        switch (key) {
          case "CREATE_TABLE_LIKE_COMMENTS":
            return 0;
          case "CREATE_TABLE_LIKE_CONSTRAINTS":
            return 1;
          case "CREATE_TABLE_LIKE_DEFAULTS":
            return 2;
          case "CREATE_TABLE_LIKE_GENERATED":
            return 3;
          case "CREATE_TABLE_LIKE_IDENTITY":
            return 4;
          case "CREATE_TABLE_LIKE_INDEXES":
            return 5;
          case "CREATE_TABLE_LIKE_STATISTICS":
            return 6;
          case "CREATE_TABLE_LIKE_STORAGE":
            return 7;
          case "CREATE_TABLE_LIKE_ALL":
            return 8;
          default:
            throw new Error("Key not recognized in enum TableLikeOption");
        }
      }
    case "DefElemAction":
      {
        switch (key) {
          case "DEFELEM_UNSPEC":
            return 0;
          case "DEFELEM_SET":
            return 1;
          case "DEFELEM_ADD":
            return 2;
          case "DEFELEM_DROP":
            return 3;
          default:
            throw new Error("Key not recognized in enum DefElemAction");
        }
      }
    case "PartitionRangeDatumKind":
      {
        switch (key) {
          case "PARTITION_RANGE_DATUM_MINVALUE":
            return 0;
          case "PARTITION_RANGE_DATUM_VALUE":
            return 1;
          case "PARTITION_RANGE_DATUM_MAXVALUE":
            return 2;
          default:
            throw new Error("Key not recognized in enum PartitionRangeDatumKind");
        }
      }
    case "RTEKind":
      {
        switch (key) {
          case "RTE_RELATION":
            return 0;
          case "RTE_SUBQUERY":
            return 1;
          case "RTE_JOIN":
            return 2;
          case "RTE_FUNCTION":
            return 3;
          case "RTE_TABLEFUNC":
            return 4;
          case "RTE_VALUES":
            return 5;
          case "RTE_CTE":
            return 6;
          case "RTE_NAMEDTUPLESTORE":
            return 7;
          case "RTE_RESULT":
            return 8;
          default:
            throw new Error("Key not recognized in enum RTEKind");
        }
      }
    case "WCOKind":
      {
        switch (key) {
          case "WCO_VIEW_CHECK":
            return 0;
          case "WCO_RLS_INSERT_CHECK":
            return 1;
          case "WCO_RLS_UPDATE_CHECK":
            return 2;
          case "WCO_RLS_CONFLICT_CHECK":
            return 3;
          default:
            throw new Error("Key not recognized in enum WCOKind");
        }
      }
    case "GroupingSetKind":
      {
        switch (key) {
          case "GROUPING_SET_EMPTY":
            return 0;
          case "GROUPING_SET_SIMPLE":
            return 1;
          case "GROUPING_SET_ROLLUP":
            return 2;
          case "GROUPING_SET_CUBE":
            return 3;
          case "GROUPING_SET_SETS":
            return 4;
          default:
            throw new Error("Key not recognized in enum GroupingSetKind");
        }
      }
    case "CTEMaterialize":
      {
        switch (key) {
          case "CTEMaterializeDefault":
            return 0;
          case "CTEMaterializeAlways":
            return 1;
          case "CTEMaterializeNever":
            return 2;
          default:
            throw new Error("Key not recognized in enum CTEMaterialize");
        }
      }
    case "SetOperation":
      {
        switch (key) {
          case "SETOP_NONE":
            return 0;
          case "SETOP_UNION":
            return 1;
          case "SETOP_INTERSECT":
            return 2;
          case "SETOP_EXCEPT":
            return 3;
          default:
            throw new Error("Key not recognized in enum SetOperation");
        }
      }
    case "ObjectType":
      {
        switch (key) {
          case "OBJECT_ACCESS_METHOD":
            return 0;
          case "OBJECT_AGGREGATE":
            return 1;
          case "OBJECT_AMOP":
            return 2;
          case "OBJECT_AMPROC":
            return 3;
          case "OBJECT_ATTRIBUTE":
            return 4;
          case "OBJECT_CAST":
            return 5;
          case "OBJECT_COLUMN":
            return 6;
          case "OBJECT_COLLATION":
            return 7;
          case "OBJECT_CONVERSION":
            return 8;
          case "OBJECT_DATABASE":
            return 9;
          case "OBJECT_DEFAULT":
            return 10;
          case "OBJECT_DEFACL":
            return 11;
          case "OBJECT_DOMAIN":
            return 12;
          case "OBJECT_DOMCONSTRAINT":
            return 13;
          case "OBJECT_EVENT_TRIGGER":
            return 14;
          case "OBJECT_EXTENSION":
            return 15;
          case "OBJECT_FDW":
            return 16;
          case "OBJECT_FOREIGN_SERVER":
            return 17;
          case "OBJECT_FOREIGN_TABLE":
            return 18;
          case "OBJECT_FUNCTION":
            return 19;
          case "OBJECT_INDEX":
            return 20;
          case "OBJECT_LANGUAGE":
            return 21;
          case "OBJECT_LARGEOBJECT":
            return 22;
          case "OBJECT_MATVIEW":
            return 23;
          case "OBJECT_OPCLASS":
            return 24;
          case "OBJECT_OPERATOR":
            return 25;
          case "OBJECT_OPFAMILY":
            return 26;
          case "OBJECT_POLICY":
            return 27;
          case "OBJECT_PROCEDURE":
            return 28;
          case "OBJECT_PUBLICATION":
            return 29;
          case "OBJECT_PUBLICATION_REL":
            return 30;
          case "OBJECT_ROLE":
            return 31;
          case "OBJECT_ROUTINE":
            return 32;
          case "OBJECT_RULE":
            return 33;
          case "OBJECT_SCHEMA":
            return 34;
          case "OBJECT_SEQUENCE":
            return 35;
          case "OBJECT_SUBSCRIPTION":
            return 36;
          case "OBJECT_STATISTIC_EXT":
            return 37;
          case "OBJECT_TABCONSTRAINT":
            return 38;
          case "OBJECT_TABLE":
            return 39;
          case "OBJECT_TABLESPACE":
            return 40;
          case "OBJECT_TRANSFORM":
            return 41;
          case "OBJECT_TRIGGER":
            return 42;
          case "OBJECT_TSCONFIGURATION":
            return 43;
          case "OBJECT_TSDICTIONARY":
            return 44;
          case "OBJECT_TSPARSER":
            return 45;
          case "OBJECT_TSTEMPLATE":
            return 46;
          case "OBJECT_TYPE":
            return 47;
          case "OBJECT_USER_MAPPING":
            return 48;
          case "OBJECT_VIEW":
            return 49;
          default:
            throw new Error("Key not recognized in enum ObjectType");
        }
      }
    case "DropBehavior":
      {
        switch (key) {
          case "DROP_RESTRICT":
            return 0;
          case "DROP_CASCADE":
            return 1;
          default:
            throw new Error("Key not recognized in enum DropBehavior");
        }
      }
    case "AlterTableType":
      {
        switch (key) {
          case "AT_AddColumn":
            return 0;
          case "AT_AddColumnRecurse":
            return 1;
          case "AT_AddColumnToView":
            return 2;
          case "AT_ColumnDefault":
            return 3;
          case "AT_CookedColumnDefault":
            return 4;
          case "AT_DropNotNull":
            return 5;
          case "AT_SetNotNull":
            return 6;
          case "AT_DropExpression":
            return 7;
          case "AT_CheckNotNull":
            return 8;
          case "AT_SetStatistics":
            return 9;
          case "AT_SetOptions":
            return 10;
          case "AT_ResetOptions":
            return 11;
          case "AT_SetStorage":
            return 12;
          case "AT_DropColumn":
            return 13;
          case "AT_DropColumnRecurse":
            return 14;
          case "AT_AddIndex":
            return 15;
          case "AT_ReAddIndex":
            return 16;
          case "AT_AddConstraint":
            return 17;
          case "AT_AddConstraintRecurse":
            return 18;
          case "AT_ReAddConstraint":
            return 19;
          case "AT_ReAddDomainConstraint":
            return 20;
          case "AT_AlterConstraint":
            return 21;
          case "AT_ValidateConstraint":
            return 22;
          case "AT_ValidateConstraintRecurse":
            return 23;
          case "AT_AddIndexConstraint":
            return 24;
          case "AT_DropConstraint":
            return 25;
          case "AT_DropConstraintRecurse":
            return 26;
          case "AT_ReAddComment":
            return 27;
          case "AT_AlterColumnType":
            return 28;
          case "AT_AlterColumnGenericOptions":
            return 29;
          case "AT_ChangeOwner":
            return 30;
          case "AT_ClusterOn":
            return 31;
          case "AT_DropCluster":
            return 32;
          case "AT_SetLogged":
            return 33;
          case "AT_SetUnLogged":
            return 34;
          case "AT_DropOids":
            return 35;
          case "AT_SetTableSpace":
            return 36;
          case "AT_SetRelOptions":
            return 37;
          case "AT_ResetRelOptions":
            return 38;
          case "AT_ReplaceRelOptions":
            return 39;
          case "AT_EnableTrig":
            return 40;
          case "AT_EnableAlwaysTrig":
            return 41;
          case "AT_EnableReplicaTrig":
            return 42;
          case "AT_DisableTrig":
            return 43;
          case "AT_EnableTrigAll":
            return 44;
          case "AT_DisableTrigAll":
            return 45;
          case "AT_EnableTrigUser":
            return 46;
          case "AT_DisableTrigUser":
            return 47;
          case "AT_EnableRule":
            return 48;
          case "AT_EnableAlwaysRule":
            return 49;
          case "AT_EnableReplicaRule":
            return 50;
          case "AT_DisableRule":
            return 51;
          case "AT_AddInherit":
            return 52;
          case "AT_DropInherit":
            return 53;
          case "AT_AddOf":
            return 54;
          case "AT_DropOf":
            return 55;
          case "AT_ReplicaIdentity":
            return 56;
          case "AT_EnableRowSecurity":
            return 57;
          case "AT_DisableRowSecurity":
            return 58;
          case "AT_ForceRowSecurity":
            return 59;
          case "AT_NoForceRowSecurity":
            return 60;
          case "AT_GenericOptions":
            return 61;
          case "AT_AttachPartition":
            return 62;
          case "AT_DetachPartition":
            return 63;
          case "AT_AddIdentity":
            return 64;
          case "AT_SetIdentity":
            return 65;
          case "AT_DropIdentity":
            return 66;
          default:
            throw new Error("Key not recognized in enum AlterTableType");
        }
      }
    case "GrantTargetType":
      {
        switch (key) {
          case "ACL_TARGET_OBJECT":
            return 0;
          case "ACL_TARGET_ALL_IN_SCHEMA":
            return 1;
          case "ACL_TARGET_DEFAULTS":
            return 2;
          default:
            throw new Error("Key not recognized in enum GrantTargetType");
        }
      }
    case "VariableSetKind":
      {
        switch (key) {
          case "VAR_SET_VALUE":
            return 0;
          case "VAR_SET_DEFAULT":
            return 1;
          case "VAR_SET_CURRENT":
            return 2;
          case "VAR_SET_MULTI":
            return 3;
          case "VAR_RESET":
            return 4;
          case "VAR_RESET_ALL":
            return 5;
          default:
            throw new Error("Key not recognized in enum VariableSetKind");
        }
      }
    case "ConstrType":
      {
        switch (key) {
          case "CONSTR_NULL":
            return 0;
          case "CONSTR_NOTNULL":
            return 1;
          case "CONSTR_DEFAULT":
            return 2;
          case "CONSTR_IDENTITY":
            return 3;
          case "CONSTR_GENERATED":
            return 4;
          case "CONSTR_CHECK":
            return 5;
          case "CONSTR_PRIMARY":
            return 6;
          case "CONSTR_UNIQUE":
            return 7;
          case "CONSTR_EXCLUSION":
            return 8;
          case "CONSTR_FOREIGN":
            return 9;
          case "CONSTR_ATTR_DEFERRABLE":
            return 10;
          case "CONSTR_ATTR_NOT_DEFERRABLE":
            return 11;
          case "CONSTR_ATTR_DEFERRED":
            return 12;
          case "CONSTR_ATTR_IMMEDIATE":
            return 13;
          default:
            throw new Error("Key not recognized in enum ConstrType");
        }
      }
    case "ImportForeignSchemaType":
      {
        switch (key) {
          case "FDW_IMPORT_SCHEMA_ALL":
            return 0;
          case "FDW_IMPORT_SCHEMA_LIMIT_TO":
            return 1;
          case "FDW_IMPORT_SCHEMA_EXCEPT":
            return 2;
          default:
            throw new Error("Key not recognized in enum ImportForeignSchemaType");
        }
      }
    case "RoleStmtType":
      {
        switch (key) {
          case "ROLESTMT_ROLE":
            return 0;
          case "ROLESTMT_USER":
            return 1;
          case "ROLESTMT_GROUP":
            return 2;
          default:
            throw new Error("Key not recognized in enum RoleStmtType");
        }
      }
    case "FetchDirection":
      {
        switch (key) {
          case "FETCH_FORWARD":
            return 0;
          case "FETCH_BACKWARD":
            return 1;
          case "FETCH_ABSOLUTE":
            return 2;
          case "FETCH_RELATIVE":
            return 3;
          default:
            throw new Error("Key not recognized in enum FetchDirection");
        }
      }
    case "FunctionParameterMode":
      {
        switch (key) {
          case "FUNC_PARAM_IN":
            return 0;
          case "FUNC_PARAM_OUT":
            return 1;
          case "FUNC_PARAM_INOUT":
            return 2;
          case "FUNC_PARAM_VARIADIC":
            return 3;
          case "FUNC_PARAM_TABLE":
            return 4;
          default:
            throw new Error("Key not recognized in enum FunctionParameterMode");
        }
      }
    case "TransactionStmtKind":
      {
        switch (key) {
          case "TRANS_STMT_BEGIN":
            return 0;
          case "TRANS_STMT_START":
            return 1;
          case "TRANS_STMT_COMMIT":
            return 2;
          case "TRANS_STMT_ROLLBACK":
            return 3;
          case "TRANS_STMT_SAVEPOINT":
            return 4;
          case "TRANS_STMT_RELEASE":
            return 5;
          case "TRANS_STMT_ROLLBACK_TO":
            return 6;
          case "TRANS_STMT_PREPARE":
            return 7;
          case "TRANS_STMT_COMMIT_PREPARED":
            return 8;
          case "TRANS_STMT_ROLLBACK_PREPARED":
            return 9;
          default:
            throw new Error("Key not recognized in enum TransactionStmtKind");
        }
      }
    case "ViewCheckOption":
      {
        switch (key) {
          case "NO_CHECK_OPTION":
            return 0;
          case "LOCAL_CHECK_OPTION":
            return 1;
          case "CASCADED_CHECK_OPTION":
            return 2;
          default:
            throw new Error("Key not recognized in enum ViewCheckOption");
        }
      }
    case "ClusterOption":
      {
        switch (key) {
          case "CLUOPT_RECHECK":
            return 0;
          case "CLUOPT_VERBOSE":
            return 1;
          default:
            throw new Error("Key not recognized in enum ClusterOption");
        }
      }
    case "DiscardMode":
      {
        switch (key) {
          case "DISCARD_ALL":
            return 0;
          case "DISCARD_PLANS":
            return 1;
          case "DISCARD_SEQUENCES":
            return 2;
          case "DISCARD_TEMP":
            return 3;
          default:
            throw new Error("Key not recognized in enum DiscardMode");
        }
      }
    case "ReindexObjectType":
      {
        switch (key) {
          case "REINDEX_OBJECT_INDEX":
            return 0;
          case "REINDEX_OBJECT_TABLE":
            return 1;
          case "REINDEX_OBJECT_SCHEMA":
            return 2;
          case "REINDEX_OBJECT_SYSTEM":
            return 3;
          case "REINDEX_OBJECT_DATABASE":
            return 4;
          default:
            throw new Error("Key not recognized in enum ReindexObjectType");
        }
      }
    case "AlterTSConfigType":
      {
        switch (key) {
          case "ALTER_TSCONFIG_ADD_MAPPING":
            return 0;
          case "ALTER_TSCONFIG_ALTER_MAPPING_FOR_TOKEN":
            return 1;
          case "ALTER_TSCONFIG_REPLACE_DICT":
            return 2;
          case "ALTER_TSCONFIG_REPLACE_DICT_FOR_TOKEN":
            return 3;
          case "ALTER_TSCONFIG_DROP_MAPPING":
            return 4;
          default:
            throw new Error("Key not recognized in enum AlterTSConfigType");
        }
      }
    case "AlterSubscriptionType":
      {
        switch (key) {
          case "ALTER_SUBSCRIPTION_OPTIONS":
            return 0;
          case "ALTER_SUBSCRIPTION_CONNECTION":
            return 1;
          case "ALTER_SUBSCRIPTION_PUBLICATION":
            return 2;
          case "ALTER_SUBSCRIPTION_REFRESH":
            return 3;
          case "ALTER_SUBSCRIPTION_ENABLED":
            return 4;
          default:
            throw new Error("Key not recognized in enum AlterSubscriptionType");
        }
      }
    case "OnCommitAction":
      {
        switch (key) {
          case "ONCOMMIT_NOOP":
            return 0;
          case "ONCOMMIT_PRESERVE_ROWS":
            return 1;
          case "ONCOMMIT_DELETE_ROWS":
            return 2;
          case "ONCOMMIT_DROP":
            return 3;
          default:
            throw new Error("Key not recognized in enum OnCommitAction");
        }
      }
    case "ParamKind":
      {
        switch (key) {
          case "PARAM_EXTERN":
            return 0;
          case "PARAM_EXEC":
            return 1;
          case "PARAM_SUBLINK":
            return 2;
          case "PARAM_MULTIEXPR":
            return 3;
          default:
            throw new Error("Key not recognized in enum ParamKind");
        }
      }
    case "CoercionContext":
      {
        switch (key) {
          case "COERCION_IMPLICIT":
            return 0;
          case "COERCION_ASSIGNMENT":
            return 1;
          case "COERCION_EXPLICIT":
            return 2;
          default:
            throw new Error("Key not recognized in enum CoercionContext");
        }
      }
    case "CoercionForm":
      {
        switch (key) {
          case "COERCE_EXPLICIT_CALL":
            return 0;
          case "COERCE_EXPLICIT_CAST":
            return 1;
          case "COERCE_IMPLICIT_CAST":
            return 2;
          default:
            throw new Error("Key not recognized in enum CoercionForm");
        }
      }
    case "BoolExprType":
      {
        switch (key) {
          case "AND_EXPR":
            return 0;
          case "OR_EXPR":
            return 1;
          case "NOT_EXPR":
            return 2;
          default:
            throw new Error("Key not recognized in enum BoolExprType");
        }
      }
    case "SubLinkType":
      {
        switch (key) {
          case "EXISTS_SUBLINK":
            return 0;
          case "ALL_SUBLINK":
            return 1;
          case "ANY_SUBLINK":
            return 2;
          case "ROWCOMPARE_SUBLINK":
            return 3;
          case "EXPR_SUBLINK":
            return 4;
          case "MULTIEXPR_SUBLINK":
            return 5;
          case "ARRAY_SUBLINK":
            return 6;
          case "CTE_SUBLINK":
            return 7;
          default:
            throw new Error("Key not recognized in enum SubLinkType");
        }
      }
    case "RowCompareType":
      {
        switch (key) {
          case "ROWCOMPARE_LT":
            return 0;
          case "ROWCOMPARE_LE":
            return 1;
          case "ROWCOMPARE_EQ":
            return 2;
          case "ROWCOMPARE_GE":
            return 3;
          case "ROWCOMPARE_GT":
            return 4;
          case "ROWCOMPARE_NE":
            return 5;
          default:
            throw new Error("Key not recognized in enum RowCompareType");
        }
      }
    case "MinMaxOp":
      {
        switch (key) {
          case "IS_GREATEST":
            return 0;
          case "IS_LEAST":
            return 1;
          default:
            throw new Error("Key not recognized in enum MinMaxOp");
        }
      }
    case "SQLValueFunctionOp":
      {
        switch (key) {
          case "SVFOP_CURRENT_DATE":
            return 0;
          case "SVFOP_CURRENT_TIME":
            return 1;
          case "SVFOP_CURRENT_TIME_N":
            return 2;
          case "SVFOP_CURRENT_TIMESTAMP":
            return 3;
          case "SVFOP_CURRENT_TIMESTAMP_N":
            return 4;
          case "SVFOP_LOCALTIME":
            return 5;
          case "SVFOP_LOCALTIME_N":
            return 6;
          case "SVFOP_LOCALTIMESTAMP":
            return 7;
          case "SVFOP_LOCALTIMESTAMP_N":
            return 8;
          case "SVFOP_CURRENT_ROLE":
            return 9;
          case "SVFOP_CURRENT_USER":
            return 10;
          case "SVFOP_USER":
            return 11;
          case "SVFOP_SESSION_USER":
            return 12;
          case "SVFOP_CURRENT_CATALOG":
            return 13;
          case "SVFOP_CURRENT_SCHEMA":
            return 14;
          default:
            throw new Error("Key not recognized in enum SQLValueFunctionOp");
        }
      }
    case "XmlExprOp":
      {
        switch (key) {
          case "IS_XMLCONCAT":
            return 0;
          case "IS_XMLELEMENT":
            return 1;
          case "IS_XMLFOREST":
            return 2;
          case "IS_XMLPARSE":
            return 3;
          case "IS_XMLPI":
            return 4;
          case "IS_XMLROOT":
            return 5;
          case "IS_XMLSERIALIZE":
            return 6;
          case "IS_DOCUMENT":
            return 7;
          default:
            throw new Error("Key not recognized in enum XmlExprOp");
        }
      }
    case "XmlOptionType":
      {
        switch (key) {
          case "XMLOPTION_DOCUMENT":
            return 0;
          case "XMLOPTION_CONTENT":
            return 1;
          default:
            throw new Error("Key not recognized in enum XmlOptionType");
        }
      }
    case "NullTestType":
      {
        switch (key) {
          case "IS_NULL":
            return 0;
          case "IS_NOT_NULL":
            return 1;
          default:
            throw new Error("Key not recognized in enum NullTestType");
        }
      }
    case "BoolTestType":
      {
        switch (key) {
          case "IS_TRUE":
            return 0;
          case "IS_NOT_TRUE":
            return 1;
          case "IS_FALSE":
            return 2;
          case "IS_NOT_FALSE":
            return 3;
          case "IS_UNKNOWN":
            return 4;
          case "IS_NOT_UNKNOWN":
            return 5;
          default:
            throw new Error("Key not recognized in enum BoolTestType");
        }
      }
    case "CmdType":
      {
        switch (key) {
          case "CMD_UNKNOWN":
            return 0;
          case "CMD_SELECT":
            return 1;
          case "CMD_UPDATE":
            return 2;
          case "CMD_INSERT":
            return 3;
          case "CMD_DELETE":
            return 4;
          case "CMD_UTILITY":
            return 5;
          case "CMD_NOTHING":
            return 6;
          default:
            throw new Error("Key not recognized in enum CmdType");
        }
      }
    case "JoinType":
      {
        switch (key) {
          case "JOIN_INNER":
            return 0;
          case "JOIN_LEFT":
            return 1;
          case "JOIN_FULL":
            return 2;
          case "JOIN_RIGHT":
            return 3;
          case "JOIN_SEMI":
            return 4;
          case "JOIN_ANTI":
            return 5;
          case "JOIN_UNIQUE_OUTER":
            return 6;
          case "JOIN_UNIQUE_INNER":
            return 7;
          default:
            throw new Error("Key not recognized in enum JoinType");
        }
      }
    case "AggStrategy":
      {
        switch (key) {
          case "AGG_PLAIN":
            return 0;
          case "AGG_SORTED":
            return 1;
          case "AGG_HASHED":
            return 2;
          case "AGG_MIXED":
            return 3;
          default:
            throw new Error("Key not recognized in enum AggStrategy");
        }
      }
    case "AggSplit":
      {
        switch (key) {
          case "AGGSPLIT_SIMPLE":
            return 0;
          case "AGGSPLIT_INITIAL_SERIAL":
            return 1;
          case "AGGSPLIT_FINAL_DESERIAL":
            return 2;
          default:
            throw new Error("Key not recognized in enum AggSplit");
        }
      }
    case "SetOpCmd":
      {
        switch (key) {
          case "SETOPCMD_INTERSECT":
            return 0;
          case "SETOPCMD_INTERSECT_ALL":
            return 1;
          case "SETOPCMD_EXCEPT":
            return 2;
          case "SETOPCMD_EXCEPT_ALL":
            return 3;
          default:
            throw new Error("Key not recognized in enum SetOpCmd");
        }
      }
    case "SetOpStrategy":
      {
        switch (key) {
          case "SETOP_SORTED":
            return 0;
          case "SETOP_HASHED":
            return 1;
          default:
            throw new Error("Key not recognized in enum SetOpStrategy");
        }
      }
    case "OnConflictAction":
      {
        switch (key) {
          case "ONCONFLICT_NONE":
            return 0;
          case "ONCONFLICT_NOTHING":
            return 1;
          case "ONCONFLICT_UPDATE":
            return 2;
          default:
            throw new Error("Key not recognized in enum OnConflictAction");
        }
      }
    case "LimitOption":
      {
        switch (key) {
          case "LIMIT_OPTION_DEFAULT":
            return 0;
          case "LIMIT_OPTION_COUNT":
            return 1;
          case "LIMIT_OPTION_WITH_TIES":
            return 2;
          default:
            throw new Error("Key not recognized in enum LimitOption");
        }
      }
    case "LockClauseStrength":
      {
        switch (key) {
          case "LCS_NONE":
            return 0;
          case "LCS_FORKEYSHARE":
            return 1;
          case "LCS_FORSHARE":
            return 2;
          case "LCS_FORNOKEYUPDATE":
            return 3;
          case "LCS_FORUPDATE":
            return 4;
          default:
            throw new Error("Key not recognized in enum LockClauseStrength");
        }
      }
    case "LockWaitPolicy":
      {
        switch (key) {
          case "LockWaitBlock":
            return 0;
          case "LockWaitSkip":
            return 1;
          case "LockWaitError":
            return 2;
          default:
            throw new Error("Key not recognized in enum LockWaitPolicy");
        }
      }
    case "LockTupleMode":
      {
        switch (key) {
          case "LockTupleKeyShare":
            return 0;
          case "LockTupleShare":
            return 1;
          case "LockTupleNoKeyExclusive":
            return 2;
          case "LockTupleExclusive":
            return 3;
          default:
            throw new Error("Key not recognized in enum LockTupleMode");
        }
      }
    case "KeywordKind":
      {
        switch (key) {
          case "NO_KEYWORD":
            return 0;
          case "UNRESERVED_KEYWORD":
            return 1;
          case "COL_NAME_KEYWORD":
            return 2;
          case "TYPE_FUNC_NAME_KEYWORD":
            return 3;
          case "RESERVED_KEYWORD":
            return 4;
          default:
            throw new Error("Key not recognized in enum KeywordKind");
        }
      }
    case "Token":
      {
        switch (key) {
          case "NUL":
            return 0;
          case "ASCII_37":
            return 37;
          case "ASCII_40":
            return 40;
          case "ASCII_41":
            return 41;
          case "ASCII_42":
            return 42;
          case "ASCII_43":
            return 43;
          case "ASCII_44":
            return 44;
          case "ASCII_45":
            return 45;
          case "ASCII_46":
            return 46;
          case "ASCII_47":
            return 47;
          case "ASCII_58":
            return 58;
          case "ASCII_59":
            return 59;
          case "ASCII_60":
            return 60;
          case "ASCII_61":
            return 61;
          case "ASCII_62":
            return 62;
          case "ASCII_63":
            return 63;
          case "ASCII_91":
            return 91;
          case "ASCII_92":
            return 92;
          case "ASCII_93":
            return 93;
          case "ASCII_94":
            return 94;
          case "IDENT":
            return 258;
          case "UIDENT":
            return 259;
          case "FCONST":
            return 260;
          case "SCONST":
            return 261;
          case "USCONST":
            return 262;
          case "BCONST":
            return 263;
          case "XCONST":
            return 264;
          case "Op":
            return 265;
          case "ICONST":
            return 266;
          case "PARAM":
            return 267;
          case "TYPECAST":
            return 268;
          case "DOT_DOT":
            return 269;
          case "COLON_EQUALS":
            return 270;
          case "EQUALS_GREATER":
            return 271;
          case "LESS_EQUALS":
            return 272;
          case "GREATER_EQUALS":
            return 273;
          case "NOT_EQUALS":
            return 274;
          case "SQL_COMMENT":
            return 275;
          case "C_COMMENT":
            return 276;
          case "ABORT_P":
            return 277;
          case "ABSOLUTE_P":
            return 278;
          case "ACCESS":
            return 279;
          case "ACTION":
            return 280;
          case "ADD_P":
            return 281;
          case "ADMIN":
            return 282;
          case "AFTER":
            return 283;
          case "AGGREGATE":
            return 284;
          case "ALL":
            return 285;
          case "ALSO":
            return 286;
          case "ALTER":
            return 287;
          case "ALWAYS":
            return 288;
          case "ANALYSE":
            return 289;
          case "ANALYZE":
            return 290;
          case "AND":
            return 291;
          case "ANY":
            return 292;
          case "ARRAY":
            return 293;
          case "AS":
            return 294;
          case "ASC":
            return 295;
          case "ASSERTION":
            return 296;
          case "ASSIGNMENT":
            return 297;
          case "ASYMMETRIC":
            return 298;
          case "AT":
            return 299;
          case "ATTACH":
            return 300;
          case "ATTRIBUTE":
            return 301;
          case "AUTHORIZATION":
            return 302;
          case "BACKWARD":
            return 303;
          case "BEFORE":
            return 304;
          case "BEGIN_P":
            return 305;
          case "BETWEEN":
            return 306;
          case "BIGINT":
            return 307;
          case "BINARY":
            return 308;
          case "BIT":
            return 309;
          case "BOOLEAN_P":
            return 310;
          case "BOTH":
            return 311;
          case "BY":
            return 312;
          case "CACHE":
            return 313;
          case "CALL":
            return 314;
          case "CALLED":
            return 315;
          case "CASCADE":
            return 316;
          case "CASCADED":
            return 317;
          case "CASE":
            return 318;
          case "CAST":
            return 319;
          case "CATALOG_P":
            return 320;
          case "CHAIN":
            return 321;
          case "CHAR_P":
            return 322;
          case "CHARACTER":
            return 323;
          case "CHARACTERISTICS":
            return 324;
          case "CHECK":
            return 325;
          case "CHECKPOINT":
            return 326;
          case "CLASS":
            return 327;
          case "CLOSE":
            return 328;
          case "CLUSTER":
            return 329;
          case "COALESCE":
            return 330;
          case "COLLATE":
            return 331;
          case "COLLATION":
            return 332;
          case "COLUMN":
            return 333;
          case "COLUMNS":
            return 334;
          case "COMMENT":
            return 335;
          case "COMMENTS":
            return 336;
          case "COMMIT":
            return 337;
          case "COMMITTED":
            return 338;
          case "CONCURRENTLY":
            return 339;
          case "CONFIGURATION":
            return 340;
          case "CONFLICT":
            return 341;
          case "CONNECTION":
            return 342;
          case "CONSTRAINT":
            return 343;
          case "CONSTRAINTS":
            return 344;
          case "CONTENT_P":
            return 345;
          case "CONTINUE_P":
            return 346;
          case "CONVERSION_P":
            return 347;
          case "COPY":
            return 348;
          case "COST":
            return 349;
          case "CREATE":
            return 350;
          case "CROSS":
            return 351;
          case "CSV":
            return 352;
          case "CUBE":
            return 353;
          case "CURRENT_P":
            return 354;
          case "CURRENT_CATALOG":
            return 355;
          case "CURRENT_DATE":
            return 356;
          case "CURRENT_ROLE":
            return 357;
          case "CURRENT_SCHEMA":
            return 358;
          case "CURRENT_TIME":
            return 359;
          case "CURRENT_TIMESTAMP":
            return 360;
          case "CURRENT_USER":
            return 361;
          case "CURSOR":
            return 362;
          case "CYCLE":
            return 363;
          case "DATA_P":
            return 364;
          case "DATABASE":
            return 365;
          case "DAY_P":
            return 366;
          case "DEALLOCATE":
            return 367;
          case "DEC":
            return 368;
          case "DECIMAL_P":
            return 369;
          case "DECLARE":
            return 370;
          case "DEFAULT":
            return 371;
          case "DEFAULTS":
            return 372;
          case "DEFERRABLE":
            return 373;
          case "DEFERRED":
            return 374;
          case "DEFINER":
            return 375;
          case "DELETE_P":
            return 376;
          case "DELIMITER":
            return 377;
          case "DELIMITERS":
            return 378;
          case "DEPENDS":
            return 379;
          case "DESC":
            return 380;
          case "DETACH":
            return 381;
          case "DICTIONARY":
            return 382;
          case "DISABLE_P":
            return 383;
          case "DISCARD":
            return 384;
          case "DISTINCT":
            return 385;
          case "DO":
            return 386;
          case "DOCUMENT_P":
            return 387;
          case "DOMAIN_P":
            return 388;
          case "DOUBLE_P":
            return 389;
          case "DROP":
            return 390;
          case "EACH":
            return 391;
          case "ELSE":
            return 392;
          case "ENABLE_P":
            return 393;
          case "ENCODING":
            return 394;
          case "ENCRYPTED":
            return 395;
          case "END_P":
            return 396;
          case "ENUM_P":
            return 397;
          case "ESCAPE":
            return 398;
          case "EVENT":
            return 399;
          case "EXCEPT":
            return 400;
          case "EXCLUDE":
            return 401;
          case "EXCLUDING":
            return 402;
          case "EXCLUSIVE":
            return 403;
          case "EXECUTE":
            return 404;
          case "EXISTS":
            return 405;
          case "EXPLAIN":
            return 406;
          case "EXPRESSION":
            return 407;
          case "EXTENSION":
            return 408;
          case "EXTERNAL":
            return 409;
          case "EXTRACT":
            return 410;
          case "FALSE_P":
            return 411;
          case "FAMILY":
            return 412;
          case "FETCH":
            return 413;
          case "FILTER":
            return 414;
          case "FIRST_P":
            return 415;
          case "FLOAT_P":
            return 416;
          case "FOLLOWING":
            return 417;
          case "FOR":
            return 418;
          case "FORCE":
            return 419;
          case "FOREIGN":
            return 420;
          case "FORWARD":
            return 421;
          case "FREEZE":
            return 422;
          case "FROM":
            return 423;
          case "FULL":
            return 424;
          case "FUNCTION":
            return 425;
          case "FUNCTIONS":
            return 426;
          case "GENERATED":
            return 427;
          case "GLOBAL":
            return 428;
          case "GRANT":
            return 429;
          case "GRANTED":
            return 430;
          case "GREATEST":
            return 431;
          case "GROUP_P":
            return 432;
          case "GROUPING":
            return 433;
          case "GROUPS":
            return 434;
          case "HANDLER":
            return 435;
          case "HAVING":
            return 436;
          case "HEADER_P":
            return 437;
          case "HOLD":
            return 438;
          case "HOUR_P":
            return 439;
          case "IDENTITY_P":
            return 440;
          case "IF_P":
            return 441;
          case "ILIKE":
            return 442;
          case "IMMEDIATE":
            return 443;
          case "IMMUTABLE":
            return 444;
          case "IMPLICIT_P":
            return 445;
          case "IMPORT_P":
            return 446;
          case "IN_P":
            return 447;
          case "INCLUDE":
            return 448;
          case "INCLUDING":
            return 449;
          case "INCREMENT":
            return 450;
          case "INDEX":
            return 451;
          case "INDEXES":
            return 452;
          case "INHERIT":
            return 453;
          case "INHERITS":
            return 454;
          case "INITIALLY":
            return 455;
          case "INLINE_P":
            return 456;
          case "INNER_P":
            return 457;
          case "INOUT":
            return 458;
          case "INPUT_P":
            return 459;
          case "INSENSITIVE":
            return 460;
          case "INSERT":
            return 461;
          case "INSTEAD":
            return 462;
          case "INT_P":
            return 463;
          case "INTEGER":
            return 464;
          case "INTERSECT":
            return 465;
          case "INTERVAL":
            return 466;
          case "INTO":
            return 467;
          case "INVOKER":
            return 468;
          case "IS":
            return 469;
          case "ISNULL":
            return 470;
          case "ISOLATION":
            return 471;
          case "JOIN":
            return 472;
          case "KEY":
            return 473;
          case "LABEL":
            return 474;
          case "LANGUAGE":
            return 475;
          case "LARGE_P":
            return 476;
          case "LAST_P":
            return 477;
          case "LATERAL_P":
            return 478;
          case "LEADING":
            return 479;
          case "LEAKPROOF":
            return 480;
          case "LEAST":
            return 481;
          case "LEFT":
            return 482;
          case "LEVEL":
            return 483;
          case "LIKE":
            return 484;
          case "LIMIT":
            return 485;
          case "LISTEN":
            return 486;
          case "LOAD":
            return 487;
          case "LOCAL":
            return 488;
          case "LOCALTIME":
            return 489;
          case "LOCALTIMESTAMP":
            return 490;
          case "LOCATION":
            return 491;
          case "LOCK_P":
            return 492;
          case "LOCKED":
            return 493;
          case "LOGGED":
            return 494;
          case "MAPPING":
            return 495;
          case "MATCH":
            return 496;
          case "MATERIALIZED":
            return 497;
          case "MAXVALUE":
            return 498;
          case "METHOD":
            return 499;
          case "MINUTE_P":
            return 500;
          case "MINVALUE":
            return 501;
          case "MODE":
            return 502;
          case "MONTH_P":
            return 503;
          case "MOVE":
            return 504;
          case "NAME_P":
            return 505;
          case "NAMES":
            return 506;
          case "NATIONAL":
            return 507;
          case "NATURAL":
            return 508;
          case "NCHAR":
            return 509;
          case "NEW":
            return 510;
          case "NEXT":
            return 511;
          case "NFC":
            return 512;
          case "NFD":
            return 513;
          case "NFKC":
            return 514;
          case "NFKD":
            return 515;
          case "NO":
            return 516;
          case "NONE":
            return 517;
          case "NORMALIZE":
            return 518;
          case "NORMALIZED":
            return 519;
          case "NOT":
            return 520;
          case "NOTHING":
            return 521;
          case "NOTIFY":
            return 522;
          case "NOTNULL":
            return 523;
          case "NOWAIT":
            return 524;
          case "NULL_P":
            return 525;
          case "NULLIF":
            return 526;
          case "NULLS_P":
            return 527;
          case "NUMERIC":
            return 528;
          case "OBJECT_P":
            return 529;
          case "OF":
            return 530;
          case "OFF":
            return 531;
          case "OFFSET":
            return 532;
          case "OIDS":
            return 533;
          case "OLD":
            return 534;
          case "ON":
            return 535;
          case "ONLY":
            return 536;
          case "OPERATOR":
            return 537;
          case "OPTION":
            return 538;
          case "OPTIONS":
            return 539;
          case "OR":
            return 540;
          case "ORDER":
            return 541;
          case "ORDINALITY":
            return 542;
          case "OTHERS":
            return 543;
          case "OUT_P":
            return 544;
          case "OUTER_P":
            return 545;
          case "OVER":
            return 546;
          case "OVERLAPS":
            return 547;
          case "OVERLAY":
            return 548;
          case "OVERRIDING":
            return 549;
          case "OWNED":
            return 550;
          case "OWNER":
            return 551;
          case "PARALLEL":
            return 552;
          case "PARSER":
            return 553;
          case "PARTIAL":
            return 554;
          case "PARTITION":
            return 555;
          case "PASSING":
            return 556;
          case "PASSWORD":
            return 557;
          case "PLACING":
            return 558;
          case "PLANS":
            return 559;
          case "POLICY":
            return 560;
          case "POSITION":
            return 561;
          case "PRECEDING":
            return 562;
          case "PRECISION":
            return 563;
          case "PRESERVE":
            return 564;
          case "PREPARE":
            return 565;
          case "PREPARED":
            return 566;
          case "PRIMARY":
            return 567;
          case "PRIOR":
            return 568;
          case "PRIVILEGES":
            return 569;
          case "PROCEDURAL":
            return 570;
          case "PROCEDURE":
            return 571;
          case "PROCEDURES":
            return 572;
          case "PROGRAM":
            return 573;
          case "PUBLICATION":
            return 574;
          case "QUOTE":
            return 575;
          case "RANGE":
            return 576;
          case "READ":
            return 577;
          case "REAL":
            return 578;
          case "REASSIGN":
            return 579;
          case "RECHECK":
            return 580;
          case "RECURSIVE":
            return 581;
          case "REF_P":
            return 582;
          case "REFERENCES":
            return 583;
          case "REFERENCING":
            return 584;
          case "REFRESH":
            return 585;
          case "REINDEX":
            return 586;
          case "RELATIVE_P":
            return 587;
          case "RELEASE":
            return 588;
          case "RENAME":
            return 589;
          case "REPEATABLE":
            return 590;
          case "REPLACE":
            return 591;
          case "REPLICA":
            return 592;
          case "RESET":
            return 593;
          case "RESTART":
            return 594;
          case "RESTRICT":
            return 595;
          case "RETURNING":
            return 596;
          case "RETURNS":
            return 597;
          case "REVOKE":
            return 598;
          case "RIGHT":
            return 599;
          case "ROLE":
            return 600;
          case "ROLLBACK":
            return 601;
          case "ROLLUP":
            return 602;
          case "ROUTINE":
            return 603;
          case "ROUTINES":
            return 604;
          case "ROW":
            return 605;
          case "ROWS":
            return 606;
          case "RULE":
            return 607;
          case "SAVEPOINT":
            return 608;
          case "SCHEMA":
            return 609;
          case "SCHEMAS":
            return 610;
          case "SCROLL":
            return 611;
          case "SEARCH":
            return 612;
          case "SECOND_P":
            return 613;
          case "SECURITY":
            return 614;
          case "SELECT":
            return 615;
          case "SEQUENCE":
            return 616;
          case "SEQUENCES":
            return 617;
          case "SERIALIZABLE":
            return 618;
          case "SERVER":
            return 619;
          case "SESSION":
            return 620;
          case "SESSION_USER":
            return 621;
          case "SET":
            return 622;
          case "SETS":
            return 623;
          case "SETOF":
            return 624;
          case "SHARE":
            return 625;
          case "SHOW":
            return 626;
          case "SIMILAR":
            return 627;
          case "SIMPLE":
            return 628;
          case "SKIP":
            return 629;
          case "SMALLINT":
            return 630;
          case "SNAPSHOT":
            return 631;
          case "SOME":
            return 632;
          case "SQL_P":
            return 633;
          case "STABLE":
            return 634;
          case "STANDALONE_P":
            return 635;
          case "START":
            return 636;
          case "STATEMENT":
            return 637;
          case "STATISTICS":
            return 638;
          case "STDIN":
            return 639;
          case "STDOUT":
            return 640;
          case "STORAGE":
            return 641;
          case "STORED":
            return 642;
          case "STRICT_P":
            return 643;
          case "STRIP_P":
            return 644;
          case "SUBSCRIPTION":
            return 645;
          case "SUBSTRING":
            return 646;
          case "SUPPORT":
            return 647;
          case "SYMMETRIC":
            return 648;
          case "SYSID":
            return 649;
          case "SYSTEM_P":
            return 650;
          case "TABLE":
            return 651;
          case "TABLES":
            return 652;
          case "TABLESAMPLE":
            return 653;
          case "TABLESPACE":
            return 654;
          case "TEMP":
            return 655;
          case "TEMPLATE":
            return 656;
          case "TEMPORARY":
            return 657;
          case "TEXT_P":
            return 658;
          case "THEN":
            return 659;
          case "TIES":
            return 660;
          case "TIME":
            return 661;
          case "TIMESTAMP":
            return 662;
          case "TO":
            return 663;
          case "TRAILING":
            return 664;
          case "TRANSACTION":
            return 665;
          case "TRANSFORM":
            return 666;
          case "TREAT":
            return 667;
          case "TRIGGER":
            return 668;
          case "TRIM":
            return 669;
          case "TRUE_P":
            return 670;
          case "TRUNCATE":
            return 671;
          case "TRUSTED":
            return 672;
          case "TYPE_P":
            return 673;
          case "TYPES_P":
            return 674;
          case "UESCAPE":
            return 675;
          case "UNBOUNDED":
            return 676;
          case "UNCOMMITTED":
            return 677;
          case "UNENCRYPTED":
            return 678;
          case "UNION":
            return 679;
          case "UNIQUE":
            return 680;
          case "UNKNOWN":
            return 681;
          case "UNLISTEN":
            return 682;
          case "UNLOGGED":
            return 683;
          case "UNTIL":
            return 684;
          case "UPDATE":
            return 685;
          case "USER":
            return 686;
          case "USING":
            return 687;
          case "VACUUM":
            return 688;
          case "VALID":
            return 689;
          case "VALIDATE":
            return 690;
          case "VALIDATOR":
            return 691;
          case "VALUE_P":
            return 692;
          case "VALUES":
            return 693;
          case "VARCHAR":
            return 694;
          case "VARIADIC":
            return 695;
          case "VARYING":
            return 696;
          case "VERBOSE":
            return 697;
          case "VERSION_P":
            return 698;
          case "VIEW":
            return 699;
          case "VIEWS":
            return 700;
          case "VOLATILE":
            return 701;
          case "WHEN":
            return 702;
          case "WHERE":
            return 703;
          case "WHITESPACE_P":
            return 704;
          case "WINDOW":
            return 705;
          case "WITH":
            return 706;
          case "WITHIN":
            return 707;
          case "WITHOUT":
            return 708;
          case "WORK":
            return 709;
          case "WRAPPER":
            return 710;
          case "WRITE":
            return 711;
          case "XML_P":
            return 712;
          case "XMLATTRIBUTES":
            return 713;
          case "XMLCONCAT":
            return 714;
          case "XMLELEMENT":
            return 715;
          case "XMLEXISTS":
            return 716;
          case "XMLFOREST":
            return 717;
          case "XMLNAMESPACES":
            return 718;
          case "XMLPARSE":
            return 719;
          case "XMLPI":
            return 720;
          case "XMLROOT":
            return 721;
          case "XMLSERIALIZE":
            return 722;
          case "XMLTABLE":
            return 723;
          case "YEAR_P":
            return 724;
          case "YES_P":
            return 725;
          case "ZONE":
            return 726;
          case "NOT_LA":
            return 727;
          case "NULLS_LA":
            return 728;
          case "WITH_LA":
            return 729;
          case "POSTFIXOP":
            return 730;
          case "UMINUS":
            return 731;
          default:
            throw new Error("Key not recognized in enum Token");
        }
      }
    default:
      throw new Error("Enum type not recognized");
  }
};