/**
* This file was automatically generated by pg-proto-parser@1.29.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source proto file,
* and run the pg-proto-parser generate command to regenerate this file.
*/
export type EnumType = "OverridingKind" | "QuerySource" | "SortByDir" | "SortByNulls" | "SetQuantifier" | "A_Expr_Kind" | "RoleSpecType" | "TableLikeOption" | "DefElemAction" | "PartitionRangeDatumKind" | "RTEKind" | "WCOKind" | "GroupingSetKind" | "CTEMaterialize" | "SetOperation" | "ObjectType" | "DropBehavior" | "AlterTableType" | "GrantTargetType" | "VariableSetKind" | "ConstrType" | "ImportForeignSchemaType" | "RoleStmtType" | "FetchDirection" | "FunctionParameterMode" | "TransactionStmtKind" | "ViewCheckOption" | "DiscardMode" | "ReindexObjectType" | "AlterTSConfigType" | "AlterSubscriptionType" | "OnCommitAction" | "ParamKind" | "CoercionContext" | "CoercionForm" | "BoolExprType" | "SubLinkType" | "RowCompareType" | "MinMaxOp" | "SQLValueFunctionOp" | "XmlExprOp" | "XmlOptionType" | "NullTestType" | "BoolTestType" | "CmdType" | "JoinType" | "AggStrategy" | "AggSplit" | "SetOpCmd" | "SetOpStrategy" | "OnConflictAction" | "LimitOption" | "LockClauseStrength" | "LockWaitPolicy" | "LockTupleMode" | "KeywordKind" | "Token";
export const getEnumString = (enumType: EnumType, key: number): string => {
  switch (enumType) {
    case "OverridingKind":
      {
        switch (key) {
          case 0:
            return "OVERRIDING_NOT_SET";
          case 1:
            return "OVERRIDING_USER_VALUE";
          case 2:
            return "OVERRIDING_SYSTEM_VALUE";
          default:
            throw new Error("Value not recognized in enum OverridingKind");
        }
      }
    case "QuerySource":
      {
        switch (key) {
          case 0:
            return "QSRC_ORIGINAL";
          case 1:
            return "QSRC_PARSER";
          case 2:
            return "QSRC_INSTEAD_RULE";
          case 3:
            return "QSRC_QUAL_INSTEAD_RULE";
          case 4:
            return "QSRC_NON_INSTEAD_RULE";
          default:
            throw new Error("Value not recognized in enum QuerySource");
        }
      }
    case "SortByDir":
      {
        switch (key) {
          case 0:
            return "SORTBY_DEFAULT";
          case 1:
            return "SORTBY_ASC";
          case 2:
            return "SORTBY_DESC";
          case 3:
            return "SORTBY_USING";
          default:
            throw new Error("Value not recognized in enum SortByDir");
        }
      }
    case "SortByNulls":
      {
        switch (key) {
          case 0:
            return "SORTBY_NULLS_DEFAULT";
          case 1:
            return "SORTBY_NULLS_FIRST";
          case 2:
            return "SORTBY_NULLS_LAST";
          default:
            throw new Error("Value not recognized in enum SortByNulls");
        }
      }
    case "SetQuantifier":
      {
        switch (key) {
          case 0:
            return "SET_QUANTIFIER_DEFAULT";
          case 1:
            return "SET_QUANTIFIER_ALL";
          case 2:
            return "SET_QUANTIFIER_DISTINCT";
          default:
            throw new Error("Value not recognized in enum SetQuantifier");
        }
      }
    case "A_Expr_Kind":
      {
        switch (key) {
          case 0:
            return "AEXPR_OP";
          case 1:
            return "AEXPR_OP_ANY";
          case 2:
            return "AEXPR_OP_ALL";
          case 3:
            return "AEXPR_DISTINCT";
          case 4:
            return "AEXPR_NOT_DISTINCT";
          case 5:
            return "AEXPR_NULLIF";
          case 6:
            return "AEXPR_IN";
          case 7:
            return "AEXPR_LIKE";
          case 8:
            return "AEXPR_ILIKE";
          case 9:
            return "AEXPR_SIMILAR";
          case 10:
            return "AEXPR_BETWEEN";
          case 11:
            return "AEXPR_NOT_BETWEEN";
          case 12:
            return "AEXPR_BETWEEN_SYM";
          case 13:
            return "AEXPR_NOT_BETWEEN_SYM";
          default:
            throw new Error("Value not recognized in enum A_Expr_Kind");
        }
      }
    case "RoleSpecType":
      {
        switch (key) {
          case 0:
            return "ROLESPEC_CSTRING";
          case 1:
            return "ROLESPEC_CURRENT_ROLE";
          case 2:
            return "ROLESPEC_CURRENT_USER";
          case 3:
            return "ROLESPEC_SESSION_USER";
          case 4:
            return "ROLESPEC_PUBLIC";
          default:
            throw new Error("Value not recognized in enum RoleSpecType");
        }
      }
    case "TableLikeOption":
      {
        switch (key) {
          case 0:
            return "CREATE_TABLE_LIKE_COMMENTS";
          case 1:
            return "CREATE_TABLE_LIKE_COMPRESSION";
          case 2:
            return "CREATE_TABLE_LIKE_CONSTRAINTS";
          case 3:
            return "CREATE_TABLE_LIKE_DEFAULTS";
          case 4:
            return "CREATE_TABLE_LIKE_GENERATED";
          case 5:
            return "CREATE_TABLE_LIKE_IDENTITY";
          case 6:
            return "CREATE_TABLE_LIKE_INDEXES";
          case 7:
            return "CREATE_TABLE_LIKE_STATISTICS";
          case 8:
            return "CREATE_TABLE_LIKE_STORAGE";
          case 9:
            return "CREATE_TABLE_LIKE_ALL";
          default:
            throw new Error("Value not recognized in enum TableLikeOption");
        }
      }
    case "DefElemAction":
      {
        switch (key) {
          case 0:
            return "DEFELEM_UNSPEC";
          case 1:
            return "DEFELEM_SET";
          case 2:
            return "DEFELEM_ADD";
          case 3:
            return "DEFELEM_DROP";
          default:
            throw new Error("Value not recognized in enum DefElemAction");
        }
      }
    case "PartitionRangeDatumKind":
      {
        switch (key) {
          case 0:
            return "PARTITION_RANGE_DATUM_MINVALUE";
          case 1:
            return "PARTITION_RANGE_DATUM_VALUE";
          case 2:
            return "PARTITION_RANGE_DATUM_MAXVALUE";
          default:
            throw new Error("Value not recognized in enum PartitionRangeDatumKind");
        }
      }
    case "RTEKind":
      {
        switch (key) {
          case 0:
            return "RTE_RELATION";
          case 1:
            return "RTE_SUBQUERY";
          case 2:
            return "RTE_JOIN";
          case 3:
            return "RTE_FUNCTION";
          case 4:
            return "RTE_TABLEFUNC";
          case 5:
            return "RTE_VALUES";
          case 6:
            return "RTE_CTE";
          case 7:
            return "RTE_NAMEDTUPLESTORE";
          case 8:
            return "RTE_RESULT";
          default:
            throw new Error("Value not recognized in enum RTEKind");
        }
      }
    case "WCOKind":
      {
        switch (key) {
          case 0:
            return "WCO_VIEW_CHECK";
          case 1:
            return "WCO_RLS_INSERT_CHECK";
          case 2:
            return "WCO_RLS_UPDATE_CHECK";
          case 3:
            return "WCO_RLS_CONFLICT_CHECK";
          default:
            throw new Error("Value not recognized in enum WCOKind");
        }
      }
    case "GroupingSetKind":
      {
        switch (key) {
          case 0:
            return "GROUPING_SET_EMPTY";
          case 1:
            return "GROUPING_SET_SIMPLE";
          case 2:
            return "GROUPING_SET_ROLLUP";
          case 3:
            return "GROUPING_SET_CUBE";
          case 4:
            return "GROUPING_SET_SETS";
          default:
            throw new Error("Value not recognized in enum GroupingSetKind");
        }
      }
    case "CTEMaterialize":
      {
        switch (key) {
          case 0:
            return "CTEMaterializeDefault";
          case 1:
            return "CTEMaterializeAlways";
          case 2:
            return "CTEMaterializeNever";
          default:
            throw new Error("Value not recognized in enum CTEMaterialize");
        }
      }
    case "SetOperation":
      {
        switch (key) {
          case 0:
            return "SETOP_NONE";
          case 1:
            return "SETOP_UNION";
          case 2:
            return "SETOP_INTERSECT";
          case 3:
            return "SETOP_EXCEPT";
          default:
            throw new Error("Value not recognized in enum SetOperation");
        }
      }
    case "ObjectType":
      {
        switch (key) {
          case 0:
            return "OBJECT_ACCESS_METHOD";
          case 1:
            return "OBJECT_AGGREGATE";
          case 2:
            return "OBJECT_AMOP";
          case 3:
            return "OBJECT_AMPROC";
          case 4:
            return "OBJECT_ATTRIBUTE";
          case 5:
            return "OBJECT_CAST";
          case 6:
            return "OBJECT_COLUMN";
          case 7:
            return "OBJECT_COLLATION";
          case 8:
            return "OBJECT_CONVERSION";
          case 9:
            return "OBJECT_DATABASE";
          case 10:
            return "OBJECT_DEFAULT";
          case 11:
            return "OBJECT_DEFACL";
          case 12:
            return "OBJECT_DOMAIN";
          case 13:
            return "OBJECT_DOMCONSTRAINT";
          case 14:
            return "OBJECT_EVENT_TRIGGER";
          case 15:
            return "OBJECT_EXTENSION";
          case 16:
            return "OBJECT_FDW";
          case 17:
            return "OBJECT_FOREIGN_SERVER";
          case 18:
            return "OBJECT_FOREIGN_TABLE";
          case 19:
            return "OBJECT_FUNCTION";
          case 20:
            return "OBJECT_INDEX";
          case 21:
            return "OBJECT_LANGUAGE";
          case 22:
            return "OBJECT_LARGEOBJECT";
          case 23:
            return "OBJECT_MATVIEW";
          case 24:
            return "OBJECT_OPCLASS";
          case 25:
            return "OBJECT_OPERATOR";
          case 26:
            return "OBJECT_OPFAMILY";
          case 27:
            return "OBJECT_POLICY";
          case 28:
            return "OBJECT_PROCEDURE";
          case 29:
            return "OBJECT_PUBLICATION";
          case 30:
            return "OBJECT_PUBLICATION_REL";
          case 31:
            return "OBJECT_ROLE";
          case 32:
            return "OBJECT_ROUTINE";
          case 33:
            return "OBJECT_RULE";
          case 34:
            return "OBJECT_SCHEMA";
          case 35:
            return "OBJECT_SEQUENCE";
          case 36:
            return "OBJECT_SUBSCRIPTION";
          case 37:
            return "OBJECT_STATISTIC_EXT";
          case 38:
            return "OBJECT_TABCONSTRAINT";
          case 39:
            return "OBJECT_TABLE";
          case 40:
            return "OBJECT_TABLESPACE";
          case 41:
            return "OBJECT_TRANSFORM";
          case 42:
            return "OBJECT_TRIGGER";
          case 43:
            return "OBJECT_TSCONFIGURATION";
          case 44:
            return "OBJECT_TSDICTIONARY";
          case 45:
            return "OBJECT_TSPARSER";
          case 46:
            return "OBJECT_TSTEMPLATE";
          case 47:
            return "OBJECT_TYPE";
          case 48:
            return "OBJECT_USER_MAPPING";
          case 49:
            return "OBJECT_VIEW";
          default:
            throw new Error("Value not recognized in enum ObjectType");
        }
      }
    case "DropBehavior":
      {
        switch (key) {
          case 0:
            return "DROP_RESTRICT";
          case 1:
            return "DROP_CASCADE";
          default:
            throw new Error("Value not recognized in enum DropBehavior");
        }
      }
    case "AlterTableType":
      {
        switch (key) {
          case 0:
            return "AT_AddColumn";
          case 1:
            return "AT_AddColumnRecurse";
          case 2:
            return "AT_AddColumnToView";
          case 3:
            return "AT_ColumnDefault";
          case 4:
            return "AT_CookedColumnDefault";
          case 5:
            return "AT_DropNotNull";
          case 6:
            return "AT_SetNotNull";
          case 7:
            return "AT_DropExpression";
          case 8:
            return "AT_CheckNotNull";
          case 9:
            return "AT_SetStatistics";
          case 10:
            return "AT_SetOptions";
          case 11:
            return "AT_ResetOptions";
          case 12:
            return "AT_SetStorage";
          case 13:
            return "AT_SetCompression";
          case 14:
            return "AT_DropColumn";
          case 15:
            return "AT_DropColumnRecurse";
          case 16:
            return "AT_AddIndex";
          case 17:
            return "AT_ReAddIndex";
          case 18:
            return "AT_AddConstraint";
          case 19:
            return "AT_AddConstraintRecurse";
          case 20:
            return "AT_ReAddConstraint";
          case 21:
            return "AT_ReAddDomainConstraint";
          case 22:
            return "AT_AlterConstraint";
          case 23:
            return "AT_ValidateConstraint";
          case 24:
            return "AT_ValidateConstraintRecurse";
          case 25:
            return "AT_AddIndexConstraint";
          case 26:
            return "AT_DropConstraint";
          case 27:
            return "AT_DropConstraintRecurse";
          case 28:
            return "AT_ReAddComment";
          case 29:
            return "AT_AlterColumnType";
          case 30:
            return "AT_AlterColumnGenericOptions";
          case 31:
            return "AT_ChangeOwner";
          case 32:
            return "AT_ClusterOn";
          case 33:
            return "AT_DropCluster";
          case 34:
            return "AT_SetLogged";
          case 35:
            return "AT_SetUnLogged";
          case 36:
            return "AT_DropOids";
          case 37:
            return "AT_SetTableSpace";
          case 38:
            return "AT_SetRelOptions";
          case 39:
            return "AT_ResetRelOptions";
          case 40:
            return "AT_ReplaceRelOptions";
          case 41:
            return "AT_EnableTrig";
          case 42:
            return "AT_EnableAlwaysTrig";
          case 43:
            return "AT_EnableReplicaTrig";
          case 44:
            return "AT_DisableTrig";
          case 45:
            return "AT_EnableTrigAll";
          case 46:
            return "AT_DisableTrigAll";
          case 47:
            return "AT_EnableTrigUser";
          case 48:
            return "AT_DisableTrigUser";
          case 49:
            return "AT_EnableRule";
          case 50:
            return "AT_EnableAlwaysRule";
          case 51:
            return "AT_EnableReplicaRule";
          case 52:
            return "AT_DisableRule";
          case 53:
            return "AT_AddInherit";
          case 54:
            return "AT_DropInherit";
          case 55:
            return "AT_AddOf";
          case 56:
            return "AT_DropOf";
          case 57:
            return "AT_ReplicaIdentity";
          case 58:
            return "AT_EnableRowSecurity";
          case 59:
            return "AT_DisableRowSecurity";
          case 60:
            return "AT_ForceRowSecurity";
          case 61:
            return "AT_NoForceRowSecurity";
          case 62:
            return "AT_GenericOptions";
          case 63:
            return "AT_AttachPartition";
          case 64:
            return "AT_DetachPartition";
          case 65:
            return "AT_DetachPartitionFinalize";
          case 66:
            return "AT_AddIdentity";
          case 67:
            return "AT_SetIdentity";
          case 68:
            return "AT_DropIdentity";
          case 69:
            return "AT_ReAddStatistics";
          default:
            throw new Error("Value not recognized in enum AlterTableType");
        }
      }
    case "GrantTargetType":
      {
        switch (key) {
          case 0:
            return "ACL_TARGET_OBJECT";
          case 1:
            return "ACL_TARGET_ALL_IN_SCHEMA";
          case 2:
            return "ACL_TARGET_DEFAULTS";
          default:
            throw new Error("Value not recognized in enum GrantTargetType");
        }
      }
    case "VariableSetKind":
      {
        switch (key) {
          case 0:
            return "VAR_SET_VALUE";
          case 1:
            return "VAR_SET_DEFAULT";
          case 2:
            return "VAR_SET_CURRENT";
          case 3:
            return "VAR_SET_MULTI";
          case 4:
            return "VAR_RESET";
          case 5:
            return "VAR_RESET_ALL";
          default:
            throw new Error("Value not recognized in enum VariableSetKind");
        }
      }
    case "ConstrType":
      {
        switch (key) {
          case 0:
            return "CONSTR_NULL";
          case 1:
            return "CONSTR_NOTNULL";
          case 2:
            return "CONSTR_DEFAULT";
          case 3:
            return "CONSTR_IDENTITY";
          case 4:
            return "CONSTR_GENERATED";
          case 5:
            return "CONSTR_CHECK";
          case 6:
            return "CONSTR_PRIMARY";
          case 7:
            return "CONSTR_UNIQUE";
          case 8:
            return "CONSTR_EXCLUSION";
          case 9:
            return "CONSTR_FOREIGN";
          case 10:
            return "CONSTR_ATTR_DEFERRABLE";
          case 11:
            return "CONSTR_ATTR_NOT_DEFERRABLE";
          case 12:
            return "CONSTR_ATTR_DEFERRED";
          case 13:
            return "CONSTR_ATTR_IMMEDIATE";
          default:
            throw new Error("Value not recognized in enum ConstrType");
        }
      }
    case "ImportForeignSchemaType":
      {
        switch (key) {
          case 0:
            return "FDW_IMPORT_SCHEMA_ALL";
          case 1:
            return "FDW_IMPORT_SCHEMA_LIMIT_TO";
          case 2:
            return "FDW_IMPORT_SCHEMA_EXCEPT";
          default:
            throw new Error("Value not recognized in enum ImportForeignSchemaType");
        }
      }
    case "RoleStmtType":
      {
        switch (key) {
          case 0:
            return "ROLESTMT_ROLE";
          case 1:
            return "ROLESTMT_USER";
          case 2:
            return "ROLESTMT_GROUP";
          default:
            throw new Error("Value not recognized in enum RoleStmtType");
        }
      }
    case "FetchDirection":
      {
        switch (key) {
          case 0:
            return "FETCH_FORWARD";
          case 1:
            return "FETCH_BACKWARD";
          case 2:
            return "FETCH_ABSOLUTE";
          case 3:
            return "FETCH_RELATIVE";
          default:
            throw new Error("Value not recognized in enum FetchDirection");
        }
      }
    case "FunctionParameterMode":
      {
        switch (key) {
          case 0:
            return "FUNC_PARAM_IN";
          case 1:
            return "FUNC_PARAM_OUT";
          case 2:
            return "FUNC_PARAM_INOUT";
          case 3:
            return "FUNC_PARAM_VARIADIC";
          case 4:
            return "FUNC_PARAM_TABLE";
          case 5:
            return "FUNC_PARAM_DEFAULT";
          default:
            throw new Error("Value not recognized in enum FunctionParameterMode");
        }
      }
    case "TransactionStmtKind":
      {
        switch (key) {
          case 0:
            return "TRANS_STMT_BEGIN";
          case 1:
            return "TRANS_STMT_START";
          case 2:
            return "TRANS_STMT_COMMIT";
          case 3:
            return "TRANS_STMT_ROLLBACK";
          case 4:
            return "TRANS_STMT_SAVEPOINT";
          case 5:
            return "TRANS_STMT_RELEASE";
          case 6:
            return "TRANS_STMT_ROLLBACK_TO";
          case 7:
            return "TRANS_STMT_PREPARE";
          case 8:
            return "TRANS_STMT_COMMIT_PREPARED";
          case 9:
            return "TRANS_STMT_ROLLBACK_PREPARED";
          default:
            throw new Error("Value not recognized in enum TransactionStmtKind");
        }
      }
    case "ViewCheckOption":
      {
        switch (key) {
          case 0:
            return "NO_CHECK_OPTION";
          case 1:
            return "LOCAL_CHECK_OPTION";
          case 2:
            return "CASCADED_CHECK_OPTION";
          default:
            throw new Error("Value not recognized in enum ViewCheckOption");
        }
      }
    case "DiscardMode":
      {
        switch (key) {
          case 0:
            return "DISCARD_ALL";
          case 1:
            return "DISCARD_PLANS";
          case 2:
            return "DISCARD_SEQUENCES";
          case 3:
            return "DISCARD_TEMP";
          default:
            throw new Error("Value not recognized in enum DiscardMode");
        }
      }
    case "ReindexObjectType":
      {
        switch (key) {
          case 0:
            return "REINDEX_OBJECT_INDEX";
          case 1:
            return "REINDEX_OBJECT_TABLE";
          case 2:
            return "REINDEX_OBJECT_SCHEMA";
          case 3:
            return "REINDEX_OBJECT_SYSTEM";
          case 4:
            return "REINDEX_OBJECT_DATABASE";
          default:
            throw new Error("Value not recognized in enum ReindexObjectType");
        }
      }
    case "AlterTSConfigType":
      {
        switch (key) {
          case 0:
            return "ALTER_TSCONFIG_ADD_MAPPING";
          case 1:
            return "ALTER_TSCONFIG_ALTER_MAPPING_FOR_TOKEN";
          case 2:
            return "ALTER_TSCONFIG_REPLACE_DICT";
          case 3:
            return "ALTER_TSCONFIG_REPLACE_DICT_FOR_TOKEN";
          case 4:
            return "ALTER_TSCONFIG_DROP_MAPPING";
          default:
            throw new Error("Value not recognized in enum AlterTSConfigType");
        }
      }
    case "AlterSubscriptionType":
      {
        switch (key) {
          case 0:
            return "ALTER_SUBSCRIPTION_OPTIONS";
          case 1:
            return "ALTER_SUBSCRIPTION_CONNECTION";
          case 2:
            return "ALTER_SUBSCRIPTION_SET_PUBLICATION";
          case 3:
            return "ALTER_SUBSCRIPTION_ADD_PUBLICATION";
          case 4:
            return "ALTER_SUBSCRIPTION_DROP_PUBLICATION";
          case 5:
            return "ALTER_SUBSCRIPTION_REFRESH";
          case 6:
            return "ALTER_SUBSCRIPTION_ENABLED";
          default:
            throw new Error("Value not recognized in enum AlterSubscriptionType");
        }
      }
    case "OnCommitAction":
      {
        switch (key) {
          case 0:
            return "ONCOMMIT_NOOP";
          case 1:
            return "ONCOMMIT_PRESERVE_ROWS";
          case 2:
            return "ONCOMMIT_DELETE_ROWS";
          case 3:
            return "ONCOMMIT_DROP";
          default:
            throw new Error("Value not recognized in enum OnCommitAction");
        }
      }
    case "ParamKind":
      {
        switch (key) {
          case 0:
            return "PARAM_EXTERN";
          case 1:
            return "PARAM_EXEC";
          case 2:
            return "PARAM_SUBLINK";
          case 3:
            return "PARAM_MULTIEXPR";
          default:
            throw new Error("Value not recognized in enum ParamKind");
        }
      }
    case "CoercionContext":
      {
        switch (key) {
          case 0:
            return "COERCION_IMPLICIT";
          case 1:
            return "COERCION_ASSIGNMENT";
          case 2:
            return "COERCION_PLPGSQL";
          case 3:
            return "COERCION_EXPLICIT";
          default:
            throw new Error("Value not recognized in enum CoercionContext");
        }
      }
    case "CoercionForm":
      {
        switch (key) {
          case 0:
            return "COERCE_EXPLICIT_CALL";
          case 1:
            return "COERCE_EXPLICIT_CAST";
          case 2:
            return "COERCE_IMPLICIT_CAST";
          case 3:
            return "COERCE_SQL_SYNTAX";
          default:
            throw new Error("Value not recognized in enum CoercionForm");
        }
      }
    case "BoolExprType":
      {
        switch (key) {
          case 0:
            return "AND_EXPR";
          case 1:
            return "OR_EXPR";
          case 2:
            return "NOT_EXPR";
          default:
            throw new Error("Value not recognized in enum BoolExprType");
        }
      }
    case "SubLinkType":
      {
        switch (key) {
          case 0:
            return "EXISTS_SUBLINK";
          case 1:
            return "ALL_SUBLINK";
          case 2:
            return "ANY_SUBLINK";
          case 3:
            return "ROWCOMPARE_SUBLINK";
          case 4:
            return "EXPR_SUBLINK";
          case 5:
            return "MULTIEXPR_SUBLINK";
          case 6:
            return "ARRAY_SUBLINK";
          case 7:
            return "CTE_SUBLINK";
          default:
            throw new Error("Value not recognized in enum SubLinkType");
        }
      }
    case "RowCompareType":
      {
        switch (key) {
          case 0:
            return "ROWCOMPARE_LT";
          case 1:
            return "ROWCOMPARE_LE";
          case 2:
            return "ROWCOMPARE_EQ";
          case 3:
            return "ROWCOMPARE_GE";
          case 4:
            return "ROWCOMPARE_GT";
          case 5:
            return "ROWCOMPARE_NE";
          default:
            throw new Error("Value not recognized in enum RowCompareType");
        }
      }
    case "MinMaxOp":
      {
        switch (key) {
          case 0:
            return "IS_GREATEST";
          case 1:
            return "IS_LEAST";
          default:
            throw new Error("Value not recognized in enum MinMaxOp");
        }
      }
    case "SQLValueFunctionOp":
      {
        switch (key) {
          case 0:
            return "SVFOP_CURRENT_DATE";
          case 1:
            return "SVFOP_CURRENT_TIME";
          case 2:
            return "SVFOP_CURRENT_TIME_N";
          case 3:
            return "SVFOP_CURRENT_TIMESTAMP";
          case 4:
            return "SVFOP_CURRENT_TIMESTAMP_N";
          case 5:
            return "SVFOP_LOCALTIME";
          case 6:
            return "SVFOP_LOCALTIME_N";
          case 7:
            return "SVFOP_LOCALTIMESTAMP";
          case 8:
            return "SVFOP_LOCALTIMESTAMP_N";
          case 9:
            return "SVFOP_CURRENT_ROLE";
          case 10:
            return "SVFOP_CURRENT_USER";
          case 11:
            return "SVFOP_USER";
          case 12:
            return "SVFOP_SESSION_USER";
          case 13:
            return "SVFOP_CURRENT_CATALOG";
          case 14:
            return "SVFOP_CURRENT_SCHEMA";
          default:
            throw new Error("Value not recognized in enum SQLValueFunctionOp");
        }
      }
    case "XmlExprOp":
      {
        switch (key) {
          case 0:
            return "IS_XMLCONCAT";
          case 1:
            return "IS_XMLELEMENT";
          case 2:
            return "IS_XMLFOREST";
          case 3:
            return "IS_XMLPARSE";
          case 4:
            return "IS_XMLPI";
          case 5:
            return "IS_XMLROOT";
          case 6:
            return "IS_XMLSERIALIZE";
          case 7:
            return "IS_DOCUMENT";
          default:
            throw new Error("Value not recognized in enum XmlExprOp");
        }
      }
    case "XmlOptionType":
      {
        switch (key) {
          case 0:
            return "XMLOPTION_DOCUMENT";
          case 1:
            return "XMLOPTION_CONTENT";
          default:
            throw new Error("Value not recognized in enum XmlOptionType");
        }
      }
    case "NullTestType":
      {
        switch (key) {
          case 0:
            return "IS_NULL";
          case 1:
            return "IS_NOT_NULL";
          default:
            throw new Error("Value not recognized in enum NullTestType");
        }
      }
    case "BoolTestType":
      {
        switch (key) {
          case 0:
            return "IS_TRUE";
          case 1:
            return "IS_NOT_TRUE";
          case 2:
            return "IS_FALSE";
          case 3:
            return "IS_NOT_FALSE";
          case 4:
            return "IS_UNKNOWN";
          case 5:
            return "IS_NOT_UNKNOWN";
          default:
            throw new Error("Value not recognized in enum BoolTestType");
        }
      }
    case "CmdType":
      {
        switch (key) {
          case 0:
            return "CMD_UNKNOWN";
          case 1:
            return "CMD_SELECT";
          case 2:
            return "CMD_UPDATE";
          case 3:
            return "CMD_INSERT";
          case 4:
            return "CMD_DELETE";
          case 5:
            return "CMD_UTILITY";
          case 6:
            return "CMD_NOTHING";
          default:
            throw new Error("Value not recognized in enum CmdType");
        }
      }
    case "JoinType":
      {
        switch (key) {
          case 0:
            return "JOIN_INNER";
          case 1:
            return "JOIN_LEFT";
          case 2:
            return "JOIN_FULL";
          case 3:
            return "JOIN_RIGHT";
          case 4:
            return "JOIN_SEMI";
          case 5:
            return "JOIN_ANTI";
          case 6:
            return "JOIN_UNIQUE_OUTER";
          case 7:
            return "JOIN_UNIQUE_INNER";
          default:
            throw new Error("Value not recognized in enum JoinType");
        }
      }
    case "AggStrategy":
      {
        switch (key) {
          case 0:
            return "AGG_PLAIN";
          case 1:
            return "AGG_SORTED";
          case 2:
            return "AGG_HASHED";
          case 3:
            return "AGG_MIXED";
          default:
            throw new Error("Value not recognized in enum AggStrategy");
        }
      }
    case "AggSplit":
      {
        switch (key) {
          case 0:
            return "AGGSPLIT_SIMPLE";
          case 1:
            return "AGGSPLIT_INITIAL_SERIAL";
          case 2:
            return "AGGSPLIT_FINAL_DESERIAL";
          default:
            throw new Error("Value not recognized in enum AggSplit");
        }
      }
    case "SetOpCmd":
      {
        switch (key) {
          case 0:
            return "SETOPCMD_INTERSECT";
          case 1:
            return "SETOPCMD_INTERSECT_ALL";
          case 2:
            return "SETOPCMD_EXCEPT";
          case 3:
            return "SETOPCMD_EXCEPT_ALL";
          default:
            throw new Error("Value not recognized in enum SetOpCmd");
        }
      }
    case "SetOpStrategy":
      {
        switch (key) {
          case 0:
            return "SETOP_SORTED";
          case 1:
            return "SETOP_HASHED";
          default:
            throw new Error("Value not recognized in enum SetOpStrategy");
        }
      }
    case "OnConflictAction":
      {
        switch (key) {
          case 0:
            return "ONCONFLICT_NONE";
          case 1:
            return "ONCONFLICT_NOTHING";
          case 2:
            return "ONCONFLICT_UPDATE";
          default:
            throw new Error("Value not recognized in enum OnConflictAction");
        }
      }
    case "LimitOption":
      {
        switch (key) {
          case 0:
            return "LIMIT_OPTION_DEFAULT";
          case 1:
            return "LIMIT_OPTION_COUNT";
          case 2:
            return "LIMIT_OPTION_WITH_TIES";
          default:
            throw new Error("Value not recognized in enum LimitOption");
        }
      }
    case "LockClauseStrength":
      {
        switch (key) {
          case 0:
            return "LCS_NONE";
          case 1:
            return "LCS_FORKEYSHARE";
          case 2:
            return "LCS_FORSHARE";
          case 3:
            return "LCS_FORNOKEYUPDATE";
          case 4:
            return "LCS_FORUPDATE";
          default:
            throw new Error("Value not recognized in enum LockClauseStrength");
        }
      }
    case "LockWaitPolicy":
      {
        switch (key) {
          case 0:
            return "LockWaitBlock";
          case 1:
            return "LockWaitSkip";
          case 2:
            return "LockWaitError";
          default:
            throw new Error("Value not recognized in enum LockWaitPolicy");
        }
      }
    case "LockTupleMode":
      {
        switch (key) {
          case 0:
            return "LockTupleKeyShare";
          case 1:
            return "LockTupleShare";
          case 2:
            return "LockTupleNoKeyExclusive";
          case 3:
            return "LockTupleExclusive";
          default:
            throw new Error("Value not recognized in enum LockTupleMode");
        }
      }
    case "KeywordKind":
      {
        switch (key) {
          case 0:
            return "NO_KEYWORD";
          case 1:
            return "UNRESERVED_KEYWORD";
          case 2:
            return "COL_NAME_KEYWORD";
          case 3:
            return "TYPE_FUNC_NAME_KEYWORD";
          case 4:
            return "RESERVED_KEYWORD";
          default:
            throw new Error("Value not recognized in enum KeywordKind");
        }
      }
    case "Token":
      {
        switch (key) {
          case 0:
            return "NUL";
          case 37:
            return "ASCII_37";
          case 40:
            return "ASCII_40";
          case 41:
            return "ASCII_41";
          case 42:
            return "ASCII_42";
          case 43:
            return "ASCII_43";
          case 44:
            return "ASCII_44";
          case 45:
            return "ASCII_45";
          case 46:
            return "ASCII_46";
          case 47:
            return "ASCII_47";
          case 58:
            return "ASCII_58";
          case 59:
            return "ASCII_59";
          case 60:
            return "ASCII_60";
          case 61:
            return "ASCII_61";
          case 62:
            return "ASCII_62";
          case 63:
            return "ASCII_63";
          case 91:
            return "ASCII_91";
          case 92:
            return "ASCII_92";
          case 93:
            return "ASCII_93";
          case 94:
            return "ASCII_94";
          case 258:
            return "IDENT";
          case 259:
            return "UIDENT";
          case 260:
            return "FCONST";
          case 261:
            return "SCONST";
          case 262:
            return "USCONST";
          case 263:
            return "BCONST";
          case 264:
            return "XCONST";
          case 265:
            return "Op";
          case 266:
            return "ICONST";
          case 267:
            return "PARAM";
          case 268:
            return "TYPECAST";
          case 269:
            return "DOT_DOT";
          case 270:
            return "COLON_EQUALS";
          case 271:
            return "EQUALS_GREATER";
          case 272:
            return "LESS_EQUALS";
          case 273:
            return "GREATER_EQUALS";
          case 274:
            return "NOT_EQUALS";
          case 275:
            return "SQL_COMMENT";
          case 276:
            return "C_COMMENT";
          case 277:
            return "ABORT_P";
          case 278:
            return "ABSOLUTE_P";
          case 279:
            return "ACCESS";
          case 280:
            return "ACTION";
          case 281:
            return "ADD_P";
          case 282:
            return "ADMIN";
          case 283:
            return "AFTER";
          case 284:
            return "AGGREGATE";
          case 285:
            return "ALL";
          case 286:
            return "ALSO";
          case 287:
            return "ALTER";
          case 288:
            return "ALWAYS";
          case 289:
            return "ANALYSE";
          case 290:
            return "ANALYZE";
          case 291:
            return "AND";
          case 292:
            return "ANY";
          case 293:
            return "ARRAY";
          case 294:
            return "AS";
          case 295:
            return "ASC";
          case 296:
            return "ASENSITIVE";
          case 297:
            return "ASSERTION";
          case 298:
            return "ASSIGNMENT";
          case 299:
            return "ASYMMETRIC";
          case 300:
            return "ATOMIC";
          case 301:
            return "AT";
          case 302:
            return "ATTACH";
          case 303:
            return "ATTRIBUTE";
          case 304:
            return "AUTHORIZATION";
          case 305:
            return "BACKWARD";
          case 306:
            return "BEFORE";
          case 307:
            return "BEGIN_P";
          case 308:
            return "BETWEEN";
          case 309:
            return "BIGINT";
          case 310:
            return "BINARY";
          case 311:
            return "BIT";
          case 312:
            return "BOOLEAN_P";
          case 313:
            return "BOTH";
          case 314:
            return "BREADTH";
          case 315:
            return "BY";
          case 316:
            return "CACHE";
          case 317:
            return "CALL";
          case 318:
            return "CALLED";
          case 319:
            return "CASCADE";
          case 320:
            return "CASCADED";
          case 321:
            return "CASE";
          case 322:
            return "CAST";
          case 323:
            return "CATALOG_P";
          case 324:
            return "CHAIN";
          case 325:
            return "CHAR_P";
          case 326:
            return "CHARACTER";
          case 327:
            return "CHARACTERISTICS";
          case 328:
            return "CHECK";
          case 329:
            return "CHECKPOINT";
          case 330:
            return "CLASS";
          case 331:
            return "CLOSE";
          case 332:
            return "CLUSTER";
          case 333:
            return "COALESCE";
          case 334:
            return "COLLATE";
          case 335:
            return "COLLATION";
          case 336:
            return "COLUMN";
          case 337:
            return "COLUMNS";
          case 338:
            return "COMMENT";
          case 339:
            return "COMMENTS";
          case 340:
            return "COMMIT";
          case 341:
            return "COMMITTED";
          case 342:
            return "COMPRESSION";
          case 343:
            return "CONCURRENTLY";
          case 344:
            return "CONFIGURATION";
          case 345:
            return "CONFLICT";
          case 346:
            return "CONNECTION";
          case 347:
            return "CONSTRAINT";
          case 348:
            return "CONSTRAINTS";
          case 349:
            return "CONTENT_P";
          case 350:
            return "CONTINUE_P";
          case 351:
            return "CONVERSION_P";
          case 352:
            return "COPY";
          case 353:
            return "COST";
          case 354:
            return "CREATE";
          case 355:
            return "CROSS";
          case 356:
            return "CSV";
          case 357:
            return "CUBE";
          case 358:
            return "CURRENT_P";
          case 359:
            return "CURRENT_CATALOG";
          case 360:
            return "CURRENT_DATE";
          case 361:
            return "CURRENT_ROLE";
          case 362:
            return "CURRENT_SCHEMA";
          case 363:
            return "CURRENT_TIME";
          case 364:
            return "CURRENT_TIMESTAMP";
          case 365:
            return "CURRENT_USER";
          case 366:
            return "CURSOR";
          case 367:
            return "CYCLE";
          case 368:
            return "DATA_P";
          case 369:
            return "DATABASE";
          case 370:
            return "DAY_P";
          case 371:
            return "DEALLOCATE";
          case 372:
            return "DEC";
          case 373:
            return "DECIMAL_P";
          case 374:
            return "DECLARE";
          case 375:
            return "DEFAULT";
          case 376:
            return "DEFAULTS";
          case 377:
            return "DEFERRABLE";
          case 378:
            return "DEFERRED";
          case 379:
            return "DEFINER";
          case 380:
            return "DELETE_P";
          case 381:
            return "DELIMITER";
          case 382:
            return "DELIMITERS";
          case 383:
            return "DEPENDS";
          case 384:
            return "DEPTH";
          case 385:
            return "DESC";
          case 386:
            return "DETACH";
          case 387:
            return "DICTIONARY";
          case 388:
            return "DISABLE_P";
          case 389:
            return "DISCARD";
          case 390:
            return "DISTINCT";
          case 391:
            return "DO";
          case 392:
            return "DOCUMENT_P";
          case 393:
            return "DOMAIN_P";
          case 394:
            return "DOUBLE_P";
          case 395:
            return "DROP";
          case 396:
            return "EACH";
          case 397:
            return "ELSE";
          case 398:
            return "ENABLE_P";
          case 399:
            return "ENCODING";
          case 400:
            return "ENCRYPTED";
          case 401:
            return "END_P";
          case 402:
            return "ENUM_P";
          case 403:
            return "ESCAPE";
          case 404:
            return "EVENT";
          case 405:
            return "EXCEPT";
          case 406:
            return "EXCLUDE";
          case 407:
            return "EXCLUDING";
          case 408:
            return "EXCLUSIVE";
          case 409:
            return "EXECUTE";
          case 410:
            return "EXISTS";
          case 411:
            return "EXPLAIN";
          case 412:
            return "EXPRESSION";
          case 413:
            return "EXTENSION";
          case 414:
            return "EXTERNAL";
          case 415:
            return "EXTRACT";
          case 416:
            return "FALSE_P";
          case 417:
            return "FAMILY";
          case 418:
            return "FETCH";
          case 419:
            return "FILTER";
          case 420:
            return "FINALIZE";
          case 421:
            return "FIRST_P";
          case 422:
            return "FLOAT_P";
          case 423:
            return "FOLLOWING";
          case 424:
            return "FOR";
          case 425:
            return "FORCE";
          case 426:
            return "FOREIGN";
          case 427:
            return "FORWARD";
          case 428:
            return "FREEZE";
          case 429:
            return "FROM";
          case 430:
            return "FULL";
          case 431:
            return "FUNCTION";
          case 432:
            return "FUNCTIONS";
          case 433:
            return "GENERATED";
          case 434:
            return "GLOBAL";
          case 435:
            return "GRANT";
          case 436:
            return "GRANTED";
          case 437:
            return "GREATEST";
          case 438:
            return "GROUP_P";
          case 439:
            return "GROUPING";
          case 440:
            return "GROUPS";
          case 441:
            return "HANDLER";
          case 442:
            return "HAVING";
          case 443:
            return "HEADER_P";
          case 444:
            return "HOLD";
          case 445:
            return "HOUR_P";
          case 446:
            return "IDENTITY_P";
          case 447:
            return "IF_P";
          case 448:
            return "ILIKE";
          case 449:
            return "IMMEDIATE";
          case 450:
            return "IMMUTABLE";
          case 451:
            return "IMPLICIT_P";
          case 452:
            return "IMPORT_P";
          case 453:
            return "IN_P";
          case 454:
            return "INCLUDE";
          case 455:
            return "INCLUDING";
          case 456:
            return "INCREMENT";
          case 457:
            return "INDEX";
          case 458:
            return "INDEXES";
          case 459:
            return "INHERIT";
          case 460:
            return "INHERITS";
          case 461:
            return "INITIALLY";
          case 462:
            return "INLINE_P";
          case 463:
            return "INNER_P";
          case 464:
            return "INOUT";
          case 465:
            return "INPUT_P";
          case 466:
            return "INSENSITIVE";
          case 467:
            return "INSERT";
          case 468:
            return "INSTEAD";
          case 469:
            return "INT_P";
          case 470:
            return "INTEGER";
          case 471:
            return "INTERSECT";
          case 472:
            return "INTERVAL";
          case 473:
            return "INTO";
          case 474:
            return "INVOKER";
          case 475:
            return "IS";
          case 476:
            return "ISNULL";
          case 477:
            return "ISOLATION";
          case 478:
            return "JOIN";
          case 479:
            return "KEY";
          case 480:
            return "LABEL";
          case 481:
            return "LANGUAGE";
          case 482:
            return "LARGE_P";
          case 483:
            return "LAST_P";
          case 484:
            return "LATERAL_P";
          case 485:
            return "LEADING";
          case 486:
            return "LEAKPROOF";
          case 487:
            return "LEAST";
          case 488:
            return "LEFT";
          case 489:
            return "LEVEL";
          case 490:
            return "LIKE";
          case 491:
            return "LIMIT";
          case 492:
            return "LISTEN";
          case 493:
            return "LOAD";
          case 494:
            return "LOCAL";
          case 495:
            return "LOCALTIME";
          case 496:
            return "LOCALTIMESTAMP";
          case 497:
            return "LOCATION";
          case 498:
            return "LOCK_P";
          case 499:
            return "LOCKED";
          case 500:
            return "LOGGED";
          case 501:
            return "MAPPING";
          case 502:
            return "MATCH";
          case 503:
            return "MATERIALIZED";
          case 504:
            return "MAXVALUE";
          case 505:
            return "METHOD";
          case 506:
            return "MINUTE_P";
          case 507:
            return "MINVALUE";
          case 508:
            return "MODE";
          case 509:
            return "MONTH_P";
          case 510:
            return "MOVE";
          case 511:
            return "NAME_P";
          case 512:
            return "NAMES";
          case 513:
            return "NATIONAL";
          case 514:
            return "NATURAL";
          case 515:
            return "NCHAR";
          case 516:
            return "NEW";
          case 517:
            return "NEXT";
          case 518:
            return "NFC";
          case 519:
            return "NFD";
          case 520:
            return "NFKC";
          case 521:
            return "NFKD";
          case 522:
            return "NO";
          case 523:
            return "NONE";
          case 524:
            return "NORMALIZE";
          case 525:
            return "NORMALIZED";
          case 526:
            return "NOT";
          case 527:
            return "NOTHING";
          case 528:
            return "NOTIFY";
          case 529:
            return "NOTNULL";
          case 530:
            return "NOWAIT";
          case 531:
            return "NULL_P";
          case 532:
            return "NULLIF";
          case 533:
            return "NULLS_P";
          case 534:
            return "NUMERIC";
          case 535:
            return "OBJECT_P";
          case 536:
            return "OF";
          case 537:
            return "OFF";
          case 538:
            return "OFFSET";
          case 539:
            return "OIDS";
          case 540:
            return "OLD";
          case 541:
            return "ON";
          case 542:
            return "ONLY";
          case 543:
            return "OPERATOR";
          case 544:
            return "OPTION";
          case 545:
            return "OPTIONS";
          case 546:
            return "OR";
          case 547:
            return "ORDER";
          case 548:
            return "ORDINALITY";
          case 549:
            return "OTHERS";
          case 550:
            return "OUT_P";
          case 551:
            return "OUTER_P";
          case 552:
            return "OVER";
          case 553:
            return "OVERLAPS";
          case 554:
            return "OVERLAY";
          case 555:
            return "OVERRIDING";
          case 556:
            return "OWNED";
          case 557:
            return "OWNER";
          case 558:
            return "PARALLEL";
          case 559:
            return "PARSER";
          case 560:
            return "PARTIAL";
          case 561:
            return "PARTITION";
          case 562:
            return "PASSING";
          case 563:
            return "PASSWORD";
          case 564:
            return "PLACING";
          case 565:
            return "PLANS";
          case 566:
            return "POLICY";
          case 567:
            return "POSITION";
          case 568:
            return "PRECEDING";
          case 569:
            return "PRECISION";
          case 570:
            return "PRESERVE";
          case 571:
            return "PREPARE";
          case 572:
            return "PREPARED";
          case 573:
            return "PRIMARY";
          case 574:
            return "PRIOR";
          case 575:
            return "PRIVILEGES";
          case 576:
            return "PROCEDURAL";
          case 577:
            return "PROCEDURE";
          case 578:
            return "PROCEDURES";
          case 579:
            return "PROGRAM";
          case 580:
            return "PUBLICATION";
          case 581:
            return "QUOTE";
          case 582:
            return "RANGE";
          case 583:
            return "READ";
          case 584:
            return "REAL";
          case 585:
            return "REASSIGN";
          case 586:
            return "RECHECK";
          case 587:
            return "RECURSIVE";
          case 588:
            return "REF_P";
          case 589:
            return "REFERENCES";
          case 590:
            return "REFERENCING";
          case 591:
            return "REFRESH";
          case 592:
            return "REINDEX";
          case 593:
            return "RELATIVE_P";
          case 594:
            return "RELEASE";
          case 595:
            return "RENAME";
          case 596:
            return "REPEATABLE";
          case 597:
            return "REPLACE";
          case 598:
            return "REPLICA";
          case 599:
            return "RESET";
          case 600:
            return "RESTART";
          case 601:
            return "RESTRICT";
          case 602:
            return "RETURN";
          case 603:
            return "RETURNING";
          case 604:
            return "RETURNS";
          case 605:
            return "REVOKE";
          case 606:
            return "RIGHT";
          case 607:
            return "ROLE";
          case 608:
            return "ROLLBACK";
          case 609:
            return "ROLLUP";
          case 610:
            return "ROUTINE";
          case 611:
            return "ROUTINES";
          case 612:
            return "ROW";
          case 613:
            return "ROWS";
          case 614:
            return "RULE";
          case 615:
            return "SAVEPOINT";
          case 616:
            return "SCHEMA";
          case 617:
            return "SCHEMAS";
          case 618:
            return "SCROLL";
          case 619:
            return "SEARCH";
          case 620:
            return "SECOND_P";
          case 621:
            return "SECURITY";
          case 622:
            return "SELECT";
          case 623:
            return "SEQUENCE";
          case 624:
            return "SEQUENCES";
          case 625:
            return "SERIALIZABLE";
          case 626:
            return "SERVER";
          case 627:
            return "SESSION";
          case 628:
            return "SESSION_USER";
          case 629:
            return "SET";
          case 630:
            return "SETS";
          case 631:
            return "SETOF";
          case 632:
            return "SHARE";
          case 633:
            return "SHOW";
          case 634:
            return "SIMILAR";
          case 635:
            return "SIMPLE";
          case 636:
            return "SKIP";
          case 637:
            return "SMALLINT";
          case 638:
            return "SNAPSHOT";
          case 639:
            return "SOME";
          case 640:
            return "SQL_P";
          case 641:
            return "STABLE";
          case 642:
            return "STANDALONE_P";
          case 643:
            return "START";
          case 644:
            return "STATEMENT";
          case 645:
            return "STATISTICS";
          case 646:
            return "STDIN";
          case 647:
            return "STDOUT";
          case 648:
            return "STORAGE";
          case 649:
            return "STORED";
          case 650:
            return "STRICT_P";
          case 651:
            return "STRIP_P";
          case 652:
            return "SUBSCRIPTION";
          case 653:
            return "SUBSTRING";
          case 654:
            return "SUPPORT";
          case 655:
            return "SYMMETRIC";
          case 656:
            return "SYSID";
          case 657:
            return "SYSTEM_P";
          case 658:
            return "TABLE";
          case 659:
            return "TABLES";
          case 660:
            return "TABLESAMPLE";
          case 661:
            return "TABLESPACE";
          case 662:
            return "TEMP";
          case 663:
            return "TEMPLATE";
          case 664:
            return "TEMPORARY";
          case 665:
            return "TEXT_P";
          case 666:
            return "THEN";
          case 667:
            return "TIES";
          case 668:
            return "TIME";
          case 669:
            return "TIMESTAMP";
          case 670:
            return "TO";
          case 671:
            return "TRAILING";
          case 672:
            return "TRANSACTION";
          case 673:
            return "TRANSFORM";
          case 674:
            return "TREAT";
          case 675:
            return "TRIGGER";
          case 676:
            return "TRIM";
          case 677:
            return "TRUE_P";
          case 678:
            return "TRUNCATE";
          case 679:
            return "TRUSTED";
          case 680:
            return "TYPE_P";
          case 681:
            return "TYPES_P";
          case 682:
            return "UESCAPE";
          case 683:
            return "UNBOUNDED";
          case 684:
            return "UNCOMMITTED";
          case 685:
            return "UNENCRYPTED";
          case 686:
            return "UNION";
          case 687:
            return "UNIQUE";
          case 688:
            return "UNKNOWN";
          case 689:
            return "UNLISTEN";
          case 690:
            return "UNLOGGED";
          case 691:
            return "UNTIL";
          case 692:
            return "UPDATE";
          case 693:
            return "USER";
          case 694:
            return "USING";
          case 695:
            return "VACUUM";
          case 696:
            return "VALID";
          case 697:
            return "VALIDATE";
          case 698:
            return "VALIDATOR";
          case 699:
            return "VALUE_P";
          case 700:
            return "VALUES";
          case 701:
            return "VARCHAR";
          case 702:
            return "VARIADIC";
          case 703:
            return "VARYING";
          case 704:
            return "VERBOSE";
          case 705:
            return "VERSION_P";
          case 706:
            return "VIEW";
          case 707:
            return "VIEWS";
          case 708:
            return "VOLATILE";
          case 709:
            return "WHEN";
          case 710:
            return "WHERE";
          case 711:
            return "WHITESPACE_P";
          case 712:
            return "WINDOW";
          case 713:
            return "WITH";
          case 714:
            return "WITHIN";
          case 715:
            return "WITHOUT";
          case 716:
            return "WORK";
          case 717:
            return "WRAPPER";
          case 718:
            return "WRITE";
          case 719:
            return "XML_P";
          case 720:
            return "XMLATTRIBUTES";
          case 721:
            return "XMLCONCAT";
          case 722:
            return "XMLELEMENT";
          case 723:
            return "XMLEXISTS";
          case 724:
            return "XMLFOREST";
          case 725:
            return "XMLNAMESPACES";
          case 726:
            return "XMLPARSE";
          case 727:
            return "XMLPI";
          case 728:
            return "XMLROOT";
          case 729:
            return "XMLSERIALIZE";
          case 730:
            return "XMLTABLE";
          case 731:
            return "YEAR_P";
          case 732:
            return "YES_P";
          case 733:
            return "ZONE";
          case 734:
            return "NOT_LA";
          case 735:
            return "NULLS_LA";
          case 736:
            return "WITH_LA";
          case 737:
            return "MODE_TYPE_NAME";
          case 738:
            return "MODE_PLPGSQL_EXPR";
          case 739:
            return "MODE_PLPGSQL_ASSIGN1";
          case 740:
            return "MODE_PLPGSQL_ASSIGN2";
          case 741:
            return "MODE_PLPGSQL_ASSIGN3";
          case 742:
            return "UMINUS";
          default:
            throw new Error("Value not recognized in enum Token");
        }
      }
    default:
      throw new Error("Enum type not recognized");
  }
};