// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`runtime-schema custom filename json 1`] = `
[
  {
    "code": "[
  {
    "name": "A_ArrayExpr",
    "wrapped": true,
    "fields": [
      {
        "name": "elements",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "A_Const",
    "wrapped": true,
    "fields": [
      {
        "name": "boolval",
        "type": "Boolean",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "bsval",
        "type": "BitString",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "fval",
        "type": "Float",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "isnull",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "ival",
        "type": "Integer",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "sval",
        "type": "String",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "A_Expr",
    "wrapped": true,
    "fields": [
      {
        "name": "kind",
        "type": "A_Expr_Kind",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "lexpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "name",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "rexpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "A_Indices",
    "wrapped": true,
    "fields": [
      {
        "name": "is_slice",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "lidx",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "uidx",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "A_Indirection",
    "wrapped": true,
    "fields": [
      {
        "name": "arg",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "indirection",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "A_Star",
    "wrapped": true,
    "fields": []
  },
  {
    "name": "AccessPriv",
    "wrapped": true,
    "fields": [
      {
        "name": "cols",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "priv_name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "Aggref",
    "wrapped": true,
    "fields": [
      {
        "name": "aggargtypes",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "aggcollid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "aggdirectargs",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "aggdistinct",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "aggfilter",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "aggfnoid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "aggkind",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "agglevelsup",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "aggno",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "aggorder",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "aggsplit",
        "type": "AggSplit",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "aggstar",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "aggtransno",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "aggtype",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "aggvariadic",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "args",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "inputcollid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "Alias",
    "wrapped": true,
    "fields": [
      {
        "name": "aliasname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "colnames",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterCollationStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "collname",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterDatabaseRefreshCollStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "dbname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterDatabaseSetStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "dbname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "setstmt",
        "type": "VariableSetStmt",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterDatabaseStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "dbname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterDefaultPrivilegesStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "action",
        "type": "GrantStmt",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterDomainStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "behavior",
        "type": "DropBehavior",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "def",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "missing_ok",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "subtype",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "typeName",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterEnumStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "newVal",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "newValIsAfter",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "newValNeighbor",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "oldVal",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "skipIfNewValExists",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "typeName",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterEventTrigStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "tgenabled",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "trigname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterExtensionContentsStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "action",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "extname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "object",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "objtype",
        "type": "ObjectType",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterExtensionStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "extname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterFdwStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "fdwname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "func_options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterForeignServerStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "has_version",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "servername",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "version",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterFunctionStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "actions",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "func",
        "type": "ObjectWithArgs",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "objtype",
        "type": "ObjectType",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "AlternativeSubPlan",
    "wrapped": true,
    "fields": [
      {
        "name": "subplans",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterObjectDependsStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "extname",
        "type": "String",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "object",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "objectType",
        "type": "ObjectType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "relation",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "remove",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterObjectSchemaStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "missing_ok",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "newschema",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "object",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "objectType",
        "type": "ObjectType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "relation",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterOperatorStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "opername",
        "type": "ObjectWithArgs",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterOpFamilyStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "amname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "isDrop",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "items",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "opfamilyname",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterOwnerStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "newowner",
        "type": "RoleSpec",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "object",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "objectType",
        "type": "ObjectType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "relation",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterPolicyStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "policy_name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "qual",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "roles",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "table",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "with_check",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterPublicationStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "action",
        "type": "AlterPublicationAction",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "for_all_tables",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "pubname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "pubobjects",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterRoleSetStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "database",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "role",
        "type": "RoleSpec",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "setstmt",
        "type": "VariableSetStmt",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterRoleStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "action",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "role",
        "type": "RoleSpec",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterSeqStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "for_identity",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "missing_ok",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "sequence",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterStatsStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "defnames",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "missing_ok",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "stxstattarget",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterSubscriptionStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "conninfo",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "kind",
        "type": "AlterSubscriptionType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "publication",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "subname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterSystemStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "setstmt",
        "type": "VariableSetStmt",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterTableCmd",
    "wrapped": true,
    "fields": [
      {
        "name": "behavior",
        "type": "DropBehavior",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "def",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "missing_ok",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "newowner",
        "type": "RoleSpec",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "num",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "recurse",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "subtype",
        "type": "AlterTableType",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterTableMoveAllStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "new_tablespacename",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "nowait",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "objtype",
        "type": "ObjectType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "orig_tablespacename",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "roles",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterTableSpaceOptionsStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "isReset",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "tablespacename",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterTableStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "cmds",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "missing_ok",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "objtype",
        "type": "ObjectType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "relation",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterTSConfigurationStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "cfgname",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "dicts",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "kind",
        "type": "AlterTSConfigType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "missing_ok",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "override",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "replace",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "tokentype",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterTSDictionaryStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "dictname",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterTypeStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "typeName",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterUserMappingStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "servername",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "user",
        "type": "RoleSpec",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "ArrayCoerceExpr",
    "wrapped": true,
    "fields": [
      {
        "name": "arg",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "coerceformat",
        "type": "CoercionForm",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "elemexpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "resultcollid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "resulttype",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "resulttypmod",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "ArrayExpr",
    "wrapped": true,
    "fields": [
      {
        "name": "array_collid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "array_typeid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "element_typeid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "elements",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "multidims",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "BitString",
    "wrapped": true,
    "fields": [
      {
        "name": "bsval",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "Boolean",
    "wrapped": true,
    "fields": [
      {
        "name": "boolval",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "BooleanTest",
    "wrapped": true,
    "fields": [
      {
        "name": "arg",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "booltesttype",
        "type": "BoolTestType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "BoolExpr",
    "wrapped": true,
    "fields": [
      {
        "name": "args",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "boolop",
        "type": "BoolExprType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CallContext",
    "wrapped": true,
    "fields": [
      {
        "name": "atomic",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CallStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "funccall",
        "type": "FuncCall",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "funcexpr",
        "type": "FuncExpr",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "outargs",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "CaseExpr",
    "wrapped": true,
    "fields": [
      {
        "name": "arg",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "args",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "casecollid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "casetype",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "defresult",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CaseTestExpr",
    "wrapped": true,
    "fields": [
      {
        "name": "collation",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "typeId",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "typeMod",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CaseWhen",
    "wrapped": true,
    "fields": [
      {
        "name": "expr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "result",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CheckPointStmt",
    "wrapped": true,
    "fields": []
  },
  {
    "name": "ClosePortalStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "portalname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "ClusterStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "indexname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "params",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "relation",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CoalesceExpr",
    "wrapped": true,
    "fields": [
      {
        "name": "args",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "coalescecollid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "coalescetype",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CoerceToDomain",
    "wrapped": true,
    "fields": [
      {
        "name": "arg",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "coercionformat",
        "type": "CoercionForm",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "resultcollid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "resulttype",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "resulttypmod",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CoerceToDomainValue",
    "wrapped": true,
    "fields": [
      {
        "name": "collation",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "typeId",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "typeMod",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CoerceViaIO",
    "wrapped": true,
    "fields": [
      {
        "name": "arg",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "coerceformat",
        "type": "CoercionForm",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "resultcollid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "resulttype",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CollateClause",
    "wrapped": true,
    "fields": [
      {
        "name": "arg",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "collname",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CollateExpr",
    "wrapped": true,
    "fields": [
      {
        "name": "arg",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "collOid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "ColumnDef",
    "wrapped": true,
    "fields": [
      {
        "name": "collClause",
        "type": "CollateClause",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "collOid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "colname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "compression",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "constraints",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "cooked_default",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "fdwoptions",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "generated",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "identity",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "identitySequence",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "inhcount",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "is_from_type",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "is_local",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "is_not_null",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "raw_default",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "storage",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "storage_name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "typeName",
        "type": "TypeName",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "ColumnRef",
    "wrapped": true,
    "fields": [
      {
        "name": "fields",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CommentStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "comment",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "object",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "objtype",
        "type": "ObjectType",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CommonTableExpr",
    "wrapped": true,
    "fields": [
      {
        "name": "aliascolnames",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "ctecolcollations",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "ctecolnames",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "ctecoltypes",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "ctecoltypmods",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "ctematerialized",
        "type": "CTEMaterialize",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "ctename",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "ctequery",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "cterecursive",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "cterefcount",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "cycle_clause",
        "type": "CTECycleClause",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "search_clause",
        "type": "CTESearchClause",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CompositeTypeStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "coldeflist",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "typevar",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "Constraint",
    "wrapped": true,
    "fields": [
      {
        "name": "access_method",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "conname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "contype",
        "type": "ConstrType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "cooked_expr",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "deferrable",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "exclusions",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "fk_attrs",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "fk_del_action",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "fk_del_set_cols",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "fk_matchtype",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "fk_upd_action",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "generated_when",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "including",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "indexname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "indexspace",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "initdeferred",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "initially_valid",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "is_no_inherit",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "keys",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "nulls_not_distinct",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "old_conpfeqop",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "old_pktable_oid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "pk_attrs",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "pktable",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "raw_expr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "reset_default_tblspc",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "skip_validation",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "where_clause",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "ConstraintsSetStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "constraints",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "deferred",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "ConvertRowtypeExpr",
    "wrapped": true,
    "fields": [
      {
        "name": "arg",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "convertformat",
        "type": "CoercionForm",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "resulttype",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CopyStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "attlist",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "filename",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "is_from",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "is_program",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "query",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "relation",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "whereClause",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CreateAmStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "amname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "amtype",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "handler_name",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "CreateCastStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "context",
        "type": "CoercionContext",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "func",
        "type": "ObjectWithArgs",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "inout",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "sourcetype",
        "type": "TypeName",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "targettype",
        "type": "TypeName",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CreateConversionStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "conversion_name",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "def",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "for_encoding_name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "func_name",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "to_encoding_name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CreatedbStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "dbname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "CreateDomainStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "collClause",
        "type": "CollateClause",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "constraints",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "domainname",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "typeName",
        "type": "TypeName",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CreateEnumStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "typeName",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "vals",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "CreateEventTrigStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "eventname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "funcname",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "trigname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "whenclause",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "CreateExtensionStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "extname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "if_not_exists",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "CreateFdwStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "fdwname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "func_options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "CreateForeignServerStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "fdwname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "if_not_exists",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "servername",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "servertype",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "version",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CreateForeignTableStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "base",
        "type": "CreateStmt",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "servername",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CreateFunctionStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "funcname",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "is_procedure",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "parameters",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "replace",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "returnType",
        "type": "TypeName",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "sql_body",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CreateOpClassItem",
    "wrapped": true,
    "fields": [
      {
        "name": "class_args",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "itemtype",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "name",
        "type": "ObjectWithArgs",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "number",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "order_family",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "storedtype",
        "type": "TypeName",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CreateOpClassStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "amname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "datatype",
        "type": "TypeName",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "isDefault",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "items",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "opclassname",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "opfamilyname",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "CreateOpFamilyStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "amname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "opfamilyname",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "CreatePLangStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "plhandler",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "plinline",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "plname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "pltrusted",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "plvalidator",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "replace",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CreatePolicyStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "cmd_name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "permissive",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "policy_name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "qual",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "roles",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "table",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "with_check",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CreatePublicationStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "for_all_tables",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "pubname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "pubobjects",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "CreateRangeStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "params",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "typeName",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "CreateRoleStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "role",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "stmt_type",
        "type": "RoleStmtType",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CreateSchemaStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "authrole",
        "type": "RoleSpec",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "if_not_exists",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "schemaElts",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "schemaname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CreateSeqStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "for_identity",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "if_not_exists",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "ownerId",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "sequence",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CreateStatsStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "defnames",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "exprs",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "if_not_exists",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "relations",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "stat_types",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "stxcomment",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "transformed",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CreateStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "accessMethod",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "constraints",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "if_not_exists",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "inhRelations",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "ofTypename",
        "type": "TypeName",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "oncommit",
        "type": "OnCommitAction",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "partbound",
        "type": "PartitionBoundSpec",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "partspec",
        "type": "PartitionSpec",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "relation",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "tableElts",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "tablespacename",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CreateSubscriptionStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "conninfo",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "publication",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "subname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CreateTableAsStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "if_not_exists",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "into",
        "type": "IntoClause",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "is_select_into",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "objtype",
        "type": "ObjectType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "query",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CreateTableSpaceStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "location",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "owner",
        "type": "RoleSpec",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "tablespacename",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CreateTransformStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "fromsql",
        "type": "ObjectWithArgs",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "lang",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "replace",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "tosql",
        "type": "ObjectWithArgs",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "type_name",
        "type": "TypeName",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CreateTrigStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "args",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "columns",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "constrrel",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "deferrable",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "events",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "funcname",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "initdeferred",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "isconstraint",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "relation",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "replace",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "row",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "timing",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "transitionRels",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "trigname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "whenClause",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CreateUserMappingStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "if_not_exists",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "servername",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "user",
        "type": "RoleSpec",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CTECycleClause",
    "wrapped": true,
    "fields": [
      {
        "name": "cycle_col_list",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "cycle_mark_collation",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "cycle_mark_column",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "cycle_mark_default",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "cycle_mark_neop",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "cycle_mark_type",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "cycle_mark_typmod",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "cycle_mark_value",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "cycle_path_column",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CTESearchClause",
    "wrapped": true,
    "fields": [
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "search_breadth_first",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "search_col_list",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "search_seq_column",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CurrentOfExpr",
    "wrapped": true,
    "fields": [
      {
        "name": "cursor_name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "cursor_param",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "cvarno",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "DeallocateStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "DeclareCursorStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "options",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "portalname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "query",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "DefElem",
    "wrapped": true,
    "fields": [
      {
        "name": "arg",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "defaction",
        "type": "DefElemAction",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "defname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "defnamespace",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "DefineStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "args",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "definition",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "defnames",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "if_not_exists",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "kind",
        "type": "ObjectType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "oldstyle",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "replace",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "DeleteStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "relation",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "returningList",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "usingClause",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "whereClause",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "withClause",
        "type": "WithClause",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "DiscardStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "target",
        "type": "DiscardMode",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "DistinctExpr",
    "wrapped": true,
    "fields": [
      {
        "name": "args",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "inputcollid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "opcollid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "opno",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "opresulttype",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "opretset",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "DoStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "args",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "DropdbStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "dbname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "missing_ok",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "DropOwnedStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "behavior",
        "type": "DropBehavior",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "roles",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "DropRoleStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "missing_ok",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "roles",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "DropStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "behavior",
        "type": "DropBehavior",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "concurrent",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "missing_ok",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "objects",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "removeType",
        "type": "ObjectType",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "DropSubscriptionStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "behavior",
        "type": "DropBehavior",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "missing_ok",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "subname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "DropTableSpaceStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "missing_ok",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "tablespacename",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "DropUserMappingStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "missing_ok",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "servername",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "user",
        "type": "RoleSpec",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "ExecuteStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "params",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "ExplainStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "query",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "FetchStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "direction",
        "type": "FetchDirection",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "howMany",
        "type": "int64",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "ismove",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "portalname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "FieldSelect",
    "wrapped": true,
    "fields": [
      {
        "name": "arg",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "fieldnum",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "resultcollid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "resulttype",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "resulttypmod",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "FieldStore",
    "wrapped": true,
    "fields": [
      {
        "name": "arg",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "fieldnums",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "newvals",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "resulttype",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "Float",
    "wrapped": true,
    "fields": [
      {
        "name": "fval",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "FromExpr",
    "wrapped": true,
    "fields": [
      {
        "name": "fromlist",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "quals",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "FuncCall",
    "wrapped": true,
    "fields": [
      {
        "name": "agg_distinct",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "agg_filter",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "agg_order",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "agg_star",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "agg_within_group",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "args",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "func_variadic",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "funcformat",
        "type": "CoercionForm",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "funcname",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "over",
        "type": "WindowDef",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "FuncExpr",
    "wrapped": true,
    "fields": [
      {
        "name": "args",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "funccollid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "funcformat",
        "type": "CoercionForm",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "funcid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "funcresulttype",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "funcretset",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "funcvariadic",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "inputcollid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "FunctionParameter",
    "wrapped": true,
    "fields": [
      {
        "name": "argType",
        "type": "TypeName",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "defexpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "mode",
        "type": "FunctionParameterMode",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "GrantRoleStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "behavior",
        "type": "DropBehavior",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "granted_roles",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "grantee_roles",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "grantor",
        "type": "RoleSpec",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "is_grant",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "opt",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "GrantStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "behavior",
        "type": "DropBehavior",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "grant_option",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "grantees",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "grantor",
        "type": "RoleSpec",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "is_grant",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "objects",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "objtype",
        "type": "ObjectType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "privileges",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "targtype",
        "type": "GrantTargetType",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "GroupingFunc",
    "wrapped": true,
    "fields": [
      {
        "name": "agglevelsup",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "args",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "refs",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "GroupingSet",
    "wrapped": true,
    "fields": [
      {
        "name": "content",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "kind",
        "type": "GroupingSetKind",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "ImportForeignSchemaStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "list_type",
        "type": "ImportForeignSchemaType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "local_schema",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "remote_schema",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "server_name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "table_list",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "IndexElem",
    "wrapped": true,
    "fields": [
      {
        "name": "collation",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "expr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "indexcolname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "nulls_ordering",
        "type": "SortByNulls",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "opclass",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "opclassopts",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "ordering",
        "type": "SortByDir",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "IndexStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "accessMethod",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "concurrent",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "deferrable",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "excludeOpNames",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "idxcomment",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "idxname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "if_not_exists",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "indexIncludingParams",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "indexOid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "indexParams",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "initdeferred",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "isconstraint",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "nulls_not_distinct",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "oldCreateSubid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "oldFirstRelfilelocatorSubid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "oldNumber",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "primary",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "relation",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "reset_default_tblspc",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "tableSpace",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "transformed",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "unique",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "whereClause",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "InferClause",
    "wrapped": true,
    "fields": [
      {
        "name": "conname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "indexElems",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "whereClause",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "InferenceElem",
    "wrapped": true,
    "fields": [
      {
        "name": "expr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "infercollid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "inferopclass",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "InlineCodeBlock",
    "wrapped": true,
    "fields": [
      {
        "name": "atomic",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "langIsTrusted",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "langOid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "source_text",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "InsertStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "cols",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "onConflictClause",
        "type": "OnConflictClause",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "override",
        "type": "OverridingKind",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "relation",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "returningList",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "selectStmt",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "withClause",
        "type": "WithClause",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "Integer",
    "wrapped": true,
    "fields": [
      {
        "name": "ival",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "IntList",
    "wrapped": true,
    "fields": [
      {
        "name": "items",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "IntoClause",
    "wrapped": true,
    "fields": [
      {
        "name": "accessMethod",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "colNames",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "onCommit",
        "type": "OnCommitAction",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "rel",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "skipData",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "tableSpaceName",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "viewQuery",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "JoinExpr",
    "wrapped": true,
    "fields": [
      {
        "name": "alias",
        "type": "Alias",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "isNatural",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "join_using_alias",
        "type": "Alias",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "jointype",
        "type": "JoinType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "larg",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "quals",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "rarg",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "rtindex",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "usingClause",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "JsonAggConstructor",
    "wrapped": true,
    "fields": [
      {
        "name": "agg_filter",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "agg_order",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "output",
        "type": "JsonOutput",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "over",
        "type": "WindowDef",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "JsonArrayAgg",
    "wrapped": true,
    "fields": [
      {
        "name": "absent_on_null",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "arg",
        "type": "JsonValueExpr",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "constructor",
        "type": "JsonAggConstructor",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "JsonArrayConstructor",
    "wrapped": true,
    "fields": [
      {
        "name": "absent_on_null",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "exprs",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "output",
        "type": "JsonOutput",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "JsonArrayQueryConstructor",
    "wrapped": true,
    "fields": [
      {
        "name": "absent_on_null",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "format",
        "type": "JsonFormat",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "output",
        "type": "JsonOutput",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "query",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "JsonConstructorExpr",
    "wrapped": true,
    "fields": [
      {
        "name": "absent_on_null",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "args",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "coercion",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "func",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "returning",
        "type": "JsonReturning",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "type",
        "type": "JsonConstructorType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "unique",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "JsonFormat",
    "wrapped": true,
    "fields": [
      {
        "name": "encoding",
        "type": "JsonEncoding",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "format_type",
        "type": "JsonFormatType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "JsonIsPredicate",
    "wrapped": true,
    "fields": [
      {
        "name": "expr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "format",
        "type": "JsonFormat",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "item_type",
        "type": "JsonValueType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "unique_keys",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "JsonKeyValue",
    "wrapped": true,
    "fields": [
      {
        "name": "key",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "value",
        "type": "JsonValueExpr",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "JsonObjectAgg",
    "wrapped": true,
    "fields": [
      {
        "name": "absent_on_null",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "arg",
        "type": "JsonKeyValue",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "constructor",
        "type": "JsonAggConstructor",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "unique",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "JsonObjectConstructor",
    "wrapped": true,
    "fields": [
      {
        "name": "absent_on_null",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "exprs",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "output",
        "type": "JsonOutput",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "unique",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "JsonOutput",
    "wrapped": true,
    "fields": [
      {
        "name": "returning",
        "type": "JsonReturning",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "typeName",
        "type": "TypeName",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "JsonReturning",
    "wrapped": true,
    "fields": [
      {
        "name": "format",
        "type": "JsonFormat",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "typid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "typmod",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "JsonValueExpr",
    "wrapped": true,
    "fields": [
      {
        "name": "format",
        "type": "JsonFormat",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "formatted_expr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "raw_expr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "List",
    "wrapped": true,
    "fields": [
      {
        "name": "items",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "ListenStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "conditionname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "LoadStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "filename",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "LockingClause",
    "wrapped": true,
    "fields": [
      {
        "name": "lockedRels",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "strength",
        "type": "LockClauseStrength",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "waitPolicy",
        "type": "LockWaitPolicy",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "LockStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "mode",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "nowait",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "relations",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "MergeAction",
    "wrapped": true,
    "fields": [
      {
        "name": "commandType",
        "type": "CmdType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "matched",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "override",
        "type": "OverridingKind",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "qual",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "targetList",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "updateColnos",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "MergeStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "joinCondition",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "mergeWhenClauses",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "relation",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "sourceRelation",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "withClause",
        "type": "WithClause",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "MergeWhenClause",
    "wrapped": true,
    "fields": [
      {
        "name": "commandType",
        "type": "CmdType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "condition",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "matched",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "override",
        "type": "OverridingKind",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "targetList",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "values",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "MinMaxExpr",
    "wrapped": true,
    "fields": [
      {
        "name": "args",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "inputcollid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "minmaxcollid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "minmaxtype",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "op",
        "type": "MinMaxOp",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "MultiAssignRef",
    "wrapped": true,
    "fields": [
      {
        "name": "colno",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "ncolumns",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "source",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "NamedArgExpr",
    "wrapped": true,
    "fields": [
      {
        "name": "arg",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "argnumber",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "NextValueExpr",
    "wrapped": true,
    "fields": [
      {
        "name": "seqid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "typeId",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "NotifyStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "conditionname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "payload",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "NullIfExpr",
    "wrapped": true,
    "fields": [
      {
        "name": "args",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "inputcollid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "opcollid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "opno",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "opresulttype",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "opretset",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "NullTest",
    "wrapped": true,
    "fields": [
      {
        "name": "arg",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "argisrow",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "nulltesttype",
        "type": "NullTestType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "ObjectWithArgs",
    "wrapped": true,
    "fields": [
      {
        "name": "args_unspecified",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "objargs",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "objfuncargs",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "objname",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "OidList",
    "wrapped": true,
    "fields": [
      {
        "name": "items",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "OnConflictClause",
    "wrapped": true,
    "fields": [
      {
        "name": "action",
        "type": "OnConflictAction",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "infer",
        "type": "InferClause",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "targetList",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "whereClause",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "OnConflictExpr",
    "wrapped": true,
    "fields": [
      {
        "name": "action",
        "type": "OnConflictAction",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "arbiterElems",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "arbiterWhere",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "constraint",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "exclRelIndex",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "exclRelTlist",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "onConflictSet",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "onConflictWhere",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "OpExpr",
    "wrapped": true,
    "fields": [
      {
        "name": "args",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "inputcollid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "opcollid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "opno",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "opresulttype",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "opretset",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "Param",
    "wrapped": true,
    "fields": [
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "paramcollid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "paramid",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "paramkind",
        "type": "ParamKind",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "paramtype",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "paramtypmod",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "ParamRef",
    "wrapped": true,
    "fields": [
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "number",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "ParseResult",
    "wrapped": false,
    "fields": [
      {
        "name": "stmts",
        "type": "RawStmt",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "version",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "PartitionBoundSpec",
    "wrapped": true,
    "fields": [
      {
        "name": "is_default",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "listdatums",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "lowerdatums",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "modulus",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "remainder",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "strategy",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "upperdatums",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "PartitionCmd",
    "wrapped": true,
    "fields": [
      {
        "name": "bound",
        "type": "PartitionBoundSpec",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "concurrent",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "name",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "PartitionElem",
    "wrapped": true,
    "fields": [
      {
        "name": "collation",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "expr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "opclass",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "PartitionRangeDatum",
    "wrapped": true,
    "fields": [
      {
        "name": "kind",
        "type": "PartitionRangeDatumKind",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "value",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "PartitionSpec",
    "wrapped": true,
    "fields": [
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "partParams",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "strategy",
        "type": "PartitionStrategy",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "PLAssignStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "indirection",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "nnames",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "val",
        "type": "SelectStmt",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "PrepareStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "argtypes",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "query",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "PublicationObjSpec",
    "wrapped": true,
    "fields": [
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "pubobjtype",
        "type": "PublicationObjSpecType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "pubtable",
        "type": "PublicationTable",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "PublicationTable",
    "wrapped": true,
    "fields": [
      {
        "name": "columns",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "relation",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "whereClause",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "Query",
    "wrapped": true,
    "fields": [
      {
        "name": "canSetTag",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "commandType",
        "type": "CmdType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "constraintDeps",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "cteList",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "distinctClause",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "groupClause",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "groupDistinct",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "groupingSets",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "hasAggs",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "hasDistinctOn",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "hasForUpdate",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "hasModifyingCTE",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "hasRecursive",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "hasRowSecurity",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "hasSubLinks",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "hasTargetSRFs",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "hasWindowFuncs",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "havingQual",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "isReturn",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "jointree",
        "type": "FromExpr",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "limitCount",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "limitOffset",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "limitOption",
        "type": "LimitOption",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "mergeActionList",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "mergeUseOuterJoin",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "onConflict",
        "type": "OnConflictExpr",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "override",
        "type": "OverridingKind",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "querySource",
        "type": "QuerySource",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "resultRelation",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "returningList",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "rowMarks",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "rtable",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "rteperminfos",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "setOperations",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "sortClause",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "stmt_len",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "stmt_location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "targetList",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "utilityStmt",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "windowClause",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "withCheckOptions",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "RangeFunction",
    "wrapped": true,
    "fields": [
      {
        "name": "alias",
        "type": "Alias",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "coldeflist",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "functions",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "is_rowsfrom",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "lateral",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "ordinality",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "RangeSubselect",
    "wrapped": true,
    "fields": [
      {
        "name": "alias",
        "type": "Alias",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "lateral",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "subquery",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "RangeTableFunc",
    "wrapped": true,
    "fields": [
      {
        "name": "alias",
        "type": "Alias",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "columns",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "docexpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "lateral",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "namespaces",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "rowexpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "RangeTableFuncCol",
    "wrapped": true,
    "fields": [
      {
        "name": "coldefexpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "colexpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "colname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "for_ordinality",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "is_not_null",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "typeName",
        "type": "TypeName",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "RangeTableSample",
    "wrapped": true,
    "fields": [
      {
        "name": "args",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "method",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "relation",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "repeatable",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "RangeTblEntry",
    "wrapped": true,
    "fields": [
      {
        "name": "alias",
        "type": "Alias",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "colcollations",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "coltypes",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "coltypmods",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "ctelevelsup",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "ctename",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "enrname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "enrtuples",
        "type": "double",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "eref",
        "type": "Alias",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "funcordinality",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "functions",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "inFromCl",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "inh",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "join_using_alias",
        "type": "Alias",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "joinaliasvars",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "joinleftcols",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "joinmergedcols",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "joinrightcols",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "jointype",
        "type": "JoinType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "lateral",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "perminfoindex",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "relid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "relkind",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "rellockmode",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "rtekind",
        "type": "RTEKind",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "security_barrier",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "securityQuals",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "self_reference",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "subquery",
        "type": "Query",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "tablefunc",
        "type": "TableFunc",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "tablesample",
        "type": "TableSampleClause",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "values_lists",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "RangeTblFunction",
    "wrapped": true,
    "fields": [
      {
        "name": "funccolcollations",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "funccolcount",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "funccolnames",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "funccoltypes",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "funccoltypmods",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "funcexpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "funcparams",
        "type": "uint64",
        "isNode": false,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "RangeTblRef",
    "wrapped": true,
    "fields": [
      {
        "name": "rtindex",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "RangeVar",
    "wrapped": true,
    "fields": [
      {
        "name": "alias",
        "type": "Alias",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "catalogname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "inh",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "relname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "relpersistence",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "schemaname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "RawStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "stmt",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "stmt_len",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "stmt_location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "ReassignOwnedStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "newrole",
        "type": "RoleSpec",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "roles",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "RefreshMatViewStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "concurrent",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "relation",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "skipData",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "ReindexStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "kind",
        "type": "ReindexObjectType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "params",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "relation",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "RelabelType",
    "wrapped": true,
    "fields": [
      {
        "name": "arg",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "relabelformat",
        "type": "CoercionForm",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "resultcollid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "resulttype",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "resulttypmod",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "RenameStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "behavior",
        "type": "DropBehavior",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "missing_ok",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "newname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "object",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "relation",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "relationType",
        "type": "ObjectType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "renameType",
        "type": "ObjectType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "subname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "ReplicaIdentityStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "identity_type",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "ResTarget",
    "wrapped": true,
    "fields": [
      {
        "name": "indirection",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "val",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "ReturnStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "returnval",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "RoleSpec",
    "wrapped": true,
    "fields": [
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "rolename",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "roletype",
        "type": "RoleSpecType",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "RowCompareExpr",
    "wrapped": true,
    "fields": [
      {
        "name": "inputcollids",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "largs",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "opfamilies",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "opnos",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "rargs",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "rctype",
        "type": "RowCompareType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "RowExpr",
    "wrapped": true,
    "fields": [
      {
        "name": "args",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "colnames",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "row_format",
        "type": "CoercionForm",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "row_typeid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "RowMarkClause",
    "wrapped": true,
    "fields": [
      {
        "name": "pushedDown",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "rti",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "strength",
        "type": "LockClauseStrength",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "waitPolicy",
        "type": "LockWaitPolicy",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "RTEPermissionInfo",
    "wrapped": true,
    "fields": [
      {
        "name": "checkAsUser",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "inh",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "insertedCols",
        "type": "uint64",
        "isNode": false,
        "isArray": true,
        "optional": true
      },
      {
        "name": "relid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "requiredPerms",
        "type": "uint64",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "selectedCols",
        "type": "uint64",
        "isNode": false,
        "isArray": true,
        "optional": true
      },
      {
        "name": "updatedCols",
        "type": "uint64",
        "isNode": false,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "RuleStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "actions",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "event",
        "type": "CmdType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "instead",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "relation",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "replace",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "rulename",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "whereClause",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "ScalarArrayOpExpr",
    "wrapped": true,
    "fields": [
      {
        "name": "args",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "inputcollid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "opno",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "useOr",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "ScanResult",
    "wrapped": false,
    "fields": [
      {
        "name": "tokens",
        "type": "ScanToken",
        "isNode": false,
        "isArray": true,
        "optional": true
      },
      {
        "name": "version",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "ScanToken",
    "wrapped": false,
    "fields": [
      {
        "name": "end",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "keywordKind",
        "type": "KeywordKind",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "start",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "token",
        "type": "Token",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "SecLabelStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "label",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "object",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "objtype",
        "type": "ObjectType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "provider",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "SelectStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "all",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "distinctClause",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "fromClause",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "groupClause",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "groupDistinct",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "havingClause",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "intoClause",
        "type": "IntoClause",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "larg",
        "type": "SelectStmt",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "limitCount",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "limitOffset",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "limitOption",
        "type": "LimitOption",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "lockingClause",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "op",
        "type": "SetOperation",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "rarg",
        "type": "SelectStmt",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "sortClause",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "targetList",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "valuesLists",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "whereClause",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "windowClause",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "withClause",
        "type": "WithClause",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "SetOperationStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "all",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "colCollations",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "colTypes",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "colTypmods",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "groupClauses",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "larg",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "op",
        "type": "SetOperation",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "rarg",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "SetToDefault",
    "wrapped": true,
    "fields": [
      {
        "name": "collation",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "typeId",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "typeMod",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "SortBy",
    "wrapped": true,
    "fields": [
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "node",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "sortby_dir",
        "type": "SortByDir",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "sortby_nulls",
        "type": "SortByNulls",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "useOp",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "SortGroupClause",
    "wrapped": true,
    "fields": [
      {
        "name": "eqop",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "hashable",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "nulls_first",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "sortop",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "tleSortGroupRef",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "SQLValueFunction",
    "wrapped": true,
    "fields": [
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "op",
        "type": "SQLValueFunctionOp",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "type",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "typmod",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "StatsElem",
    "wrapped": true,
    "fields": [
      {
        "name": "expr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "String",
    "wrapped": true,
    "fields": [
      {
        "name": "sval",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "SubLink",
    "wrapped": true,
    "fields": [
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "operName",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "subLinkId",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "subLinkType",
        "type": "SubLinkType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "subselect",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "testexpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "SubPlan",
    "wrapped": true,
    "fields": [
      {
        "name": "args",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "firstColCollation",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "firstColType",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "firstColTypmod",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "parallel_safe",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "paramIds",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "parParam",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "per_call_cost",
        "type": "double",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "plan_id",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "plan_name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "setParam",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "startup_cost",
        "type": "double",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "subLinkType",
        "type": "SubLinkType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "testexpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "unknownEqFalse",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "useHashTable",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "SubscriptingRef",
    "wrapped": true,
    "fields": [
      {
        "name": "refassgnexpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "refcollid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "refcontainertype",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "refelemtype",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "refexpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "reflowerindexpr",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "refrestype",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "reftypmod",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "refupperindexpr",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "TableFunc",
    "wrapped": true,
    "fields": [
      {
        "name": "colcollations",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "coldefexprs",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "colexprs",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "colnames",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "coltypes",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "coltypmods",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "docexpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "notnulls",
        "type": "uint64",
        "isNode": false,
        "isArray": true,
        "optional": true
      },
      {
        "name": "ns_names",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "ns_uris",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "ordinalitycol",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "rowexpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "TableLikeClause",
    "wrapped": true,
    "fields": [
      {
        "name": "options",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "relation",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "relationOid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "TableSampleClause",
    "wrapped": true,
    "fields": [
      {
        "name": "args",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "repeatable",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "tsmhandler",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "TargetEntry",
    "wrapped": true,
    "fields": [
      {
        "name": "expr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "resjunk",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "resname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "resno",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "resorigcol",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "resorigtbl",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "ressortgroupref",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "TransactionStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "chain",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "gid",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "kind",
        "type": "TransactionStmtKind",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "savepoint_name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "TriggerTransition",
    "wrapped": true,
    "fields": [
      {
        "name": "isNew",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "isTable",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "TruncateStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "behavior",
        "type": "DropBehavior",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "relations",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "restart_seqs",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "TypeCast",
    "wrapped": true,
    "fields": [
      {
        "name": "arg",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "typeName",
        "type": "TypeName",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "TypeName",
    "wrapped": true,
    "fields": [
      {
        "name": "arrayBounds",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "names",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "pct_type",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "setof",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "typemod",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "typeOid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "typmods",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "UnlistenStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "conditionname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "UpdateStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "fromClause",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "relation",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "returningList",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "targetList",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "whereClause",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "withClause",
        "type": "WithClause",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "VacuumRelation",
    "wrapped": true,
    "fields": [
      {
        "name": "oid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "relation",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "va_cols",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "VacuumStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "is_vacuumcmd",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "rels",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "Var",
    "wrapped": true,
    "fields": [
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "varattno",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "varcollid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "varlevelsup",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "varno",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "varnullingrels",
        "type": "uint64",
        "isNode": false,
        "isArray": true,
        "optional": true
      },
      {
        "name": "vartype",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "vartypmod",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "VariableSetStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "args",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "is_local",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "kind",
        "type": "VariableSetKind",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "VariableShowStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "ViewStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "aliases",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "query",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "replace",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "view",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "withCheckOption",
        "type": "ViewCheckOption",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "WindowClause",
    "wrapped": true,
    "fields": [
      {
        "name": "copiedOrder",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "endInRangeFunc",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "endOffset",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "frameOptions",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "inRangeAsc",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "inRangeColl",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "inRangeNullsFirst",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "orderClause",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "partitionClause",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "refname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "runCondition",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "startInRangeFunc",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "startOffset",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "winref",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "WindowDef",
    "wrapped": true,
    "fields": [
      {
        "name": "endOffset",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "frameOptions",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "orderClause",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "partitionClause",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "refname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "startOffset",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "WindowFunc",
    "wrapped": true,
    "fields": [
      {
        "name": "aggfilter",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "args",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "inputcollid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "winagg",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "wincollid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "winfnoid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "winref",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "winstar",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "wintype",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "WithCheckOption",
    "wrapped": true,
    "fields": [
      {
        "name": "cascaded",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "kind",
        "type": "WCOKind",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "polname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "qual",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "relname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "WithClause",
    "wrapped": true,
    "fields": [
      {
        "name": "ctes",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "recursive",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "XmlExpr",
    "wrapped": true,
    "fields": [
      {
        "name": "arg_names",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "args",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "indent",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "named_args",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "op",
        "type": "XmlExprOp",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "type",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "typmod",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xmloption",
        "type": "XmlOptionType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "XmlSerialize",
    "wrapped": true,
    "fields": [
      {
        "name": "expr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "indent",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "typeName",
        "type": "TypeName",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xmloption",
        "type": "XmlOptionType",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  }
]",
    "file": "custom-node-specs.json",
  },
]
`;

exports[`runtime-schema custom filename typescript 1`] = `
[
  {
    "code": "/**
* This file was automatically generated by pg-proto-parser@latest.
* DO NOT MODIFY IT BY HAND. Instead, modify the source proto file,
* and run the pg-proto-parser generate command to regenerate this file.
*/
// Generated by pg-proto-parser
export interface FieldSpec {
  name: string;
  type: string;
  isNode: boolean;
  isArray: boolean;
  optional: boolean;
}
export interface NodeSpec {
  name: string;
  wrapped: boolean;
  fields: FieldSpec[];
}
export const runtimeSchema: NodeSpec[] = [
  {
    name: 'A_ArrayExpr',
    wrapped: true,
    fields: [
      {
        name: 'elements',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'A_Const',
    wrapped: true,
    fields: [
      {
        name: 'boolval',
        type: 'Boolean',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'bsval',
        type: 'BitString',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'fval',
        type: 'Float',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'isnull',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'ival',
        type: 'Integer',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'sval',
        type: 'String',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'A_Expr',
    wrapped: true,
    fields: [
      {
        name: 'kind',
        type: 'A_Expr_Kind',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'lexpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'name',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'rexpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'A_Indices',
    wrapped: true,
    fields: [
      {
        name: 'is_slice',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'lidx',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'uidx',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'A_Indirection',
    wrapped: true,
    fields: [
      {
        name: 'arg',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'indirection',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'A_Star',
    wrapped: true,
    fields: [

    ]
  },
  {
    name: 'AccessPriv',
    wrapped: true,
    fields: [
      {
        name: 'cols',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'priv_name',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'Aggref',
    wrapped: true,
    fields: [
      {
        name: 'aggargtypes',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'aggcollid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'aggdirectargs',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'aggdistinct',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'aggfilter',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'aggfnoid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'aggkind',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'agglevelsup',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'aggno',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'aggorder',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'aggsplit',
        type: 'AggSplit',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'aggstar',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'aggtransno',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'aggtype',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'aggvariadic',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'args',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'inputcollid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'Alias',
    wrapped: true,
    fields: [
      {
        name: 'aliasname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'colnames',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'AlterCollationStmt',
    wrapped: true,
    fields: [
      {
        name: 'collname',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'AlterDatabaseRefreshCollStmt',
    wrapped: true,
    fields: [
      {
        name: 'dbname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'AlterDatabaseSetStmt',
    wrapped: true,
    fields: [
      {
        name: 'dbname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'setstmt',
        type: 'VariableSetStmt',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'AlterDatabaseStmt',
    wrapped: true,
    fields: [
      {
        name: 'dbname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'AlterDefaultPrivilegesStmt',
    wrapped: true,
    fields: [
      {
        name: 'action',
        type: 'GrantStmt',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'AlterDomainStmt',
    wrapped: true,
    fields: [
      {
        name: 'behavior',
        type: 'DropBehavior',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'def',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'missing_ok',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'name',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'subtype',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'typeName',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'AlterEnumStmt',
    wrapped: true,
    fields: [
      {
        name: 'newVal',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'newValIsAfter',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'newValNeighbor',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'oldVal',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'skipIfNewValExists',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'typeName',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'AlterEventTrigStmt',
    wrapped: true,
    fields: [
      {
        name: 'tgenabled',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'trigname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'AlterExtensionContentsStmt',
    wrapped: true,
    fields: [
      {
        name: 'action',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'extname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'object',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'objtype',
        type: 'ObjectType',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'AlterExtensionStmt',
    wrapped: true,
    fields: [
      {
        name: 'extname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'AlterFdwStmt',
    wrapped: true,
    fields: [
      {
        name: 'fdwname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'func_options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'AlterForeignServerStmt',
    wrapped: true,
    fields: [
      {
        name: 'has_version',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'servername',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'version',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'AlterFunctionStmt',
    wrapped: true,
    fields: [
      {
        name: 'actions',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'func',
        type: 'ObjectWithArgs',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'objtype',
        type: 'ObjectType',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'AlternativeSubPlan',
    wrapped: true,
    fields: [
      {
        name: 'subplans',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'AlterObjectDependsStmt',
    wrapped: true,
    fields: [
      {
        name: 'extname',
        type: 'String',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'object',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'objectType',
        type: 'ObjectType',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'relation',
        type: 'RangeVar',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'remove',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'AlterObjectSchemaStmt',
    wrapped: true,
    fields: [
      {
        name: 'missing_ok',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'newschema',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'object',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'objectType',
        type: 'ObjectType',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'relation',
        type: 'RangeVar',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'AlterOperatorStmt',
    wrapped: true,
    fields: [
      {
        name: 'opername',
        type: 'ObjectWithArgs',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'AlterOpFamilyStmt',
    wrapped: true,
    fields: [
      {
        name: 'amname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'isDrop',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'items',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'opfamilyname',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'AlterOwnerStmt',
    wrapped: true,
    fields: [
      {
        name: 'newowner',
        type: 'RoleSpec',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'object',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'objectType',
        type: 'ObjectType',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'relation',
        type: 'RangeVar',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'AlterPolicyStmt',
    wrapped: true,
    fields: [
      {
        name: 'policy_name',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'qual',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'roles',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'table',
        type: 'RangeVar',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'with_check',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'AlterPublicationStmt',
    wrapped: true,
    fields: [
      {
        name: 'action',
        type: 'AlterPublicationAction',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'for_all_tables',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'pubname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'pubobjects',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'AlterRoleSetStmt',
    wrapped: true,
    fields: [
      {
        name: 'database',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'role',
        type: 'RoleSpec',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'setstmt',
        type: 'VariableSetStmt',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'AlterRoleStmt',
    wrapped: true,
    fields: [
      {
        name: 'action',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'role',
        type: 'RoleSpec',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'AlterSeqStmt',
    wrapped: true,
    fields: [
      {
        name: 'for_identity',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'missing_ok',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'sequence',
        type: 'RangeVar',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'AlterStatsStmt',
    wrapped: true,
    fields: [
      {
        name: 'defnames',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'missing_ok',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'stxstattarget',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'AlterSubscriptionStmt',
    wrapped: true,
    fields: [
      {
        name: 'conninfo',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'kind',
        type: 'AlterSubscriptionType',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'publication',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'subname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'AlterSystemStmt',
    wrapped: true,
    fields: [
      {
        name: 'setstmt',
        type: 'VariableSetStmt',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'AlterTableCmd',
    wrapped: true,
    fields: [
      {
        name: 'behavior',
        type: 'DropBehavior',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'def',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'missing_ok',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'name',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'newowner',
        type: 'RoleSpec',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'num',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'recurse',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'subtype',
        type: 'AlterTableType',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'AlterTableMoveAllStmt',
    wrapped: true,
    fields: [
      {
        name: 'new_tablespacename',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'nowait',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'objtype',
        type: 'ObjectType',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'orig_tablespacename',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'roles',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'AlterTableSpaceOptionsStmt',
    wrapped: true,
    fields: [
      {
        name: 'isReset',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'tablespacename',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'AlterTableStmt',
    wrapped: true,
    fields: [
      {
        name: 'cmds',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'missing_ok',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'objtype',
        type: 'ObjectType',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'relation',
        type: 'RangeVar',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'AlterTSConfigurationStmt',
    wrapped: true,
    fields: [
      {
        name: 'cfgname',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'dicts',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'kind',
        type: 'AlterTSConfigType',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'missing_ok',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'override',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'replace',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'tokentype',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'AlterTSDictionaryStmt',
    wrapped: true,
    fields: [
      {
        name: 'dictname',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'AlterTypeStmt',
    wrapped: true,
    fields: [
      {
        name: 'options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'typeName',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'AlterUserMappingStmt',
    wrapped: true,
    fields: [
      {
        name: 'options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'servername',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'user',
        type: 'RoleSpec',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'ArrayCoerceExpr',
    wrapped: true,
    fields: [
      {
        name: 'arg',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'coerceformat',
        type: 'CoercionForm',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'elemexpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'resultcollid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'resulttype',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'resulttypmod',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'ArrayExpr',
    wrapped: true,
    fields: [
      {
        name: 'array_collid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'array_typeid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'element_typeid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'elements',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'multidims',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'BitString',
    wrapped: true,
    fields: [
      {
        name: 'bsval',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'Boolean',
    wrapped: true,
    fields: [
      {
        name: 'boolval',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'BooleanTest',
    wrapped: true,
    fields: [
      {
        name: 'arg',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'booltesttype',
        type: 'BoolTestType',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'BoolExpr',
    wrapped: true,
    fields: [
      {
        name: 'args',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'boolop',
        type: 'BoolExprType',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CallContext',
    wrapped: true,
    fields: [
      {
        name: 'atomic',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CallStmt',
    wrapped: true,
    fields: [
      {
        name: 'funccall',
        type: 'FuncCall',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'funcexpr',
        type: 'FuncExpr',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'outargs',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'CaseExpr',
    wrapped: true,
    fields: [
      {
        name: 'arg',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'args',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'casecollid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'casetype',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'defresult',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CaseTestExpr',
    wrapped: true,
    fields: [
      {
        name: 'collation',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'typeId',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'typeMod',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CaseWhen',
    wrapped: true,
    fields: [
      {
        name: 'expr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'result',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CheckPointStmt',
    wrapped: true,
    fields: [

    ]
  },
  {
    name: 'ClosePortalStmt',
    wrapped: true,
    fields: [
      {
        name: 'portalname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'ClusterStmt',
    wrapped: true,
    fields: [
      {
        name: 'indexname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'params',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'relation',
        type: 'RangeVar',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CoalesceExpr',
    wrapped: true,
    fields: [
      {
        name: 'args',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'coalescecollid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'coalescetype',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CoerceToDomain',
    wrapped: true,
    fields: [
      {
        name: 'arg',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'coercionformat',
        type: 'CoercionForm',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'resultcollid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'resulttype',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'resulttypmod',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CoerceToDomainValue',
    wrapped: true,
    fields: [
      {
        name: 'collation',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'typeId',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'typeMod',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CoerceViaIO',
    wrapped: true,
    fields: [
      {
        name: 'arg',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'coerceformat',
        type: 'CoercionForm',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'resultcollid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'resulttype',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CollateClause',
    wrapped: true,
    fields: [
      {
        name: 'arg',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'collname',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CollateExpr',
    wrapped: true,
    fields: [
      {
        name: 'arg',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'collOid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'ColumnDef',
    wrapped: true,
    fields: [
      {
        name: 'collClause',
        type: 'CollateClause',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'collOid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'colname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'compression',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'constraints',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'cooked_default',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'fdwoptions',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'generated',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'identity',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'identitySequence',
        type: 'RangeVar',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'inhcount',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'is_from_type',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'is_local',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'is_not_null',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'raw_default',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'storage',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'storage_name',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'typeName',
        type: 'TypeName',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'ColumnRef',
    wrapped: true,
    fields: [
      {
        name: 'fields',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CommentStmt',
    wrapped: true,
    fields: [
      {
        name: 'comment',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'object',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'objtype',
        type: 'ObjectType',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CommonTableExpr',
    wrapped: true,
    fields: [
      {
        name: 'aliascolnames',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'ctecolcollations',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'ctecolnames',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'ctecoltypes',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'ctecoltypmods',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'ctematerialized',
        type: 'CTEMaterialize',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'ctename',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'ctequery',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'cterecursive',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'cterefcount',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'cycle_clause',
        type: 'CTECycleClause',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'search_clause',
        type: 'CTESearchClause',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CompositeTypeStmt',
    wrapped: true,
    fields: [
      {
        name: 'coldeflist',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'typevar',
        type: 'RangeVar',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'Constraint',
    wrapped: true,
    fields: [
      {
        name: 'access_method',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'conname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'contype',
        type: 'ConstrType',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'cooked_expr',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'deferrable',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'exclusions',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'fk_attrs',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'fk_del_action',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'fk_del_set_cols',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'fk_matchtype',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'fk_upd_action',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'generated_when',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'including',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'indexname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'indexspace',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'initdeferred',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'initially_valid',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'is_no_inherit',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'keys',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'nulls_not_distinct',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'old_conpfeqop',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'old_pktable_oid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'pk_attrs',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'pktable',
        type: 'RangeVar',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'raw_expr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'reset_default_tblspc',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'skip_validation',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'where_clause',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'ConstraintsSetStmt',
    wrapped: true,
    fields: [
      {
        name: 'constraints',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'deferred',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'ConvertRowtypeExpr',
    wrapped: true,
    fields: [
      {
        name: 'arg',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'convertformat',
        type: 'CoercionForm',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'resulttype',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CopyStmt',
    wrapped: true,
    fields: [
      {
        name: 'attlist',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'filename',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'is_from',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'is_program',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'query',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'relation',
        type: 'RangeVar',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'whereClause',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CreateAmStmt',
    wrapped: true,
    fields: [
      {
        name: 'amname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'amtype',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'handler_name',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'CreateCastStmt',
    wrapped: true,
    fields: [
      {
        name: 'context',
        type: 'CoercionContext',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'func',
        type: 'ObjectWithArgs',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'inout',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'sourcetype',
        type: 'TypeName',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'targettype',
        type: 'TypeName',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CreateConversionStmt',
    wrapped: true,
    fields: [
      {
        name: 'conversion_name',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'def',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'for_encoding_name',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'func_name',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'to_encoding_name',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CreatedbStmt',
    wrapped: true,
    fields: [
      {
        name: 'dbname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'CreateDomainStmt',
    wrapped: true,
    fields: [
      {
        name: 'collClause',
        type: 'CollateClause',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'constraints',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'domainname',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'typeName',
        type: 'TypeName',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CreateEnumStmt',
    wrapped: true,
    fields: [
      {
        name: 'typeName',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'vals',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'CreateEventTrigStmt',
    wrapped: true,
    fields: [
      {
        name: 'eventname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'funcname',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'trigname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'whenclause',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'CreateExtensionStmt',
    wrapped: true,
    fields: [
      {
        name: 'extname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'if_not_exists',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'CreateFdwStmt',
    wrapped: true,
    fields: [
      {
        name: 'fdwname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'func_options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'CreateForeignServerStmt',
    wrapped: true,
    fields: [
      {
        name: 'fdwname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'if_not_exists',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'servername',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'servertype',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'version',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CreateForeignTableStmt',
    wrapped: true,
    fields: [
      {
        name: 'base',
        type: 'CreateStmt',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'servername',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CreateFunctionStmt',
    wrapped: true,
    fields: [
      {
        name: 'funcname',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'is_procedure',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'parameters',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'replace',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'returnType',
        type: 'TypeName',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'sql_body',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CreateOpClassItem',
    wrapped: true,
    fields: [
      {
        name: 'class_args',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'itemtype',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'name',
        type: 'ObjectWithArgs',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'number',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'order_family',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'storedtype',
        type: 'TypeName',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CreateOpClassStmt',
    wrapped: true,
    fields: [
      {
        name: 'amname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'datatype',
        type: 'TypeName',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'isDefault',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'items',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'opclassname',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'opfamilyname',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'CreateOpFamilyStmt',
    wrapped: true,
    fields: [
      {
        name: 'amname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'opfamilyname',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'CreatePLangStmt',
    wrapped: true,
    fields: [
      {
        name: 'plhandler',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'plinline',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'plname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'pltrusted',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'plvalidator',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'replace',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CreatePolicyStmt',
    wrapped: true,
    fields: [
      {
        name: 'cmd_name',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'permissive',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'policy_name',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'qual',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'roles',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'table',
        type: 'RangeVar',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'with_check',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CreatePublicationStmt',
    wrapped: true,
    fields: [
      {
        name: 'for_all_tables',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'pubname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'pubobjects',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'CreateRangeStmt',
    wrapped: true,
    fields: [
      {
        name: 'params',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'typeName',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'CreateRoleStmt',
    wrapped: true,
    fields: [
      {
        name: 'options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'role',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'stmt_type',
        type: 'RoleStmtType',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CreateSchemaStmt',
    wrapped: true,
    fields: [
      {
        name: 'authrole',
        type: 'RoleSpec',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'if_not_exists',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'schemaElts',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'schemaname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CreateSeqStmt',
    wrapped: true,
    fields: [
      {
        name: 'for_identity',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'if_not_exists',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'ownerId',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'sequence',
        type: 'RangeVar',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CreateStatsStmt',
    wrapped: true,
    fields: [
      {
        name: 'defnames',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'exprs',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'if_not_exists',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'relations',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'stat_types',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'stxcomment',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'transformed',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CreateStmt',
    wrapped: true,
    fields: [
      {
        name: 'accessMethod',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'constraints',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'if_not_exists',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'inhRelations',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'ofTypename',
        type: 'TypeName',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'oncommit',
        type: 'OnCommitAction',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'partbound',
        type: 'PartitionBoundSpec',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'partspec',
        type: 'PartitionSpec',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'relation',
        type: 'RangeVar',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'tableElts',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'tablespacename',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CreateSubscriptionStmt',
    wrapped: true,
    fields: [
      {
        name: 'conninfo',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'publication',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'subname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CreateTableAsStmt',
    wrapped: true,
    fields: [
      {
        name: 'if_not_exists',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'into',
        type: 'IntoClause',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'is_select_into',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'objtype',
        type: 'ObjectType',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'query',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CreateTableSpaceStmt',
    wrapped: true,
    fields: [
      {
        name: 'location',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'owner',
        type: 'RoleSpec',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'tablespacename',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CreateTransformStmt',
    wrapped: true,
    fields: [
      {
        name: 'fromsql',
        type: 'ObjectWithArgs',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'lang',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'replace',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'tosql',
        type: 'ObjectWithArgs',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'type_name',
        type: 'TypeName',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CreateTrigStmt',
    wrapped: true,
    fields: [
      {
        name: 'args',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'columns',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'constrrel',
        type: 'RangeVar',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'deferrable',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'events',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'funcname',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'initdeferred',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'isconstraint',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'relation',
        type: 'RangeVar',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'replace',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'row',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'timing',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'transitionRels',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'trigname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'whenClause',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CreateUserMappingStmt',
    wrapped: true,
    fields: [
      {
        name: 'if_not_exists',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'servername',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'user',
        type: 'RoleSpec',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CTECycleClause',
    wrapped: true,
    fields: [
      {
        name: 'cycle_col_list',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'cycle_mark_collation',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'cycle_mark_column',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'cycle_mark_default',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'cycle_mark_neop',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'cycle_mark_type',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'cycle_mark_typmod',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'cycle_mark_value',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'cycle_path_column',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CTESearchClause',
    wrapped: true,
    fields: [
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'search_breadth_first',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'search_col_list',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'search_seq_column',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CurrentOfExpr',
    wrapped: true,
    fields: [
      {
        name: 'cursor_name',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'cursor_param',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'cvarno',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'DeallocateStmt',
    wrapped: true,
    fields: [
      {
        name: 'name',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'DeclareCursorStmt',
    wrapped: true,
    fields: [
      {
        name: 'options',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'portalname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'query',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'DefElem',
    wrapped: true,
    fields: [
      {
        name: 'arg',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'defaction',
        type: 'DefElemAction',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'defname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'defnamespace',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'DefineStmt',
    wrapped: true,
    fields: [
      {
        name: 'args',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'definition',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'defnames',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'if_not_exists',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'kind',
        type: 'ObjectType',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'oldstyle',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'replace',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'DeleteStmt',
    wrapped: true,
    fields: [
      {
        name: 'relation',
        type: 'RangeVar',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'returningList',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'usingClause',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'whereClause',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'withClause',
        type: 'WithClause',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'DiscardStmt',
    wrapped: true,
    fields: [
      {
        name: 'target',
        type: 'DiscardMode',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'DistinctExpr',
    wrapped: true,
    fields: [
      {
        name: 'args',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'inputcollid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'opcollid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'opno',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'opresulttype',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'opretset',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'DoStmt',
    wrapped: true,
    fields: [
      {
        name: 'args',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'DropdbStmt',
    wrapped: true,
    fields: [
      {
        name: 'dbname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'missing_ok',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'DropOwnedStmt',
    wrapped: true,
    fields: [
      {
        name: 'behavior',
        type: 'DropBehavior',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'roles',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'DropRoleStmt',
    wrapped: true,
    fields: [
      {
        name: 'missing_ok',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'roles',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'DropStmt',
    wrapped: true,
    fields: [
      {
        name: 'behavior',
        type: 'DropBehavior',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'concurrent',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'missing_ok',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'objects',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'removeType',
        type: 'ObjectType',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'DropSubscriptionStmt',
    wrapped: true,
    fields: [
      {
        name: 'behavior',
        type: 'DropBehavior',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'missing_ok',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'subname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'DropTableSpaceStmt',
    wrapped: true,
    fields: [
      {
        name: 'missing_ok',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'tablespacename',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'DropUserMappingStmt',
    wrapped: true,
    fields: [
      {
        name: 'missing_ok',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'servername',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'user',
        type: 'RoleSpec',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'ExecuteStmt',
    wrapped: true,
    fields: [
      {
        name: 'name',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'params',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'ExplainStmt',
    wrapped: true,
    fields: [
      {
        name: 'options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'query',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'FetchStmt',
    wrapped: true,
    fields: [
      {
        name: 'direction',
        type: 'FetchDirection',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'howMany',
        type: 'int64',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'ismove',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'portalname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'FieldSelect',
    wrapped: true,
    fields: [
      {
        name: 'arg',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'fieldnum',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'resultcollid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'resulttype',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'resulttypmod',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'FieldStore',
    wrapped: true,
    fields: [
      {
        name: 'arg',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'fieldnums',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'newvals',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'resulttype',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'Float',
    wrapped: true,
    fields: [
      {
        name: 'fval',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'FromExpr',
    wrapped: true,
    fields: [
      {
        name: 'fromlist',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'quals',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'FuncCall',
    wrapped: true,
    fields: [
      {
        name: 'agg_distinct',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'agg_filter',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'agg_order',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'agg_star',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'agg_within_group',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'args',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'func_variadic',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'funcformat',
        type: 'CoercionForm',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'funcname',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'over',
        type: 'WindowDef',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'FuncExpr',
    wrapped: true,
    fields: [
      {
        name: 'args',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'funccollid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'funcformat',
        type: 'CoercionForm',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'funcid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'funcresulttype',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'funcretset',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'funcvariadic',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'inputcollid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'FunctionParameter',
    wrapped: true,
    fields: [
      {
        name: 'argType',
        type: 'TypeName',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'defexpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'mode',
        type: 'FunctionParameterMode',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'name',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'GrantRoleStmt',
    wrapped: true,
    fields: [
      {
        name: 'behavior',
        type: 'DropBehavior',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'granted_roles',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'grantee_roles',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'grantor',
        type: 'RoleSpec',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'is_grant',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'opt',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'GrantStmt',
    wrapped: true,
    fields: [
      {
        name: 'behavior',
        type: 'DropBehavior',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'grant_option',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'grantees',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'grantor',
        type: 'RoleSpec',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'is_grant',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'objects',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'objtype',
        type: 'ObjectType',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'privileges',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'targtype',
        type: 'GrantTargetType',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'GroupingFunc',
    wrapped: true,
    fields: [
      {
        name: 'agglevelsup',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'args',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'refs',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'GroupingSet',
    wrapped: true,
    fields: [
      {
        name: 'content',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'kind',
        type: 'GroupingSetKind',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'ImportForeignSchemaStmt',
    wrapped: true,
    fields: [
      {
        name: 'list_type',
        type: 'ImportForeignSchemaType',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'local_schema',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'remote_schema',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'server_name',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'table_list',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'IndexElem',
    wrapped: true,
    fields: [
      {
        name: 'collation',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'expr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'indexcolname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'name',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'nulls_ordering',
        type: 'SortByNulls',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'opclass',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'opclassopts',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'ordering',
        type: 'SortByDir',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'IndexStmt',
    wrapped: true,
    fields: [
      {
        name: 'accessMethod',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'concurrent',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'deferrable',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'excludeOpNames',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'idxcomment',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'idxname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'if_not_exists',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'indexIncludingParams',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'indexOid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'indexParams',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'initdeferred',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'isconstraint',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'nulls_not_distinct',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'oldCreateSubid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'oldFirstRelfilelocatorSubid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'oldNumber',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'primary',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'relation',
        type: 'RangeVar',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'reset_default_tblspc',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'tableSpace',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'transformed',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'unique',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'whereClause',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'InferClause',
    wrapped: true,
    fields: [
      {
        name: 'conname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'indexElems',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'whereClause',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'InferenceElem',
    wrapped: true,
    fields: [
      {
        name: 'expr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'infercollid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'inferopclass',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'InlineCodeBlock',
    wrapped: true,
    fields: [
      {
        name: 'atomic',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'langIsTrusted',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'langOid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'source_text',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'InsertStmt',
    wrapped: true,
    fields: [
      {
        name: 'cols',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'onConflictClause',
        type: 'OnConflictClause',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'override',
        type: 'OverridingKind',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'relation',
        type: 'RangeVar',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'returningList',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'selectStmt',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'withClause',
        type: 'WithClause',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'Integer',
    wrapped: true,
    fields: [
      {
        name: 'ival',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'IntList',
    wrapped: true,
    fields: [
      {
        name: 'items',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'IntoClause',
    wrapped: true,
    fields: [
      {
        name: 'accessMethod',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'colNames',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'onCommit',
        type: 'OnCommitAction',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'rel',
        type: 'RangeVar',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'skipData',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'tableSpaceName',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'viewQuery',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'JoinExpr',
    wrapped: true,
    fields: [
      {
        name: 'alias',
        type: 'Alias',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'isNatural',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'join_using_alias',
        type: 'Alias',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'jointype',
        type: 'JoinType',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'larg',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'quals',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'rarg',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'rtindex',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'usingClause',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'JsonAggConstructor',
    wrapped: true,
    fields: [
      {
        name: 'agg_filter',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'agg_order',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'output',
        type: 'JsonOutput',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'over',
        type: 'WindowDef',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'JsonArrayAgg',
    wrapped: true,
    fields: [
      {
        name: 'absent_on_null',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'arg',
        type: 'JsonValueExpr',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'constructor',
        type: 'JsonAggConstructor',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'JsonArrayConstructor',
    wrapped: true,
    fields: [
      {
        name: 'absent_on_null',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'exprs',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'output',
        type: 'JsonOutput',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'JsonArrayQueryConstructor',
    wrapped: true,
    fields: [
      {
        name: 'absent_on_null',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'format',
        type: 'JsonFormat',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'output',
        type: 'JsonOutput',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'query',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'JsonConstructorExpr',
    wrapped: true,
    fields: [
      {
        name: 'absent_on_null',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'args',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'coercion',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'func',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'returning',
        type: 'JsonReturning',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'type',
        type: 'JsonConstructorType',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'unique',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'JsonFormat',
    wrapped: true,
    fields: [
      {
        name: 'encoding',
        type: 'JsonEncoding',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'format_type',
        type: 'JsonFormatType',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'JsonIsPredicate',
    wrapped: true,
    fields: [
      {
        name: 'expr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'format',
        type: 'JsonFormat',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'item_type',
        type: 'JsonValueType',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'unique_keys',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'JsonKeyValue',
    wrapped: true,
    fields: [
      {
        name: 'key',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'value',
        type: 'JsonValueExpr',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'JsonObjectAgg',
    wrapped: true,
    fields: [
      {
        name: 'absent_on_null',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'arg',
        type: 'JsonKeyValue',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'constructor',
        type: 'JsonAggConstructor',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'unique',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'JsonObjectConstructor',
    wrapped: true,
    fields: [
      {
        name: 'absent_on_null',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'exprs',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'output',
        type: 'JsonOutput',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'unique',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'JsonOutput',
    wrapped: true,
    fields: [
      {
        name: 'returning',
        type: 'JsonReturning',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'typeName',
        type: 'TypeName',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'JsonReturning',
    wrapped: true,
    fields: [
      {
        name: 'format',
        type: 'JsonFormat',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'typid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'typmod',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'JsonValueExpr',
    wrapped: true,
    fields: [
      {
        name: 'format',
        type: 'JsonFormat',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'formatted_expr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'raw_expr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'List',
    wrapped: true,
    fields: [
      {
        name: 'items',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'ListenStmt',
    wrapped: true,
    fields: [
      {
        name: 'conditionname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'LoadStmt',
    wrapped: true,
    fields: [
      {
        name: 'filename',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'LockingClause',
    wrapped: true,
    fields: [
      {
        name: 'lockedRels',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'strength',
        type: 'LockClauseStrength',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'waitPolicy',
        type: 'LockWaitPolicy',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'LockStmt',
    wrapped: true,
    fields: [
      {
        name: 'mode',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'nowait',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'relations',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'MergeAction',
    wrapped: true,
    fields: [
      {
        name: 'commandType',
        type: 'CmdType',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'matched',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'override',
        type: 'OverridingKind',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'qual',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'targetList',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'updateColnos',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'MergeStmt',
    wrapped: true,
    fields: [
      {
        name: 'joinCondition',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'mergeWhenClauses',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'relation',
        type: 'RangeVar',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'sourceRelation',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'withClause',
        type: 'WithClause',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'MergeWhenClause',
    wrapped: true,
    fields: [
      {
        name: 'commandType',
        type: 'CmdType',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'condition',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'matched',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'override',
        type: 'OverridingKind',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'targetList',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'values',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'MinMaxExpr',
    wrapped: true,
    fields: [
      {
        name: 'args',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'inputcollid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'minmaxcollid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'minmaxtype',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'op',
        type: 'MinMaxOp',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'MultiAssignRef',
    wrapped: true,
    fields: [
      {
        name: 'colno',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'ncolumns',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'source',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'NamedArgExpr',
    wrapped: true,
    fields: [
      {
        name: 'arg',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'argnumber',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'name',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'NextValueExpr',
    wrapped: true,
    fields: [
      {
        name: 'seqid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'typeId',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'NotifyStmt',
    wrapped: true,
    fields: [
      {
        name: 'conditionname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'payload',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'NullIfExpr',
    wrapped: true,
    fields: [
      {
        name: 'args',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'inputcollid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'opcollid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'opno',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'opresulttype',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'opretset',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'NullTest',
    wrapped: true,
    fields: [
      {
        name: 'arg',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'argisrow',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'nulltesttype',
        type: 'NullTestType',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'ObjectWithArgs',
    wrapped: true,
    fields: [
      {
        name: 'args_unspecified',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'objargs',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'objfuncargs',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'objname',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'OidList',
    wrapped: true,
    fields: [
      {
        name: 'items',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'OnConflictClause',
    wrapped: true,
    fields: [
      {
        name: 'action',
        type: 'OnConflictAction',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'infer',
        type: 'InferClause',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'targetList',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'whereClause',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'OnConflictExpr',
    wrapped: true,
    fields: [
      {
        name: 'action',
        type: 'OnConflictAction',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'arbiterElems',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'arbiterWhere',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'constraint',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'exclRelIndex',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'exclRelTlist',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'onConflictSet',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'onConflictWhere',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'OpExpr',
    wrapped: true,
    fields: [
      {
        name: 'args',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'inputcollid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'opcollid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'opno',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'opresulttype',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'opretset',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'Param',
    wrapped: true,
    fields: [
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'paramcollid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'paramid',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'paramkind',
        type: 'ParamKind',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'paramtype',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'paramtypmod',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'ParamRef',
    wrapped: true,
    fields: [
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'number',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'ParseResult',
    wrapped: false,
    fields: [
      {
        name: 'stmts',
        type: 'RawStmt',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'version',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'PartitionBoundSpec',
    wrapped: true,
    fields: [
      {
        name: 'is_default',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'listdatums',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'lowerdatums',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'modulus',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'remainder',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'strategy',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'upperdatums',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'PartitionCmd',
    wrapped: true,
    fields: [
      {
        name: 'bound',
        type: 'PartitionBoundSpec',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'concurrent',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'name',
        type: 'RangeVar',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'PartitionElem',
    wrapped: true,
    fields: [
      {
        name: 'collation',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'expr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'name',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'opclass',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'PartitionRangeDatum',
    wrapped: true,
    fields: [
      {
        name: 'kind',
        type: 'PartitionRangeDatumKind',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'value',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'PartitionSpec',
    wrapped: true,
    fields: [
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'partParams',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'strategy',
        type: 'PartitionStrategy',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'PLAssignStmt',
    wrapped: true,
    fields: [
      {
        name: 'indirection',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'name',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'nnames',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'val',
        type: 'SelectStmt',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'PrepareStmt',
    wrapped: true,
    fields: [
      {
        name: 'argtypes',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'name',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'query',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'PublicationObjSpec',
    wrapped: true,
    fields: [
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'name',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'pubobjtype',
        type: 'PublicationObjSpecType',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'pubtable',
        type: 'PublicationTable',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'PublicationTable',
    wrapped: true,
    fields: [
      {
        name: 'columns',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'relation',
        type: 'RangeVar',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'whereClause',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'Query',
    wrapped: true,
    fields: [
      {
        name: 'canSetTag',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'commandType',
        type: 'CmdType',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'constraintDeps',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'cteList',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'distinctClause',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'groupClause',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'groupDistinct',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'groupingSets',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'hasAggs',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'hasDistinctOn',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'hasForUpdate',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'hasModifyingCTE',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'hasRecursive',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'hasRowSecurity',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'hasSubLinks',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'hasTargetSRFs',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'hasWindowFuncs',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'havingQual',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'isReturn',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'jointree',
        type: 'FromExpr',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'limitCount',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'limitOffset',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'limitOption',
        type: 'LimitOption',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'mergeActionList',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'mergeUseOuterJoin',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'onConflict',
        type: 'OnConflictExpr',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'override',
        type: 'OverridingKind',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'querySource',
        type: 'QuerySource',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'resultRelation',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'returningList',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'rowMarks',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'rtable',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'rteperminfos',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'setOperations',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'sortClause',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'stmt_len',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'stmt_location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'targetList',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'utilityStmt',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'windowClause',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'withCheckOptions',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'RangeFunction',
    wrapped: true,
    fields: [
      {
        name: 'alias',
        type: 'Alias',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'coldeflist',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'functions',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'is_rowsfrom',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'lateral',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'ordinality',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'RangeSubselect',
    wrapped: true,
    fields: [
      {
        name: 'alias',
        type: 'Alias',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'lateral',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'subquery',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'RangeTableFunc',
    wrapped: true,
    fields: [
      {
        name: 'alias',
        type: 'Alias',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'columns',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'docexpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'lateral',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'namespaces',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'rowexpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'RangeTableFuncCol',
    wrapped: true,
    fields: [
      {
        name: 'coldefexpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'colexpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'colname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'for_ordinality',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'is_not_null',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'typeName',
        type: 'TypeName',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'RangeTableSample',
    wrapped: true,
    fields: [
      {
        name: 'args',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'method',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'relation',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'repeatable',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'RangeTblEntry',
    wrapped: true,
    fields: [
      {
        name: 'alias',
        type: 'Alias',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'colcollations',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'coltypes',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'coltypmods',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'ctelevelsup',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'ctename',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'enrname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'enrtuples',
        type: 'double',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'eref',
        type: 'Alias',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'funcordinality',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'functions',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'inFromCl',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'inh',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'join_using_alias',
        type: 'Alias',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'joinaliasvars',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'joinleftcols',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'joinmergedcols',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'joinrightcols',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'jointype',
        type: 'JoinType',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'lateral',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'perminfoindex',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'relid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'relkind',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'rellockmode',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'rtekind',
        type: 'RTEKind',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'security_barrier',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'securityQuals',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'self_reference',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'subquery',
        type: 'Query',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'tablefunc',
        type: 'TableFunc',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'tablesample',
        type: 'TableSampleClause',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'values_lists',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'RangeTblFunction',
    wrapped: true,
    fields: [
      {
        name: 'funccolcollations',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'funccolcount',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'funccolnames',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'funccoltypes',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'funccoltypmods',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'funcexpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'funcparams',
        type: 'uint64',
        isNode: false,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'RangeTblRef',
    wrapped: true,
    fields: [
      {
        name: 'rtindex',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'RangeVar',
    wrapped: true,
    fields: [
      {
        name: 'alias',
        type: 'Alias',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'catalogname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'inh',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'relname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'relpersistence',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'schemaname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'RawStmt',
    wrapped: true,
    fields: [
      {
        name: 'stmt',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'stmt_len',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'stmt_location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'ReassignOwnedStmt',
    wrapped: true,
    fields: [
      {
        name: 'newrole',
        type: 'RoleSpec',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'roles',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'RefreshMatViewStmt',
    wrapped: true,
    fields: [
      {
        name: 'concurrent',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'relation',
        type: 'RangeVar',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'skipData',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'ReindexStmt',
    wrapped: true,
    fields: [
      {
        name: 'kind',
        type: 'ReindexObjectType',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'name',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'params',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'relation',
        type: 'RangeVar',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'RelabelType',
    wrapped: true,
    fields: [
      {
        name: 'arg',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'relabelformat',
        type: 'CoercionForm',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'resultcollid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'resulttype',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'resulttypmod',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'RenameStmt',
    wrapped: true,
    fields: [
      {
        name: 'behavior',
        type: 'DropBehavior',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'missing_ok',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'newname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'object',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'relation',
        type: 'RangeVar',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'relationType',
        type: 'ObjectType',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'renameType',
        type: 'ObjectType',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'subname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'ReplicaIdentityStmt',
    wrapped: true,
    fields: [
      {
        name: 'identity_type',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'name',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'ResTarget',
    wrapped: true,
    fields: [
      {
        name: 'indirection',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'name',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'val',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'ReturnStmt',
    wrapped: true,
    fields: [
      {
        name: 'returnval',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'RoleSpec',
    wrapped: true,
    fields: [
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'rolename',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'roletype',
        type: 'RoleSpecType',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'RowCompareExpr',
    wrapped: true,
    fields: [
      {
        name: 'inputcollids',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'largs',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'opfamilies',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'opnos',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'rargs',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'rctype',
        type: 'RowCompareType',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'RowExpr',
    wrapped: true,
    fields: [
      {
        name: 'args',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'colnames',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'row_format',
        type: 'CoercionForm',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'row_typeid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'RowMarkClause',
    wrapped: true,
    fields: [
      {
        name: 'pushedDown',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'rti',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'strength',
        type: 'LockClauseStrength',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'waitPolicy',
        type: 'LockWaitPolicy',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'RTEPermissionInfo',
    wrapped: true,
    fields: [
      {
        name: 'checkAsUser',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'inh',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'insertedCols',
        type: 'uint64',
        isNode: false,
        isArray: true,
        optional: true
      },
      {
        name: 'relid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'requiredPerms',
        type: 'uint64',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'selectedCols',
        type: 'uint64',
        isNode: false,
        isArray: true,
        optional: true
      },
      {
        name: 'updatedCols',
        type: 'uint64',
        isNode: false,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'RuleStmt',
    wrapped: true,
    fields: [
      {
        name: 'actions',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'event',
        type: 'CmdType',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'instead',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'relation',
        type: 'RangeVar',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'replace',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'rulename',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'whereClause',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'ScalarArrayOpExpr',
    wrapped: true,
    fields: [
      {
        name: 'args',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'inputcollid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'opno',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'useOr',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'ScanResult',
    wrapped: false,
    fields: [
      {
        name: 'tokens',
        type: 'ScanToken',
        isNode: false,
        isArray: true,
        optional: true
      },
      {
        name: 'version',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'ScanToken',
    wrapped: false,
    fields: [
      {
        name: 'end',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'keywordKind',
        type: 'KeywordKind',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'start',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'token',
        type: 'Token',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'SecLabelStmt',
    wrapped: true,
    fields: [
      {
        name: 'label',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'object',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'objtype',
        type: 'ObjectType',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'provider',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'SelectStmt',
    wrapped: true,
    fields: [
      {
        name: 'all',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'distinctClause',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'fromClause',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'groupClause',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'groupDistinct',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'havingClause',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'intoClause',
        type: 'IntoClause',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'larg',
        type: 'SelectStmt',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'limitCount',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'limitOffset',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'limitOption',
        type: 'LimitOption',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'lockingClause',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'op',
        type: 'SetOperation',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'rarg',
        type: 'SelectStmt',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'sortClause',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'targetList',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'valuesLists',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'whereClause',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'windowClause',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'withClause',
        type: 'WithClause',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'SetOperationStmt',
    wrapped: true,
    fields: [
      {
        name: 'all',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'colCollations',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'colTypes',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'colTypmods',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'groupClauses',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'larg',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'op',
        type: 'SetOperation',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'rarg',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'SetToDefault',
    wrapped: true,
    fields: [
      {
        name: 'collation',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'typeId',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'typeMod',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'SortBy',
    wrapped: true,
    fields: [
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'node',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'sortby_dir',
        type: 'SortByDir',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'sortby_nulls',
        type: 'SortByNulls',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'useOp',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'SortGroupClause',
    wrapped: true,
    fields: [
      {
        name: 'eqop',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'hashable',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'nulls_first',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'sortop',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'tleSortGroupRef',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'SQLValueFunction',
    wrapped: true,
    fields: [
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'op',
        type: 'SQLValueFunctionOp',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'type',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'typmod',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'StatsElem',
    wrapped: true,
    fields: [
      {
        name: 'expr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'name',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'String',
    wrapped: true,
    fields: [
      {
        name: 'sval',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'SubLink',
    wrapped: true,
    fields: [
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'operName',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'subLinkId',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'subLinkType',
        type: 'SubLinkType',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'subselect',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'testexpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'SubPlan',
    wrapped: true,
    fields: [
      {
        name: 'args',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'firstColCollation',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'firstColType',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'firstColTypmod',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'parallel_safe',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'paramIds',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'parParam',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'per_call_cost',
        type: 'double',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'plan_id',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'plan_name',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'setParam',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'startup_cost',
        type: 'double',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'subLinkType',
        type: 'SubLinkType',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'testexpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'unknownEqFalse',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'useHashTable',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'SubscriptingRef',
    wrapped: true,
    fields: [
      {
        name: 'refassgnexpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'refcollid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'refcontainertype',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'refelemtype',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'refexpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'reflowerindexpr',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'refrestype',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'reftypmod',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'refupperindexpr',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'TableFunc',
    wrapped: true,
    fields: [
      {
        name: 'colcollations',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'coldefexprs',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'colexprs',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'colnames',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'coltypes',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'coltypmods',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'docexpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'notnulls',
        type: 'uint64',
        isNode: false,
        isArray: true,
        optional: true
      },
      {
        name: 'ns_names',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'ns_uris',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'ordinalitycol',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'rowexpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'TableLikeClause',
    wrapped: true,
    fields: [
      {
        name: 'options',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'relation',
        type: 'RangeVar',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'relationOid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'TableSampleClause',
    wrapped: true,
    fields: [
      {
        name: 'args',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'repeatable',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'tsmhandler',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'TargetEntry',
    wrapped: true,
    fields: [
      {
        name: 'expr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'resjunk',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'resname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'resno',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'resorigcol',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'resorigtbl',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'ressortgroupref',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'TransactionStmt',
    wrapped: true,
    fields: [
      {
        name: 'chain',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'gid',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'kind',
        type: 'TransactionStmtKind',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'savepoint_name',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'TriggerTransition',
    wrapped: true,
    fields: [
      {
        name: 'isNew',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'isTable',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'name',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'TruncateStmt',
    wrapped: true,
    fields: [
      {
        name: 'behavior',
        type: 'DropBehavior',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'relations',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'restart_seqs',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'TypeCast',
    wrapped: true,
    fields: [
      {
        name: 'arg',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'typeName',
        type: 'TypeName',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'TypeName',
    wrapped: true,
    fields: [
      {
        name: 'arrayBounds',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'names',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'pct_type',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'setof',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'typemod',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'typeOid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'typmods',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'UnlistenStmt',
    wrapped: true,
    fields: [
      {
        name: 'conditionname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'UpdateStmt',
    wrapped: true,
    fields: [
      {
        name: 'fromClause',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'relation',
        type: 'RangeVar',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'returningList',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'targetList',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'whereClause',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'withClause',
        type: 'WithClause',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'VacuumRelation',
    wrapped: true,
    fields: [
      {
        name: 'oid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'relation',
        type: 'RangeVar',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'va_cols',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'VacuumStmt',
    wrapped: true,
    fields: [
      {
        name: 'is_vacuumcmd',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'rels',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'Var',
    wrapped: true,
    fields: [
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'varattno',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'varcollid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'varlevelsup',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'varno',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'varnullingrels',
        type: 'uint64',
        isNode: false,
        isArray: true,
        optional: true
      },
      {
        name: 'vartype',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'vartypmod',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'VariableSetStmt',
    wrapped: true,
    fields: [
      {
        name: 'args',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'is_local',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'kind',
        type: 'VariableSetKind',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'name',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'VariableShowStmt',
    wrapped: true,
    fields: [
      {
        name: 'name',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'ViewStmt',
    wrapped: true,
    fields: [
      {
        name: 'aliases',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'query',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'replace',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'view',
        type: 'RangeVar',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'withCheckOption',
        type: 'ViewCheckOption',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'WindowClause',
    wrapped: true,
    fields: [
      {
        name: 'copiedOrder',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'endInRangeFunc',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'endOffset',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'frameOptions',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'inRangeAsc',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'inRangeColl',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'inRangeNullsFirst',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'name',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'orderClause',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'partitionClause',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'refname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'runCondition',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'startInRangeFunc',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'startOffset',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'winref',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'WindowDef',
    wrapped: true,
    fields: [
      {
        name: 'endOffset',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'frameOptions',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'name',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'orderClause',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'partitionClause',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'refname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'startOffset',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'WindowFunc',
    wrapped: true,
    fields: [
      {
        name: 'aggfilter',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'args',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'inputcollid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'winagg',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'wincollid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'winfnoid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'winref',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'winstar',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'wintype',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'WithCheckOption',
    wrapped: true,
    fields: [
      {
        name: 'cascaded',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'kind',
        type: 'WCOKind',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'polname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'qual',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'relname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'WithClause',
    wrapped: true,
    fields: [
      {
        name: 'ctes',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'recursive',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'XmlExpr',
    wrapped: true,
    fields: [
      {
        name: 'arg_names',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'args',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'indent',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'name',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'named_args',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'op',
        type: 'XmlExprOp',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'type',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'typmod',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xmloption',
        type: 'XmlOptionType',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'XmlSerialize',
    wrapped: true,
    fields: [
      {
        name: 'expr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'indent',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'typeName',
        type: 'TypeName',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'xmloption',
        type: 'XmlOptionType',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  }
];",
    "file": "custom-node-specs.ts",
  },
]
`;

exports[`runtime-schema disabled runtime schema 1`] = `
[
  {
    "code": "/**
* This file was automatically generated by pg-proto-parser@latest.
* DO NOT MODIFY IT BY HAND. Instead, modify the source proto file,
* and run the pg-proto-parser generate command to regenerate this file.
*/
import { OverridingKind, QuerySource, SortByDir, SortByNulls, SetQuantifier, A_Expr_Kind, RoleSpecType, TableLikeOption, DefElemAction, PartitionStrategy, PartitionRangeDatumKind, RTEKind, WCOKind, GroupingSetKind, CTEMaterialize, SetOperation, ObjectType, DropBehavior, AlterTableType, GrantTargetType, VariableSetKind, ConstrType, ImportForeignSchemaType, RoleStmtType, FetchDirection, FunctionParameterMode, TransactionStmtKind, ViewCheckOption, DiscardMode, ReindexObjectType, AlterTSConfigType, PublicationObjSpecType, AlterPublicationAction, AlterSubscriptionType, OnCommitAction, ParamKind, CoercionContext, CoercionForm, BoolExprType, SubLinkType, RowCompareType, MinMaxOp, SQLValueFunctionOp, XmlExprOp, XmlOptionType, JsonEncoding, JsonFormatType, JsonConstructorType, JsonValueType, NullTestType, BoolTestType, CmdType, JoinType, AggStrategy, AggSplit, SetOpCmd, SetOpStrategy, OnConflictAction, LimitOption, LockClauseStrength, LockWaitPolicy, LockTupleMode, KeywordKind, Token } from "./enums";
export type Node = ParseResult | ScanResult | Integer | Float | Boolean | String | BitString | List | OidList | IntList | A_Const | Alias | RangeVar | TableFunc | IntoClause | Var | Param | Aggref | GroupingFunc | WindowFunc | SubscriptingRef | FuncExpr | NamedArgExpr | OpExpr | DistinctExpr | NullIfExpr | ScalarArrayOpExpr | BoolExpr | SubLink | SubPlan | AlternativeSubPlan | FieldSelect | FieldStore | RelabelType | CoerceViaIO | ArrayCoerceExpr | ConvertRowtypeExpr | CollateExpr | CaseExpr | CaseWhen | CaseTestExpr | ArrayExpr | RowExpr | RowCompareExpr | CoalesceExpr | MinMaxExpr | SQLValueFunction | XmlExpr | JsonFormat | JsonReturning | JsonValueExpr | JsonConstructorExpr | JsonIsPredicate | NullTest | BooleanTest | CoerceToDomain | CoerceToDomainValue | SetToDefault | CurrentOfExpr | NextValueExpr | InferenceElem | TargetEntry | RangeTblRef | JoinExpr | FromExpr | OnConflictExpr | Query | TypeName | ColumnRef | ParamRef | A_Expr | TypeCast | CollateClause | RoleSpec | FuncCall | A_Star | A_Indices | A_Indirection | A_ArrayExpr | ResTarget | MultiAssignRef | SortBy | WindowDef | RangeSubselect | RangeFunction | RangeTableFunc | RangeTableFuncCol | RangeTableSample | ColumnDef | TableLikeClause | IndexElem | DefElem | LockingClause | XmlSerialize | PartitionElem | PartitionSpec | PartitionBoundSpec | PartitionRangeDatum | PartitionCmd | RangeTblEntry | RTEPermissionInfo | RangeTblFunction | TableSampleClause | WithCheckOption | SortGroupClause | GroupingSet | WindowClause | RowMarkClause | WithClause | InferClause | OnConflictClause | CTESearchClause | CTECycleClause | CommonTableExpr | MergeWhenClause | MergeAction | TriggerTransition | JsonOutput | JsonKeyValue | JsonObjectConstructor | JsonArrayConstructor | JsonArrayQueryConstructor | JsonAggConstructor | JsonObjectAgg | JsonArrayAgg | RawStmt | InsertStmt | DeleteStmt | UpdateStmt | MergeStmt | SelectStmt | SetOperationStmt | ReturnStmt | PLAssignStmt | CreateSchemaStmt | AlterTableStmt | ReplicaIdentityStmt | AlterTableCmd | AlterCollationStmt | AlterDomainStmt | GrantStmt | ObjectWithArgs | AccessPriv | GrantRoleStmt | AlterDefaultPrivilegesStmt | CopyStmt | VariableSetStmt | VariableShowStmt | CreateStmt | Constraint | CreateTableSpaceStmt | DropTableSpaceStmt | AlterTableSpaceOptionsStmt | AlterTableMoveAllStmt | CreateExtensionStmt | AlterExtensionStmt | AlterExtensionContentsStmt | CreateFdwStmt | AlterFdwStmt | CreateForeignServerStmt | AlterForeignServerStmt | CreateForeignTableStmt | CreateUserMappingStmt | AlterUserMappingStmt | DropUserMappingStmt | ImportForeignSchemaStmt | CreatePolicyStmt | AlterPolicyStmt | CreateAmStmt | CreateTrigStmt | CreateEventTrigStmt | AlterEventTrigStmt | CreatePLangStmt | CreateRoleStmt | AlterRoleStmt | AlterRoleSetStmt | DropRoleStmt | CreateSeqStmt | AlterSeqStmt | DefineStmt | CreateDomainStmt | CreateOpClassStmt | CreateOpClassItem | CreateOpFamilyStmt | AlterOpFamilyStmt | DropStmt | TruncateStmt | CommentStmt | SecLabelStmt | DeclareCursorStmt | ClosePortalStmt | FetchStmt | IndexStmt | CreateStatsStmt | StatsElem | AlterStatsStmt | CreateFunctionStmt | FunctionParameter | AlterFunctionStmt | DoStmt | InlineCodeBlock | CallStmt | CallContext | RenameStmt | AlterObjectDependsStmt | AlterObjectSchemaStmt | AlterOwnerStmt | AlterOperatorStmt | AlterTypeStmt | RuleStmt | NotifyStmt | ListenStmt | UnlistenStmt | TransactionStmt | CompositeTypeStmt | CreateEnumStmt | CreateRangeStmt | AlterEnumStmt | ViewStmt | LoadStmt | CreatedbStmt | AlterDatabaseStmt | AlterDatabaseRefreshCollStmt | AlterDatabaseSetStmt | DropdbStmt | AlterSystemStmt | ClusterStmt | VacuumStmt | VacuumRelation | ExplainStmt | CreateTableAsStmt | RefreshMatViewStmt | CheckPointStmt | DiscardStmt | LockStmt | ConstraintsSetStmt | ReindexStmt | CreateConversionStmt | CreateCastStmt | CreateTransformStmt | PrepareStmt | ExecuteStmt | DeallocateStmt | DropOwnedStmt | ReassignOwnedStmt | AlterTSDictionaryStmt | AlterTSConfigurationStmt | PublicationTable | PublicationObjSpec | CreatePublicationStmt | AlterPublicationStmt | CreateSubscriptionStmt | AlterSubscriptionStmt | DropSubscriptionStmt | ScanToken;
export interface ParseResult {
  version?: number;
  stmts?: RawStmt[];
}
export interface ScanResult {
  version?: number;
  tokens?: ScanToken[];
}
export interface Integer {
  ival?: number;
}
export interface Float {
  fval?: string;
}
export interface Boolean {
  boolval?: boolean;
}
export interface String {
  sval?: string;
}
export interface BitString {
  bsval?: string;
}
export interface List {
  items?: Node[];
}
export interface OidList {
  items?: Node[];
}
export interface IntList {
  items?: Node[];
}
export interface A_Const {
  ival?: Integer;
  fval?: Float;
  boolval?: Boolean;
  sval?: String;
  bsval?: BitString;
  isnull?: boolean;
  location?: number;
}
export interface Alias {
  aliasname?: string;
  colnames?: Node[];
}
export interface RangeVar {
  catalogname?: string;
  schemaname?: string;
  relname?: string;
  inh?: boolean;
  relpersistence?: string;
  alias?: Alias;
  location?: number;
}
export interface TableFunc {
  ns_uris?: Node[];
  ns_names?: Node[];
  docexpr?: Node;
  rowexpr?: Node;
  colnames?: Node[];
  coltypes?: Node[];
  coltypmods?: Node[];
  colcollations?: Node[];
  colexprs?: Node[];
  coldefexprs?: Node[];
  notnulls?: bigint[];
  ordinalitycol?: number;
  location?: number;
}
export interface IntoClause {
  rel?: RangeVar;
  colNames?: Node[];
  accessMethod?: string;
  options?: Node[];
  onCommit?: OnCommitAction;
  tableSpaceName?: string;
  viewQuery?: Node;
  skipData?: boolean;
}
export interface Var {
  xpr?: Node;
  varno?: number;
  varattno?: number;
  vartype?: number;
  vartypmod?: number;
  varcollid?: number;
  varnullingrels?: bigint[];
  varlevelsup?: number;
  location?: number;
}
export interface Param {
  xpr?: Node;
  paramkind?: ParamKind;
  paramid?: number;
  paramtype?: number;
  paramtypmod?: number;
  paramcollid?: number;
  location?: number;
}
export interface Aggref {
  xpr?: Node;
  aggfnoid?: number;
  aggtype?: number;
  aggcollid?: number;
  inputcollid?: number;
  aggargtypes?: Node[];
  aggdirectargs?: Node[];
  args?: Node[];
  aggorder?: Node[];
  aggdistinct?: Node[];
  aggfilter?: Node;
  aggstar?: boolean;
  aggvariadic?: boolean;
  aggkind?: string;
  agglevelsup?: number;
  aggsplit?: AggSplit;
  aggno?: number;
  aggtransno?: number;
  location?: number;
}
export interface GroupingFunc {
  xpr?: Node;
  args?: Node[];
  refs?: Node[];
  agglevelsup?: number;
  location?: number;
}
export interface WindowFunc {
  xpr?: Node;
  winfnoid?: number;
  wintype?: number;
  wincollid?: number;
  inputcollid?: number;
  args?: Node[];
  aggfilter?: Node;
  winref?: number;
  winstar?: boolean;
  winagg?: boolean;
  location?: number;
}
export interface SubscriptingRef {
  xpr?: Node;
  refcontainertype?: number;
  refelemtype?: number;
  refrestype?: number;
  reftypmod?: number;
  refcollid?: number;
  refupperindexpr?: Node[];
  reflowerindexpr?: Node[];
  refexpr?: Node;
  refassgnexpr?: Node;
}
export interface FuncExpr {
  xpr?: Node;
  funcid?: number;
  funcresulttype?: number;
  funcretset?: boolean;
  funcvariadic?: boolean;
  funcformat?: CoercionForm;
  funccollid?: number;
  inputcollid?: number;
  args?: Node[];
  location?: number;
}
export interface NamedArgExpr {
  xpr?: Node;
  arg?: Node;
  name?: string;
  argnumber?: number;
  location?: number;
}
export interface OpExpr {
  xpr?: Node;
  opno?: number;
  opresulttype?: number;
  opretset?: boolean;
  opcollid?: number;
  inputcollid?: number;
  args?: Node[];
  location?: number;
}
export interface DistinctExpr {
  xpr?: Node;
  opno?: number;
  opresulttype?: number;
  opretset?: boolean;
  opcollid?: number;
  inputcollid?: number;
  args?: Node[];
  location?: number;
}
export interface NullIfExpr {
  xpr?: Node;
  opno?: number;
  opresulttype?: number;
  opretset?: boolean;
  opcollid?: number;
  inputcollid?: number;
  args?: Node[];
  location?: number;
}
export interface ScalarArrayOpExpr {
  xpr?: Node;
  opno?: number;
  useOr?: boolean;
  inputcollid?: number;
  args?: Node[];
  location?: number;
}
export interface BoolExpr {
  xpr?: Node;
  boolop?: BoolExprType;
  args?: Node[];
  location?: number;
}
export interface SubLink {
  xpr?: Node;
  subLinkType?: SubLinkType;
  subLinkId?: number;
  testexpr?: Node;
  operName?: Node[];
  subselect?: Node;
  location?: number;
}
export interface SubPlan {
  xpr?: Node;
  subLinkType?: SubLinkType;
  testexpr?: Node;
  paramIds?: Node[];
  plan_id?: number;
  plan_name?: string;
  firstColType?: number;
  firstColTypmod?: number;
  firstColCollation?: number;
  useHashTable?: boolean;
  unknownEqFalse?: boolean;
  parallel_safe?: boolean;
  setParam?: Node[];
  parParam?: Node[];
  args?: Node[];
  startup_cost?: number;
  per_call_cost?: number;
}
export interface AlternativeSubPlan {
  xpr?: Node;
  subplans?: Node[];
}
export interface FieldSelect {
  xpr?: Node;
  arg?: Node;
  fieldnum?: number;
  resulttype?: number;
  resulttypmod?: number;
  resultcollid?: number;
}
export interface FieldStore {
  xpr?: Node;
  arg?: Node;
  newvals?: Node[];
  fieldnums?: Node[];
  resulttype?: number;
}
export interface RelabelType {
  xpr?: Node;
  arg?: Node;
  resulttype?: number;
  resulttypmod?: number;
  resultcollid?: number;
  relabelformat?: CoercionForm;
  location?: number;
}
export interface CoerceViaIO {
  xpr?: Node;
  arg?: Node;
  resulttype?: number;
  resultcollid?: number;
  coerceformat?: CoercionForm;
  location?: number;
}
export interface ArrayCoerceExpr {
  xpr?: Node;
  arg?: Node;
  elemexpr?: Node;
  resulttype?: number;
  resulttypmod?: number;
  resultcollid?: number;
  coerceformat?: CoercionForm;
  location?: number;
}
export interface ConvertRowtypeExpr {
  xpr?: Node;
  arg?: Node;
  resulttype?: number;
  convertformat?: CoercionForm;
  location?: number;
}
export interface CollateExpr {
  xpr?: Node;
  arg?: Node;
  collOid?: number;
  location?: number;
}
export interface CaseExpr {
  xpr?: Node;
  casetype?: number;
  casecollid?: number;
  arg?: Node;
  args?: Node[];
  defresult?: Node;
  location?: number;
}
export interface CaseWhen {
  xpr?: Node;
  expr?: Node;
  result?: Node;
  location?: number;
}
export interface CaseTestExpr {
  xpr?: Node;
  typeId?: number;
  typeMod?: number;
  collation?: number;
}
export interface ArrayExpr {
  xpr?: Node;
  array_typeid?: number;
  array_collid?: number;
  element_typeid?: number;
  elements?: Node[];
  multidims?: boolean;
  location?: number;
}
export interface RowExpr {
  xpr?: Node;
  args?: Node[];
  row_typeid?: number;
  row_format?: CoercionForm;
  colnames?: Node[];
  location?: number;
}
export interface RowCompareExpr {
  xpr?: Node;
  rctype?: RowCompareType;
  opnos?: Node[];
  opfamilies?: Node[];
  inputcollids?: Node[];
  largs?: Node[];
  rargs?: Node[];
}
export interface CoalesceExpr {
  xpr?: Node;
  coalescetype?: number;
  coalescecollid?: number;
  args?: Node[];
  location?: number;
}
export interface MinMaxExpr {
  xpr?: Node;
  minmaxtype?: number;
  minmaxcollid?: number;
  inputcollid?: number;
  op?: MinMaxOp;
  args?: Node[];
  location?: number;
}
export interface SQLValueFunction {
  xpr?: Node;
  op?: SQLValueFunctionOp;
  type?: number;
  typmod?: number;
  location?: number;
}
export interface XmlExpr {
  xpr?: Node;
  op?: XmlExprOp;
  name?: string;
  named_args?: Node[];
  arg_names?: Node[];
  args?: Node[];
  xmloption?: XmlOptionType;
  indent?: boolean;
  type?: number;
  typmod?: number;
  location?: number;
}
export interface JsonFormat {
  format_type?: JsonFormatType;
  encoding?: JsonEncoding;
  location?: number;
}
export interface JsonReturning {
  format?: JsonFormat;
  typid?: number;
  typmod?: number;
}
export interface JsonValueExpr {
  raw_expr?: Node;
  formatted_expr?: Node;
  format?: JsonFormat;
}
export interface JsonConstructorExpr {
  xpr?: Node;
  type?: JsonConstructorType;
  args?: Node[];
  func?: Node;
  coercion?: Node;
  returning?: JsonReturning;
  absent_on_null?: boolean;
  unique?: boolean;
  location?: number;
}
export interface JsonIsPredicate {
  expr?: Node;
  format?: JsonFormat;
  item_type?: JsonValueType;
  unique_keys?: boolean;
  location?: number;
}
export interface NullTest {
  xpr?: Node;
  arg?: Node;
  nulltesttype?: NullTestType;
  argisrow?: boolean;
  location?: number;
}
export interface BooleanTest {
  xpr?: Node;
  arg?: Node;
  booltesttype?: BoolTestType;
  location?: number;
}
export interface CoerceToDomain {
  xpr?: Node;
  arg?: Node;
  resulttype?: number;
  resulttypmod?: number;
  resultcollid?: number;
  coercionformat?: CoercionForm;
  location?: number;
}
export interface CoerceToDomainValue {
  xpr?: Node;
  typeId?: number;
  typeMod?: number;
  collation?: number;
  location?: number;
}
export interface SetToDefault {
  xpr?: Node;
  typeId?: number;
  typeMod?: number;
  collation?: number;
  location?: number;
}
export interface CurrentOfExpr {
  xpr?: Node;
  cvarno?: number;
  cursor_name?: string;
  cursor_param?: number;
}
export interface NextValueExpr {
  xpr?: Node;
  seqid?: number;
  typeId?: number;
}
export interface InferenceElem {
  xpr?: Node;
  expr?: Node;
  infercollid?: number;
  inferopclass?: number;
}
export interface TargetEntry {
  xpr?: Node;
  expr?: Node;
  resno?: number;
  resname?: string;
  ressortgroupref?: number;
  resorigtbl?: number;
  resorigcol?: number;
  resjunk?: boolean;
}
export interface RangeTblRef {
  rtindex?: number;
}
export interface JoinExpr {
  jointype?: JoinType;
  isNatural?: boolean;
  larg?: Node;
  rarg?: Node;
  usingClause?: Node[];
  join_using_alias?: Alias;
  quals?: Node;
  alias?: Alias;
  rtindex?: number;
}
export interface FromExpr {
  fromlist?: Node[];
  quals?: Node;
}
export interface OnConflictExpr {
  action?: OnConflictAction;
  arbiterElems?: Node[];
  arbiterWhere?: Node;
  constraint?: number;
  onConflictSet?: Node[];
  onConflictWhere?: Node;
  exclRelIndex?: number;
  exclRelTlist?: Node[];
}
export interface Query {
  commandType?: CmdType;
  querySource?: QuerySource;
  canSetTag?: boolean;
  utilityStmt?: Node;
  resultRelation?: number;
  hasAggs?: boolean;
  hasWindowFuncs?: boolean;
  hasTargetSRFs?: boolean;
  hasSubLinks?: boolean;
  hasDistinctOn?: boolean;
  hasRecursive?: boolean;
  hasModifyingCTE?: boolean;
  hasForUpdate?: boolean;
  hasRowSecurity?: boolean;
  isReturn?: boolean;
  cteList?: Node[];
  rtable?: Node[];
  rteperminfos?: Node[];
  jointree?: FromExpr;
  mergeActionList?: Node[];
  mergeUseOuterJoin?: boolean;
  targetList?: Node[];
  override?: OverridingKind;
  onConflict?: OnConflictExpr;
  returningList?: Node[];
  groupClause?: Node[];
  groupDistinct?: boolean;
  groupingSets?: Node[];
  havingQual?: Node;
  windowClause?: Node[];
  distinctClause?: Node[];
  sortClause?: Node[];
  limitOffset?: Node;
  limitCount?: Node;
  limitOption?: LimitOption;
  rowMarks?: Node[];
  setOperations?: Node;
  constraintDeps?: Node[];
  withCheckOptions?: Node[];
  stmt_location?: number;
  stmt_len?: number;
}
export interface TypeName {
  names?: Node[];
  typeOid?: number;
  setof?: boolean;
  pct_type?: boolean;
  typmods?: Node[];
  typemod?: number;
  arrayBounds?: Node[];
  location?: number;
}
export interface ColumnRef {
  fields?: Node[];
  location?: number;
}
export interface ParamRef {
  number?: number;
  location?: number;
}
export interface A_Expr {
  kind?: A_Expr_Kind;
  name?: Node[];
  lexpr?: Node;
  rexpr?: Node;
  location?: number;
}
export interface TypeCast {
  arg?: Node;
  typeName?: TypeName;
  location?: number;
}
export interface CollateClause {
  arg?: Node;
  collname?: Node[];
  location?: number;
}
export interface RoleSpec {
  roletype?: RoleSpecType;
  rolename?: string;
  location?: number;
}
export interface FuncCall {
  funcname?: Node[];
  args?: Node[];
  agg_order?: Node[];
  agg_filter?: Node;
  over?: WindowDef;
  agg_within_group?: boolean;
  agg_star?: boolean;
  agg_distinct?: boolean;
  func_variadic?: boolean;
  funcformat?: CoercionForm;
  location?: number;
}
export interface A_Star {}
export interface A_Indices {
  is_slice?: boolean;
  lidx?: Node;
  uidx?: Node;
}
export interface A_Indirection {
  arg?: Node;
  indirection?: Node[];
}
export interface A_ArrayExpr {
  elements?: Node[];
  location?: number;
}
export interface ResTarget {
  name?: string;
  indirection?: Node[];
  val?: Node;
  location?: number;
}
export interface MultiAssignRef {
  source?: Node;
  colno?: number;
  ncolumns?: number;
}
export interface SortBy {
  node?: Node;
  sortby_dir?: SortByDir;
  sortby_nulls?: SortByNulls;
  useOp?: Node[];
  location?: number;
}
export interface WindowDef {
  name?: string;
  refname?: string;
  partitionClause?: Node[];
  orderClause?: Node[];
  frameOptions?: number;
  startOffset?: Node;
  endOffset?: Node;
  location?: number;
}
export interface RangeSubselect {
  lateral?: boolean;
  subquery?: Node;
  alias?: Alias;
}
export interface RangeFunction {
  lateral?: boolean;
  ordinality?: boolean;
  is_rowsfrom?: boolean;
  functions?: Node[];
  alias?: Alias;
  coldeflist?: Node[];
}
export interface RangeTableFunc {
  lateral?: boolean;
  docexpr?: Node;
  rowexpr?: Node;
  namespaces?: Node[];
  columns?: Node[];
  alias?: Alias;
  location?: number;
}
export interface RangeTableFuncCol {
  colname?: string;
  typeName?: TypeName;
  for_ordinality?: boolean;
  is_not_null?: boolean;
  colexpr?: Node;
  coldefexpr?: Node;
  location?: number;
}
export interface RangeTableSample {
  relation?: Node;
  method?: Node[];
  args?: Node[];
  repeatable?: Node;
  location?: number;
}
export interface ColumnDef {
  colname?: string;
  typeName?: TypeName;
  compression?: string;
  inhcount?: number;
  is_local?: boolean;
  is_not_null?: boolean;
  is_from_type?: boolean;
  storage?: string;
  storage_name?: string;
  raw_default?: Node;
  cooked_default?: Node;
  identity?: string;
  identitySequence?: RangeVar;
  generated?: string;
  collClause?: CollateClause;
  collOid?: number;
  constraints?: Node[];
  fdwoptions?: Node[];
  location?: number;
}
export interface TableLikeClause {
  relation?: RangeVar;
  options?: number;
  relationOid?: number;
}
export interface IndexElem {
  name?: string;
  expr?: Node;
  indexcolname?: string;
  collation?: Node[];
  opclass?: Node[];
  opclassopts?: Node[];
  ordering?: SortByDir;
  nulls_ordering?: SortByNulls;
}
export interface DefElem {
  defnamespace?: string;
  defname?: string;
  arg?: Node;
  defaction?: DefElemAction;
  location?: number;
}
export interface LockingClause {
  lockedRels?: Node[];
  strength?: LockClauseStrength;
  waitPolicy?: LockWaitPolicy;
}
export interface XmlSerialize {
  xmloption?: XmlOptionType;
  expr?: Node;
  typeName?: TypeName;
  indent?: boolean;
  location?: number;
}
export interface PartitionElem {
  name?: string;
  expr?: Node;
  collation?: Node[];
  opclass?: Node[];
  location?: number;
}
export interface PartitionSpec {
  strategy?: PartitionStrategy;
  partParams?: Node[];
  location?: number;
}
export interface PartitionBoundSpec {
  strategy?: string;
  is_default?: boolean;
  modulus?: number;
  remainder?: number;
  listdatums?: Node[];
  lowerdatums?: Node[];
  upperdatums?: Node[];
  location?: number;
}
export interface PartitionRangeDatum {
  kind?: PartitionRangeDatumKind;
  value?: Node;
  location?: number;
}
export interface PartitionCmd {
  name?: RangeVar;
  bound?: PartitionBoundSpec;
  concurrent?: boolean;
}
export interface RangeTblEntry {
  rtekind?: RTEKind;
  relid?: number;
  relkind?: string;
  rellockmode?: number;
  tablesample?: TableSampleClause;
  perminfoindex?: number;
  subquery?: Query;
  security_barrier?: boolean;
  jointype?: JoinType;
  joinmergedcols?: number;
  joinaliasvars?: Node[];
  joinleftcols?: Node[];
  joinrightcols?: Node[];
  join_using_alias?: Alias;
  functions?: Node[];
  funcordinality?: boolean;
  tablefunc?: TableFunc;
  values_lists?: Node[];
  ctename?: string;
  ctelevelsup?: number;
  self_reference?: boolean;
  coltypes?: Node[];
  coltypmods?: Node[];
  colcollations?: Node[];
  enrname?: string;
  enrtuples?: number;
  alias?: Alias;
  eref?: Alias;
  lateral?: boolean;
  inh?: boolean;
  inFromCl?: boolean;
  securityQuals?: Node[];
}
export interface RTEPermissionInfo {
  relid?: number;
  inh?: boolean;
  requiredPerms?: bigint;
  checkAsUser?: number;
  selectedCols?: bigint[];
  insertedCols?: bigint[];
  updatedCols?: bigint[];
}
export interface RangeTblFunction {
  funcexpr?: Node;
  funccolcount?: number;
  funccolnames?: Node[];
  funccoltypes?: Node[];
  funccoltypmods?: Node[];
  funccolcollations?: Node[];
  funcparams?: bigint[];
}
export interface TableSampleClause {
  tsmhandler?: number;
  args?: Node[];
  repeatable?: Node;
}
export interface WithCheckOption {
  kind?: WCOKind;
  relname?: string;
  polname?: string;
  qual?: Node;
  cascaded?: boolean;
}
export interface SortGroupClause {
  tleSortGroupRef?: number;
  eqop?: number;
  sortop?: number;
  nulls_first?: boolean;
  hashable?: boolean;
}
export interface GroupingSet {
  kind?: GroupingSetKind;
  content?: Node[];
  location?: number;
}
export interface WindowClause {
  name?: string;
  refname?: string;
  partitionClause?: Node[];
  orderClause?: Node[];
  frameOptions?: number;
  startOffset?: Node;
  endOffset?: Node;
  runCondition?: Node[];
  startInRangeFunc?: number;
  endInRangeFunc?: number;
  inRangeColl?: number;
  inRangeAsc?: boolean;
  inRangeNullsFirst?: boolean;
  winref?: number;
  copiedOrder?: boolean;
}
export interface RowMarkClause {
  rti?: number;
  strength?: LockClauseStrength;
  waitPolicy?: LockWaitPolicy;
  pushedDown?: boolean;
}
export interface WithClause {
  ctes?: Node[];
  recursive?: boolean;
  location?: number;
}
export interface InferClause {
  indexElems?: Node[];
  whereClause?: Node;
  conname?: string;
  location?: number;
}
export interface OnConflictClause {
  action?: OnConflictAction;
  infer?: InferClause;
  targetList?: Node[];
  whereClause?: Node;
  location?: number;
}
export interface CTESearchClause {
  search_col_list?: Node[];
  search_breadth_first?: boolean;
  search_seq_column?: string;
  location?: number;
}
export interface CTECycleClause {
  cycle_col_list?: Node[];
  cycle_mark_column?: string;
  cycle_mark_value?: Node;
  cycle_mark_default?: Node;
  cycle_path_column?: string;
  location?: number;
  cycle_mark_type?: number;
  cycle_mark_typmod?: number;
  cycle_mark_collation?: number;
  cycle_mark_neop?: number;
}
export interface CommonTableExpr {
  ctename?: string;
  aliascolnames?: Node[];
  ctematerialized?: CTEMaterialize;
  ctequery?: Node;
  search_clause?: CTESearchClause;
  cycle_clause?: CTECycleClause;
  location?: number;
  cterecursive?: boolean;
  cterefcount?: number;
  ctecolnames?: Node[];
  ctecoltypes?: Node[];
  ctecoltypmods?: Node[];
  ctecolcollations?: Node[];
}
export interface MergeWhenClause {
  matched?: boolean;
  commandType?: CmdType;
  override?: OverridingKind;
  condition?: Node;
  targetList?: Node[];
  values?: Node[];
}
export interface MergeAction {
  matched?: boolean;
  commandType?: CmdType;
  override?: OverridingKind;
  qual?: Node;
  targetList?: Node[];
  updateColnos?: Node[];
}
export interface TriggerTransition {
  name?: string;
  isNew?: boolean;
  isTable?: boolean;
}
export interface JsonOutput {
  typeName?: TypeName;
  returning?: JsonReturning;
}
export interface JsonKeyValue {
  key?: Node;
  value?: JsonValueExpr;
}
export interface JsonObjectConstructor {
  exprs?: Node[];
  output?: JsonOutput;
  absent_on_null?: boolean;
  unique?: boolean;
  location?: number;
}
export interface JsonArrayConstructor {
  exprs?: Node[];
  output?: JsonOutput;
  absent_on_null?: boolean;
  location?: number;
}
export interface JsonArrayQueryConstructor {
  query?: Node;
  output?: JsonOutput;
  format?: JsonFormat;
  absent_on_null?: boolean;
  location?: number;
}
export interface JsonAggConstructor {
  output?: JsonOutput;
  agg_filter?: Node;
  agg_order?: Node[];
  over?: WindowDef;
  location?: number;
}
export interface JsonObjectAgg {
  constructor?: JsonAggConstructor;
  arg?: JsonKeyValue;
  absent_on_null?: boolean;
  unique?: boolean;
}
export interface JsonArrayAgg {
  constructor?: JsonAggConstructor;
  arg?: JsonValueExpr;
  absent_on_null?: boolean;
}
export interface RawStmt {
  stmt?: Node;
  stmt_location?: number;
  stmt_len?: number;
}
export interface InsertStmt {
  relation?: RangeVar;
  cols?: Node[];
  selectStmt?: Node;
  onConflictClause?: OnConflictClause;
  returningList?: Node[];
  withClause?: WithClause;
  override?: OverridingKind;
}
export interface DeleteStmt {
  relation?: RangeVar;
  usingClause?: Node[];
  whereClause?: Node;
  returningList?: Node[];
  withClause?: WithClause;
}
export interface UpdateStmt {
  relation?: RangeVar;
  targetList?: Node[];
  whereClause?: Node;
  fromClause?: Node[];
  returningList?: Node[];
  withClause?: WithClause;
}
export interface MergeStmt {
  relation?: RangeVar;
  sourceRelation?: Node;
  joinCondition?: Node;
  mergeWhenClauses?: Node[];
  withClause?: WithClause;
}
export interface SelectStmt {
  distinctClause?: Node[];
  intoClause?: IntoClause;
  targetList?: Node[];
  fromClause?: Node[];
  whereClause?: Node;
  groupClause?: Node[];
  groupDistinct?: boolean;
  havingClause?: Node;
  windowClause?: Node[];
  valuesLists?: Node[];
  sortClause?: Node[];
  limitOffset?: Node;
  limitCount?: Node;
  limitOption?: LimitOption;
  lockingClause?: Node[];
  withClause?: WithClause;
  op?: SetOperation;
  all?: boolean;
  larg?: SelectStmt;
  rarg?: SelectStmt;
}
export interface SetOperationStmt {
  op?: SetOperation;
  all?: boolean;
  larg?: Node;
  rarg?: Node;
  colTypes?: Node[];
  colTypmods?: Node[];
  colCollations?: Node[];
  groupClauses?: Node[];
}
export interface ReturnStmt {
  returnval?: Node;
}
export interface PLAssignStmt {
  name?: string;
  indirection?: Node[];
  nnames?: number;
  val?: SelectStmt;
  location?: number;
}
export interface CreateSchemaStmt {
  schemaname?: string;
  authrole?: RoleSpec;
  schemaElts?: Node[];
  if_not_exists?: boolean;
}
export interface AlterTableStmt {
  relation?: RangeVar;
  cmds?: Node[];
  objtype?: ObjectType;
  missing_ok?: boolean;
}
export interface ReplicaIdentityStmt {
  identity_type?: string;
  name?: string;
}
export interface AlterTableCmd {
  subtype?: AlterTableType;
  name?: string;
  num?: number;
  newowner?: RoleSpec;
  def?: Node;
  behavior?: DropBehavior;
  missing_ok?: boolean;
  recurse?: boolean;
}
export interface AlterCollationStmt {
  collname?: Node[];
}
export interface AlterDomainStmt {
  subtype?: string;
  typeName?: Node[];
  name?: string;
  def?: Node;
  behavior?: DropBehavior;
  missing_ok?: boolean;
}
export interface GrantStmt {
  is_grant?: boolean;
  targtype?: GrantTargetType;
  objtype?: ObjectType;
  objects?: Node[];
  privileges?: Node[];
  grantees?: Node[];
  grant_option?: boolean;
  grantor?: RoleSpec;
  behavior?: DropBehavior;
}
export interface ObjectWithArgs {
  objname?: Node[];
  objargs?: Node[];
  objfuncargs?: Node[];
  args_unspecified?: boolean;
}
export interface AccessPriv {
  priv_name?: string;
  cols?: Node[];
}
export interface GrantRoleStmt {
  granted_roles?: Node[];
  grantee_roles?: Node[];
  is_grant?: boolean;
  opt?: Node[];
  grantor?: RoleSpec;
  behavior?: DropBehavior;
}
export interface AlterDefaultPrivilegesStmt {
  options?: Node[];
  action?: GrantStmt;
}
export interface CopyStmt {
  relation?: RangeVar;
  query?: Node;
  attlist?: Node[];
  is_from?: boolean;
  is_program?: boolean;
  filename?: string;
  options?: Node[];
  whereClause?: Node;
}
export interface VariableSetStmt {
  kind?: VariableSetKind;
  name?: string;
  args?: Node[];
  is_local?: boolean;
}
export interface VariableShowStmt {
  name?: string;
}
export interface CreateStmt {
  relation?: RangeVar;
  tableElts?: Node[];
  inhRelations?: Node[];
  partbound?: PartitionBoundSpec;
  partspec?: PartitionSpec;
  ofTypename?: TypeName;
  constraints?: Node[];
  options?: Node[];
  oncommit?: OnCommitAction;
  tablespacename?: string;
  accessMethod?: string;
  if_not_exists?: boolean;
}
export interface Constraint {
  contype?: ConstrType;
  conname?: string;
  deferrable?: boolean;
  initdeferred?: boolean;
  location?: number;
  is_no_inherit?: boolean;
  raw_expr?: Node;
  cooked_expr?: string;
  generated_when?: string;
  nulls_not_distinct?: boolean;
  keys?: Node[];
  including?: Node[];
  exclusions?: Node[];
  options?: Node[];
  indexname?: string;
  indexspace?: string;
  reset_default_tblspc?: boolean;
  access_method?: string;
  where_clause?: Node;
  pktable?: RangeVar;
  fk_attrs?: Node[];
  pk_attrs?: Node[];
  fk_matchtype?: string;
  fk_upd_action?: string;
  fk_del_action?: string;
  fk_del_set_cols?: Node[];
  old_conpfeqop?: Node[];
  old_pktable_oid?: number;
  skip_validation?: boolean;
  initially_valid?: boolean;
}
export interface CreateTableSpaceStmt {
  tablespacename?: string;
  owner?: RoleSpec;
  location?: string;
  options?: Node[];
}
export interface DropTableSpaceStmt {
  tablespacename?: string;
  missing_ok?: boolean;
}
export interface AlterTableSpaceOptionsStmt {
  tablespacename?: string;
  options?: Node[];
  isReset?: boolean;
}
export interface AlterTableMoveAllStmt {
  orig_tablespacename?: string;
  objtype?: ObjectType;
  roles?: Node[];
  new_tablespacename?: string;
  nowait?: boolean;
}
export interface CreateExtensionStmt {
  extname?: string;
  if_not_exists?: boolean;
  options?: Node[];
}
export interface AlterExtensionStmt {
  extname?: string;
  options?: Node[];
}
export interface AlterExtensionContentsStmt {
  extname?: string;
  action?: number;
  objtype?: ObjectType;
  object?: Node;
}
export interface CreateFdwStmt {
  fdwname?: string;
  func_options?: Node[];
  options?: Node[];
}
export interface AlterFdwStmt {
  fdwname?: string;
  func_options?: Node[];
  options?: Node[];
}
export interface CreateForeignServerStmt {
  servername?: string;
  servertype?: string;
  version?: string;
  fdwname?: string;
  if_not_exists?: boolean;
  options?: Node[];
}
export interface AlterForeignServerStmt {
  servername?: string;
  version?: string;
  options?: Node[];
  has_version?: boolean;
}
export interface CreateForeignTableStmt {
  base?: CreateStmt;
  servername?: string;
  options?: Node[];
}
export interface CreateUserMappingStmt {
  user?: RoleSpec;
  servername?: string;
  if_not_exists?: boolean;
  options?: Node[];
}
export interface AlterUserMappingStmt {
  user?: RoleSpec;
  servername?: string;
  options?: Node[];
}
export interface DropUserMappingStmt {
  user?: RoleSpec;
  servername?: string;
  missing_ok?: boolean;
}
export interface ImportForeignSchemaStmt {
  server_name?: string;
  remote_schema?: string;
  local_schema?: string;
  list_type?: ImportForeignSchemaType;
  table_list?: Node[];
  options?: Node[];
}
export interface CreatePolicyStmt {
  policy_name?: string;
  table?: RangeVar;
  cmd_name?: string;
  permissive?: boolean;
  roles?: Node[];
  qual?: Node;
  with_check?: Node;
}
export interface AlterPolicyStmt {
  policy_name?: string;
  table?: RangeVar;
  roles?: Node[];
  qual?: Node;
  with_check?: Node;
}
export interface CreateAmStmt {
  amname?: string;
  handler_name?: Node[];
  amtype?: string;
}
export interface CreateTrigStmt {
  replace?: boolean;
  isconstraint?: boolean;
  trigname?: string;
  relation?: RangeVar;
  funcname?: Node[];
  args?: Node[];
  row?: boolean;
  timing?: number;
  events?: number;
  columns?: Node[];
  whenClause?: Node;
  transitionRels?: Node[];
  deferrable?: boolean;
  initdeferred?: boolean;
  constrrel?: RangeVar;
}
export interface CreateEventTrigStmt {
  trigname?: string;
  eventname?: string;
  whenclause?: Node[];
  funcname?: Node[];
}
export interface AlterEventTrigStmt {
  trigname?: string;
  tgenabled?: string;
}
export interface CreatePLangStmt {
  replace?: boolean;
  plname?: string;
  plhandler?: Node[];
  plinline?: Node[];
  plvalidator?: Node[];
  pltrusted?: boolean;
}
export interface CreateRoleStmt {
  stmt_type?: RoleStmtType;
  role?: string;
  options?: Node[];
}
export interface AlterRoleStmt {
  role?: RoleSpec;
  options?: Node[];
  action?: number;
}
export interface AlterRoleSetStmt {
  role?: RoleSpec;
  database?: string;
  setstmt?: VariableSetStmt;
}
export interface DropRoleStmt {
  roles?: Node[];
  missing_ok?: boolean;
}
export interface CreateSeqStmt {
  sequence?: RangeVar;
  options?: Node[];
  ownerId?: number;
  for_identity?: boolean;
  if_not_exists?: boolean;
}
export interface AlterSeqStmt {
  sequence?: RangeVar;
  options?: Node[];
  for_identity?: boolean;
  missing_ok?: boolean;
}
export interface DefineStmt {
  kind?: ObjectType;
  oldstyle?: boolean;
  defnames?: Node[];
  args?: Node[];
  definition?: Node[];
  if_not_exists?: boolean;
  replace?: boolean;
}
export interface CreateDomainStmt {
  domainname?: Node[];
  typeName?: TypeName;
  collClause?: CollateClause;
  constraints?: Node[];
}
export interface CreateOpClassStmt {
  opclassname?: Node[];
  opfamilyname?: Node[];
  amname?: string;
  datatype?: TypeName;
  items?: Node[];
  isDefault?: boolean;
}
export interface CreateOpClassItem {
  itemtype?: number;
  name?: ObjectWithArgs;
  number?: number;
  order_family?: Node[];
  class_args?: Node[];
  storedtype?: TypeName;
}
export interface CreateOpFamilyStmt {
  opfamilyname?: Node[];
  amname?: string;
}
export interface AlterOpFamilyStmt {
  opfamilyname?: Node[];
  amname?: string;
  isDrop?: boolean;
  items?: Node[];
}
export interface DropStmt {
  objects?: Node[];
  removeType?: ObjectType;
  behavior?: DropBehavior;
  missing_ok?: boolean;
  concurrent?: boolean;
}
export interface TruncateStmt {
  relations?: Node[];
  restart_seqs?: boolean;
  behavior?: DropBehavior;
}
export interface CommentStmt {
  objtype?: ObjectType;
  object?: Node;
  comment?: string;
}
export interface SecLabelStmt {
  objtype?: ObjectType;
  object?: Node;
  provider?: string;
  label?: string;
}
export interface DeclareCursorStmt {
  portalname?: string;
  options?: number;
  query?: Node;
}
export interface ClosePortalStmt {
  portalname?: string;
}
export interface FetchStmt {
  direction?: FetchDirection;
  howMany?: bigint;
  portalname?: string;
  ismove?: boolean;
}
export interface IndexStmt {
  idxname?: string;
  relation?: RangeVar;
  accessMethod?: string;
  tableSpace?: string;
  indexParams?: Node[];
  indexIncludingParams?: Node[];
  options?: Node[];
  whereClause?: Node;
  excludeOpNames?: Node[];
  idxcomment?: string;
  indexOid?: number;
  oldNumber?: number;
  oldCreateSubid?: number;
  oldFirstRelfilelocatorSubid?: number;
  unique?: boolean;
  nulls_not_distinct?: boolean;
  primary?: boolean;
  isconstraint?: boolean;
  deferrable?: boolean;
  initdeferred?: boolean;
  transformed?: boolean;
  concurrent?: boolean;
  if_not_exists?: boolean;
  reset_default_tblspc?: boolean;
}
export interface CreateStatsStmt {
  defnames?: Node[];
  stat_types?: Node[];
  exprs?: Node[];
  relations?: Node[];
  stxcomment?: string;
  transformed?: boolean;
  if_not_exists?: boolean;
}
export interface StatsElem {
  name?: string;
  expr?: Node;
}
export interface AlterStatsStmt {
  defnames?: Node[];
  stxstattarget?: number;
  missing_ok?: boolean;
}
export interface CreateFunctionStmt {
  is_procedure?: boolean;
  replace?: boolean;
  funcname?: Node[];
  parameters?: Node[];
  returnType?: TypeName;
  options?: Node[];
  sql_body?: Node;
}
export interface FunctionParameter {
  name?: string;
  argType?: TypeName;
  mode?: FunctionParameterMode;
  defexpr?: Node;
}
export interface AlterFunctionStmt {
  objtype?: ObjectType;
  func?: ObjectWithArgs;
  actions?: Node[];
}
export interface DoStmt {
  args?: Node[];
}
export interface InlineCodeBlock {
  source_text?: string;
  langOid?: number;
  langIsTrusted?: boolean;
  atomic?: boolean;
}
export interface CallStmt {
  funccall?: FuncCall;
  funcexpr?: FuncExpr;
  outargs?: Node[];
}
export interface CallContext {
  atomic?: boolean;
}
export interface RenameStmt {
  renameType?: ObjectType;
  relationType?: ObjectType;
  relation?: RangeVar;
  object?: Node;
  subname?: string;
  newname?: string;
  behavior?: DropBehavior;
  missing_ok?: boolean;
}
export interface AlterObjectDependsStmt {
  objectType?: ObjectType;
  relation?: RangeVar;
  object?: Node;
  extname?: String;
  remove?: boolean;
}
export interface AlterObjectSchemaStmt {
  objectType?: ObjectType;
  relation?: RangeVar;
  object?: Node;
  newschema?: string;
  missing_ok?: boolean;
}
export interface AlterOwnerStmt {
  objectType?: ObjectType;
  relation?: RangeVar;
  object?: Node;
  newowner?: RoleSpec;
}
export interface AlterOperatorStmt {
  opername?: ObjectWithArgs;
  options?: Node[];
}
export interface AlterTypeStmt {
  typeName?: Node[];
  options?: Node[];
}
export interface RuleStmt {
  relation?: RangeVar;
  rulename?: string;
  whereClause?: Node;
  event?: CmdType;
  instead?: boolean;
  actions?: Node[];
  replace?: boolean;
}
export interface NotifyStmt {
  conditionname?: string;
  payload?: string;
}
export interface ListenStmt {
  conditionname?: string;
}
export interface UnlistenStmt {
  conditionname?: string;
}
export interface TransactionStmt {
  kind?: TransactionStmtKind;
  options?: Node[];
  savepoint_name?: string;
  gid?: string;
  chain?: boolean;
}
export interface CompositeTypeStmt {
  typevar?: RangeVar;
  coldeflist?: Node[];
}
export interface CreateEnumStmt {
  typeName?: Node[];
  vals?: Node[];
}
export interface CreateRangeStmt {
  typeName?: Node[];
  params?: Node[];
}
export interface AlterEnumStmt {
  typeName?: Node[];
  oldVal?: string;
  newVal?: string;
  newValNeighbor?: string;
  newValIsAfter?: boolean;
  skipIfNewValExists?: boolean;
}
export interface ViewStmt {
  view?: RangeVar;
  aliases?: Node[];
  query?: Node;
  replace?: boolean;
  options?: Node[];
  withCheckOption?: ViewCheckOption;
}
export interface LoadStmt {
  filename?: string;
}
export interface CreatedbStmt {
  dbname?: string;
  options?: Node[];
}
export interface AlterDatabaseStmt {
  dbname?: string;
  options?: Node[];
}
export interface AlterDatabaseRefreshCollStmt {
  dbname?: string;
}
export interface AlterDatabaseSetStmt {
  dbname?: string;
  setstmt?: VariableSetStmt;
}
export interface DropdbStmt {
  dbname?: string;
  missing_ok?: boolean;
  options?: Node[];
}
export interface AlterSystemStmt {
  setstmt?: VariableSetStmt;
}
export interface ClusterStmt {
  relation?: RangeVar;
  indexname?: string;
  params?: Node[];
}
export interface VacuumStmt {
  options?: Node[];
  rels?: Node[];
  is_vacuumcmd?: boolean;
}
export interface VacuumRelation {
  relation?: RangeVar;
  oid?: number;
  va_cols?: Node[];
}
export interface ExplainStmt {
  query?: Node;
  options?: Node[];
}
export interface CreateTableAsStmt {
  query?: Node;
  into?: IntoClause;
  objtype?: ObjectType;
  is_select_into?: boolean;
  if_not_exists?: boolean;
}
export interface RefreshMatViewStmt {
  concurrent?: boolean;
  skipData?: boolean;
  relation?: RangeVar;
}
export interface CheckPointStmt {}
export interface DiscardStmt {
  target?: DiscardMode;
}
export interface LockStmt {
  relations?: Node[];
  mode?: number;
  nowait?: boolean;
}
export interface ConstraintsSetStmt {
  constraints?: Node[];
  deferred?: boolean;
}
export interface ReindexStmt {
  kind?: ReindexObjectType;
  relation?: RangeVar;
  name?: string;
  params?: Node[];
}
export interface CreateConversionStmt {
  conversion_name?: Node[];
  for_encoding_name?: string;
  to_encoding_name?: string;
  func_name?: Node[];
  def?: boolean;
}
export interface CreateCastStmt {
  sourcetype?: TypeName;
  targettype?: TypeName;
  func?: ObjectWithArgs;
  context?: CoercionContext;
  inout?: boolean;
}
export interface CreateTransformStmt {
  replace?: boolean;
  type_name?: TypeName;
  lang?: string;
  fromsql?: ObjectWithArgs;
  tosql?: ObjectWithArgs;
}
export interface PrepareStmt {
  name?: string;
  argtypes?: Node[];
  query?: Node;
}
export interface ExecuteStmt {
  name?: string;
  params?: Node[];
}
export interface DeallocateStmt {
  name?: string;
}
export interface DropOwnedStmt {
  roles?: Node[];
  behavior?: DropBehavior;
}
export interface ReassignOwnedStmt {
  roles?: Node[];
  newrole?: RoleSpec;
}
export interface AlterTSDictionaryStmt {
  dictname?: Node[];
  options?: Node[];
}
export interface AlterTSConfigurationStmt {
  kind?: AlterTSConfigType;
  cfgname?: Node[];
  tokentype?: Node[];
  dicts?: Node[];
  override?: boolean;
  replace?: boolean;
  missing_ok?: boolean;
}
export interface PublicationTable {
  relation?: RangeVar;
  whereClause?: Node;
  columns?: Node[];
}
export interface PublicationObjSpec {
  pubobjtype?: PublicationObjSpecType;
  name?: string;
  pubtable?: PublicationTable;
  location?: number;
}
export interface CreatePublicationStmt {
  pubname?: string;
  options?: Node[];
  pubobjects?: Node[];
  for_all_tables?: boolean;
}
export interface AlterPublicationStmt {
  pubname?: string;
  options?: Node[];
  pubobjects?: Node[];
  for_all_tables?: boolean;
  action?: AlterPublicationAction;
}
export interface CreateSubscriptionStmt {
  subname?: string;
  conninfo?: string;
  publication?: Node[];
  options?: Node[];
}
export interface AlterSubscriptionStmt {
  kind?: AlterSubscriptionType;
  subname?: string;
  conninfo?: string;
  publication?: Node[];
  options?: Node[];
}
export interface DropSubscriptionStmt {
  subname?: string;
  missing_ok?: boolean;
  behavior?: DropBehavior;
}
export interface ScanToken {
  start?: number;
  end?: number;
  token?: Token;
  keywordKind?: KeywordKind;
}",
    "file": "types.ts",
  },
]
`;

exports[`runtime-schema json format enabled 1`] = `
[
  {
    "code": "[
  {
    "name": "A_ArrayExpr",
    "wrapped": true,
    "fields": [
      {
        "name": "elements",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "A_Const",
    "wrapped": true,
    "fields": [
      {
        "name": "boolval",
        "type": "Boolean",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "bsval",
        "type": "BitString",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "fval",
        "type": "Float",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "isnull",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "ival",
        "type": "Integer",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "sval",
        "type": "String",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "A_Expr",
    "wrapped": true,
    "fields": [
      {
        "name": "kind",
        "type": "A_Expr_Kind",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "lexpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "name",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "rexpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "A_Indices",
    "wrapped": true,
    "fields": [
      {
        "name": "is_slice",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "lidx",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "uidx",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "A_Indirection",
    "wrapped": true,
    "fields": [
      {
        "name": "arg",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "indirection",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "A_Star",
    "wrapped": true,
    "fields": []
  },
  {
    "name": "AccessPriv",
    "wrapped": true,
    "fields": [
      {
        "name": "cols",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "priv_name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "Aggref",
    "wrapped": true,
    "fields": [
      {
        "name": "aggargtypes",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "aggcollid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "aggdirectargs",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "aggdistinct",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "aggfilter",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "aggfnoid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "aggkind",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "agglevelsup",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "aggno",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "aggorder",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "aggsplit",
        "type": "AggSplit",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "aggstar",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "aggtransno",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "aggtype",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "aggvariadic",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "args",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "inputcollid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "Alias",
    "wrapped": true,
    "fields": [
      {
        "name": "aliasname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "colnames",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterCollationStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "collname",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterDatabaseRefreshCollStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "dbname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterDatabaseSetStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "dbname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "setstmt",
        "type": "VariableSetStmt",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterDatabaseStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "dbname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterDefaultPrivilegesStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "action",
        "type": "GrantStmt",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterDomainStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "behavior",
        "type": "DropBehavior",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "def",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "missing_ok",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "subtype",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "typeName",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterEnumStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "newVal",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "newValIsAfter",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "newValNeighbor",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "oldVal",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "skipIfNewValExists",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "typeName",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterEventTrigStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "tgenabled",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "trigname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterExtensionContentsStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "action",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "extname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "object",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "objtype",
        "type": "ObjectType",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterExtensionStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "extname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterFdwStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "fdwname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "func_options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterForeignServerStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "has_version",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "servername",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "version",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterFunctionStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "actions",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "func",
        "type": "ObjectWithArgs",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "objtype",
        "type": "ObjectType",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "AlternativeSubPlan",
    "wrapped": true,
    "fields": [
      {
        "name": "subplans",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterObjectDependsStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "extname",
        "type": "String",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "object",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "objectType",
        "type": "ObjectType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "relation",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "remove",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterObjectSchemaStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "missing_ok",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "newschema",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "object",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "objectType",
        "type": "ObjectType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "relation",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterOperatorStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "opername",
        "type": "ObjectWithArgs",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterOpFamilyStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "amname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "isDrop",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "items",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "opfamilyname",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterOwnerStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "newowner",
        "type": "RoleSpec",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "object",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "objectType",
        "type": "ObjectType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "relation",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterPolicyStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "policy_name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "qual",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "roles",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "table",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "with_check",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterPublicationStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "action",
        "type": "AlterPublicationAction",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "for_all_tables",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "pubname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "pubobjects",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterRoleSetStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "database",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "role",
        "type": "RoleSpec",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "setstmt",
        "type": "VariableSetStmt",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterRoleStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "action",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "role",
        "type": "RoleSpec",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterSeqStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "for_identity",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "missing_ok",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "sequence",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterStatsStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "defnames",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "missing_ok",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "stxstattarget",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterSubscriptionStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "conninfo",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "kind",
        "type": "AlterSubscriptionType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "publication",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "subname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterSystemStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "setstmt",
        "type": "VariableSetStmt",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterTableCmd",
    "wrapped": true,
    "fields": [
      {
        "name": "behavior",
        "type": "DropBehavior",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "def",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "missing_ok",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "newowner",
        "type": "RoleSpec",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "num",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "recurse",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "subtype",
        "type": "AlterTableType",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterTableMoveAllStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "new_tablespacename",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "nowait",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "objtype",
        "type": "ObjectType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "orig_tablespacename",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "roles",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterTableSpaceOptionsStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "isReset",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "tablespacename",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterTableStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "cmds",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "missing_ok",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "objtype",
        "type": "ObjectType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "relation",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterTSConfigurationStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "cfgname",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "dicts",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "kind",
        "type": "AlterTSConfigType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "missing_ok",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "override",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "replace",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "tokentype",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterTSDictionaryStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "dictname",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterTypeStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "typeName",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterUserMappingStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "servername",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "user",
        "type": "RoleSpec",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "ArrayCoerceExpr",
    "wrapped": true,
    "fields": [
      {
        "name": "arg",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "coerceformat",
        "type": "CoercionForm",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "elemexpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "resultcollid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "resulttype",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "resulttypmod",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "ArrayExpr",
    "wrapped": true,
    "fields": [
      {
        "name": "array_collid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "array_typeid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "element_typeid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "elements",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "multidims",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "BitString",
    "wrapped": true,
    "fields": [
      {
        "name": "bsval",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "Boolean",
    "wrapped": true,
    "fields": [
      {
        "name": "boolval",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "BooleanTest",
    "wrapped": true,
    "fields": [
      {
        "name": "arg",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "booltesttype",
        "type": "BoolTestType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "BoolExpr",
    "wrapped": true,
    "fields": [
      {
        "name": "args",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "boolop",
        "type": "BoolExprType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CallContext",
    "wrapped": true,
    "fields": [
      {
        "name": "atomic",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CallStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "funccall",
        "type": "FuncCall",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "funcexpr",
        "type": "FuncExpr",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "outargs",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "CaseExpr",
    "wrapped": true,
    "fields": [
      {
        "name": "arg",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "args",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "casecollid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "casetype",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "defresult",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CaseTestExpr",
    "wrapped": true,
    "fields": [
      {
        "name": "collation",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "typeId",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "typeMod",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CaseWhen",
    "wrapped": true,
    "fields": [
      {
        "name": "expr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "result",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CheckPointStmt",
    "wrapped": true,
    "fields": []
  },
  {
    "name": "ClosePortalStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "portalname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "ClusterStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "indexname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "params",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "relation",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CoalesceExpr",
    "wrapped": true,
    "fields": [
      {
        "name": "args",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "coalescecollid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "coalescetype",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CoerceToDomain",
    "wrapped": true,
    "fields": [
      {
        "name": "arg",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "coercionformat",
        "type": "CoercionForm",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "resultcollid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "resulttype",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "resulttypmod",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CoerceToDomainValue",
    "wrapped": true,
    "fields": [
      {
        "name": "collation",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "typeId",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "typeMod",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CoerceViaIO",
    "wrapped": true,
    "fields": [
      {
        "name": "arg",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "coerceformat",
        "type": "CoercionForm",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "resultcollid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "resulttype",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CollateClause",
    "wrapped": true,
    "fields": [
      {
        "name": "arg",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "collname",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CollateExpr",
    "wrapped": true,
    "fields": [
      {
        "name": "arg",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "collOid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "ColumnDef",
    "wrapped": true,
    "fields": [
      {
        "name": "collClause",
        "type": "CollateClause",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "collOid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "colname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "compression",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "constraints",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "cooked_default",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "fdwoptions",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "generated",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "identity",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "identitySequence",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "inhcount",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "is_from_type",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "is_local",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "is_not_null",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "raw_default",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "storage",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "storage_name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "typeName",
        "type": "TypeName",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "ColumnRef",
    "wrapped": true,
    "fields": [
      {
        "name": "fields",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CommentStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "comment",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "object",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "objtype",
        "type": "ObjectType",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CommonTableExpr",
    "wrapped": true,
    "fields": [
      {
        "name": "aliascolnames",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "ctecolcollations",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "ctecolnames",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "ctecoltypes",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "ctecoltypmods",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "ctematerialized",
        "type": "CTEMaterialize",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "ctename",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "ctequery",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "cterecursive",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "cterefcount",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "cycle_clause",
        "type": "CTECycleClause",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "search_clause",
        "type": "CTESearchClause",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CompositeTypeStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "coldeflist",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "typevar",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "Constraint",
    "wrapped": true,
    "fields": [
      {
        "name": "access_method",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "conname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "contype",
        "type": "ConstrType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "cooked_expr",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "deferrable",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "exclusions",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "fk_attrs",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "fk_del_action",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "fk_del_set_cols",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "fk_matchtype",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "fk_upd_action",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "generated_when",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "including",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "indexname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "indexspace",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "initdeferred",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "initially_valid",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "is_no_inherit",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "keys",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "nulls_not_distinct",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "old_conpfeqop",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "old_pktable_oid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "pk_attrs",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "pktable",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "raw_expr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "reset_default_tblspc",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "skip_validation",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "where_clause",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "ConstraintsSetStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "constraints",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "deferred",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "ConvertRowtypeExpr",
    "wrapped": true,
    "fields": [
      {
        "name": "arg",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "convertformat",
        "type": "CoercionForm",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "resulttype",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CopyStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "attlist",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "filename",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "is_from",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "is_program",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "query",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "relation",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "whereClause",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CreateAmStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "amname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "amtype",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "handler_name",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "CreateCastStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "context",
        "type": "CoercionContext",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "func",
        "type": "ObjectWithArgs",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "inout",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "sourcetype",
        "type": "TypeName",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "targettype",
        "type": "TypeName",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CreateConversionStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "conversion_name",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "def",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "for_encoding_name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "func_name",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "to_encoding_name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CreatedbStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "dbname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "CreateDomainStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "collClause",
        "type": "CollateClause",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "constraints",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "domainname",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "typeName",
        "type": "TypeName",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CreateEnumStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "typeName",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "vals",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "CreateEventTrigStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "eventname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "funcname",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "trigname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "whenclause",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "CreateExtensionStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "extname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "if_not_exists",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "CreateFdwStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "fdwname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "func_options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "CreateForeignServerStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "fdwname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "if_not_exists",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "servername",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "servertype",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "version",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CreateForeignTableStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "base",
        "type": "CreateStmt",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "servername",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CreateFunctionStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "funcname",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "is_procedure",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "parameters",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "replace",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "returnType",
        "type": "TypeName",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "sql_body",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CreateOpClassItem",
    "wrapped": true,
    "fields": [
      {
        "name": "class_args",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "itemtype",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "name",
        "type": "ObjectWithArgs",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "number",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "order_family",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "storedtype",
        "type": "TypeName",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CreateOpClassStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "amname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "datatype",
        "type": "TypeName",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "isDefault",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "items",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "opclassname",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "opfamilyname",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "CreateOpFamilyStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "amname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "opfamilyname",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "CreatePLangStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "plhandler",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "plinline",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "plname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "pltrusted",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "plvalidator",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "replace",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CreatePolicyStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "cmd_name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "permissive",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "policy_name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "qual",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "roles",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "table",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "with_check",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CreatePublicationStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "for_all_tables",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "pubname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "pubobjects",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "CreateRangeStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "params",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "typeName",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "CreateRoleStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "role",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "stmt_type",
        "type": "RoleStmtType",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CreateSchemaStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "authrole",
        "type": "RoleSpec",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "if_not_exists",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "schemaElts",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "schemaname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CreateSeqStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "for_identity",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "if_not_exists",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "ownerId",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "sequence",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CreateStatsStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "defnames",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "exprs",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "if_not_exists",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "relations",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "stat_types",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "stxcomment",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "transformed",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CreateStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "accessMethod",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "constraints",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "if_not_exists",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "inhRelations",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "ofTypename",
        "type": "TypeName",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "oncommit",
        "type": "OnCommitAction",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "partbound",
        "type": "PartitionBoundSpec",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "partspec",
        "type": "PartitionSpec",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "relation",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "tableElts",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "tablespacename",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CreateSubscriptionStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "conninfo",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "publication",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "subname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CreateTableAsStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "if_not_exists",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "into",
        "type": "IntoClause",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "is_select_into",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "objtype",
        "type": "ObjectType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "query",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CreateTableSpaceStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "location",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "owner",
        "type": "RoleSpec",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "tablespacename",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CreateTransformStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "fromsql",
        "type": "ObjectWithArgs",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "lang",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "replace",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "tosql",
        "type": "ObjectWithArgs",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "type_name",
        "type": "TypeName",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CreateTrigStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "args",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "columns",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "constrrel",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "deferrable",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "events",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "funcname",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "initdeferred",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "isconstraint",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "relation",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "replace",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "row",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "timing",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "transitionRels",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "trigname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "whenClause",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CreateUserMappingStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "if_not_exists",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "servername",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "user",
        "type": "RoleSpec",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CTECycleClause",
    "wrapped": true,
    "fields": [
      {
        "name": "cycle_col_list",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "cycle_mark_collation",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "cycle_mark_column",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "cycle_mark_default",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "cycle_mark_neop",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "cycle_mark_type",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "cycle_mark_typmod",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "cycle_mark_value",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "cycle_path_column",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CTESearchClause",
    "wrapped": true,
    "fields": [
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "search_breadth_first",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "search_col_list",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "search_seq_column",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CurrentOfExpr",
    "wrapped": true,
    "fields": [
      {
        "name": "cursor_name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "cursor_param",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "cvarno",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "DeallocateStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "DeclareCursorStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "options",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "portalname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "query",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "DefElem",
    "wrapped": true,
    "fields": [
      {
        "name": "arg",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "defaction",
        "type": "DefElemAction",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "defname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "defnamespace",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "DefineStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "args",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "definition",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "defnames",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "if_not_exists",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "kind",
        "type": "ObjectType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "oldstyle",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "replace",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "DeleteStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "relation",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "returningList",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "usingClause",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "whereClause",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "withClause",
        "type": "WithClause",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "DiscardStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "target",
        "type": "DiscardMode",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "DistinctExpr",
    "wrapped": true,
    "fields": [
      {
        "name": "args",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "inputcollid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "opcollid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "opno",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "opresulttype",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "opretset",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "DoStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "args",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "DropdbStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "dbname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "missing_ok",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "DropOwnedStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "behavior",
        "type": "DropBehavior",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "roles",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "DropRoleStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "missing_ok",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "roles",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "DropStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "behavior",
        "type": "DropBehavior",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "concurrent",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "missing_ok",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "objects",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "removeType",
        "type": "ObjectType",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "DropSubscriptionStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "behavior",
        "type": "DropBehavior",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "missing_ok",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "subname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "DropTableSpaceStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "missing_ok",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "tablespacename",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "DropUserMappingStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "missing_ok",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "servername",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "user",
        "type": "RoleSpec",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "ExecuteStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "params",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "ExplainStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "query",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "FetchStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "direction",
        "type": "FetchDirection",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "howMany",
        "type": "int64",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "ismove",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "portalname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "FieldSelect",
    "wrapped": true,
    "fields": [
      {
        "name": "arg",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "fieldnum",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "resultcollid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "resulttype",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "resulttypmod",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "FieldStore",
    "wrapped": true,
    "fields": [
      {
        "name": "arg",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "fieldnums",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "newvals",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "resulttype",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "Float",
    "wrapped": true,
    "fields": [
      {
        "name": "fval",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "FromExpr",
    "wrapped": true,
    "fields": [
      {
        "name": "fromlist",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "quals",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "FuncCall",
    "wrapped": true,
    "fields": [
      {
        "name": "agg_distinct",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "agg_filter",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "agg_order",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "agg_star",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "agg_within_group",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "args",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "func_variadic",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "funcformat",
        "type": "CoercionForm",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "funcname",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "over",
        "type": "WindowDef",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "FuncExpr",
    "wrapped": true,
    "fields": [
      {
        "name": "args",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "funccollid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "funcformat",
        "type": "CoercionForm",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "funcid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "funcresulttype",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "funcretset",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "funcvariadic",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "inputcollid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "FunctionParameter",
    "wrapped": true,
    "fields": [
      {
        "name": "argType",
        "type": "TypeName",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "defexpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "mode",
        "type": "FunctionParameterMode",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "GrantRoleStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "behavior",
        "type": "DropBehavior",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "granted_roles",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "grantee_roles",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "grantor",
        "type": "RoleSpec",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "is_grant",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "opt",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "GrantStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "behavior",
        "type": "DropBehavior",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "grant_option",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "grantees",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "grantor",
        "type": "RoleSpec",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "is_grant",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "objects",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "objtype",
        "type": "ObjectType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "privileges",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "targtype",
        "type": "GrantTargetType",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "GroupingFunc",
    "wrapped": true,
    "fields": [
      {
        "name": "agglevelsup",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "args",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "refs",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "GroupingSet",
    "wrapped": true,
    "fields": [
      {
        "name": "content",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "kind",
        "type": "GroupingSetKind",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "ImportForeignSchemaStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "list_type",
        "type": "ImportForeignSchemaType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "local_schema",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "remote_schema",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "server_name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "table_list",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "IndexElem",
    "wrapped": true,
    "fields": [
      {
        "name": "collation",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "expr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "indexcolname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "nulls_ordering",
        "type": "SortByNulls",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "opclass",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "opclassopts",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "ordering",
        "type": "SortByDir",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "IndexStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "accessMethod",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "concurrent",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "deferrable",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "excludeOpNames",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "idxcomment",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "idxname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "if_not_exists",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "indexIncludingParams",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "indexOid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "indexParams",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "initdeferred",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "isconstraint",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "nulls_not_distinct",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "oldCreateSubid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "oldFirstRelfilelocatorSubid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "oldNumber",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "primary",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "relation",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "reset_default_tblspc",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "tableSpace",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "transformed",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "unique",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "whereClause",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "InferClause",
    "wrapped": true,
    "fields": [
      {
        "name": "conname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "indexElems",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "whereClause",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "InferenceElem",
    "wrapped": true,
    "fields": [
      {
        "name": "expr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "infercollid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "inferopclass",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "InlineCodeBlock",
    "wrapped": true,
    "fields": [
      {
        "name": "atomic",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "langIsTrusted",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "langOid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "source_text",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "InsertStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "cols",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "onConflictClause",
        "type": "OnConflictClause",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "override",
        "type": "OverridingKind",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "relation",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "returningList",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "selectStmt",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "withClause",
        "type": "WithClause",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "Integer",
    "wrapped": true,
    "fields": [
      {
        "name": "ival",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "IntList",
    "wrapped": true,
    "fields": [
      {
        "name": "items",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "IntoClause",
    "wrapped": true,
    "fields": [
      {
        "name": "accessMethod",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "colNames",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "onCommit",
        "type": "OnCommitAction",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "rel",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "skipData",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "tableSpaceName",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "viewQuery",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "JoinExpr",
    "wrapped": true,
    "fields": [
      {
        "name": "alias",
        "type": "Alias",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "isNatural",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "join_using_alias",
        "type": "Alias",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "jointype",
        "type": "JoinType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "larg",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "quals",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "rarg",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "rtindex",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "usingClause",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "JsonAggConstructor",
    "wrapped": true,
    "fields": [
      {
        "name": "agg_filter",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "agg_order",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "output",
        "type": "JsonOutput",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "over",
        "type": "WindowDef",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "JsonArrayAgg",
    "wrapped": true,
    "fields": [
      {
        "name": "absent_on_null",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "arg",
        "type": "JsonValueExpr",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "constructor",
        "type": "JsonAggConstructor",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "JsonArrayConstructor",
    "wrapped": true,
    "fields": [
      {
        "name": "absent_on_null",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "exprs",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "output",
        "type": "JsonOutput",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "JsonArrayQueryConstructor",
    "wrapped": true,
    "fields": [
      {
        "name": "absent_on_null",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "format",
        "type": "JsonFormat",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "output",
        "type": "JsonOutput",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "query",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "JsonConstructorExpr",
    "wrapped": true,
    "fields": [
      {
        "name": "absent_on_null",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "args",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "coercion",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "func",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "returning",
        "type": "JsonReturning",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "type",
        "type": "JsonConstructorType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "unique",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "JsonFormat",
    "wrapped": true,
    "fields": [
      {
        "name": "encoding",
        "type": "JsonEncoding",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "format_type",
        "type": "JsonFormatType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "JsonIsPredicate",
    "wrapped": true,
    "fields": [
      {
        "name": "expr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "format",
        "type": "JsonFormat",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "item_type",
        "type": "JsonValueType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "unique_keys",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "JsonKeyValue",
    "wrapped": true,
    "fields": [
      {
        "name": "key",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "value",
        "type": "JsonValueExpr",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "JsonObjectAgg",
    "wrapped": true,
    "fields": [
      {
        "name": "absent_on_null",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "arg",
        "type": "JsonKeyValue",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "constructor",
        "type": "JsonAggConstructor",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "unique",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "JsonObjectConstructor",
    "wrapped": true,
    "fields": [
      {
        "name": "absent_on_null",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "exprs",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "output",
        "type": "JsonOutput",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "unique",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "JsonOutput",
    "wrapped": true,
    "fields": [
      {
        "name": "returning",
        "type": "JsonReturning",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "typeName",
        "type": "TypeName",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "JsonReturning",
    "wrapped": true,
    "fields": [
      {
        "name": "format",
        "type": "JsonFormat",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "typid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "typmod",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "JsonValueExpr",
    "wrapped": true,
    "fields": [
      {
        "name": "format",
        "type": "JsonFormat",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "formatted_expr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "raw_expr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "List",
    "wrapped": true,
    "fields": [
      {
        "name": "items",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "ListenStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "conditionname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "LoadStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "filename",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "LockingClause",
    "wrapped": true,
    "fields": [
      {
        "name": "lockedRels",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "strength",
        "type": "LockClauseStrength",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "waitPolicy",
        "type": "LockWaitPolicy",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "LockStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "mode",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "nowait",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "relations",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "MergeAction",
    "wrapped": true,
    "fields": [
      {
        "name": "commandType",
        "type": "CmdType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "matched",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "override",
        "type": "OverridingKind",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "qual",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "targetList",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "updateColnos",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "MergeStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "joinCondition",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "mergeWhenClauses",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "relation",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "sourceRelation",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "withClause",
        "type": "WithClause",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "MergeWhenClause",
    "wrapped": true,
    "fields": [
      {
        "name": "commandType",
        "type": "CmdType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "condition",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "matched",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "override",
        "type": "OverridingKind",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "targetList",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "values",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "MinMaxExpr",
    "wrapped": true,
    "fields": [
      {
        "name": "args",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "inputcollid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "minmaxcollid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "minmaxtype",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "op",
        "type": "MinMaxOp",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "MultiAssignRef",
    "wrapped": true,
    "fields": [
      {
        "name": "colno",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "ncolumns",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "source",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "NamedArgExpr",
    "wrapped": true,
    "fields": [
      {
        "name": "arg",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "argnumber",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "NextValueExpr",
    "wrapped": true,
    "fields": [
      {
        "name": "seqid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "typeId",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "NotifyStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "conditionname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "payload",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "NullIfExpr",
    "wrapped": true,
    "fields": [
      {
        "name": "args",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "inputcollid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "opcollid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "opno",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "opresulttype",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "opretset",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "NullTest",
    "wrapped": true,
    "fields": [
      {
        "name": "arg",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "argisrow",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "nulltesttype",
        "type": "NullTestType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "ObjectWithArgs",
    "wrapped": true,
    "fields": [
      {
        "name": "args_unspecified",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "objargs",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "objfuncargs",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "objname",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "OidList",
    "wrapped": true,
    "fields": [
      {
        "name": "items",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "OnConflictClause",
    "wrapped": true,
    "fields": [
      {
        "name": "action",
        "type": "OnConflictAction",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "infer",
        "type": "InferClause",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "targetList",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "whereClause",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "OnConflictExpr",
    "wrapped": true,
    "fields": [
      {
        "name": "action",
        "type": "OnConflictAction",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "arbiterElems",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "arbiterWhere",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "constraint",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "exclRelIndex",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "exclRelTlist",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "onConflictSet",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "onConflictWhere",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "OpExpr",
    "wrapped": true,
    "fields": [
      {
        "name": "args",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "inputcollid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "opcollid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "opno",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "opresulttype",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "opretset",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "Param",
    "wrapped": true,
    "fields": [
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "paramcollid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "paramid",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "paramkind",
        "type": "ParamKind",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "paramtype",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "paramtypmod",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "ParamRef",
    "wrapped": true,
    "fields": [
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "number",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "ParseResult",
    "wrapped": false,
    "fields": [
      {
        "name": "stmts",
        "type": "RawStmt",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "version",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "PartitionBoundSpec",
    "wrapped": true,
    "fields": [
      {
        "name": "is_default",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "listdatums",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "lowerdatums",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "modulus",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "remainder",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "strategy",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "upperdatums",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "PartitionCmd",
    "wrapped": true,
    "fields": [
      {
        "name": "bound",
        "type": "PartitionBoundSpec",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "concurrent",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "name",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "PartitionElem",
    "wrapped": true,
    "fields": [
      {
        "name": "collation",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "expr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "opclass",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "PartitionRangeDatum",
    "wrapped": true,
    "fields": [
      {
        "name": "kind",
        "type": "PartitionRangeDatumKind",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "value",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "PartitionSpec",
    "wrapped": true,
    "fields": [
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "partParams",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "strategy",
        "type": "PartitionStrategy",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "PLAssignStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "indirection",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "nnames",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "val",
        "type": "SelectStmt",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "PrepareStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "argtypes",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "query",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "PublicationObjSpec",
    "wrapped": true,
    "fields": [
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "pubobjtype",
        "type": "PublicationObjSpecType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "pubtable",
        "type": "PublicationTable",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "PublicationTable",
    "wrapped": true,
    "fields": [
      {
        "name": "columns",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "relation",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "whereClause",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "Query",
    "wrapped": true,
    "fields": [
      {
        "name": "canSetTag",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "commandType",
        "type": "CmdType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "constraintDeps",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "cteList",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "distinctClause",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "groupClause",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "groupDistinct",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "groupingSets",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "hasAggs",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "hasDistinctOn",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "hasForUpdate",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "hasModifyingCTE",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "hasRecursive",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "hasRowSecurity",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "hasSubLinks",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "hasTargetSRFs",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "hasWindowFuncs",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "havingQual",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "isReturn",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "jointree",
        "type": "FromExpr",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "limitCount",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "limitOffset",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "limitOption",
        "type": "LimitOption",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "mergeActionList",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "mergeUseOuterJoin",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "onConflict",
        "type": "OnConflictExpr",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "override",
        "type": "OverridingKind",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "querySource",
        "type": "QuerySource",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "resultRelation",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "returningList",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "rowMarks",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "rtable",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "rteperminfos",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "setOperations",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "sortClause",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "stmt_len",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "stmt_location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "targetList",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "utilityStmt",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "windowClause",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "withCheckOptions",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "RangeFunction",
    "wrapped": true,
    "fields": [
      {
        "name": "alias",
        "type": "Alias",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "coldeflist",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "functions",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "is_rowsfrom",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "lateral",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "ordinality",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "RangeSubselect",
    "wrapped": true,
    "fields": [
      {
        "name": "alias",
        "type": "Alias",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "lateral",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "subquery",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "RangeTableFunc",
    "wrapped": true,
    "fields": [
      {
        "name": "alias",
        "type": "Alias",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "columns",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "docexpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "lateral",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "namespaces",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "rowexpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "RangeTableFuncCol",
    "wrapped": true,
    "fields": [
      {
        "name": "coldefexpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "colexpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "colname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "for_ordinality",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "is_not_null",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "typeName",
        "type": "TypeName",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "RangeTableSample",
    "wrapped": true,
    "fields": [
      {
        "name": "args",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "method",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "relation",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "repeatable",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "RangeTblEntry",
    "wrapped": true,
    "fields": [
      {
        "name": "alias",
        "type": "Alias",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "colcollations",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "coltypes",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "coltypmods",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "ctelevelsup",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "ctename",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "enrname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "enrtuples",
        "type": "double",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "eref",
        "type": "Alias",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "funcordinality",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "functions",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "inFromCl",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "inh",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "join_using_alias",
        "type": "Alias",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "joinaliasvars",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "joinleftcols",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "joinmergedcols",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "joinrightcols",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "jointype",
        "type": "JoinType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "lateral",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "perminfoindex",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "relid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "relkind",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "rellockmode",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "rtekind",
        "type": "RTEKind",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "security_barrier",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "securityQuals",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "self_reference",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "subquery",
        "type": "Query",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "tablefunc",
        "type": "TableFunc",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "tablesample",
        "type": "TableSampleClause",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "values_lists",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "RangeTblFunction",
    "wrapped": true,
    "fields": [
      {
        "name": "funccolcollations",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "funccolcount",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "funccolnames",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "funccoltypes",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "funccoltypmods",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "funcexpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "funcparams",
        "type": "uint64",
        "isNode": false,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "RangeTblRef",
    "wrapped": true,
    "fields": [
      {
        "name": "rtindex",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "RangeVar",
    "wrapped": true,
    "fields": [
      {
        "name": "alias",
        "type": "Alias",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "catalogname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "inh",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "relname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "relpersistence",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "schemaname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "RawStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "stmt",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "stmt_len",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "stmt_location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "ReassignOwnedStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "newrole",
        "type": "RoleSpec",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "roles",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "RefreshMatViewStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "concurrent",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "relation",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "skipData",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "ReindexStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "kind",
        "type": "ReindexObjectType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "params",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "relation",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "RelabelType",
    "wrapped": true,
    "fields": [
      {
        "name": "arg",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "relabelformat",
        "type": "CoercionForm",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "resultcollid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "resulttype",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "resulttypmod",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "RenameStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "behavior",
        "type": "DropBehavior",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "missing_ok",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "newname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "object",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "relation",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "relationType",
        "type": "ObjectType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "renameType",
        "type": "ObjectType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "subname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "ReplicaIdentityStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "identity_type",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "ResTarget",
    "wrapped": true,
    "fields": [
      {
        "name": "indirection",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "val",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "ReturnStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "returnval",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "RoleSpec",
    "wrapped": true,
    "fields": [
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "rolename",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "roletype",
        "type": "RoleSpecType",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "RowCompareExpr",
    "wrapped": true,
    "fields": [
      {
        "name": "inputcollids",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "largs",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "opfamilies",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "opnos",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "rargs",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "rctype",
        "type": "RowCompareType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "RowExpr",
    "wrapped": true,
    "fields": [
      {
        "name": "args",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "colnames",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "row_format",
        "type": "CoercionForm",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "row_typeid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "RowMarkClause",
    "wrapped": true,
    "fields": [
      {
        "name": "pushedDown",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "rti",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "strength",
        "type": "LockClauseStrength",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "waitPolicy",
        "type": "LockWaitPolicy",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "RTEPermissionInfo",
    "wrapped": true,
    "fields": [
      {
        "name": "checkAsUser",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "inh",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "insertedCols",
        "type": "uint64",
        "isNode": false,
        "isArray": true,
        "optional": true
      },
      {
        "name": "relid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "requiredPerms",
        "type": "uint64",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "selectedCols",
        "type": "uint64",
        "isNode": false,
        "isArray": true,
        "optional": true
      },
      {
        "name": "updatedCols",
        "type": "uint64",
        "isNode": false,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "RuleStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "actions",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "event",
        "type": "CmdType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "instead",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "relation",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "replace",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "rulename",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "whereClause",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "ScalarArrayOpExpr",
    "wrapped": true,
    "fields": [
      {
        "name": "args",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "inputcollid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "opno",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "useOr",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "ScanResult",
    "wrapped": false,
    "fields": [
      {
        "name": "tokens",
        "type": "ScanToken",
        "isNode": false,
        "isArray": true,
        "optional": true
      },
      {
        "name": "version",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "ScanToken",
    "wrapped": false,
    "fields": [
      {
        "name": "end",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "keywordKind",
        "type": "KeywordKind",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "start",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "token",
        "type": "Token",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "SecLabelStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "label",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "object",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "objtype",
        "type": "ObjectType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "provider",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "SelectStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "all",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "distinctClause",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "fromClause",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "groupClause",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "groupDistinct",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "havingClause",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "intoClause",
        "type": "IntoClause",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "larg",
        "type": "SelectStmt",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "limitCount",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "limitOffset",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "limitOption",
        "type": "LimitOption",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "lockingClause",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "op",
        "type": "SetOperation",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "rarg",
        "type": "SelectStmt",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "sortClause",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "targetList",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "valuesLists",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "whereClause",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "windowClause",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "withClause",
        "type": "WithClause",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "SetOperationStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "all",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "colCollations",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "colTypes",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "colTypmods",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "groupClauses",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "larg",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "op",
        "type": "SetOperation",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "rarg",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "SetToDefault",
    "wrapped": true,
    "fields": [
      {
        "name": "collation",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "typeId",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "typeMod",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "SortBy",
    "wrapped": true,
    "fields": [
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "node",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "sortby_dir",
        "type": "SortByDir",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "sortby_nulls",
        "type": "SortByNulls",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "useOp",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "SortGroupClause",
    "wrapped": true,
    "fields": [
      {
        "name": "eqop",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "hashable",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "nulls_first",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "sortop",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "tleSortGroupRef",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "SQLValueFunction",
    "wrapped": true,
    "fields": [
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "op",
        "type": "SQLValueFunctionOp",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "type",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "typmod",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "StatsElem",
    "wrapped": true,
    "fields": [
      {
        "name": "expr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "String",
    "wrapped": true,
    "fields": [
      {
        "name": "sval",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "SubLink",
    "wrapped": true,
    "fields": [
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "operName",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "subLinkId",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "subLinkType",
        "type": "SubLinkType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "subselect",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "testexpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "SubPlan",
    "wrapped": true,
    "fields": [
      {
        "name": "args",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "firstColCollation",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "firstColType",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "firstColTypmod",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "parallel_safe",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "paramIds",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "parParam",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "per_call_cost",
        "type": "double",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "plan_id",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "plan_name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "setParam",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "startup_cost",
        "type": "double",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "subLinkType",
        "type": "SubLinkType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "testexpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "unknownEqFalse",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "useHashTable",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "SubscriptingRef",
    "wrapped": true,
    "fields": [
      {
        "name": "refassgnexpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "refcollid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "refcontainertype",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "refelemtype",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "refexpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "reflowerindexpr",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "refrestype",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "reftypmod",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "refupperindexpr",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "TableFunc",
    "wrapped": true,
    "fields": [
      {
        "name": "colcollations",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "coldefexprs",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "colexprs",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "colnames",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "coltypes",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "coltypmods",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "docexpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "notnulls",
        "type": "uint64",
        "isNode": false,
        "isArray": true,
        "optional": true
      },
      {
        "name": "ns_names",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "ns_uris",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "ordinalitycol",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "rowexpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "TableLikeClause",
    "wrapped": true,
    "fields": [
      {
        "name": "options",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "relation",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "relationOid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "TableSampleClause",
    "wrapped": true,
    "fields": [
      {
        "name": "args",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "repeatable",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "tsmhandler",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "TargetEntry",
    "wrapped": true,
    "fields": [
      {
        "name": "expr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "resjunk",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "resname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "resno",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "resorigcol",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "resorigtbl",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "ressortgroupref",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "TransactionStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "chain",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "gid",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "kind",
        "type": "TransactionStmtKind",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "savepoint_name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "TriggerTransition",
    "wrapped": true,
    "fields": [
      {
        "name": "isNew",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "isTable",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "TruncateStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "behavior",
        "type": "DropBehavior",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "relations",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "restart_seqs",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "TypeCast",
    "wrapped": true,
    "fields": [
      {
        "name": "arg",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "typeName",
        "type": "TypeName",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "TypeName",
    "wrapped": true,
    "fields": [
      {
        "name": "arrayBounds",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "names",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "pct_type",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "setof",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "typemod",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "typeOid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "typmods",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "UnlistenStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "conditionname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "UpdateStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "fromClause",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "relation",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "returningList",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "targetList",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "whereClause",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "withClause",
        "type": "WithClause",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "VacuumRelation",
    "wrapped": true,
    "fields": [
      {
        "name": "oid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "relation",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "va_cols",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "VacuumStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "is_vacuumcmd",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "rels",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "Var",
    "wrapped": true,
    "fields": [
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "varattno",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "varcollid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "varlevelsup",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "varno",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "varnullingrels",
        "type": "uint64",
        "isNode": false,
        "isArray": true,
        "optional": true
      },
      {
        "name": "vartype",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "vartypmod",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "VariableSetStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "args",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "is_local",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "kind",
        "type": "VariableSetKind",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "VariableShowStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "ViewStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "aliases",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "query",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "replace",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "view",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "withCheckOption",
        "type": "ViewCheckOption",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "WindowClause",
    "wrapped": true,
    "fields": [
      {
        "name": "copiedOrder",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "endInRangeFunc",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "endOffset",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "frameOptions",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "inRangeAsc",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "inRangeColl",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "inRangeNullsFirst",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "orderClause",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "partitionClause",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "refname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "runCondition",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "startInRangeFunc",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "startOffset",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "winref",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "WindowDef",
    "wrapped": true,
    "fields": [
      {
        "name": "endOffset",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "frameOptions",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "orderClause",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "partitionClause",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "refname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "startOffset",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "WindowFunc",
    "wrapped": true,
    "fields": [
      {
        "name": "aggfilter",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "args",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "inputcollid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "winagg",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "wincollid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "winfnoid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "winref",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "winstar",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "wintype",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "WithCheckOption",
    "wrapped": true,
    "fields": [
      {
        "name": "cascaded",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "kind",
        "type": "WCOKind",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "polname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "qual",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "relname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "WithClause",
    "wrapped": true,
    "fields": [
      {
        "name": "ctes",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "recursive",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "XmlExpr",
    "wrapped": true,
    "fields": [
      {
        "name": "arg_names",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "args",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "indent",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "named_args",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "op",
        "type": "XmlExprOp",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "type",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "typmod",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xmloption",
        "type": "XmlOptionType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "XmlSerialize",
    "wrapped": true,
    "fields": [
      {
        "name": "expr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "indent",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "typeName",
        "type": "TypeName",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xmloption",
        "type": "XmlOptionType",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  }
]",
    "file": "runtime-schema.json",
  },
]
`;

exports[`runtime-schema runtime schema with all features enabled 1`] = `
[
  {
    "code": "/**
* This file was automatically generated by pg-proto-parser@latest.
* DO NOT MODIFY IT BY HAND. Instead, modify the source proto file,
* and run the pg-proto-parser generate command to regenerate this file.
*/
import _o from "nested-obj";
import { ParseResult, ScanResult, Integer, Float, Boolean, String, BitString, List, OidList, IntList, A_Const, Alias, RangeVar, TableFunc, IntoClause, Var, Param, Aggref, GroupingFunc, WindowFunc, SubscriptingRef, FuncExpr, NamedArgExpr, OpExpr, DistinctExpr, NullIfExpr, ScalarArrayOpExpr, BoolExpr, SubLink, SubPlan, AlternativeSubPlan, FieldSelect, FieldStore, RelabelType, CoerceViaIO, ArrayCoerceExpr, ConvertRowtypeExpr, CollateExpr, CaseExpr, CaseWhen, CaseTestExpr, ArrayExpr, RowExpr, RowCompareExpr, CoalesceExpr, MinMaxExpr, SQLValueFunction, XmlExpr, JsonFormat, JsonReturning, JsonValueExpr, JsonConstructorExpr, JsonIsPredicate, NullTest, BooleanTest, CoerceToDomain, CoerceToDomainValue, SetToDefault, CurrentOfExpr, NextValueExpr, InferenceElem, TargetEntry, RangeTblRef, JoinExpr, FromExpr, OnConflictExpr, Query, TypeName, ColumnRef, ParamRef, A_Expr, TypeCast, CollateClause, RoleSpec, FuncCall, A_Star, A_Indices, A_Indirection, A_ArrayExpr, ResTarget, MultiAssignRef, SortBy, WindowDef, RangeSubselect, RangeFunction, RangeTableFunc, RangeTableFuncCol, RangeTableSample, ColumnDef, TableLikeClause, IndexElem, DefElem, LockingClause, XmlSerialize, PartitionElem, PartitionSpec, PartitionBoundSpec, PartitionRangeDatum, PartitionCmd, RangeTblEntry, RTEPermissionInfo, RangeTblFunction, TableSampleClause, WithCheckOption, SortGroupClause, GroupingSet, WindowClause, RowMarkClause, WithClause, InferClause, OnConflictClause, CTESearchClause, CTECycleClause, CommonTableExpr, MergeWhenClause, MergeAction, TriggerTransition, JsonOutput, JsonKeyValue, JsonObjectConstructor, JsonArrayConstructor, JsonArrayQueryConstructor, JsonAggConstructor, JsonObjectAgg, JsonArrayAgg, RawStmt, InsertStmt, DeleteStmt, UpdateStmt, MergeStmt, SelectStmt, SetOperationStmt, ReturnStmt, PLAssignStmt, CreateSchemaStmt, AlterTableStmt, ReplicaIdentityStmt, AlterTableCmd, AlterCollationStmt, AlterDomainStmt, GrantStmt, ObjectWithArgs, AccessPriv, GrantRoleStmt, AlterDefaultPrivilegesStmt, CopyStmt, VariableSetStmt, VariableShowStmt, CreateStmt, Constraint, CreateTableSpaceStmt, DropTableSpaceStmt, AlterTableSpaceOptionsStmt, AlterTableMoveAllStmt, CreateExtensionStmt, AlterExtensionStmt, AlterExtensionContentsStmt, CreateFdwStmt, AlterFdwStmt, CreateForeignServerStmt, AlterForeignServerStmt, CreateForeignTableStmt, CreateUserMappingStmt, AlterUserMappingStmt, DropUserMappingStmt, ImportForeignSchemaStmt, CreatePolicyStmt, AlterPolicyStmt, CreateAmStmt, CreateTrigStmt, CreateEventTrigStmt, AlterEventTrigStmt, CreatePLangStmt, CreateRoleStmt, AlterRoleStmt, AlterRoleSetStmt, DropRoleStmt, CreateSeqStmt, AlterSeqStmt, DefineStmt, CreateDomainStmt, CreateOpClassStmt, CreateOpClassItem, CreateOpFamilyStmt, AlterOpFamilyStmt, DropStmt, TruncateStmt, CommentStmt, SecLabelStmt, DeclareCursorStmt, ClosePortalStmt, FetchStmt, IndexStmt, CreateStatsStmt, StatsElem, AlterStatsStmt, CreateFunctionStmt, FunctionParameter, AlterFunctionStmt, DoStmt, InlineCodeBlock, CallStmt, CallContext, RenameStmt, AlterObjectDependsStmt, AlterObjectSchemaStmt, AlterOwnerStmt, AlterOperatorStmt, AlterTypeStmt, RuleStmt, NotifyStmt, ListenStmt, UnlistenStmt, TransactionStmt, CompositeTypeStmt, CreateEnumStmt, CreateRangeStmt, AlterEnumStmt, ViewStmt, LoadStmt, CreatedbStmt, AlterDatabaseStmt, AlterDatabaseRefreshCollStmt, AlterDatabaseSetStmt, DropdbStmt, AlterSystemStmt, ClusterStmt, VacuumStmt, VacuumRelation, ExplainStmt, CreateTableAsStmt, RefreshMatViewStmt, CheckPointStmt, DiscardStmt, LockStmt, ConstraintsSetStmt, ReindexStmt, CreateConversionStmt, CreateCastStmt, CreateTransformStmt, PrepareStmt, ExecuteStmt, DeallocateStmt, DropOwnedStmt, ReassignOwnedStmt, AlterTSDictionaryStmt, AlterTSConfigurationStmt, PublicationTable, PublicationObjSpec, CreatePublicationStmt, AlterPublicationStmt, CreateSubscriptionStmt, AlterSubscriptionStmt, DropSubscriptionStmt, ScanToken } from "./wrapped";
export default {
  parseResult(_p?: ParseResult): ParseResult {
    const _j = ({} as ParseResult);
    _o.set(_j, "version", _p?.version);
    _o.set(_j, "stmts", _p?.stmts);
    return _j;
  },
  scanResult(_p?: ScanResult): ScanResult {
    const _j = ({} as ScanResult);
    _o.set(_j, "version", _p?.version);
    _o.set(_j, "tokens", _p?.tokens);
    return _j;
  },
  integer(_p?: Integer): Integer {
    const _j = ({} as Integer);
    _o.set(_j, "ival", _p?.ival);
    return _j;
  },
  float(_p?: Float): Float {
    const _j = ({} as Float);
    _o.set(_j, "fval", _p?.fval);
    return _j;
  },
  boolean(_p?: Boolean): Boolean {
    const _j = ({} as Boolean);
    _o.set(_j, "boolval", _p?.boolval);
    return _j;
  },
  string(_p?: String): String {
    const _j = ({} as String);
    _o.set(_j, "sval", _p?.sval);
    return _j;
  },
  bitString(_p?: BitString): BitString {
    const _j = ({} as BitString);
    _o.set(_j, "bsval", _p?.bsval);
    return _j;
  },
  list(_p?: List): List {
    const _j = ({} as List);
    _o.set(_j, "items", _p?.items);
    return _j;
  },
  oidList(_p?: OidList): OidList {
    const _j = ({} as OidList);
    _o.set(_j, "items", _p?.items);
    return _j;
  },
  intList(_p?: IntList): IntList {
    const _j = ({} as IntList);
    _o.set(_j, "items", _p?.items);
    return _j;
  },
  aConst(_p?: A_Const): A_Const {
    const _j = ({} as A_Const);
    _o.set(_j, "ival", _p?.ival);
    _o.set(_j, "fval", _p?.fval);
    _o.set(_j, "boolval", _p?.boolval);
    _o.set(_j, "sval", _p?.sval);
    _o.set(_j, "bsval", _p?.bsval);
    _o.set(_j, "isnull", _p?.isnull);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  alias(_p?: Alias): Alias {
    const _j = ({} as Alias);
    _o.set(_j, "aliasname", _p?.aliasname);
    _o.set(_j, "colnames", _p?.colnames);
    return _j;
  },
  rangeVar(_p?: RangeVar): RangeVar {
    const _j = ({} as RangeVar);
    _o.set(_j, "catalogname", _p?.catalogname);
    _o.set(_j, "schemaname", _p?.schemaname);
    _o.set(_j, "relname", _p?.relname);
    _o.set(_j, "inh", _p?.inh);
    _o.set(_j, "relpersistence", _p?.relpersistence);
    _o.set(_j, "alias", _p?.alias);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  tableFunc(_p?: TableFunc): TableFunc {
    const _j = ({} as TableFunc);
    _o.set(_j, "ns_uris", _p?.ns_uris);
    _o.set(_j, "ns_names", _p?.ns_names);
    _o.set(_j, "docexpr", _p?.docexpr);
    _o.set(_j, "rowexpr", _p?.rowexpr);
    _o.set(_j, "colnames", _p?.colnames);
    _o.set(_j, "coltypes", _p?.coltypes);
    _o.set(_j, "coltypmods", _p?.coltypmods);
    _o.set(_j, "colcollations", _p?.colcollations);
    _o.set(_j, "colexprs", _p?.colexprs);
    _o.set(_j, "coldefexprs", _p?.coldefexprs);
    _o.set(_j, "notnulls", _p?.notnulls);
    _o.set(_j, "ordinalitycol", _p?.ordinalitycol);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  intoClause(_p?: IntoClause): IntoClause {
    const _j = ({} as IntoClause);
    _o.set(_j, "rel", _p?.rel);
    _o.set(_j, "colNames", _p?.colNames);
    _o.set(_j, "accessMethod", _p?.accessMethod);
    _o.set(_j, "options", _p?.options);
    _o.set(_j, "onCommit", _p?.onCommit);
    _o.set(_j, "tableSpaceName", _p?.tableSpaceName);
    _o.set(_j, "viewQuery", _p?.viewQuery);
    _o.set(_j, "skipData", _p?.skipData);
    return _j;
  },
  var(_p?: Var): Var {
    const _j = ({} as Var);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "varno", _p?.varno);
    _o.set(_j, "varattno", _p?.varattno);
    _o.set(_j, "vartype", _p?.vartype);
    _o.set(_j, "vartypmod", _p?.vartypmod);
    _o.set(_j, "varcollid", _p?.varcollid);
    _o.set(_j, "varnullingrels", _p?.varnullingrels);
    _o.set(_j, "varlevelsup", _p?.varlevelsup);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  param(_p?: Param): Param {
    const _j = ({} as Param);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "paramkind", _p?.paramkind);
    _o.set(_j, "paramid", _p?.paramid);
    _o.set(_j, "paramtype", _p?.paramtype);
    _o.set(_j, "paramtypmod", _p?.paramtypmod);
    _o.set(_j, "paramcollid", _p?.paramcollid);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  aggref(_p?: Aggref): Aggref {
    const _j = ({} as Aggref);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "aggfnoid", _p?.aggfnoid);
    _o.set(_j, "aggtype", _p?.aggtype);
    _o.set(_j, "aggcollid", _p?.aggcollid);
    _o.set(_j, "inputcollid", _p?.inputcollid);
    _o.set(_j, "aggargtypes", _p?.aggargtypes);
    _o.set(_j, "aggdirectargs", _p?.aggdirectargs);
    _o.set(_j, "args", _p?.args);
    _o.set(_j, "aggorder", _p?.aggorder);
    _o.set(_j, "aggdistinct", _p?.aggdistinct);
    _o.set(_j, "aggfilter", _p?.aggfilter);
    _o.set(_j, "aggstar", _p?.aggstar);
    _o.set(_j, "aggvariadic", _p?.aggvariadic);
    _o.set(_j, "aggkind", _p?.aggkind);
    _o.set(_j, "agglevelsup", _p?.agglevelsup);
    _o.set(_j, "aggsplit", _p?.aggsplit);
    _o.set(_j, "aggno", _p?.aggno);
    _o.set(_j, "aggtransno", _p?.aggtransno);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  groupingFunc(_p?: GroupingFunc): GroupingFunc {
    const _j = ({} as GroupingFunc);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "args", _p?.args);
    _o.set(_j, "refs", _p?.refs);
    _o.set(_j, "agglevelsup", _p?.agglevelsup);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  windowFunc(_p?: WindowFunc): WindowFunc {
    const _j = ({} as WindowFunc);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "winfnoid", _p?.winfnoid);
    _o.set(_j, "wintype", _p?.wintype);
    _o.set(_j, "wincollid", _p?.wincollid);
    _o.set(_j, "inputcollid", _p?.inputcollid);
    _o.set(_j, "args", _p?.args);
    _o.set(_j, "aggfilter", _p?.aggfilter);
    _o.set(_j, "winref", _p?.winref);
    _o.set(_j, "winstar", _p?.winstar);
    _o.set(_j, "winagg", _p?.winagg);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  subscriptingRef(_p?: SubscriptingRef): SubscriptingRef {
    const _j = ({} as SubscriptingRef);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "refcontainertype", _p?.refcontainertype);
    _o.set(_j, "refelemtype", _p?.refelemtype);
    _o.set(_j, "refrestype", _p?.refrestype);
    _o.set(_j, "reftypmod", _p?.reftypmod);
    _o.set(_j, "refcollid", _p?.refcollid);
    _o.set(_j, "refupperindexpr", _p?.refupperindexpr);
    _o.set(_j, "reflowerindexpr", _p?.reflowerindexpr);
    _o.set(_j, "refexpr", _p?.refexpr);
    _o.set(_j, "refassgnexpr", _p?.refassgnexpr);
    return _j;
  },
  funcExpr(_p?: FuncExpr): FuncExpr {
    const _j = ({} as FuncExpr);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "funcid", _p?.funcid);
    _o.set(_j, "funcresulttype", _p?.funcresulttype);
    _o.set(_j, "funcretset", _p?.funcretset);
    _o.set(_j, "funcvariadic", _p?.funcvariadic);
    _o.set(_j, "funcformat", _p?.funcformat);
    _o.set(_j, "funccollid", _p?.funccollid);
    _o.set(_j, "inputcollid", _p?.inputcollid);
    _o.set(_j, "args", _p?.args);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  namedArgExpr(_p?: NamedArgExpr): NamedArgExpr {
    const _j = ({} as NamedArgExpr);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "arg", _p?.arg);
    _o.set(_j, "name", _p?.name);
    _o.set(_j, "argnumber", _p?.argnumber);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  opExpr(_p?: OpExpr): OpExpr {
    const _j = ({} as OpExpr);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "opno", _p?.opno);
    _o.set(_j, "opresulttype", _p?.opresulttype);
    _o.set(_j, "opretset", _p?.opretset);
    _o.set(_j, "opcollid", _p?.opcollid);
    _o.set(_j, "inputcollid", _p?.inputcollid);
    _o.set(_j, "args", _p?.args);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  distinctExpr(_p?: DistinctExpr): DistinctExpr {
    const _j = ({} as DistinctExpr);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "opno", _p?.opno);
    _o.set(_j, "opresulttype", _p?.opresulttype);
    _o.set(_j, "opretset", _p?.opretset);
    _o.set(_j, "opcollid", _p?.opcollid);
    _o.set(_j, "inputcollid", _p?.inputcollid);
    _o.set(_j, "args", _p?.args);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  nullIfExpr(_p?: NullIfExpr): NullIfExpr {
    const _j = ({} as NullIfExpr);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "opno", _p?.opno);
    _o.set(_j, "opresulttype", _p?.opresulttype);
    _o.set(_j, "opretset", _p?.opretset);
    _o.set(_j, "opcollid", _p?.opcollid);
    _o.set(_j, "inputcollid", _p?.inputcollid);
    _o.set(_j, "args", _p?.args);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  scalarArrayOpExpr(_p?: ScalarArrayOpExpr): ScalarArrayOpExpr {
    const _j = ({} as ScalarArrayOpExpr);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "opno", _p?.opno);
    _o.set(_j, "useOr", _p?.useOr);
    _o.set(_j, "inputcollid", _p?.inputcollid);
    _o.set(_j, "args", _p?.args);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  boolExpr(_p?: BoolExpr): BoolExpr {
    const _j = ({} as BoolExpr);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "boolop", _p?.boolop);
    _o.set(_j, "args", _p?.args);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  subLink(_p?: SubLink): SubLink {
    const _j = ({} as SubLink);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "subLinkType", _p?.subLinkType);
    _o.set(_j, "subLinkId", _p?.subLinkId);
    _o.set(_j, "testexpr", _p?.testexpr);
    _o.set(_j, "operName", _p?.operName);
    _o.set(_j, "subselect", _p?.subselect);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  subPlan(_p?: SubPlan): SubPlan {
    const _j = ({} as SubPlan);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "subLinkType", _p?.subLinkType);
    _o.set(_j, "testexpr", _p?.testexpr);
    _o.set(_j, "paramIds", _p?.paramIds);
    _o.set(_j, "plan_id", _p?.plan_id);
    _o.set(_j, "plan_name", _p?.plan_name);
    _o.set(_j, "firstColType", _p?.firstColType);
    _o.set(_j, "firstColTypmod", _p?.firstColTypmod);
    _o.set(_j, "firstColCollation", _p?.firstColCollation);
    _o.set(_j, "useHashTable", _p?.useHashTable);
    _o.set(_j, "unknownEqFalse", _p?.unknownEqFalse);
    _o.set(_j, "parallel_safe", _p?.parallel_safe);
    _o.set(_j, "setParam", _p?.setParam);
    _o.set(_j, "parParam", _p?.parParam);
    _o.set(_j, "args", _p?.args);
    _o.set(_j, "startup_cost", _p?.startup_cost);
    _o.set(_j, "per_call_cost", _p?.per_call_cost);
    return _j;
  },
  alternativeSubPlan(_p?: AlternativeSubPlan): AlternativeSubPlan {
    const _j = ({} as AlternativeSubPlan);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "subplans", _p?.subplans);
    return _j;
  },
  fieldSelect(_p?: FieldSelect): FieldSelect {
    const _j = ({} as FieldSelect);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "arg", _p?.arg);
    _o.set(_j, "fieldnum", _p?.fieldnum);
    _o.set(_j, "resulttype", _p?.resulttype);
    _o.set(_j, "resulttypmod", _p?.resulttypmod);
    _o.set(_j, "resultcollid", _p?.resultcollid);
    return _j;
  },
  fieldStore(_p?: FieldStore): FieldStore {
    const _j = ({} as FieldStore);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "arg", _p?.arg);
    _o.set(_j, "newvals", _p?.newvals);
    _o.set(_j, "fieldnums", _p?.fieldnums);
    _o.set(_j, "resulttype", _p?.resulttype);
    return _j;
  },
  relabelType(_p?: RelabelType): RelabelType {
    const _j = ({} as RelabelType);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "arg", _p?.arg);
    _o.set(_j, "resulttype", _p?.resulttype);
    _o.set(_j, "resulttypmod", _p?.resulttypmod);
    _o.set(_j, "resultcollid", _p?.resultcollid);
    _o.set(_j, "relabelformat", _p?.relabelformat);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  coerceViaio(_p?: CoerceViaIO): CoerceViaIO {
    const _j = ({} as CoerceViaIO);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "arg", _p?.arg);
    _o.set(_j, "resulttype", _p?.resulttype);
    _o.set(_j, "resultcollid", _p?.resultcollid);
    _o.set(_j, "coerceformat", _p?.coerceformat);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  arrayCoerceExpr(_p?: ArrayCoerceExpr): ArrayCoerceExpr {
    const _j = ({} as ArrayCoerceExpr);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "arg", _p?.arg);
    _o.set(_j, "elemexpr", _p?.elemexpr);
    _o.set(_j, "resulttype", _p?.resulttype);
    _o.set(_j, "resulttypmod", _p?.resulttypmod);
    _o.set(_j, "resultcollid", _p?.resultcollid);
    _o.set(_j, "coerceformat", _p?.coerceformat);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  convertRowtypeExpr(_p?: ConvertRowtypeExpr): ConvertRowtypeExpr {
    const _j = ({} as ConvertRowtypeExpr);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "arg", _p?.arg);
    _o.set(_j, "resulttype", _p?.resulttype);
    _o.set(_j, "convertformat", _p?.convertformat);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  collateExpr(_p?: CollateExpr): CollateExpr {
    const _j = ({} as CollateExpr);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "arg", _p?.arg);
    _o.set(_j, "collOid", _p?.collOid);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  caseExpr(_p?: CaseExpr): CaseExpr {
    const _j = ({} as CaseExpr);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "casetype", _p?.casetype);
    _o.set(_j, "casecollid", _p?.casecollid);
    _o.set(_j, "arg", _p?.arg);
    _o.set(_j, "args", _p?.args);
    _o.set(_j, "defresult", _p?.defresult);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  caseWhen(_p?: CaseWhen): CaseWhen {
    const _j = ({} as CaseWhen);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "expr", _p?.expr);
    _o.set(_j, "result", _p?.result);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  caseTestExpr(_p?: CaseTestExpr): CaseTestExpr {
    const _j = ({} as CaseTestExpr);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "typeId", _p?.typeId);
    _o.set(_j, "typeMod", _p?.typeMod);
    _o.set(_j, "collation", _p?.collation);
    return _j;
  },
  arrayExpr(_p?: ArrayExpr): ArrayExpr {
    const _j = ({} as ArrayExpr);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "array_typeid", _p?.array_typeid);
    _o.set(_j, "array_collid", _p?.array_collid);
    _o.set(_j, "element_typeid", _p?.element_typeid);
    _o.set(_j, "elements", _p?.elements);
    _o.set(_j, "multidims", _p?.multidims);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  rowExpr(_p?: RowExpr): RowExpr {
    const _j = ({} as RowExpr);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "args", _p?.args);
    _o.set(_j, "row_typeid", _p?.row_typeid);
    _o.set(_j, "row_format", _p?.row_format);
    _o.set(_j, "colnames", _p?.colnames);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  rowCompareExpr(_p?: RowCompareExpr): RowCompareExpr {
    const _j = ({} as RowCompareExpr);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "rctype", _p?.rctype);
    _o.set(_j, "opnos", _p?.opnos);
    _o.set(_j, "opfamilies", _p?.opfamilies);
    _o.set(_j, "inputcollids", _p?.inputcollids);
    _o.set(_j, "largs", _p?.largs);
    _o.set(_j, "rargs", _p?.rargs);
    return _j;
  },
  coalesceExpr(_p?: CoalesceExpr): CoalesceExpr {
    const _j = ({} as CoalesceExpr);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "coalescetype", _p?.coalescetype);
    _o.set(_j, "coalescecollid", _p?.coalescecollid);
    _o.set(_j, "args", _p?.args);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  minMaxExpr(_p?: MinMaxExpr): MinMaxExpr {
    const _j = ({} as MinMaxExpr);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "minmaxtype", _p?.minmaxtype);
    _o.set(_j, "minmaxcollid", _p?.minmaxcollid);
    _o.set(_j, "inputcollid", _p?.inputcollid);
    _o.set(_j, "op", _p?.op);
    _o.set(_j, "args", _p?.args);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  sqlValueFunction(_p?: SQLValueFunction): SQLValueFunction {
    const _j = ({} as SQLValueFunction);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "op", _p?.op);
    _o.set(_j, "type", _p?.type);
    _o.set(_j, "typmod", _p?.typmod);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  xmlExpr(_p?: XmlExpr): XmlExpr {
    const _j = ({} as XmlExpr);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "op", _p?.op);
    _o.set(_j, "name", _p?.name);
    _o.set(_j, "named_args", _p?.named_args);
    _o.set(_j, "arg_names", _p?.arg_names);
    _o.set(_j, "args", _p?.args);
    _o.set(_j, "xmloption", _p?.xmloption);
    _o.set(_j, "indent", _p?.indent);
    _o.set(_j, "type", _p?.type);
    _o.set(_j, "typmod", _p?.typmod);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  jsonFormat(_p?: JsonFormat): JsonFormat {
    const _j = ({} as JsonFormat);
    _o.set(_j, "format_type", _p?.format_type);
    _o.set(_j, "encoding", _p?.encoding);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  jsonReturning(_p?: JsonReturning): JsonReturning {
    const _j = ({} as JsonReturning);
    _o.set(_j, "format", _p?.format);
    _o.set(_j, "typid", _p?.typid);
    _o.set(_j, "typmod", _p?.typmod);
    return _j;
  },
  jsonValueExpr(_p?: JsonValueExpr): JsonValueExpr {
    const _j = ({} as JsonValueExpr);
    _o.set(_j, "raw_expr", _p?.raw_expr);
    _o.set(_j, "formatted_expr", _p?.formatted_expr);
    _o.set(_j, "format", _p?.format);
    return _j;
  },
  jsonConstructorExpr(_p?: JsonConstructorExpr): JsonConstructorExpr {
    const _j = ({} as JsonConstructorExpr);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "type", _p?.type);
    _o.set(_j, "args", _p?.args);
    _o.set(_j, "func", _p?.func);
    _o.set(_j, "coercion", _p?.coercion);
    _o.set(_j, "returning", _p?.returning);
    _o.set(_j, "absent_on_null", _p?.absent_on_null);
    _o.set(_j, "unique", _p?.unique);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  jsonIsPredicate(_p?: JsonIsPredicate): JsonIsPredicate {
    const _j = ({} as JsonIsPredicate);
    _o.set(_j, "expr", _p?.expr);
    _o.set(_j, "format", _p?.format);
    _o.set(_j, "item_type", _p?.item_type);
    _o.set(_j, "unique_keys", _p?.unique_keys);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  nullTest(_p?: NullTest): NullTest {
    const _j = ({} as NullTest);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "arg", _p?.arg);
    _o.set(_j, "nulltesttype", _p?.nulltesttype);
    _o.set(_j, "argisrow", _p?.argisrow);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  booleanTest(_p?: BooleanTest): BooleanTest {
    const _j = ({} as BooleanTest);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "arg", _p?.arg);
    _o.set(_j, "booltesttype", _p?.booltesttype);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  coerceToDomain(_p?: CoerceToDomain): CoerceToDomain {
    const _j = ({} as CoerceToDomain);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "arg", _p?.arg);
    _o.set(_j, "resulttype", _p?.resulttype);
    _o.set(_j, "resulttypmod", _p?.resulttypmod);
    _o.set(_j, "resultcollid", _p?.resultcollid);
    _o.set(_j, "coercionformat", _p?.coercionformat);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  coerceToDomainValue(_p?: CoerceToDomainValue): CoerceToDomainValue {
    const _j = ({} as CoerceToDomainValue);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "typeId", _p?.typeId);
    _o.set(_j, "typeMod", _p?.typeMod);
    _o.set(_j, "collation", _p?.collation);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  setToDefault(_p?: SetToDefault): SetToDefault {
    const _j = ({} as SetToDefault);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "typeId", _p?.typeId);
    _o.set(_j, "typeMod", _p?.typeMod);
    _o.set(_j, "collation", _p?.collation);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  currentOfExpr(_p?: CurrentOfExpr): CurrentOfExpr {
    const _j = ({} as CurrentOfExpr);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "cvarno", _p?.cvarno);
    _o.set(_j, "cursor_name", _p?.cursor_name);
    _o.set(_j, "cursor_param", _p?.cursor_param);
    return _j;
  },
  nextValueExpr(_p?: NextValueExpr): NextValueExpr {
    const _j = ({} as NextValueExpr);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "seqid", _p?.seqid);
    _o.set(_j, "typeId", _p?.typeId);
    return _j;
  },
  inferenceElem(_p?: InferenceElem): InferenceElem {
    const _j = ({} as InferenceElem);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "expr", _p?.expr);
    _o.set(_j, "infercollid", _p?.infercollid);
    _o.set(_j, "inferopclass", _p?.inferopclass);
    return _j;
  },
  targetEntry(_p?: TargetEntry): TargetEntry {
    const _j = ({} as TargetEntry);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "expr", _p?.expr);
    _o.set(_j, "resno", _p?.resno);
    _o.set(_j, "resname", _p?.resname);
    _o.set(_j, "ressortgroupref", _p?.ressortgroupref);
    _o.set(_j, "resorigtbl", _p?.resorigtbl);
    _o.set(_j, "resorigcol", _p?.resorigcol);
    _o.set(_j, "resjunk", _p?.resjunk);
    return _j;
  },
  rangeTblRef(_p?: RangeTblRef): RangeTblRef {
    const _j = ({} as RangeTblRef);
    _o.set(_j, "rtindex", _p?.rtindex);
    return _j;
  },
  joinExpr(_p?: JoinExpr): JoinExpr {
    const _j = ({} as JoinExpr);
    _o.set(_j, "jointype", _p?.jointype);
    _o.set(_j, "isNatural", _p?.isNatural);
    _o.set(_j, "larg", _p?.larg);
    _o.set(_j, "rarg", _p?.rarg);
    _o.set(_j, "usingClause", _p?.usingClause);
    _o.set(_j, "join_using_alias", _p?.join_using_alias);
    _o.set(_j, "quals", _p?.quals);
    _o.set(_j, "alias", _p?.alias);
    _o.set(_j, "rtindex", _p?.rtindex);
    return _j;
  },
  fromExpr(_p?: FromExpr): FromExpr {
    const _j = ({} as FromExpr);
    _o.set(_j, "fromlist", _p?.fromlist);
    _o.set(_j, "quals", _p?.quals);
    return _j;
  },
  onConflictExpr(_p?: OnConflictExpr): OnConflictExpr {
    const _j = ({} as OnConflictExpr);
    _o.set(_j, "action", _p?.action);
    _o.set(_j, "arbiterElems", _p?.arbiterElems);
    _o.set(_j, "arbiterWhere", _p?.arbiterWhere);
    _o.set(_j, "constraint", _p?.constraint);
    _o.set(_j, "onConflictSet", _p?.onConflictSet);
    _o.set(_j, "onConflictWhere", _p?.onConflictWhere);
    _o.set(_j, "exclRelIndex", _p?.exclRelIndex);
    _o.set(_j, "exclRelTlist", _p?.exclRelTlist);
    return _j;
  },
  query(_p?: Query): Query {
    const _j = ({} as Query);
    _o.set(_j, "commandType", _p?.commandType);
    _o.set(_j, "querySource", _p?.querySource);
    _o.set(_j, "canSetTag", _p?.canSetTag);
    _o.set(_j, "utilityStmt", _p?.utilityStmt);
    _o.set(_j, "resultRelation", _p?.resultRelation);
    _o.set(_j, "hasAggs", _p?.hasAggs);
    _o.set(_j, "hasWindowFuncs", _p?.hasWindowFuncs);
    _o.set(_j, "hasTargetSRFs", _p?.hasTargetSRFs);
    _o.set(_j, "hasSubLinks", _p?.hasSubLinks);
    _o.set(_j, "hasDistinctOn", _p?.hasDistinctOn);
    _o.set(_j, "hasRecursive", _p?.hasRecursive);
    _o.set(_j, "hasModifyingCTE", _p?.hasModifyingCTE);
    _o.set(_j, "hasForUpdate", _p?.hasForUpdate);
    _o.set(_j, "hasRowSecurity", _p?.hasRowSecurity);
    _o.set(_j, "isReturn", _p?.isReturn);
    _o.set(_j, "cteList", _p?.cteList);
    _o.set(_j, "rtable", _p?.rtable);
    _o.set(_j, "rteperminfos", _p?.rteperminfos);
    _o.set(_j, "jointree", _p?.jointree);
    _o.set(_j, "mergeActionList", _p?.mergeActionList);
    _o.set(_j, "mergeUseOuterJoin", _p?.mergeUseOuterJoin);
    _o.set(_j, "targetList", _p?.targetList);
    _o.set(_j, "override", _p?.override);
    _o.set(_j, "onConflict", _p?.onConflict);
    _o.set(_j, "returningList", _p?.returningList);
    _o.set(_j, "groupClause", _p?.groupClause);
    _o.set(_j, "groupDistinct", _p?.groupDistinct);
    _o.set(_j, "groupingSets", _p?.groupingSets);
    _o.set(_j, "havingQual", _p?.havingQual);
    _o.set(_j, "windowClause", _p?.windowClause);
    _o.set(_j, "distinctClause", _p?.distinctClause);
    _o.set(_j, "sortClause", _p?.sortClause);
    _o.set(_j, "limitOffset", _p?.limitOffset);
    _o.set(_j, "limitCount", _p?.limitCount);
    _o.set(_j, "limitOption", _p?.limitOption);
    _o.set(_j, "rowMarks", _p?.rowMarks);
    _o.set(_j, "setOperations", _p?.setOperations);
    _o.set(_j, "constraintDeps", _p?.constraintDeps);
    _o.set(_j, "withCheckOptions", _p?.withCheckOptions);
    _o.set(_j, "stmt_location", _p?.stmt_location);
    _o.set(_j, "stmt_len", _p?.stmt_len);
    return _j;
  },
  typeName(_p?: TypeName): TypeName {
    const _j = ({} as TypeName);
    _o.set(_j, "names", _p?.names);
    _o.set(_j, "typeOid", _p?.typeOid);
    _o.set(_j, "setof", _p?.setof);
    _o.set(_j, "pct_type", _p?.pct_type);
    _o.set(_j, "typmods", _p?.typmods);
    _o.set(_j, "typemod", _p?.typemod);
    _o.set(_j, "arrayBounds", _p?.arrayBounds);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  columnRef(_p?: ColumnRef): ColumnRef {
    const _j = ({} as ColumnRef);
    _o.set(_j, "fields", _p?.fields);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  paramRef(_p?: ParamRef): ParamRef {
    const _j = ({} as ParamRef);
    _o.set(_j, "number", _p?.number);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  aExpr(_p?: A_Expr): A_Expr {
    const _j = ({} as A_Expr);
    _o.set(_j, "kind", _p?.kind);
    _o.set(_j, "name", _p?.name);
    _o.set(_j, "lexpr", _p?.lexpr);
    _o.set(_j, "rexpr", _p?.rexpr);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  typeCast(_p?: TypeCast): TypeCast {
    const _j = ({} as TypeCast);
    _o.set(_j, "arg", _p?.arg);
    _o.set(_j, "typeName", _p?.typeName);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  collateClause(_p?: CollateClause): CollateClause {
    const _j = ({} as CollateClause);
    _o.set(_j, "arg", _p?.arg);
    _o.set(_j, "collname", _p?.collname);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  roleSpec(_p?: RoleSpec): RoleSpec {
    const _j = ({} as RoleSpec);
    _o.set(_j, "roletype", _p?.roletype);
    _o.set(_j, "rolename", _p?.rolename);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  funcCall(_p?: FuncCall): FuncCall {
    const _j = ({} as FuncCall);
    _o.set(_j, "funcname", _p?.funcname);
    _o.set(_j, "args", _p?.args);
    _o.set(_j, "agg_order", _p?.agg_order);
    _o.set(_j, "agg_filter", _p?.agg_filter);
    _o.set(_j, "over", _p?.over);
    _o.set(_j, "agg_within_group", _p?.agg_within_group);
    _o.set(_j, "agg_star", _p?.agg_star);
    _o.set(_j, "agg_distinct", _p?.agg_distinct);
    _o.set(_j, "func_variadic", _p?.func_variadic);
    _o.set(_j, "funcformat", _p?.funcformat);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  aStar(_p?: A_Star): A_Star {
    const _j = ({} as A_Star);
    return _j;
  },
  aIndices(_p?: A_Indices): A_Indices {
    const _j = ({} as A_Indices);
    _o.set(_j, "is_slice", _p?.is_slice);
    _o.set(_j, "lidx", _p?.lidx);
    _o.set(_j, "uidx", _p?.uidx);
    return _j;
  },
  aIndirection(_p?: A_Indirection): A_Indirection {
    const _j = ({} as A_Indirection);
    _o.set(_j, "arg", _p?.arg);
    _o.set(_j, "indirection", _p?.indirection);
    return _j;
  },
  aArrayExpr(_p?: A_ArrayExpr): A_ArrayExpr {
    const _j = ({} as A_ArrayExpr);
    _o.set(_j, "elements", _p?.elements);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  resTarget(_p?: ResTarget): ResTarget {
    const _j = ({} as ResTarget);
    _o.set(_j, "name", _p?.name);
    _o.set(_j, "indirection", _p?.indirection);
    _o.set(_j, "val", _p?.val);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  multiAssignRef(_p?: MultiAssignRef): MultiAssignRef {
    const _j = ({} as MultiAssignRef);
    _o.set(_j, "source", _p?.source);
    _o.set(_j, "colno", _p?.colno);
    _o.set(_j, "ncolumns", _p?.ncolumns);
    return _j;
  },
  sortBy(_p?: SortBy): SortBy {
    const _j = ({} as SortBy);
    _o.set(_j, "node", _p?.node);
    _o.set(_j, "sortby_dir", _p?.sortby_dir);
    _o.set(_j, "sortby_nulls", _p?.sortby_nulls);
    _o.set(_j, "useOp", _p?.useOp);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  windowDef(_p?: WindowDef): WindowDef {
    const _j = ({} as WindowDef);
    _o.set(_j, "name", _p?.name);
    _o.set(_j, "refname", _p?.refname);
    _o.set(_j, "partitionClause", _p?.partitionClause);
    _o.set(_j, "orderClause", _p?.orderClause);
    _o.set(_j, "frameOptions", _p?.frameOptions);
    _o.set(_j, "startOffset", _p?.startOffset);
    _o.set(_j, "endOffset", _p?.endOffset);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  rangeSubselect(_p?: RangeSubselect): RangeSubselect {
    const _j = ({} as RangeSubselect);
    _o.set(_j, "lateral", _p?.lateral);
    _o.set(_j, "subquery", _p?.subquery);
    _o.set(_j, "alias", _p?.alias);
    return _j;
  },
  rangeFunction(_p?: RangeFunction): RangeFunction {
    const _j = ({} as RangeFunction);
    _o.set(_j, "lateral", _p?.lateral);
    _o.set(_j, "ordinality", _p?.ordinality);
    _o.set(_j, "is_rowsfrom", _p?.is_rowsfrom);
    _o.set(_j, "functions", _p?.functions);
    _o.set(_j, "alias", _p?.alias);
    _o.set(_j, "coldeflist", _p?.coldeflist);
    return _j;
  },
  rangeTableFunc(_p?: RangeTableFunc): RangeTableFunc {
    const _j = ({} as RangeTableFunc);
    _o.set(_j, "lateral", _p?.lateral);
    _o.set(_j, "docexpr", _p?.docexpr);
    _o.set(_j, "rowexpr", _p?.rowexpr);
    _o.set(_j, "namespaces", _p?.namespaces);
    _o.set(_j, "columns", _p?.columns);
    _o.set(_j, "alias", _p?.alias);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  rangeTableFuncCol(_p?: RangeTableFuncCol): RangeTableFuncCol {
    const _j = ({} as RangeTableFuncCol);
    _o.set(_j, "colname", _p?.colname);
    _o.set(_j, "typeName", _p?.typeName);
    _o.set(_j, "for_ordinality", _p?.for_ordinality);
    _o.set(_j, "is_not_null", _p?.is_not_null);
    _o.set(_j, "colexpr", _p?.colexpr);
    _o.set(_j, "coldefexpr", _p?.coldefexpr);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  rangeTableSample(_p?: RangeTableSample): RangeTableSample {
    const _j = ({} as RangeTableSample);
    _o.set(_j, "relation", _p?.relation);
    _o.set(_j, "method", _p?.method);
    _o.set(_j, "args", _p?.args);
    _o.set(_j, "repeatable", _p?.repeatable);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  columnDef(_p?: ColumnDef): ColumnDef {
    const _j = ({} as ColumnDef);
    _o.set(_j, "colname", _p?.colname);
    _o.set(_j, "typeName", _p?.typeName);
    _o.set(_j, "compression", _p?.compression);
    _o.set(_j, "inhcount", _p?.inhcount);
    _o.set(_j, "is_local", _p?.is_local);
    _o.set(_j, "is_not_null", _p?.is_not_null);
    _o.set(_j, "is_from_type", _p?.is_from_type);
    _o.set(_j, "storage", _p?.storage);
    _o.set(_j, "storage_name", _p?.storage_name);
    _o.set(_j, "raw_default", _p?.raw_default);
    _o.set(_j, "cooked_default", _p?.cooked_default);
    _o.set(_j, "identity", _p?.identity);
    _o.set(_j, "identitySequence", _p?.identitySequence);
    _o.set(_j, "generated", _p?.generated);
    _o.set(_j, "collClause", _p?.collClause);
    _o.set(_j, "collOid", _p?.collOid);
    _o.set(_j, "constraints", _p?.constraints);
    _o.set(_j, "fdwoptions", _p?.fdwoptions);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  tableLikeClause(_p?: TableLikeClause): TableLikeClause {
    const _j = ({} as TableLikeClause);
    _o.set(_j, "relation", _p?.relation);
    _o.set(_j, "options", _p?.options);
    _o.set(_j, "relationOid", _p?.relationOid);
    return _j;
  },
  indexElem(_p?: IndexElem): IndexElem {
    const _j = ({} as IndexElem);
    _o.set(_j, "name", _p?.name);
    _o.set(_j, "expr", _p?.expr);
    _o.set(_j, "indexcolname", _p?.indexcolname);
    _o.set(_j, "collation", _p?.collation);
    _o.set(_j, "opclass", _p?.opclass);
    _o.set(_j, "opclassopts", _p?.opclassopts);
    _o.set(_j, "ordering", _p?.ordering);
    _o.set(_j, "nulls_ordering", _p?.nulls_ordering);
    return _j;
  },
  defElem(_p?: DefElem): DefElem {
    const _j = ({} as DefElem);
    _o.set(_j, "defnamespace", _p?.defnamespace);
    _o.set(_j, "defname", _p?.defname);
    _o.set(_j, "arg", _p?.arg);
    _o.set(_j, "defaction", _p?.defaction);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  lockingClause(_p?: LockingClause): LockingClause {
    const _j = ({} as LockingClause);
    _o.set(_j, "lockedRels", _p?.lockedRels);
    _o.set(_j, "strength", _p?.strength);
    _o.set(_j, "waitPolicy", _p?.waitPolicy);
    return _j;
  },
  xmlSerialize(_p?: XmlSerialize): XmlSerialize {
    const _j = ({} as XmlSerialize);
    _o.set(_j, "xmloption", _p?.xmloption);
    _o.set(_j, "expr", _p?.expr);
    _o.set(_j, "typeName", _p?.typeName);
    _o.set(_j, "indent", _p?.indent);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  partitionElem(_p?: PartitionElem): PartitionElem {
    const _j = ({} as PartitionElem);
    _o.set(_j, "name", _p?.name);
    _o.set(_j, "expr", _p?.expr);
    _o.set(_j, "collation", _p?.collation);
    _o.set(_j, "opclass", _p?.opclass);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  partitionSpec(_p?: PartitionSpec): PartitionSpec {
    const _j = ({} as PartitionSpec);
    _o.set(_j, "strategy", _p?.strategy);
    _o.set(_j, "partParams", _p?.partParams);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  partitionBoundSpec(_p?: PartitionBoundSpec): PartitionBoundSpec {
    const _j = ({} as PartitionBoundSpec);
    _o.set(_j, "strategy", _p?.strategy);
    _o.set(_j, "is_default", _p?.is_default);
    _o.set(_j, "modulus", _p?.modulus);
    _o.set(_j, "remainder", _p?.remainder);
    _o.set(_j, "listdatums", _p?.listdatums);
    _o.set(_j, "lowerdatums", _p?.lowerdatums);
    _o.set(_j, "upperdatums", _p?.upperdatums);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  partitionRangeDatum(_p?: PartitionRangeDatum): PartitionRangeDatum {
    const _j = ({} as PartitionRangeDatum);
    _o.set(_j, "kind", _p?.kind);
    _o.set(_j, "value", _p?.value);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  partitionCmd(_p?: PartitionCmd): PartitionCmd {
    const _j = ({} as PartitionCmd);
    _o.set(_j, "name", _p?.name);
    _o.set(_j, "bound", _p?.bound);
    _o.set(_j, "concurrent", _p?.concurrent);
    return _j;
  },
  rangeTblEntry(_p?: RangeTblEntry): RangeTblEntry {
    const _j = ({} as RangeTblEntry);
    _o.set(_j, "rtekind", _p?.rtekind);
    _o.set(_j, "relid", _p?.relid);
    _o.set(_j, "relkind", _p?.relkind);
    _o.set(_j, "rellockmode", _p?.rellockmode);
    _o.set(_j, "tablesample", _p?.tablesample);
    _o.set(_j, "perminfoindex", _p?.perminfoindex);
    _o.set(_j, "subquery", _p?.subquery);
    _o.set(_j, "security_barrier", _p?.security_barrier);
    _o.set(_j, "jointype", _p?.jointype);
    _o.set(_j, "joinmergedcols", _p?.joinmergedcols);
    _o.set(_j, "joinaliasvars", _p?.joinaliasvars);
    _o.set(_j, "joinleftcols", _p?.joinleftcols);
    _o.set(_j, "joinrightcols", _p?.joinrightcols);
    _o.set(_j, "join_using_alias", _p?.join_using_alias);
    _o.set(_j, "functions", _p?.functions);
    _o.set(_j, "funcordinality", _p?.funcordinality);
    _o.set(_j, "tablefunc", _p?.tablefunc);
    _o.set(_j, "values_lists", _p?.values_lists);
    _o.set(_j, "ctename", _p?.ctename);
    _o.set(_j, "ctelevelsup", _p?.ctelevelsup);
    _o.set(_j, "self_reference", _p?.self_reference);
    _o.set(_j, "coltypes", _p?.coltypes);
    _o.set(_j, "coltypmods", _p?.coltypmods);
    _o.set(_j, "colcollations", _p?.colcollations);
    _o.set(_j, "enrname", _p?.enrname);
    _o.set(_j, "enrtuples", _p?.enrtuples);
    _o.set(_j, "alias", _p?.alias);
    _o.set(_j, "eref", _p?.eref);
    _o.set(_j, "lateral", _p?.lateral);
    _o.set(_j, "inh", _p?.inh);
    _o.set(_j, "inFromCl", _p?.inFromCl);
    _o.set(_j, "securityQuals", _p?.securityQuals);
    return _j;
  },
  rtePermissionInfo(_p?: RTEPermissionInfo): RTEPermissionInfo {
    const _j = ({} as RTEPermissionInfo);
    _o.set(_j, "relid", _p?.relid);
    _o.set(_j, "inh", _p?.inh);
    _o.set(_j, "requiredPerms", _p?.requiredPerms);
    _o.set(_j, "checkAsUser", _p?.checkAsUser);
    _o.set(_j, "selectedCols", _p?.selectedCols);
    _o.set(_j, "insertedCols", _p?.insertedCols);
    _o.set(_j, "updatedCols", _p?.updatedCols);
    return _j;
  },
  rangeTblFunction(_p?: RangeTblFunction): RangeTblFunction {
    const _j = ({} as RangeTblFunction);
    _o.set(_j, "funcexpr", _p?.funcexpr);
    _o.set(_j, "funccolcount", _p?.funccolcount);
    _o.set(_j, "funccolnames", _p?.funccolnames);
    _o.set(_j, "funccoltypes", _p?.funccoltypes);
    _o.set(_j, "funccoltypmods", _p?.funccoltypmods);
    _o.set(_j, "funccolcollations", _p?.funccolcollations);
    _o.set(_j, "funcparams", _p?.funcparams);
    return _j;
  },
  tableSampleClause(_p?: TableSampleClause): TableSampleClause {
    const _j = ({} as TableSampleClause);
    _o.set(_j, "tsmhandler", _p?.tsmhandler);
    _o.set(_j, "args", _p?.args);
    _o.set(_j, "repeatable", _p?.repeatable);
    return _j;
  },
  withCheckOption(_p?: WithCheckOption): WithCheckOption {
    const _j = ({} as WithCheckOption);
    _o.set(_j, "kind", _p?.kind);
    _o.set(_j, "relname", _p?.relname);
    _o.set(_j, "polname", _p?.polname);
    _o.set(_j, "qual", _p?.qual);
    _o.set(_j, "cascaded", _p?.cascaded);
    return _j;
  },
  sortGroupClause(_p?: SortGroupClause): SortGroupClause {
    const _j = ({} as SortGroupClause);
    _o.set(_j, "tleSortGroupRef", _p?.tleSortGroupRef);
    _o.set(_j, "eqop", _p?.eqop);
    _o.set(_j, "sortop", _p?.sortop);
    _o.set(_j, "nulls_first", _p?.nulls_first);
    _o.set(_j, "hashable", _p?.hashable);
    return _j;
  },
  groupingSet(_p?: GroupingSet): GroupingSet {
    const _j = ({} as GroupingSet);
    _o.set(_j, "kind", _p?.kind);
    _o.set(_j, "content", _p?.content);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  windowClause(_p?: WindowClause): WindowClause {
    const _j = ({} as WindowClause);
    _o.set(_j, "name", _p?.name);
    _o.set(_j, "refname", _p?.refname);
    _o.set(_j, "partitionClause", _p?.partitionClause);
    _o.set(_j, "orderClause", _p?.orderClause);
    _o.set(_j, "frameOptions", _p?.frameOptions);
    _o.set(_j, "startOffset", _p?.startOffset);
    _o.set(_j, "endOffset", _p?.endOffset);
    _o.set(_j, "runCondition", _p?.runCondition);
    _o.set(_j, "startInRangeFunc", _p?.startInRangeFunc);
    _o.set(_j, "endInRangeFunc", _p?.endInRangeFunc);
    _o.set(_j, "inRangeColl", _p?.inRangeColl);
    _o.set(_j, "inRangeAsc", _p?.inRangeAsc);
    _o.set(_j, "inRangeNullsFirst", _p?.inRangeNullsFirst);
    _o.set(_j, "winref", _p?.winref);
    _o.set(_j, "copiedOrder", _p?.copiedOrder);
    return _j;
  },
  rowMarkClause(_p?: RowMarkClause): RowMarkClause {
    const _j = ({} as RowMarkClause);
    _o.set(_j, "rti", _p?.rti);
    _o.set(_j, "strength", _p?.strength);
    _o.set(_j, "waitPolicy", _p?.waitPolicy);
    _o.set(_j, "pushedDown", _p?.pushedDown);
    return _j;
  },
  withClause(_p?: WithClause): WithClause {
    const _j = ({} as WithClause);
    _o.set(_j, "ctes", _p?.ctes);
    _o.set(_j, "recursive", _p?.recursive);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  inferClause(_p?: InferClause): InferClause {
    const _j = ({} as InferClause);
    _o.set(_j, "indexElems", _p?.indexElems);
    _o.set(_j, "whereClause", _p?.whereClause);
    _o.set(_j, "conname", _p?.conname);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  onConflictClause(_p?: OnConflictClause): OnConflictClause {
    const _j = ({} as OnConflictClause);
    _o.set(_j, "action", _p?.action);
    _o.set(_j, "infer", _p?.infer);
    _o.set(_j, "targetList", _p?.targetList);
    _o.set(_j, "whereClause", _p?.whereClause);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  cteSearchClause(_p?: CTESearchClause): CTESearchClause {
    const _j = ({} as CTESearchClause);
    _o.set(_j, "search_col_list", _p?.search_col_list);
    _o.set(_j, "search_breadth_first", _p?.search_breadth_first);
    _o.set(_j, "search_seq_column", _p?.search_seq_column);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  cteCycleClause(_p?: CTECycleClause): CTECycleClause {
    const _j = ({} as CTECycleClause);
    _o.set(_j, "cycle_col_list", _p?.cycle_col_list);
    _o.set(_j, "cycle_mark_column", _p?.cycle_mark_column);
    _o.set(_j, "cycle_mark_value", _p?.cycle_mark_value);
    _o.set(_j, "cycle_mark_default", _p?.cycle_mark_default);
    _o.set(_j, "cycle_path_column", _p?.cycle_path_column);
    _o.set(_j, "location", _p?.location);
    _o.set(_j, "cycle_mark_type", _p?.cycle_mark_type);
    _o.set(_j, "cycle_mark_typmod", _p?.cycle_mark_typmod);
    _o.set(_j, "cycle_mark_collation", _p?.cycle_mark_collation);
    _o.set(_j, "cycle_mark_neop", _p?.cycle_mark_neop);
    return _j;
  },
  commonTableExpr(_p?: CommonTableExpr): CommonTableExpr {
    const _j = ({} as CommonTableExpr);
    _o.set(_j, "ctename", _p?.ctename);
    _o.set(_j, "aliascolnames", _p?.aliascolnames);
    _o.set(_j, "ctematerialized", _p?.ctematerialized);
    _o.set(_j, "ctequery", _p?.ctequery);
    _o.set(_j, "search_clause", _p?.search_clause);
    _o.set(_j, "cycle_clause", _p?.cycle_clause);
    _o.set(_j, "location", _p?.location);
    _o.set(_j, "cterecursive", _p?.cterecursive);
    _o.set(_j, "cterefcount", _p?.cterefcount);
    _o.set(_j, "ctecolnames", _p?.ctecolnames);
    _o.set(_j, "ctecoltypes", _p?.ctecoltypes);
    _o.set(_j, "ctecoltypmods", _p?.ctecoltypmods);
    _o.set(_j, "ctecolcollations", _p?.ctecolcollations);
    return _j;
  },
  mergeWhenClause(_p?: MergeWhenClause): MergeWhenClause {
    const _j = ({} as MergeWhenClause);
    _o.set(_j, "matched", _p?.matched);
    _o.set(_j, "commandType", _p?.commandType);
    _o.set(_j, "override", _p?.override);
    _o.set(_j, "condition", _p?.condition);
    _o.set(_j, "targetList", _p?.targetList);
    _o.set(_j, "values", _p?.values);
    return _j;
  },
  mergeAction(_p?: MergeAction): MergeAction {
    const _j = ({} as MergeAction);
    _o.set(_j, "matched", _p?.matched);
    _o.set(_j, "commandType", _p?.commandType);
    _o.set(_j, "override", _p?.override);
    _o.set(_j, "qual", _p?.qual);
    _o.set(_j, "targetList", _p?.targetList);
    _o.set(_j, "updateColnos", _p?.updateColnos);
    return _j;
  },
  triggerTransition(_p?: TriggerTransition): TriggerTransition {
    const _j = ({} as TriggerTransition);
    _o.set(_j, "name", _p?.name);
    _o.set(_j, "isNew", _p?.isNew);
    _o.set(_j, "isTable", _p?.isTable);
    return _j;
  },
  jsonOutput(_p?: JsonOutput): JsonOutput {
    const _j = ({} as JsonOutput);
    _o.set(_j, "typeName", _p?.typeName);
    _o.set(_j, "returning", _p?.returning);
    return _j;
  },
  jsonKeyValue(_p?: JsonKeyValue): JsonKeyValue {
    const _j = ({} as JsonKeyValue);
    _o.set(_j, "key", _p?.key);
    _o.set(_j, "value", _p?.value);
    return _j;
  },
  jsonObjectConstructor(_p?: JsonObjectConstructor): JsonObjectConstructor {
    const _j = ({} as JsonObjectConstructor);
    _o.set(_j, "exprs", _p?.exprs);
    _o.set(_j, "output", _p?.output);
    _o.set(_j, "absent_on_null", _p?.absent_on_null);
    _o.set(_j, "unique", _p?.unique);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  jsonArrayConstructor(_p?: JsonArrayConstructor): JsonArrayConstructor {
    const _j = ({} as JsonArrayConstructor);
    _o.set(_j, "exprs", _p?.exprs);
    _o.set(_j, "output", _p?.output);
    _o.set(_j, "absent_on_null", _p?.absent_on_null);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  jsonArrayQueryConstructor(_p?: JsonArrayQueryConstructor): JsonArrayQueryConstructor {
    const _j = ({} as JsonArrayQueryConstructor);
    _o.set(_j, "query", _p?.query);
    _o.set(_j, "output", _p?.output);
    _o.set(_j, "format", _p?.format);
    _o.set(_j, "absent_on_null", _p?.absent_on_null);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  jsonAggConstructor(_p?: JsonAggConstructor): JsonAggConstructor {
    const _j = ({} as JsonAggConstructor);
    _o.set(_j, "output", _p?.output);
    _o.set(_j, "agg_filter", _p?.agg_filter);
    _o.set(_j, "agg_order", _p?.agg_order);
    _o.set(_j, "over", _p?.over);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  jsonObjectAgg(_p?: JsonObjectAgg): JsonObjectAgg {
    const _j = ({} as JsonObjectAgg);
    _o.set(_j, "constructor", _p?.constructor);
    _o.set(_j, "arg", _p?.arg);
    _o.set(_j, "absent_on_null", _p?.absent_on_null);
    _o.set(_j, "unique", _p?.unique);
    return _j;
  },
  jsonArrayAgg(_p?: JsonArrayAgg): JsonArrayAgg {
    const _j = ({} as JsonArrayAgg);
    _o.set(_j, "constructor", _p?.constructor);
    _o.set(_j, "arg", _p?.arg);
    _o.set(_j, "absent_on_null", _p?.absent_on_null);
    return _j;
  },
  rawStmt(_p?: RawStmt): RawStmt {
    const _j = ({} as RawStmt);
    _o.set(_j, "stmt", _p?.stmt);
    _o.set(_j, "stmt_location", _p?.stmt_location);
    _o.set(_j, "stmt_len", _p?.stmt_len);
    return _j;
  },
  insertStmt(_p?: InsertStmt): InsertStmt {
    const _j = ({} as InsertStmt);
    _o.set(_j, "relation", _p?.relation);
    _o.set(_j, "cols", _p?.cols);
    _o.set(_j, "selectStmt", _p?.selectStmt);
    _o.set(_j, "onConflictClause", _p?.onConflictClause);
    _o.set(_j, "returningList", _p?.returningList);
    _o.set(_j, "withClause", _p?.withClause);
    _o.set(_j, "override", _p?.override);
    return _j;
  },
  deleteStmt(_p?: DeleteStmt): DeleteStmt {
    const _j = ({} as DeleteStmt);
    _o.set(_j, "relation", _p?.relation);
    _o.set(_j, "usingClause", _p?.usingClause);
    _o.set(_j, "whereClause", _p?.whereClause);
    _o.set(_j, "returningList", _p?.returningList);
    _o.set(_j, "withClause", _p?.withClause);
    return _j;
  },
  updateStmt(_p?: UpdateStmt): UpdateStmt {
    const _j = ({} as UpdateStmt);
    _o.set(_j, "relation", _p?.relation);
    _o.set(_j, "targetList", _p?.targetList);
    _o.set(_j, "whereClause", _p?.whereClause);
    _o.set(_j, "fromClause", _p?.fromClause);
    _o.set(_j, "returningList", _p?.returningList);
    _o.set(_j, "withClause", _p?.withClause);
    return _j;
  },
  mergeStmt(_p?: MergeStmt): MergeStmt {
    const _j = ({} as MergeStmt);
    _o.set(_j, "relation", _p?.relation);
    _o.set(_j, "sourceRelation", _p?.sourceRelation);
    _o.set(_j, "joinCondition", _p?.joinCondition);
    _o.set(_j, "mergeWhenClauses", _p?.mergeWhenClauses);
    _o.set(_j, "withClause", _p?.withClause);
    return _j;
  },
  selectStmt(_p?: SelectStmt): SelectStmt {
    const _j = ({} as SelectStmt);
    _o.set(_j, "distinctClause", _p?.distinctClause);
    _o.set(_j, "intoClause", _p?.intoClause);
    _o.set(_j, "targetList", _p?.targetList);
    _o.set(_j, "fromClause", _p?.fromClause);
    _o.set(_j, "whereClause", _p?.whereClause);
    _o.set(_j, "groupClause", _p?.groupClause);
    _o.set(_j, "groupDistinct", _p?.groupDistinct);
    _o.set(_j, "havingClause", _p?.havingClause);
    _o.set(_j, "windowClause", _p?.windowClause);
    _o.set(_j, "valuesLists", _p?.valuesLists);
    _o.set(_j, "sortClause", _p?.sortClause);
    _o.set(_j, "limitOffset", _p?.limitOffset);
    _o.set(_j, "limitCount", _p?.limitCount);
    _o.set(_j, "limitOption", _p?.limitOption);
    _o.set(_j, "lockingClause", _p?.lockingClause);
    _o.set(_j, "withClause", _p?.withClause);
    _o.set(_j, "op", _p?.op);
    _o.set(_j, "all", _p?.all);
    _o.set(_j, "larg", _p?.larg);
    _o.set(_j, "rarg", _p?.rarg);
    return _j;
  },
  setOperationStmt(_p?: SetOperationStmt): SetOperationStmt {
    const _j = ({} as SetOperationStmt);
    _o.set(_j, "op", _p?.op);
    _o.set(_j, "all", _p?.all);
    _o.set(_j, "larg", _p?.larg);
    _o.set(_j, "rarg", _p?.rarg);
    _o.set(_j, "colTypes", _p?.colTypes);
    _o.set(_j, "colTypmods", _p?.colTypmods);
    _o.set(_j, "colCollations", _p?.colCollations);
    _o.set(_j, "groupClauses", _p?.groupClauses);
    return _j;
  },
  returnStmt(_p?: ReturnStmt): ReturnStmt {
    const _j = ({} as ReturnStmt);
    _o.set(_j, "returnval", _p?.returnval);
    return _j;
  },
  plAssignStmt(_p?: PLAssignStmt): PLAssignStmt {
    const _j = ({} as PLAssignStmt);
    _o.set(_j, "name", _p?.name);
    _o.set(_j, "indirection", _p?.indirection);
    _o.set(_j, "nnames", _p?.nnames);
    _o.set(_j, "val", _p?.val);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  createSchemaStmt(_p?: CreateSchemaStmt): CreateSchemaStmt {
    const _j = ({} as CreateSchemaStmt);
    _o.set(_j, "schemaname", _p?.schemaname);
    _o.set(_j, "authrole", _p?.authrole);
    _o.set(_j, "schemaElts", _p?.schemaElts);
    _o.set(_j, "if_not_exists", _p?.if_not_exists);
    return _j;
  },
  alterTableStmt(_p?: AlterTableStmt): AlterTableStmt {
    const _j = ({} as AlterTableStmt);
    _o.set(_j, "relation", _p?.relation);
    _o.set(_j, "cmds", _p?.cmds);
    _o.set(_j, "objtype", _p?.objtype);
    _o.set(_j, "missing_ok", _p?.missing_ok);
    return _j;
  },
  replicaIdentityStmt(_p?: ReplicaIdentityStmt): ReplicaIdentityStmt {
    const _j = ({} as ReplicaIdentityStmt);
    _o.set(_j, "identity_type", _p?.identity_type);
    _o.set(_j, "name", _p?.name);
    return _j;
  },
  alterTableCmd(_p?: AlterTableCmd): AlterTableCmd {
    const _j = ({} as AlterTableCmd);
    _o.set(_j, "subtype", _p?.subtype);
    _o.set(_j, "name", _p?.name);
    _o.set(_j, "num", _p?.num);
    _o.set(_j, "newowner", _p?.newowner);
    _o.set(_j, "def", _p?.def);
    _o.set(_j, "behavior", _p?.behavior);
    _o.set(_j, "missing_ok", _p?.missing_ok);
    _o.set(_j, "recurse", _p?.recurse);
    return _j;
  },
  alterCollationStmt(_p?: AlterCollationStmt): AlterCollationStmt {
    const _j = ({} as AlterCollationStmt);
    _o.set(_j, "collname", _p?.collname);
    return _j;
  },
  alterDomainStmt(_p?: AlterDomainStmt): AlterDomainStmt {
    const _j = ({} as AlterDomainStmt);
    _o.set(_j, "subtype", _p?.subtype);
    _o.set(_j, "typeName", _p?.typeName);
    _o.set(_j, "name", _p?.name);
    _o.set(_j, "def", _p?.def);
    _o.set(_j, "behavior", _p?.behavior);
    _o.set(_j, "missing_ok", _p?.missing_ok);
    return _j;
  },
  grantStmt(_p?: GrantStmt): GrantStmt {
    const _j = ({} as GrantStmt);
    _o.set(_j, "is_grant", _p?.is_grant);
    _o.set(_j, "targtype", _p?.targtype);
    _o.set(_j, "objtype", _p?.objtype);
    _o.set(_j, "objects", _p?.objects);
    _o.set(_j, "privileges", _p?.privileges);
    _o.set(_j, "grantees", _p?.grantees);
    _o.set(_j, "grant_option", _p?.grant_option);
    _o.set(_j, "grantor", _p?.grantor);
    _o.set(_j, "behavior", _p?.behavior);
    return _j;
  },
  objectWithArgs(_p?: ObjectWithArgs): ObjectWithArgs {
    const _j = ({} as ObjectWithArgs);
    _o.set(_j, "objname", _p?.objname);
    _o.set(_j, "objargs", _p?.objargs);
    _o.set(_j, "objfuncargs", _p?.objfuncargs);
    _o.set(_j, "args_unspecified", _p?.args_unspecified);
    return _j;
  },
  accessPriv(_p?: AccessPriv): AccessPriv {
    const _j = ({} as AccessPriv);
    _o.set(_j, "priv_name", _p?.priv_name);
    _o.set(_j, "cols", _p?.cols);
    return _j;
  },
  grantRoleStmt(_p?: GrantRoleStmt): GrantRoleStmt {
    const _j = ({} as GrantRoleStmt);
    _o.set(_j, "granted_roles", _p?.granted_roles);
    _o.set(_j, "grantee_roles", _p?.grantee_roles);
    _o.set(_j, "is_grant", _p?.is_grant);
    _o.set(_j, "opt", _p?.opt);
    _o.set(_j, "grantor", _p?.grantor);
    _o.set(_j, "behavior", _p?.behavior);
    return _j;
  },
  alterDefaultPrivilegesStmt(_p?: AlterDefaultPrivilegesStmt): AlterDefaultPrivilegesStmt {
    const _j = ({} as AlterDefaultPrivilegesStmt);
    _o.set(_j, "options", _p?.options);
    _o.set(_j, "action", _p?.action);
    return _j;
  },
  copyStmt(_p?: CopyStmt): CopyStmt {
    const _j = ({} as CopyStmt);
    _o.set(_j, "relation", _p?.relation);
    _o.set(_j, "query", _p?.query);
    _o.set(_j, "attlist", _p?.attlist);
    _o.set(_j, "is_from", _p?.is_from);
    _o.set(_j, "is_program", _p?.is_program);
    _o.set(_j, "filename", _p?.filename);
    _o.set(_j, "options", _p?.options);
    _o.set(_j, "whereClause", _p?.whereClause);
    return _j;
  },
  variableSetStmt(_p?: VariableSetStmt): VariableSetStmt {
    const _j = ({} as VariableSetStmt);
    _o.set(_j, "kind", _p?.kind);
    _o.set(_j, "name", _p?.name);
    _o.set(_j, "args", _p?.args);
    _o.set(_j, "is_local", _p?.is_local);
    return _j;
  },
  variableShowStmt(_p?: VariableShowStmt): VariableShowStmt {
    const _j = ({} as VariableShowStmt);
    _o.set(_j, "name", _p?.name);
    return _j;
  },
  createStmt(_p?: CreateStmt): CreateStmt {
    const _j = ({} as CreateStmt);
    _o.set(_j, "relation", _p?.relation);
    _o.set(_j, "tableElts", _p?.tableElts);
    _o.set(_j, "inhRelations", _p?.inhRelations);
    _o.set(_j, "partbound", _p?.partbound);
    _o.set(_j, "partspec", _p?.partspec);
    _o.set(_j, "ofTypename", _p?.ofTypename);
    _o.set(_j, "constraints", _p?.constraints);
    _o.set(_j, "options", _p?.options);
    _o.set(_j, "oncommit", _p?.oncommit);
    _o.set(_j, "tablespacename", _p?.tablespacename);
    _o.set(_j, "accessMethod", _p?.accessMethod);
    _o.set(_j, "if_not_exists", _p?.if_not_exists);
    return _j;
  },
  constraint(_p?: Constraint): Constraint {
    const _j = ({} as Constraint);
    _o.set(_j, "contype", _p?.contype);
    _o.set(_j, "conname", _p?.conname);
    _o.set(_j, "deferrable", _p?.deferrable);
    _o.set(_j, "initdeferred", _p?.initdeferred);
    _o.set(_j, "location", _p?.location);
    _o.set(_j, "is_no_inherit", _p?.is_no_inherit);
    _o.set(_j, "raw_expr", _p?.raw_expr);
    _o.set(_j, "cooked_expr", _p?.cooked_expr);
    _o.set(_j, "generated_when", _p?.generated_when);
    _o.set(_j, "nulls_not_distinct", _p?.nulls_not_distinct);
    _o.set(_j, "keys", _p?.keys);
    _o.set(_j, "including", _p?.including);
    _o.set(_j, "exclusions", _p?.exclusions);
    _o.set(_j, "options", _p?.options);
    _o.set(_j, "indexname", _p?.indexname);
    _o.set(_j, "indexspace", _p?.indexspace);
    _o.set(_j, "reset_default_tblspc", _p?.reset_default_tblspc);
    _o.set(_j, "access_method", _p?.access_method);
    _o.set(_j, "where_clause", _p?.where_clause);
    _o.set(_j, "pktable", _p?.pktable);
    _o.set(_j, "fk_attrs", _p?.fk_attrs);
    _o.set(_j, "pk_attrs", _p?.pk_attrs);
    _o.set(_j, "fk_matchtype", _p?.fk_matchtype);
    _o.set(_j, "fk_upd_action", _p?.fk_upd_action);
    _o.set(_j, "fk_del_action", _p?.fk_del_action);
    _o.set(_j, "fk_del_set_cols", _p?.fk_del_set_cols);
    _o.set(_j, "old_conpfeqop", _p?.old_conpfeqop);
    _o.set(_j, "old_pktable_oid", _p?.old_pktable_oid);
    _o.set(_j, "skip_validation", _p?.skip_validation);
    _o.set(_j, "initially_valid", _p?.initially_valid);
    return _j;
  },
  createTableSpaceStmt(_p?: CreateTableSpaceStmt): CreateTableSpaceStmt {
    const _j = ({} as CreateTableSpaceStmt);
    _o.set(_j, "tablespacename", _p?.tablespacename);
    _o.set(_j, "owner", _p?.owner);
    _o.set(_j, "location", _p?.location);
    _o.set(_j, "options", _p?.options);
    return _j;
  },
  dropTableSpaceStmt(_p?: DropTableSpaceStmt): DropTableSpaceStmt {
    const _j = ({} as DropTableSpaceStmt);
    _o.set(_j, "tablespacename", _p?.tablespacename);
    _o.set(_j, "missing_ok", _p?.missing_ok);
    return _j;
  },
  alterTableSpaceOptionsStmt(_p?: AlterTableSpaceOptionsStmt): AlterTableSpaceOptionsStmt {
    const _j = ({} as AlterTableSpaceOptionsStmt);
    _o.set(_j, "tablespacename", _p?.tablespacename);
    _o.set(_j, "options", _p?.options);
    _o.set(_j, "isReset", _p?.isReset);
    return _j;
  },
  alterTableMoveAllStmt(_p?: AlterTableMoveAllStmt): AlterTableMoveAllStmt {
    const _j = ({} as AlterTableMoveAllStmt);
    _o.set(_j, "orig_tablespacename", _p?.orig_tablespacename);
    _o.set(_j, "objtype", _p?.objtype);
    _o.set(_j, "roles", _p?.roles);
    _o.set(_j, "new_tablespacename", _p?.new_tablespacename);
    _o.set(_j, "nowait", _p?.nowait);
    return _j;
  },
  createExtensionStmt(_p?: CreateExtensionStmt): CreateExtensionStmt {
    const _j = ({} as CreateExtensionStmt);
    _o.set(_j, "extname", _p?.extname);
    _o.set(_j, "if_not_exists", _p?.if_not_exists);
    _o.set(_j, "options", _p?.options);
    return _j;
  },
  alterExtensionStmt(_p?: AlterExtensionStmt): AlterExtensionStmt {
    const _j = ({} as AlterExtensionStmt);
    _o.set(_j, "extname", _p?.extname);
    _o.set(_j, "options", _p?.options);
    return _j;
  },
  alterExtensionContentsStmt(_p?: AlterExtensionContentsStmt): AlterExtensionContentsStmt {
    const _j = ({} as AlterExtensionContentsStmt);
    _o.set(_j, "extname", _p?.extname);
    _o.set(_j, "action", _p?.action);
    _o.set(_j, "objtype", _p?.objtype);
    _o.set(_j, "object", _p?.object);
    return _j;
  },
  createFdwStmt(_p?: CreateFdwStmt): CreateFdwStmt {
    const _j = ({} as CreateFdwStmt);
    _o.set(_j, "fdwname", _p?.fdwname);
    _o.set(_j, "func_options", _p?.func_options);
    _o.set(_j, "options", _p?.options);
    return _j;
  },
  alterFdwStmt(_p?: AlterFdwStmt): AlterFdwStmt {
    const _j = ({} as AlterFdwStmt);
    _o.set(_j, "fdwname", _p?.fdwname);
    _o.set(_j, "func_options", _p?.func_options);
    _o.set(_j, "options", _p?.options);
    return _j;
  },
  createForeignServerStmt(_p?: CreateForeignServerStmt): CreateForeignServerStmt {
    const _j = ({} as CreateForeignServerStmt);
    _o.set(_j, "servername", _p?.servername);
    _o.set(_j, "servertype", _p?.servertype);
    _o.set(_j, "version", _p?.version);
    _o.set(_j, "fdwname", _p?.fdwname);
    _o.set(_j, "if_not_exists", _p?.if_not_exists);
    _o.set(_j, "options", _p?.options);
    return _j;
  },
  alterForeignServerStmt(_p?: AlterForeignServerStmt): AlterForeignServerStmt {
    const _j = ({} as AlterForeignServerStmt);
    _o.set(_j, "servername", _p?.servername);
    _o.set(_j, "version", _p?.version);
    _o.set(_j, "options", _p?.options);
    _o.set(_j, "has_version", _p?.has_version);
    return _j;
  },
  createForeignTableStmt(_p?: CreateForeignTableStmt): CreateForeignTableStmt {
    const _j = ({} as CreateForeignTableStmt);
    _o.set(_j, "base", _p?.base);
    _o.set(_j, "servername", _p?.servername);
    _o.set(_j, "options", _p?.options);
    return _j;
  },
  createUserMappingStmt(_p?: CreateUserMappingStmt): CreateUserMappingStmt {
    const _j = ({} as CreateUserMappingStmt);
    _o.set(_j, "user", _p?.user);
    _o.set(_j, "servername", _p?.servername);
    _o.set(_j, "if_not_exists", _p?.if_not_exists);
    _o.set(_j, "options", _p?.options);
    return _j;
  },
  alterUserMappingStmt(_p?: AlterUserMappingStmt): AlterUserMappingStmt {
    const _j = ({} as AlterUserMappingStmt);
    _o.set(_j, "user", _p?.user);
    _o.set(_j, "servername", _p?.servername);
    _o.set(_j, "options", _p?.options);
    return _j;
  },
  dropUserMappingStmt(_p?: DropUserMappingStmt): DropUserMappingStmt {
    const _j = ({} as DropUserMappingStmt);
    _o.set(_j, "user", _p?.user);
    _o.set(_j, "servername", _p?.servername);
    _o.set(_j, "missing_ok", _p?.missing_ok);
    return _j;
  },
  importForeignSchemaStmt(_p?: ImportForeignSchemaStmt): ImportForeignSchemaStmt {
    const _j = ({} as ImportForeignSchemaStmt);
    _o.set(_j, "server_name", _p?.server_name);
    _o.set(_j, "remote_schema", _p?.remote_schema);
    _o.set(_j, "local_schema", _p?.local_schema);
    _o.set(_j, "list_type", _p?.list_type);
    _o.set(_j, "table_list", _p?.table_list);
    _o.set(_j, "options", _p?.options);
    return _j;
  },
  createPolicyStmt(_p?: CreatePolicyStmt): CreatePolicyStmt {
    const _j = ({} as CreatePolicyStmt);
    _o.set(_j, "policy_name", _p?.policy_name);
    _o.set(_j, "table", _p?.table);
    _o.set(_j, "cmd_name", _p?.cmd_name);
    _o.set(_j, "permissive", _p?.permissive);
    _o.set(_j, "roles", _p?.roles);
    _o.set(_j, "qual", _p?.qual);
    _o.set(_j, "with_check", _p?.with_check);
    return _j;
  },
  alterPolicyStmt(_p?: AlterPolicyStmt): AlterPolicyStmt {
    const _j = ({} as AlterPolicyStmt);
    _o.set(_j, "policy_name", _p?.policy_name);
    _o.set(_j, "table", _p?.table);
    _o.set(_j, "roles", _p?.roles);
    _o.set(_j, "qual", _p?.qual);
    _o.set(_j, "with_check", _p?.with_check);
    return _j;
  },
  createAmStmt(_p?: CreateAmStmt): CreateAmStmt {
    const _j = ({} as CreateAmStmt);
    _o.set(_j, "amname", _p?.amname);
    _o.set(_j, "handler_name", _p?.handler_name);
    _o.set(_j, "amtype", _p?.amtype);
    return _j;
  },
  createTrigStmt(_p?: CreateTrigStmt): CreateTrigStmt {
    const _j = ({} as CreateTrigStmt);
    _o.set(_j, "replace", _p?.replace);
    _o.set(_j, "isconstraint", _p?.isconstraint);
    _o.set(_j, "trigname", _p?.trigname);
    _o.set(_j, "relation", _p?.relation);
    _o.set(_j, "funcname", _p?.funcname);
    _o.set(_j, "args", _p?.args);
    _o.set(_j, "row", _p?.row);
    _o.set(_j, "timing", _p?.timing);
    _o.set(_j, "events", _p?.events);
    _o.set(_j, "columns", _p?.columns);
    _o.set(_j, "whenClause", _p?.whenClause);
    _o.set(_j, "transitionRels", _p?.transitionRels);
    _o.set(_j, "deferrable", _p?.deferrable);
    _o.set(_j, "initdeferred", _p?.initdeferred);
    _o.set(_j, "constrrel", _p?.constrrel);
    return _j;
  },
  createEventTrigStmt(_p?: CreateEventTrigStmt): CreateEventTrigStmt {
    const _j = ({} as CreateEventTrigStmt);
    _o.set(_j, "trigname", _p?.trigname);
    _o.set(_j, "eventname", _p?.eventname);
    _o.set(_j, "whenclause", _p?.whenclause);
    _o.set(_j, "funcname", _p?.funcname);
    return _j;
  },
  alterEventTrigStmt(_p?: AlterEventTrigStmt): AlterEventTrigStmt {
    const _j = ({} as AlterEventTrigStmt);
    _o.set(_j, "trigname", _p?.trigname);
    _o.set(_j, "tgenabled", _p?.tgenabled);
    return _j;
  },
  createpLangStmt(_p?: CreatePLangStmt): CreatePLangStmt {
    const _j = ({} as CreatePLangStmt);
    _o.set(_j, "replace", _p?.replace);
    _o.set(_j, "plname", _p?.plname);
    _o.set(_j, "plhandler", _p?.plhandler);
    _o.set(_j, "plinline", _p?.plinline);
    _o.set(_j, "plvalidator", _p?.plvalidator);
    _o.set(_j, "pltrusted", _p?.pltrusted);
    return _j;
  },
  createRoleStmt(_p?: CreateRoleStmt): CreateRoleStmt {
    const _j = ({} as CreateRoleStmt);
    _o.set(_j, "stmt_type", _p?.stmt_type);
    _o.set(_j, "role", _p?.role);
    _o.set(_j, "options", _p?.options);
    return _j;
  },
  alterRoleStmt(_p?: AlterRoleStmt): AlterRoleStmt {
    const _j = ({} as AlterRoleStmt);
    _o.set(_j, "role", _p?.role);
    _o.set(_j, "options", _p?.options);
    _o.set(_j, "action", _p?.action);
    return _j;
  },
  alterRoleSetStmt(_p?: AlterRoleSetStmt): AlterRoleSetStmt {
    const _j = ({} as AlterRoleSetStmt);
    _o.set(_j, "role", _p?.role);
    _o.set(_j, "database", _p?.database);
    _o.set(_j, "setstmt", _p?.setstmt);
    return _j;
  },
  dropRoleStmt(_p?: DropRoleStmt): DropRoleStmt {
    const _j = ({} as DropRoleStmt);
    _o.set(_j, "roles", _p?.roles);
    _o.set(_j, "missing_ok", _p?.missing_ok);
    return _j;
  },
  createSeqStmt(_p?: CreateSeqStmt): CreateSeqStmt {
    const _j = ({} as CreateSeqStmt);
    _o.set(_j, "sequence", _p?.sequence);
    _o.set(_j, "options", _p?.options);
    _o.set(_j, "ownerId", _p?.ownerId);
    _o.set(_j, "for_identity", _p?.for_identity);
    _o.set(_j, "if_not_exists", _p?.if_not_exists);
    return _j;
  },
  alterSeqStmt(_p?: AlterSeqStmt): AlterSeqStmt {
    const _j = ({} as AlterSeqStmt);
    _o.set(_j, "sequence", _p?.sequence);
    _o.set(_j, "options", _p?.options);
    _o.set(_j, "for_identity", _p?.for_identity);
    _o.set(_j, "missing_ok", _p?.missing_ok);
    return _j;
  },
  defineStmt(_p?: DefineStmt): DefineStmt {
    const _j = ({} as DefineStmt);
    _o.set(_j, "kind", _p?.kind);
    _o.set(_j, "oldstyle", _p?.oldstyle);
    _o.set(_j, "defnames", _p?.defnames);
    _o.set(_j, "args", _p?.args);
    _o.set(_j, "definition", _p?.definition);
    _o.set(_j, "if_not_exists", _p?.if_not_exists);
    _o.set(_j, "replace", _p?.replace);
    return _j;
  },
  createDomainStmt(_p?: CreateDomainStmt): CreateDomainStmt {
    const _j = ({} as CreateDomainStmt);
    _o.set(_j, "domainname", _p?.domainname);
    _o.set(_j, "typeName", _p?.typeName);
    _o.set(_j, "collClause", _p?.collClause);
    _o.set(_j, "constraints", _p?.constraints);
    return _j;
  },
  createOpClassStmt(_p?: CreateOpClassStmt): CreateOpClassStmt {
    const _j = ({} as CreateOpClassStmt);
    _o.set(_j, "opclassname", _p?.opclassname);
    _o.set(_j, "opfamilyname", _p?.opfamilyname);
    _o.set(_j, "amname", _p?.amname);
    _o.set(_j, "datatype", _p?.datatype);
    _o.set(_j, "items", _p?.items);
    _o.set(_j, "isDefault", _p?.isDefault);
    return _j;
  },
  createOpClassItem(_p?: CreateOpClassItem): CreateOpClassItem {
    const _j = ({} as CreateOpClassItem);
    _o.set(_j, "itemtype", _p?.itemtype);
    _o.set(_j, "name", _p?.name);
    _o.set(_j, "number", _p?.number);
    _o.set(_j, "order_family", _p?.order_family);
    _o.set(_j, "class_args", _p?.class_args);
    _o.set(_j, "storedtype", _p?.storedtype);
    return _j;
  },
  createOpFamilyStmt(_p?: CreateOpFamilyStmt): CreateOpFamilyStmt {
    const _j = ({} as CreateOpFamilyStmt);
    _o.set(_j, "opfamilyname", _p?.opfamilyname);
    _o.set(_j, "amname", _p?.amname);
    return _j;
  },
  alterOpFamilyStmt(_p?: AlterOpFamilyStmt): AlterOpFamilyStmt {
    const _j = ({} as AlterOpFamilyStmt);
    _o.set(_j, "opfamilyname", _p?.opfamilyname);
    _o.set(_j, "amname", _p?.amname);
    _o.set(_j, "isDrop", _p?.isDrop);
    _o.set(_j, "items", _p?.items);
    return _j;
  },
  dropStmt(_p?: DropStmt): DropStmt {
    const _j = ({} as DropStmt);
    _o.set(_j, "objects", _p?.objects);
    _o.set(_j, "removeType", _p?.removeType);
    _o.set(_j, "behavior", _p?.behavior);
    _o.set(_j, "missing_ok", _p?.missing_ok);
    _o.set(_j, "concurrent", _p?.concurrent);
    return _j;
  },
  truncateStmt(_p?: TruncateStmt): TruncateStmt {
    const _j = ({} as TruncateStmt);
    _o.set(_j, "relations", _p?.relations);
    _o.set(_j, "restart_seqs", _p?.restart_seqs);
    _o.set(_j, "behavior", _p?.behavior);
    return _j;
  },
  commentStmt(_p?: CommentStmt): CommentStmt {
    const _j = ({} as CommentStmt);
    _o.set(_j, "objtype", _p?.objtype);
    _o.set(_j, "object", _p?.object);
    _o.set(_j, "comment", _p?.comment);
    return _j;
  },
  secLabelStmt(_p?: SecLabelStmt): SecLabelStmt {
    const _j = ({} as SecLabelStmt);
    _o.set(_j, "objtype", _p?.objtype);
    _o.set(_j, "object", _p?.object);
    _o.set(_j, "provider", _p?.provider);
    _o.set(_j, "label", _p?.label);
    return _j;
  },
  declareCursorStmt(_p?: DeclareCursorStmt): DeclareCursorStmt {
    const _j = ({} as DeclareCursorStmt);
    _o.set(_j, "portalname", _p?.portalname);
    _o.set(_j, "options", _p?.options);
    _o.set(_j, "query", _p?.query);
    return _j;
  },
  closePortalStmt(_p?: ClosePortalStmt): ClosePortalStmt {
    const _j = ({} as ClosePortalStmt);
    _o.set(_j, "portalname", _p?.portalname);
    return _j;
  },
  fetchStmt(_p?: FetchStmt): FetchStmt {
    const _j = ({} as FetchStmt);
    _o.set(_j, "direction", _p?.direction);
    _o.set(_j, "howMany", _p?.howMany);
    _o.set(_j, "portalname", _p?.portalname);
    _o.set(_j, "ismove", _p?.ismove);
    return _j;
  },
  indexStmt(_p?: IndexStmt): IndexStmt {
    const _j = ({} as IndexStmt);
    _o.set(_j, "idxname", _p?.idxname);
    _o.set(_j, "relation", _p?.relation);
    _o.set(_j, "accessMethod", _p?.accessMethod);
    _o.set(_j, "tableSpace", _p?.tableSpace);
    _o.set(_j, "indexParams", _p?.indexParams);
    _o.set(_j, "indexIncludingParams", _p?.indexIncludingParams);
    _o.set(_j, "options", _p?.options);
    _o.set(_j, "whereClause", _p?.whereClause);
    _o.set(_j, "excludeOpNames", _p?.excludeOpNames);
    _o.set(_j, "idxcomment", _p?.idxcomment);
    _o.set(_j, "indexOid", _p?.indexOid);
    _o.set(_j, "oldNumber", _p?.oldNumber);
    _o.set(_j, "oldCreateSubid", _p?.oldCreateSubid);
    _o.set(_j, "oldFirstRelfilelocatorSubid", _p?.oldFirstRelfilelocatorSubid);
    _o.set(_j, "unique", _p?.unique);
    _o.set(_j, "nulls_not_distinct", _p?.nulls_not_distinct);
    _o.set(_j, "primary", _p?.primary);
    _o.set(_j, "isconstraint", _p?.isconstraint);
    _o.set(_j, "deferrable", _p?.deferrable);
    _o.set(_j, "initdeferred", _p?.initdeferred);
    _o.set(_j, "transformed", _p?.transformed);
    _o.set(_j, "concurrent", _p?.concurrent);
    _o.set(_j, "if_not_exists", _p?.if_not_exists);
    _o.set(_j, "reset_default_tblspc", _p?.reset_default_tblspc);
    return _j;
  },
  createStatsStmt(_p?: CreateStatsStmt): CreateStatsStmt {
    const _j = ({} as CreateStatsStmt);
    _o.set(_j, "defnames", _p?.defnames);
    _o.set(_j, "stat_types", _p?.stat_types);
    _o.set(_j, "exprs", _p?.exprs);
    _o.set(_j, "relations", _p?.relations);
    _o.set(_j, "stxcomment", _p?.stxcomment);
    _o.set(_j, "transformed", _p?.transformed);
    _o.set(_j, "if_not_exists", _p?.if_not_exists);
    return _j;
  },
  statsElem(_p?: StatsElem): StatsElem {
    const _j = ({} as StatsElem);
    _o.set(_j, "name", _p?.name);
    _o.set(_j, "expr", _p?.expr);
    return _j;
  },
  alterStatsStmt(_p?: AlterStatsStmt): AlterStatsStmt {
    const _j = ({} as AlterStatsStmt);
    _o.set(_j, "defnames", _p?.defnames);
    _o.set(_j, "stxstattarget", _p?.stxstattarget);
    _o.set(_j, "missing_ok", _p?.missing_ok);
    return _j;
  },
  createFunctionStmt(_p?: CreateFunctionStmt): CreateFunctionStmt {
    const _j = ({} as CreateFunctionStmt);
    _o.set(_j, "is_procedure", _p?.is_procedure);
    _o.set(_j, "replace", _p?.replace);
    _o.set(_j, "funcname", _p?.funcname);
    _o.set(_j, "parameters", _p?.parameters);
    _o.set(_j, "returnType", _p?.returnType);
    _o.set(_j, "options", _p?.options);
    _o.set(_j, "sql_body", _p?.sql_body);
    return _j;
  },
  functionParameter(_p?: FunctionParameter): FunctionParameter {
    const _j = ({} as FunctionParameter);
    _o.set(_j, "name", _p?.name);
    _o.set(_j, "argType", _p?.argType);
    _o.set(_j, "mode", _p?.mode);
    _o.set(_j, "defexpr", _p?.defexpr);
    return _j;
  },
  alterFunctionStmt(_p?: AlterFunctionStmt): AlterFunctionStmt {
    const _j = ({} as AlterFunctionStmt);
    _o.set(_j, "objtype", _p?.objtype);
    _o.set(_j, "func", _p?.func);
    _o.set(_j, "actions", _p?.actions);
    return _j;
  },
  doStmt(_p?: DoStmt): DoStmt {
    const _j = ({} as DoStmt);
    _o.set(_j, "args", _p?.args);
    return _j;
  },
  inlineCodeBlock(_p?: InlineCodeBlock): InlineCodeBlock {
    const _j = ({} as InlineCodeBlock);
    _o.set(_j, "source_text", _p?.source_text);
    _o.set(_j, "langOid", _p?.langOid);
    _o.set(_j, "langIsTrusted", _p?.langIsTrusted);
    _o.set(_j, "atomic", _p?.atomic);
    return _j;
  },
  callStmt(_p?: CallStmt): CallStmt {
    const _j = ({} as CallStmt);
    _o.set(_j, "funccall", _p?.funccall);
    _o.set(_j, "funcexpr", _p?.funcexpr);
    _o.set(_j, "outargs", _p?.outargs);
    return _j;
  },
  callContext(_p?: CallContext): CallContext {
    const _j = ({} as CallContext);
    _o.set(_j, "atomic", _p?.atomic);
    return _j;
  },
  renameStmt(_p?: RenameStmt): RenameStmt {
    const _j = ({} as RenameStmt);
    _o.set(_j, "renameType", _p?.renameType);
    _o.set(_j, "relationType", _p?.relationType);
    _o.set(_j, "relation", _p?.relation);
    _o.set(_j, "object", _p?.object);
    _o.set(_j, "subname", _p?.subname);
    _o.set(_j, "newname", _p?.newname);
    _o.set(_j, "behavior", _p?.behavior);
    _o.set(_j, "missing_ok", _p?.missing_ok);
    return _j;
  },
  alterObjectDependsStmt(_p?: AlterObjectDependsStmt): AlterObjectDependsStmt {
    const _j = ({} as AlterObjectDependsStmt);
    _o.set(_j, "objectType", _p?.objectType);
    _o.set(_j, "relation", _p?.relation);
    _o.set(_j, "object", _p?.object);
    _o.set(_j, "extname", _p?.extname);
    _o.set(_j, "remove", _p?.remove);
    return _j;
  },
  alterObjectSchemaStmt(_p?: AlterObjectSchemaStmt): AlterObjectSchemaStmt {
    const _j = ({} as AlterObjectSchemaStmt);
    _o.set(_j, "objectType", _p?.objectType);
    _o.set(_j, "relation", _p?.relation);
    _o.set(_j, "object", _p?.object);
    _o.set(_j, "newschema", _p?.newschema);
    _o.set(_j, "missing_ok", _p?.missing_ok);
    return _j;
  },
  alterOwnerStmt(_p?: AlterOwnerStmt): AlterOwnerStmt {
    const _j = ({} as AlterOwnerStmt);
    _o.set(_j, "objectType", _p?.objectType);
    _o.set(_j, "relation", _p?.relation);
    _o.set(_j, "object", _p?.object);
    _o.set(_j, "newowner", _p?.newowner);
    return _j;
  },
  alterOperatorStmt(_p?: AlterOperatorStmt): AlterOperatorStmt {
    const _j = ({} as AlterOperatorStmt);
    _o.set(_j, "opername", _p?.opername);
    _o.set(_j, "options", _p?.options);
    return _j;
  },
  alterTypeStmt(_p?: AlterTypeStmt): AlterTypeStmt {
    const _j = ({} as AlterTypeStmt);
    _o.set(_j, "typeName", _p?.typeName);
    _o.set(_j, "options", _p?.options);
    return _j;
  },
  ruleStmt(_p?: RuleStmt): RuleStmt {
    const _j = ({} as RuleStmt);
    _o.set(_j, "relation", _p?.relation);
    _o.set(_j, "rulename", _p?.rulename);
    _o.set(_j, "whereClause", _p?.whereClause);
    _o.set(_j, "event", _p?.event);
    _o.set(_j, "instead", _p?.instead);
    _o.set(_j, "actions", _p?.actions);
    _o.set(_j, "replace", _p?.replace);
    return _j;
  },
  notifyStmt(_p?: NotifyStmt): NotifyStmt {
    const _j = ({} as NotifyStmt);
    _o.set(_j, "conditionname", _p?.conditionname);
    _o.set(_j, "payload", _p?.payload);
    return _j;
  },
  listenStmt(_p?: ListenStmt): ListenStmt {
    const _j = ({} as ListenStmt);
    _o.set(_j, "conditionname", _p?.conditionname);
    return _j;
  },
  unlistenStmt(_p?: UnlistenStmt): UnlistenStmt {
    const _j = ({} as UnlistenStmt);
    _o.set(_j, "conditionname", _p?.conditionname);
    return _j;
  },
  transactionStmt(_p?: TransactionStmt): TransactionStmt {
    const _j = ({} as TransactionStmt);
    _o.set(_j, "kind", _p?.kind);
    _o.set(_j, "options", _p?.options);
    _o.set(_j, "savepoint_name", _p?.savepoint_name);
    _o.set(_j, "gid", _p?.gid);
    _o.set(_j, "chain", _p?.chain);
    return _j;
  },
  compositeTypeStmt(_p?: CompositeTypeStmt): CompositeTypeStmt {
    const _j = ({} as CompositeTypeStmt);
    _o.set(_j, "typevar", _p?.typevar);
    _o.set(_j, "coldeflist", _p?.coldeflist);
    return _j;
  },
  createEnumStmt(_p?: CreateEnumStmt): CreateEnumStmt {
    const _j = ({} as CreateEnumStmt);
    _o.set(_j, "typeName", _p?.typeName);
    _o.set(_j, "vals", _p?.vals);
    return _j;
  },
  createRangeStmt(_p?: CreateRangeStmt): CreateRangeStmt {
    const _j = ({} as CreateRangeStmt);
    _o.set(_j, "typeName", _p?.typeName);
    _o.set(_j, "params", _p?.params);
    return _j;
  },
  alterEnumStmt(_p?: AlterEnumStmt): AlterEnumStmt {
    const _j = ({} as AlterEnumStmt);
    _o.set(_j, "typeName", _p?.typeName);
    _o.set(_j, "oldVal", _p?.oldVal);
    _o.set(_j, "newVal", _p?.newVal);
    _o.set(_j, "newValNeighbor", _p?.newValNeighbor);
    _o.set(_j, "newValIsAfter", _p?.newValIsAfter);
    _o.set(_j, "skipIfNewValExists", _p?.skipIfNewValExists);
    return _j;
  },
  viewStmt(_p?: ViewStmt): ViewStmt {
    const _j = ({} as ViewStmt);
    _o.set(_j, "view", _p?.view);
    _o.set(_j, "aliases", _p?.aliases);
    _o.set(_j, "query", _p?.query);
    _o.set(_j, "replace", _p?.replace);
    _o.set(_j, "options", _p?.options);
    _o.set(_j, "withCheckOption", _p?.withCheckOption);
    return _j;
  },
  loadStmt(_p?: LoadStmt): LoadStmt {
    const _j = ({} as LoadStmt);
    _o.set(_j, "filename", _p?.filename);
    return _j;
  },
  createdbStmt(_p?: CreatedbStmt): CreatedbStmt {
    const _j = ({} as CreatedbStmt);
    _o.set(_j, "dbname", _p?.dbname);
    _o.set(_j, "options", _p?.options);
    return _j;
  },
  alterDatabaseStmt(_p?: AlterDatabaseStmt): AlterDatabaseStmt {
    const _j = ({} as AlterDatabaseStmt);
    _o.set(_j, "dbname", _p?.dbname);
    _o.set(_j, "options", _p?.options);
    return _j;
  },
  alterDatabaseRefreshCollStmt(_p?: AlterDatabaseRefreshCollStmt): AlterDatabaseRefreshCollStmt {
    const _j = ({} as AlterDatabaseRefreshCollStmt);
    _o.set(_j, "dbname", _p?.dbname);
    return _j;
  },
  alterDatabaseSetStmt(_p?: AlterDatabaseSetStmt): AlterDatabaseSetStmt {
    const _j = ({} as AlterDatabaseSetStmt);
    _o.set(_j, "dbname", _p?.dbname);
    _o.set(_j, "setstmt", _p?.setstmt);
    return _j;
  },
  dropdbStmt(_p?: DropdbStmt): DropdbStmt {
    const _j = ({} as DropdbStmt);
    _o.set(_j, "dbname", _p?.dbname);
    _o.set(_j, "missing_ok", _p?.missing_ok);
    _o.set(_j, "options", _p?.options);
    return _j;
  },
  alterSystemStmt(_p?: AlterSystemStmt): AlterSystemStmt {
    const _j = ({} as AlterSystemStmt);
    _o.set(_j, "setstmt", _p?.setstmt);
    return _j;
  },
  clusterStmt(_p?: ClusterStmt): ClusterStmt {
    const _j = ({} as ClusterStmt);
    _o.set(_j, "relation", _p?.relation);
    _o.set(_j, "indexname", _p?.indexname);
    _o.set(_j, "params", _p?.params);
    return _j;
  },
  vacuumStmt(_p?: VacuumStmt): VacuumStmt {
    const _j = ({} as VacuumStmt);
    _o.set(_j, "options", _p?.options);
    _o.set(_j, "rels", _p?.rels);
    _o.set(_j, "is_vacuumcmd", _p?.is_vacuumcmd);
    return _j;
  },
  vacuumRelation(_p?: VacuumRelation): VacuumRelation {
    const _j = ({} as VacuumRelation);
    _o.set(_j, "relation", _p?.relation);
    _o.set(_j, "oid", _p?.oid);
    _o.set(_j, "va_cols", _p?.va_cols);
    return _j;
  },
  explainStmt(_p?: ExplainStmt): ExplainStmt {
    const _j = ({} as ExplainStmt);
    _o.set(_j, "query", _p?.query);
    _o.set(_j, "options", _p?.options);
    return _j;
  },
  createTableAsStmt(_p?: CreateTableAsStmt): CreateTableAsStmt {
    const _j = ({} as CreateTableAsStmt);
    _o.set(_j, "query", _p?.query);
    _o.set(_j, "into", _p?.into);
    _o.set(_j, "objtype", _p?.objtype);
    _o.set(_j, "is_select_into", _p?.is_select_into);
    _o.set(_j, "if_not_exists", _p?.if_not_exists);
    return _j;
  },
  refreshMatViewStmt(_p?: RefreshMatViewStmt): RefreshMatViewStmt {
    const _j = ({} as RefreshMatViewStmt);
    _o.set(_j, "concurrent", _p?.concurrent);
    _o.set(_j, "skipData", _p?.skipData);
    _o.set(_j, "relation", _p?.relation);
    return _j;
  },
  checkPointStmt(_p?: CheckPointStmt): CheckPointStmt {
    const _j = ({} as CheckPointStmt);
    return _j;
  },
  discardStmt(_p?: DiscardStmt): DiscardStmt {
    const _j = ({} as DiscardStmt);
    _o.set(_j, "target", _p?.target);
    return _j;
  },
  lockStmt(_p?: LockStmt): LockStmt {
    const _j = ({} as LockStmt);
    _o.set(_j, "relations", _p?.relations);
    _o.set(_j, "mode", _p?.mode);
    _o.set(_j, "nowait", _p?.nowait);
    return _j;
  },
  constraintsSetStmt(_p?: ConstraintsSetStmt): ConstraintsSetStmt {
    const _j = ({} as ConstraintsSetStmt);
    _o.set(_j, "constraints", _p?.constraints);
    _o.set(_j, "deferred", _p?.deferred);
    return _j;
  },
  reindexStmt(_p?: ReindexStmt): ReindexStmt {
    const _j = ({} as ReindexStmt);
    _o.set(_j, "kind", _p?.kind);
    _o.set(_j, "relation", _p?.relation);
    _o.set(_j, "name", _p?.name);
    _o.set(_j, "params", _p?.params);
    return _j;
  },
  createConversionStmt(_p?: CreateConversionStmt): CreateConversionStmt {
    const _j = ({} as CreateConversionStmt);
    _o.set(_j, "conversion_name", _p?.conversion_name);
    _o.set(_j, "for_encoding_name", _p?.for_encoding_name);
    _o.set(_j, "to_encoding_name", _p?.to_encoding_name);
    _o.set(_j, "func_name", _p?.func_name);
    _o.set(_j, "def", _p?.def);
    return _j;
  },
  createCastStmt(_p?: CreateCastStmt): CreateCastStmt {
    const _j = ({} as CreateCastStmt);
    _o.set(_j, "sourcetype", _p?.sourcetype);
    _o.set(_j, "targettype", _p?.targettype);
    _o.set(_j, "func", _p?.func);
    _o.set(_j, "context", _p?.context);
    _o.set(_j, "inout", _p?.inout);
    return _j;
  },
  createTransformStmt(_p?: CreateTransformStmt): CreateTransformStmt {
    const _j = ({} as CreateTransformStmt);
    _o.set(_j, "replace", _p?.replace);
    _o.set(_j, "type_name", _p?.type_name);
    _o.set(_j, "lang", _p?.lang);
    _o.set(_j, "fromsql", _p?.fromsql);
    _o.set(_j, "tosql", _p?.tosql);
    return _j;
  },
  prepareStmt(_p?: PrepareStmt): PrepareStmt {
    const _j = ({} as PrepareStmt);
    _o.set(_j, "name", _p?.name);
    _o.set(_j, "argtypes", _p?.argtypes);
    _o.set(_j, "query", _p?.query);
    return _j;
  },
  executeStmt(_p?: ExecuteStmt): ExecuteStmt {
    const _j = ({} as ExecuteStmt);
    _o.set(_j, "name", _p?.name);
    _o.set(_j, "params", _p?.params);
    return _j;
  },
  deallocateStmt(_p?: DeallocateStmt): DeallocateStmt {
    const _j = ({} as DeallocateStmt);
    _o.set(_j, "name", _p?.name);
    return _j;
  },
  dropOwnedStmt(_p?: DropOwnedStmt): DropOwnedStmt {
    const _j = ({} as DropOwnedStmt);
    _o.set(_j, "roles", _p?.roles);
    _o.set(_j, "behavior", _p?.behavior);
    return _j;
  },
  reassignOwnedStmt(_p?: ReassignOwnedStmt): ReassignOwnedStmt {
    const _j = ({} as ReassignOwnedStmt);
    _o.set(_j, "roles", _p?.roles);
    _o.set(_j, "newrole", _p?.newrole);
    return _j;
  },
  altertsDictionaryStmt(_p?: AlterTSDictionaryStmt): AlterTSDictionaryStmt {
    const _j = ({} as AlterTSDictionaryStmt);
    _o.set(_j, "dictname", _p?.dictname);
    _o.set(_j, "options", _p?.options);
    return _j;
  },
  altertsConfigurationStmt(_p?: AlterTSConfigurationStmt): AlterTSConfigurationStmt {
    const _j = ({} as AlterTSConfigurationStmt);
    _o.set(_j, "kind", _p?.kind);
    _o.set(_j, "cfgname", _p?.cfgname);
    _o.set(_j, "tokentype", _p?.tokentype);
    _o.set(_j, "dicts", _p?.dicts);
    _o.set(_j, "override", _p?.override);
    _o.set(_j, "replace", _p?.replace);
    _o.set(_j, "missing_ok", _p?.missing_ok);
    return _j;
  },
  publicationTable(_p?: PublicationTable): PublicationTable {
    const _j = ({} as PublicationTable);
    _o.set(_j, "relation", _p?.relation);
    _o.set(_j, "whereClause", _p?.whereClause);
    _o.set(_j, "columns", _p?.columns);
    return _j;
  },
  publicationObjSpec(_p?: PublicationObjSpec): PublicationObjSpec {
    const _j = ({} as PublicationObjSpec);
    _o.set(_j, "pubobjtype", _p?.pubobjtype);
    _o.set(_j, "name", _p?.name);
    _o.set(_j, "pubtable", _p?.pubtable);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  createPublicationStmt(_p?: CreatePublicationStmt): CreatePublicationStmt {
    const _j = ({} as CreatePublicationStmt);
    _o.set(_j, "pubname", _p?.pubname);
    _o.set(_j, "options", _p?.options);
    _o.set(_j, "pubobjects", _p?.pubobjects);
    _o.set(_j, "for_all_tables", _p?.for_all_tables);
    return _j;
  },
  alterPublicationStmt(_p?: AlterPublicationStmt): AlterPublicationStmt {
    const _j = ({} as AlterPublicationStmt);
    _o.set(_j, "pubname", _p?.pubname);
    _o.set(_j, "options", _p?.options);
    _o.set(_j, "pubobjects", _p?.pubobjects);
    _o.set(_j, "for_all_tables", _p?.for_all_tables);
    _o.set(_j, "action", _p?.action);
    return _j;
  },
  createSubscriptionStmt(_p?: CreateSubscriptionStmt): CreateSubscriptionStmt {
    const _j = ({} as CreateSubscriptionStmt);
    _o.set(_j, "subname", _p?.subname);
    _o.set(_j, "conninfo", _p?.conninfo);
    _o.set(_j, "publication", _p?.publication);
    _o.set(_j, "options", _p?.options);
    return _j;
  },
  alterSubscriptionStmt(_p?: AlterSubscriptionStmt): AlterSubscriptionStmt {
    const _j = ({} as AlterSubscriptionStmt);
    _o.set(_j, "kind", _p?.kind);
    _o.set(_j, "subname", _p?.subname);
    _o.set(_j, "conninfo", _p?.conninfo);
    _o.set(_j, "publication", _p?.publication);
    _o.set(_j, "options", _p?.options);
    return _j;
  },
  dropSubscriptionStmt(_p?: DropSubscriptionStmt): DropSubscriptionStmt {
    const _j = ({} as DropSubscriptionStmt);
    _o.set(_j, "subname", _p?.subname);
    _o.set(_j, "missing_ok", _p?.missing_ok);
    _o.set(_j, "behavior", _p?.behavior);
    return _j;
  },
  scanToken(_p?: ScanToken): ScanToken {
    const _j = ({} as ScanToken);
    _o.set(_j, "start", _p?.start);
    _o.set(_j, "end", _p?.end);
    _o.set(_j, "token", _p?.token);
    _o.set(_j, "keywordKind", _p?.keywordKind);
    return _j;
  }
};",
    "file": "asts.ts",
  },
  {
    "code": "[
  {
    "name": "A_ArrayExpr",
    "wrapped": true,
    "fields": [
      {
        "name": "elements",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "A_Const",
    "wrapped": true,
    "fields": [
      {
        "name": "boolval",
        "type": "Boolean",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "bsval",
        "type": "BitString",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "fval",
        "type": "Float",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "isnull",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "ival",
        "type": "Integer",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "sval",
        "type": "String",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "A_Expr",
    "wrapped": true,
    "fields": [
      {
        "name": "kind",
        "type": "A_Expr_Kind",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "lexpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "name",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "rexpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "A_Indices",
    "wrapped": true,
    "fields": [
      {
        "name": "is_slice",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "lidx",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "uidx",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "A_Indirection",
    "wrapped": true,
    "fields": [
      {
        "name": "arg",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "indirection",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "A_Star",
    "wrapped": true,
    "fields": []
  },
  {
    "name": "AccessPriv",
    "wrapped": true,
    "fields": [
      {
        "name": "cols",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "priv_name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "Aggref",
    "wrapped": true,
    "fields": [
      {
        "name": "aggargtypes",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "aggcollid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "aggdirectargs",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "aggdistinct",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "aggfilter",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "aggfnoid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "aggkind",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "agglevelsup",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "aggno",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "aggorder",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "aggsplit",
        "type": "AggSplit",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "aggstar",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "aggtransno",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "aggtype",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "aggvariadic",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "args",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "inputcollid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "Alias",
    "wrapped": true,
    "fields": [
      {
        "name": "aliasname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "colnames",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterCollationStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "collname",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterDatabaseRefreshCollStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "dbname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterDatabaseSetStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "dbname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "setstmt",
        "type": "VariableSetStmt",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterDatabaseStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "dbname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterDefaultPrivilegesStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "action",
        "type": "GrantStmt",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterDomainStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "behavior",
        "type": "DropBehavior",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "def",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "missing_ok",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "subtype",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "typeName",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterEnumStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "newVal",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "newValIsAfter",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "newValNeighbor",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "oldVal",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "skipIfNewValExists",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "typeName",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterEventTrigStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "tgenabled",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "trigname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterExtensionContentsStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "action",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "extname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "object",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "objtype",
        "type": "ObjectType",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterExtensionStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "extname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterFdwStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "fdwname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "func_options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterForeignServerStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "has_version",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "servername",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "version",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterFunctionStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "actions",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "func",
        "type": "ObjectWithArgs",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "objtype",
        "type": "ObjectType",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "AlternativeSubPlan",
    "wrapped": true,
    "fields": [
      {
        "name": "subplans",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterObjectDependsStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "extname",
        "type": "String",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "object",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "objectType",
        "type": "ObjectType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "relation",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "remove",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterObjectSchemaStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "missing_ok",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "newschema",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "object",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "objectType",
        "type": "ObjectType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "relation",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterOperatorStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "opername",
        "type": "ObjectWithArgs",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterOpFamilyStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "amname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "isDrop",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "items",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "opfamilyname",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterOwnerStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "newowner",
        "type": "RoleSpec",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "object",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "objectType",
        "type": "ObjectType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "relation",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterPolicyStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "policy_name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "qual",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "roles",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "table",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "with_check",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterPublicationStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "action",
        "type": "AlterPublicationAction",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "for_all_tables",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "pubname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "pubobjects",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterRoleSetStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "database",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "role",
        "type": "RoleSpec",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "setstmt",
        "type": "VariableSetStmt",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterRoleStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "action",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "role",
        "type": "RoleSpec",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterSeqStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "for_identity",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "missing_ok",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "sequence",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterStatsStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "defnames",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "missing_ok",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "stxstattarget",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterSubscriptionStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "conninfo",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "kind",
        "type": "AlterSubscriptionType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "publication",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "subname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterSystemStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "setstmt",
        "type": "VariableSetStmt",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterTableCmd",
    "wrapped": true,
    "fields": [
      {
        "name": "behavior",
        "type": "DropBehavior",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "def",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "missing_ok",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "newowner",
        "type": "RoleSpec",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "num",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "recurse",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "subtype",
        "type": "AlterTableType",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterTableMoveAllStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "new_tablespacename",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "nowait",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "objtype",
        "type": "ObjectType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "orig_tablespacename",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "roles",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterTableSpaceOptionsStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "isReset",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "tablespacename",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterTableStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "cmds",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "missing_ok",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "objtype",
        "type": "ObjectType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "relation",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterTSConfigurationStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "cfgname",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "dicts",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "kind",
        "type": "AlterTSConfigType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "missing_ok",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "override",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "replace",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "tokentype",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterTSDictionaryStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "dictname",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterTypeStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "typeName",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterUserMappingStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "servername",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "user",
        "type": "RoleSpec",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "ArrayCoerceExpr",
    "wrapped": true,
    "fields": [
      {
        "name": "arg",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "coerceformat",
        "type": "CoercionForm",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "elemexpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "resultcollid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "resulttype",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "resulttypmod",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "ArrayExpr",
    "wrapped": true,
    "fields": [
      {
        "name": "array_collid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "array_typeid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "element_typeid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "elements",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "multidims",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "BitString",
    "wrapped": true,
    "fields": [
      {
        "name": "bsval",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "Boolean",
    "wrapped": true,
    "fields": [
      {
        "name": "boolval",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "BooleanTest",
    "wrapped": true,
    "fields": [
      {
        "name": "arg",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "booltesttype",
        "type": "BoolTestType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "BoolExpr",
    "wrapped": true,
    "fields": [
      {
        "name": "args",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "boolop",
        "type": "BoolExprType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CallContext",
    "wrapped": true,
    "fields": [
      {
        "name": "atomic",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CallStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "funccall",
        "type": "FuncCall",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "funcexpr",
        "type": "FuncExpr",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "outargs",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "CaseExpr",
    "wrapped": true,
    "fields": [
      {
        "name": "arg",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "args",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "casecollid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "casetype",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "defresult",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CaseTestExpr",
    "wrapped": true,
    "fields": [
      {
        "name": "collation",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "typeId",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "typeMod",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CaseWhen",
    "wrapped": true,
    "fields": [
      {
        "name": "expr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "result",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CheckPointStmt",
    "wrapped": true,
    "fields": []
  },
  {
    "name": "ClosePortalStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "portalname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "ClusterStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "indexname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "params",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "relation",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CoalesceExpr",
    "wrapped": true,
    "fields": [
      {
        "name": "args",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "coalescecollid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "coalescetype",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CoerceToDomain",
    "wrapped": true,
    "fields": [
      {
        "name": "arg",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "coercionformat",
        "type": "CoercionForm",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "resultcollid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "resulttype",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "resulttypmod",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CoerceToDomainValue",
    "wrapped": true,
    "fields": [
      {
        "name": "collation",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "typeId",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "typeMod",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CoerceViaIO",
    "wrapped": true,
    "fields": [
      {
        "name": "arg",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "coerceformat",
        "type": "CoercionForm",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "resultcollid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "resulttype",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CollateClause",
    "wrapped": true,
    "fields": [
      {
        "name": "arg",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "collname",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CollateExpr",
    "wrapped": true,
    "fields": [
      {
        "name": "arg",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "collOid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "ColumnDef",
    "wrapped": true,
    "fields": [
      {
        "name": "collClause",
        "type": "CollateClause",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "collOid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "colname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "compression",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "constraints",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "cooked_default",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "fdwoptions",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "generated",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "identity",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "identitySequence",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "inhcount",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "is_from_type",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "is_local",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "is_not_null",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "raw_default",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "storage",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "storage_name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "typeName",
        "type": "TypeName",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "ColumnRef",
    "wrapped": true,
    "fields": [
      {
        "name": "fields",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CommentStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "comment",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "object",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "objtype",
        "type": "ObjectType",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CommonTableExpr",
    "wrapped": true,
    "fields": [
      {
        "name": "aliascolnames",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "ctecolcollations",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "ctecolnames",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "ctecoltypes",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "ctecoltypmods",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "ctematerialized",
        "type": "CTEMaterialize",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "ctename",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "ctequery",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "cterecursive",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "cterefcount",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "cycle_clause",
        "type": "CTECycleClause",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "search_clause",
        "type": "CTESearchClause",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CompositeTypeStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "coldeflist",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "typevar",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "Constraint",
    "wrapped": true,
    "fields": [
      {
        "name": "access_method",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "conname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "contype",
        "type": "ConstrType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "cooked_expr",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "deferrable",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "exclusions",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "fk_attrs",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "fk_del_action",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "fk_del_set_cols",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "fk_matchtype",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "fk_upd_action",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "generated_when",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "including",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "indexname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "indexspace",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "initdeferred",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "initially_valid",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "is_no_inherit",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "keys",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "nulls_not_distinct",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "old_conpfeqop",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "old_pktable_oid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "pk_attrs",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "pktable",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "raw_expr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "reset_default_tblspc",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "skip_validation",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "where_clause",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "ConstraintsSetStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "constraints",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "deferred",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "ConvertRowtypeExpr",
    "wrapped": true,
    "fields": [
      {
        "name": "arg",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "convertformat",
        "type": "CoercionForm",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "resulttype",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CopyStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "attlist",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "filename",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "is_from",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "is_program",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "query",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "relation",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "whereClause",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CreateAmStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "amname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "amtype",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "handler_name",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "CreateCastStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "context",
        "type": "CoercionContext",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "func",
        "type": "ObjectWithArgs",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "inout",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "sourcetype",
        "type": "TypeName",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "targettype",
        "type": "TypeName",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CreateConversionStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "conversion_name",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "def",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "for_encoding_name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "func_name",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "to_encoding_name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CreatedbStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "dbname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "CreateDomainStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "collClause",
        "type": "CollateClause",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "constraints",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "domainname",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "typeName",
        "type": "TypeName",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CreateEnumStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "typeName",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "vals",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "CreateEventTrigStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "eventname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "funcname",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "trigname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "whenclause",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "CreateExtensionStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "extname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "if_not_exists",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "CreateFdwStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "fdwname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "func_options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "CreateForeignServerStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "fdwname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "if_not_exists",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "servername",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "servertype",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "version",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CreateForeignTableStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "base",
        "type": "CreateStmt",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "servername",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CreateFunctionStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "funcname",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "is_procedure",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "parameters",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "replace",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "returnType",
        "type": "TypeName",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "sql_body",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CreateOpClassItem",
    "wrapped": true,
    "fields": [
      {
        "name": "class_args",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "itemtype",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "name",
        "type": "ObjectWithArgs",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "number",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "order_family",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "storedtype",
        "type": "TypeName",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CreateOpClassStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "amname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "datatype",
        "type": "TypeName",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "isDefault",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "items",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "opclassname",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "opfamilyname",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "CreateOpFamilyStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "amname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "opfamilyname",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "CreatePLangStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "plhandler",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "plinline",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "plname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "pltrusted",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "plvalidator",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "replace",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CreatePolicyStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "cmd_name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "permissive",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "policy_name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "qual",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "roles",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "table",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "with_check",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CreatePublicationStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "for_all_tables",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "pubname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "pubobjects",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "CreateRangeStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "params",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "typeName",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "CreateRoleStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "role",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "stmt_type",
        "type": "RoleStmtType",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CreateSchemaStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "authrole",
        "type": "RoleSpec",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "if_not_exists",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "schemaElts",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "schemaname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CreateSeqStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "for_identity",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "if_not_exists",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "ownerId",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "sequence",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CreateStatsStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "defnames",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "exprs",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "if_not_exists",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "relations",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "stat_types",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "stxcomment",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "transformed",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CreateStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "accessMethod",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "constraints",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "if_not_exists",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "inhRelations",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "ofTypename",
        "type": "TypeName",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "oncommit",
        "type": "OnCommitAction",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "partbound",
        "type": "PartitionBoundSpec",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "partspec",
        "type": "PartitionSpec",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "relation",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "tableElts",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "tablespacename",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CreateSubscriptionStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "conninfo",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "publication",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "subname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CreateTableAsStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "if_not_exists",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "into",
        "type": "IntoClause",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "is_select_into",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "objtype",
        "type": "ObjectType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "query",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CreateTableSpaceStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "location",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "owner",
        "type": "RoleSpec",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "tablespacename",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CreateTransformStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "fromsql",
        "type": "ObjectWithArgs",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "lang",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "replace",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "tosql",
        "type": "ObjectWithArgs",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "type_name",
        "type": "TypeName",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CreateTrigStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "args",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "columns",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "constrrel",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "deferrable",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "events",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "funcname",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "initdeferred",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "isconstraint",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "relation",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "replace",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "row",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "timing",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "transitionRels",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "trigname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "whenClause",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CreateUserMappingStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "if_not_exists",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "servername",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "user",
        "type": "RoleSpec",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CTECycleClause",
    "wrapped": true,
    "fields": [
      {
        "name": "cycle_col_list",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "cycle_mark_collation",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "cycle_mark_column",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "cycle_mark_default",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "cycle_mark_neop",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "cycle_mark_type",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "cycle_mark_typmod",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "cycle_mark_value",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "cycle_path_column",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CTESearchClause",
    "wrapped": true,
    "fields": [
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "search_breadth_first",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "search_col_list",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "search_seq_column",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CurrentOfExpr",
    "wrapped": true,
    "fields": [
      {
        "name": "cursor_name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "cursor_param",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "cvarno",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "DeallocateStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "DeclareCursorStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "options",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "portalname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "query",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "DefElem",
    "wrapped": true,
    "fields": [
      {
        "name": "arg",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "defaction",
        "type": "DefElemAction",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "defname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "defnamespace",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "DefineStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "args",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "definition",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "defnames",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "if_not_exists",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "kind",
        "type": "ObjectType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "oldstyle",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "replace",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "DeleteStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "relation",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "returningList",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "usingClause",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "whereClause",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "withClause",
        "type": "WithClause",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "DiscardStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "target",
        "type": "DiscardMode",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "DistinctExpr",
    "wrapped": true,
    "fields": [
      {
        "name": "args",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "inputcollid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "opcollid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "opno",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "opresulttype",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "opretset",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "DoStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "args",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "DropdbStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "dbname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "missing_ok",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "DropOwnedStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "behavior",
        "type": "DropBehavior",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "roles",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "DropRoleStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "missing_ok",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "roles",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "DropStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "behavior",
        "type": "DropBehavior",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "concurrent",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "missing_ok",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "objects",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "removeType",
        "type": "ObjectType",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "DropSubscriptionStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "behavior",
        "type": "DropBehavior",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "missing_ok",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "subname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "DropTableSpaceStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "missing_ok",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "tablespacename",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "DropUserMappingStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "missing_ok",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "servername",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "user",
        "type": "RoleSpec",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "ExecuteStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "params",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "ExplainStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "query",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "FetchStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "direction",
        "type": "FetchDirection",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "howMany",
        "type": "int64",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "ismove",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "portalname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "FieldSelect",
    "wrapped": true,
    "fields": [
      {
        "name": "arg",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "fieldnum",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "resultcollid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "resulttype",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "resulttypmod",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "FieldStore",
    "wrapped": true,
    "fields": [
      {
        "name": "arg",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "fieldnums",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "newvals",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "resulttype",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "Float",
    "wrapped": true,
    "fields": [
      {
        "name": "fval",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "FromExpr",
    "wrapped": true,
    "fields": [
      {
        "name": "fromlist",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "quals",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "FuncCall",
    "wrapped": true,
    "fields": [
      {
        "name": "agg_distinct",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "agg_filter",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "agg_order",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "agg_star",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "agg_within_group",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "args",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "func_variadic",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "funcformat",
        "type": "CoercionForm",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "funcname",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "over",
        "type": "WindowDef",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "FuncExpr",
    "wrapped": true,
    "fields": [
      {
        "name": "args",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "funccollid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "funcformat",
        "type": "CoercionForm",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "funcid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "funcresulttype",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "funcretset",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "funcvariadic",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "inputcollid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "FunctionParameter",
    "wrapped": true,
    "fields": [
      {
        "name": "argType",
        "type": "TypeName",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "defexpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "mode",
        "type": "FunctionParameterMode",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "GrantRoleStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "behavior",
        "type": "DropBehavior",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "granted_roles",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "grantee_roles",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "grantor",
        "type": "RoleSpec",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "is_grant",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "opt",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "GrantStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "behavior",
        "type": "DropBehavior",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "grant_option",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "grantees",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "grantor",
        "type": "RoleSpec",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "is_grant",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "objects",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "objtype",
        "type": "ObjectType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "privileges",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "targtype",
        "type": "GrantTargetType",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "GroupingFunc",
    "wrapped": true,
    "fields": [
      {
        "name": "agglevelsup",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "args",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "refs",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "GroupingSet",
    "wrapped": true,
    "fields": [
      {
        "name": "content",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "kind",
        "type": "GroupingSetKind",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "ImportForeignSchemaStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "list_type",
        "type": "ImportForeignSchemaType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "local_schema",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "remote_schema",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "server_name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "table_list",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "IndexElem",
    "wrapped": true,
    "fields": [
      {
        "name": "collation",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "expr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "indexcolname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "nulls_ordering",
        "type": "SortByNulls",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "opclass",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "opclassopts",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "ordering",
        "type": "SortByDir",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "IndexStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "accessMethod",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "concurrent",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "deferrable",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "excludeOpNames",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "idxcomment",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "idxname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "if_not_exists",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "indexIncludingParams",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "indexOid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "indexParams",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "initdeferred",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "isconstraint",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "nulls_not_distinct",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "oldCreateSubid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "oldFirstRelfilelocatorSubid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "oldNumber",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "primary",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "relation",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "reset_default_tblspc",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "tableSpace",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "transformed",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "unique",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "whereClause",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "InferClause",
    "wrapped": true,
    "fields": [
      {
        "name": "conname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "indexElems",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "whereClause",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "InferenceElem",
    "wrapped": true,
    "fields": [
      {
        "name": "expr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "infercollid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "inferopclass",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "InlineCodeBlock",
    "wrapped": true,
    "fields": [
      {
        "name": "atomic",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "langIsTrusted",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "langOid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "source_text",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "InsertStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "cols",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "onConflictClause",
        "type": "OnConflictClause",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "override",
        "type": "OverridingKind",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "relation",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "returningList",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "selectStmt",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "withClause",
        "type": "WithClause",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "Integer",
    "wrapped": true,
    "fields": [
      {
        "name": "ival",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "IntList",
    "wrapped": true,
    "fields": [
      {
        "name": "items",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "IntoClause",
    "wrapped": true,
    "fields": [
      {
        "name": "accessMethod",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "colNames",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "onCommit",
        "type": "OnCommitAction",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "rel",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "skipData",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "tableSpaceName",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "viewQuery",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "JoinExpr",
    "wrapped": true,
    "fields": [
      {
        "name": "alias",
        "type": "Alias",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "isNatural",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "join_using_alias",
        "type": "Alias",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "jointype",
        "type": "JoinType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "larg",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "quals",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "rarg",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "rtindex",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "usingClause",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "JsonAggConstructor",
    "wrapped": true,
    "fields": [
      {
        "name": "agg_filter",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "agg_order",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "output",
        "type": "JsonOutput",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "over",
        "type": "WindowDef",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "JsonArrayAgg",
    "wrapped": true,
    "fields": [
      {
        "name": "absent_on_null",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "arg",
        "type": "JsonValueExpr",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "constructor",
        "type": "JsonAggConstructor",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "JsonArrayConstructor",
    "wrapped": true,
    "fields": [
      {
        "name": "absent_on_null",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "exprs",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "output",
        "type": "JsonOutput",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "JsonArrayQueryConstructor",
    "wrapped": true,
    "fields": [
      {
        "name": "absent_on_null",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "format",
        "type": "JsonFormat",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "output",
        "type": "JsonOutput",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "query",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "JsonConstructorExpr",
    "wrapped": true,
    "fields": [
      {
        "name": "absent_on_null",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "args",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "coercion",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "func",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "returning",
        "type": "JsonReturning",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "type",
        "type": "JsonConstructorType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "unique",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "JsonFormat",
    "wrapped": true,
    "fields": [
      {
        "name": "encoding",
        "type": "JsonEncoding",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "format_type",
        "type": "JsonFormatType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "JsonIsPredicate",
    "wrapped": true,
    "fields": [
      {
        "name": "expr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "format",
        "type": "JsonFormat",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "item_type",
        "type": "JsonValueType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "unique_keys",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "JsonKeyValue",
    "wrapped": true,
    "fields": [
      {
        "name": "key",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "value",
        "type": "JsonValueExpr",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "JsonObjectAgg",
    "wrapped": true,
    "fields": [
      {
        "name": "absent_on_null",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "arg",
        "type": "JsonKeyValue",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "constructor",
        "type": "JsonAggConstructor",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "unique",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "JsonObjectConstructor",
    "wrapped": true,
    "fields": [
      {
        "name": "absent_on_null",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "exprs",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "output",
        "type": "JsonOutput",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "unique",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "JsonOutput",
    "wrapped": true,
    "fields": [
      {
        "name": "returning",
        "type": "JsonReturning",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "typeName",
        "type": "TypeName",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "JsonReturning",
    "wrapped": true,
    "fields": [
      {
        "name": "format",
        "type": "JsonFormat",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "typid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "typmod",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "JsonValueExpr",
    "wrapped": true,
    "fields": [
      {
        "name": "format",
        "type": "JsonFormat",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "formatted_expr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "raw_expr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "List",
    "wrapped": true,
    "fields": [
      {
        "name": "items",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "ListenStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "conditionname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "LoadStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "filename",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "LockingClause",
    "wrapped": true,
    "fields": [
      {
        "name": "lockedRels",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "strength",
        "type": "LockClauseStrength",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "waitPolicy",
        "type": "LockWaitPolicy",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "LockStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "mode",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "nowait",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "relations",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "MergeAction",
    "wrapped": true,
    "fields": [
      {
        "name": "commandType",
        "type": "CmdType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "matched",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "override",
        "type": "OverridingKind",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "qual",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "targetList",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "updateColnos",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "MergeStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "joinCondition",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "mergeWhenClauses",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "relation",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "sourceRelation",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "withClause",
        "type": "WithClause",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "MergeWhenClause",
    "wrapped": true,
    "fields": [
      {
        "name": "commandType",
        "type": "CmdType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "condition",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "matched",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "override",
        "type": "OverridingKind",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "targetList",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "values",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "MinMaxExpr",
    "wrapped": true,
    "fields": [
      {
        "name": "args",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "inputcollid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "minmaxcollid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "minmaxtype",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "op",
        "type": "MinMaxOp",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "MultiAssignRef",
    "wrapped": true,
    "fields": [
      {
        "name": "colno",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "ncolumns",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "source",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "NamedArgExpr",
    "wrapped": true,
    "fields": [
      {
        "name": "arg",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "argnumber",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "NextValueExpr",
    "wrapped": true,
    "fields": [
      {
        "name": "seqid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "typeId",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "NotifyStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "conditionname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "payload",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "NullIfExpr",
    "wrapped": true,
    "fields": [
      {
        "name": "args",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "inputcollid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "opcollid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "opno",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "opresulttype",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "opretset",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "NullTest",
    "wrapped": true,
    "fields": [
      {
        "name": "arg",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "argisrow",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "nulltesttype",
        "type": "NullTestType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "ObjectWithArgs",
    "wrapped": true,
    "fields": [
      {
        "name": "args_unspecified",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "objargs",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "objfuncargs",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "objname",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "OidList",
    "wrapped": true,
    "fields": [
      {
        "name": "items",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "OnConflictClause",
    "wrapped": true,
    "fields": [
      {
        "name": "action",
        "type": "OnConflictAction",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "infer",
        "type": "InferClause",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "targetList",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "whereClause",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "OnConflictExpr",
    "wrapped": true,
    "fields": [
      {
        "name": "action",
        "type": "OnConflictAction",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "arbiterElems",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "arbiterWhere",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "constraint",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "exclRelIndex",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "exclRelTlist",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "onConflictSet",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "onConflictWhere",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "OpExpr",
    "wrapped": true,
    "fields": [
      {
        "name": "args",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "inputcollid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "opcollid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "opno",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "opresulttype",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "opretset",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "Param",
    "wrapped": true,
    "fields": [
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "paramcollid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "paramid",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "paramkind",
        "type": "ParamKind",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "paramtype",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "paramtypmod",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "ParamRef",
    "wrapped": true,
    "fields": [
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "number",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "ParseResult",
    "wrapped": false,
    "fields": [
      {
        "name": "stmts",
        "type": "RawStmt",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "version",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "PartitionBoundSpec",
    "wrapped": true,
    "fields": [
      {
        "name": "is_default",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "listdatums",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "lowerdatums",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "modulus",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "remainder",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "strategy",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "upperdatums",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "PartitionCmd",
    "wrapped": true,
    "fields": [
      {
        "name": "bound",
        "type": "PartitionBoundSpec",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "concurrent",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "name",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "PartitionElem",
    "wrapped": true,
    "fields": [
      {
        "name": "collation",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "expr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "opclass",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "PartitionRangeDatum",
    "wrapped": true,
    "fields": [
      {
        "name": "kind",
        "type": "PartitionRangeDatumKind",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "value",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "PartitionSpec",
    "wrapped": true,
    "fields": [
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "partParams",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "strategy",
        "type": "PartitionStrategy",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "PLAssignStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "indirection",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "nnames",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "val",
        "type": "SelectStmt",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "PrepareStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "argtypes",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "query",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "PublicationObjSpec",
    "wrapped": true,
    "fields": [
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "pubobjtype",
        "type": "PublicationObjSpecType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "pubtable",
        "type": "PublicationTable",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "PublicationTable",
    "wrapped": true,
    "fields": [
      {
        "name": "columns",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "relation",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "whereClause",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "Query",
    "wrapped": true,
    "fields": [
      {
        "name": "canSetTag",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "commandType",
        "type": "CmdType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "constraintDeps",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "cteList",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "distinctClause",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "groupClause",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "groupDistinct",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "groupingSets",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "hasAggs",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "hasDistinctOn",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "hasForUpdate",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "hasModifyingCTE",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "hasRecursive",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "hasRowSecurity",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "hasSubLinks",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "hasTargetSRFs",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "hasWindowFuncs",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "havingQual",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "isReturn",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "jointree",
        "type": "FromExpr",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "limitCount",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "limitOffset",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "limitOption",
        "type": "LimitOption",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "mergeActionList",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "mergeUseOuterJoin",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "onConflict",
        "type": "OnConflictExpr",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "override",
        "type": "OverridingKind",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "querySource",
        "type": "QuerySource",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "resultRelation",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "returningList",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "rowMarks",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "rtable",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "rteperminfos",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "setOperations",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "sortClause",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "stmt_len",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "stmt_location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "targetList",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "utilityStmt",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "windowClause",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "withCheckOptions",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "RangeFunction",
    "wrapped": true,
    "fields": [
      {
        "name": "alias",
        "type": "Alias",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "coldeflist",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "functions",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "is_rowsfrom",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "lateral",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "ordinality",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "RangeSubselect",
    "wrapped": true,
    "fields": [
      {
        "name": "alias",
        "type": "Alias",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "lateral",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "subquery",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "RangeTableFunc",
    "wrapped": true,
    "fields": [
      {
        "name": "alias",
        "type": "Alias",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "columns",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "docexpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "lateral",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "namespaces",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "rowexpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "RangeTableFuncCol",
    "wrapped": true,
    "fields": [
      {
        "name": "coldefexpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "colexpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "colname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "for_ordinality",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "is_not_null",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "typeName",
        "type": "TypeName",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "RangeTableSample",
    "wrapped": true,
    "fields": [
      {
        "name": "args",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "method",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "relation",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "repeatable",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "RangeTblEntry",
    "wrapped": true,
    "fields": [
      {
        "name": "alias",
        "type": "Alias",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "colcollations",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "coltypes",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "coltypmods",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "ctelevelsup",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "ctename",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "enrname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "enrtuples",
        "type": "double",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "eref",
        "type": "Alias",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "funcordinality",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "functions",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "inFromCl",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "inh",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "join_using_alias",
        "type": "Alias",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "joinaliasvars",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "joinleftcols",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "joinmergedcols",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "joinrightcols",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "jointype",
        "type": "JoinType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "lateral",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "perminfoindex",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "relid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "relkind",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "rellockmode",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "rtekind",
        "type": "RTEKind",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "security_barrier",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "securityQuals",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "self_reference",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "subquery",
        "type": "Query",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "tablefunc",
        "type": "TableFunc",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "tablesample",
        "type": "TableSampleClause",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "values_lists",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "RangeTblFunction",
    "wrapped": true,
    "fields": [
      {
        "name": "funccolcollations",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "funccolcount",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "funccolnames",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "funccoltypes",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "funccoltypmods",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "funcexpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "funcparams",
        "type": "uint64",
        "isNode": false,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "RangeTblRef",
    "wrapped": true,
    "fields": [
      {
        "name": "rtindex",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "RangeVar",
    "wrapped": true,
    "fields": [
      {
        "name": "alias",
        "type": "Alias",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "catalogname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "inh",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "relname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "relpersistence",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "schemaname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "RawStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "stmt",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "stmt_len",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "stmt_location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "ReassignOwnedStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "newrole",
        "type": "RoleSpec",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "roles",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "RefreshMatViewStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "concurrent",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "relation",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "skipData",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "ReindexStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "kind",
        "type": "ReindexObjectType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "params",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "relation",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "RelabelType",
    "wrapped": true,
    "fields": [
      {
        "name": "arg",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "relabelformat",
        "type": "CoercionForm",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "resultcollid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "resulttype",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "resulttypmod",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "RenameStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "behavior",
        "type": "DropBehavior",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "missing_ok",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "newname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "object",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "relation",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "relationType",
        "type": "ObjectType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "renameType",
        "type": "ObjectType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "subname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "ReplicaIdentityStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "identity_type",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "ResTarget",
    "wrapped": true,
    "fields": [
      {
        "name": "indirection",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "val",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "ReturnStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "returnval",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "RoleSpec",
    "wrapped": true,
    "fields": [
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "rolename",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "roletype",
        "type": "RoleSpecType",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "RowCompareExpr",
    "wrapped": true,
    "fields": [
      {
        "name": "inputcollids",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "largs",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "opfamilies",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "opnos",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "rargs",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "rctype",
        "type": "RowCompareType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "RowExpr",
    "wrapped": true,
    "fields": [
      {
        "name": "args",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "colnames",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "row_format",
        "type": "CoercionForm",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "row_typeid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "RowMarkClause",
    "wrapped": true,
    "fields": [
      {
        "name": "pushedDown",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "rti",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "strength",
        "type": "LockClauseStrength",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "waitPolicy",
        "type": "LockWaitPolicy",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "RTEPermissionInfo",
    "wrapped": true,
    "fields": [
      {
        "name": "checkAsUser",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "inh",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "insertedCols",
        "type": "uint64",
        "isNode": false,
        "isArray": true,
        "optional": true
      },
      {
        "name": "relid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "requiredPerms",
        "type": "uint64",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "selectedCols",
        "type": "uint64",
        "isNode": false,
        "isArray": true,
        "optional": true
      },
      {
        "name": "updatedCols",
        "type": "uint64",
        "isNode": false,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "RuleStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "actions",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "event",
        "type": "CmdType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "instead",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "relation",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "replace",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "rulename",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "whereClause",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "ScalarArrayOpExpr",
    "wrapped": true,
    "fields": [
      {
        "name": "args",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "inputcollid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "opno",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "useOr",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "ScanResult",
    "wrapped": false,
    "fields": [
      {
        "name": "tokens",
        "type": "ScanToken",
        "isNode": false,
        "isArray": true,
        "optional": true
      },
      {
        "name": "version",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "ScanToken",
    "wrapped": false,
    "fields": [
      {
        "name": "end",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "keywordKind",
        "type": "KeywordKind",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "start",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "token",
        "type": "Token",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "SecLabelStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "label",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "object",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "objtype",
        "type": "ObjectType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "provider",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "SelectStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "all",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "distinctClause",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "fromClause",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "groupClause",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "groupDistinct",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "havingClause",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "intoClause",
        "type": "IntoClause",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "larg",
        "type": "SelectStmt",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "limitCount",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "limitOffset",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "limitOption",
        "type": "LimitOption",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "lockingClause",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "op",
        "type": "SetOperation",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "rarg",
        "type": "SelectStmt",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "sortClause",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "targetList",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "valuesLists",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "whereClause",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "windowClause",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "withClause",
        "type": "WithClause",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "SetOperationStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "all",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "colCollations",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "colTypes",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "colTypmods",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "groupClauses",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "larg",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "op",
        "type": "SetOperation",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "rarg",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "SetToDefault",
    "wrapped": true,
    "fields": [
      {
        "name": "collation",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "typeId",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "typeMod",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "SortBy",
    "wrapped": true,
    "fields": [
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "node",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "sortby_dir",
        "type": "SortByDir",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "sortby_nulls",
        "type": "SortByNulls",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "useOp",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "SortGroupClause",
    "wrapped": true,
    "fields": [
      {
        "name": "eqop",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "hashable",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "nulls_first",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "sortop",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "tleSortGroupRef",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "SQLValueFunction",
    "wrapped": true,
    "fields": [
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "op",
        "type": "SQLValueFunctionOp",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "type",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "typmod",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "StatsElem",
    "wrapped": true,
    "fields": [
      {
        "name": "expr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "String",
    "wrapped": true,
    "fields": [
      {
        "name": "sval",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "SubLink",
    "wrapped": true,
    "fields": [
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "operName",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "subLinkId",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "subLinkType",
        "type": "SubLinkType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "subselect",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "testexpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "SubPlan",
    "wrapped": true,
    "fields": [
      {
        "name": "args",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "firstColCollation",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "firstColType",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "firstColTypmod",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "parallel_safe",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "paramIds",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "parParam",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "per_call_cost",
        "type": "double",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "plan_id",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "plan_name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "setParam",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "startup_cost",
        "type": "double",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "subLinkType",
        "type": "SubLinkType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "testexpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "unknownEqFalse",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "useHashTable",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "SubscriptingRef",
    "wrapped": true,
    "fields": [
      {
        "name": "refassgnexpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "refcollid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "refcontainertype",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "refelemtype",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "refexpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "reflowerindexpr",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "refrestype",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "reftypmod",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "refupperindexpr",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "TableFunc",
    "wrapped": true,
    "fields": [
      {
        "name": "colcollations",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "coldefexprs",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "colexprs",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "colnames",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "coltypes",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "coltypmods",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "docexpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "notnulls",
        "type": "uint64",
        "isNode": false,
        "isArray": true,
        "optional": true
      },
      {
        "name": "ns_names",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "ns_uris",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "ordinalitycol",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "rowexpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "TableLikeClause",
    "wrapped": true,
    "fields": [
      {
        "name": "options",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "relation",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "relationOid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "TableSampleClause",
    "wrapped": true,
    "fields": [
      {
        "name": "args",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "repeatable",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "tsmhandler",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "TargetEntry",
    "wrapped": true,
    "fields": [
      {
        "name": "expr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "resjunk",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "resname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "resno",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "resorigcol",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "resorigtbl",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "ressortgroupref",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "TransactionStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "chain",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "gid",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "kind",
        "type": "TransactionStmtKind",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "savepoint_name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "TriggerTransition",
    "wrapped": true,
    "fields": [
      {
        "name": "isNew",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "isTable",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "TruncateStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "behavior",
        "type": "DropBehavior",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "relations",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "restart_seqs",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "TypeCast",
    "wrapped": true,
    "fields": [
      {
        "name": "arg",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "typeName",
        "type": "TypeName",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "TypeName",
    "wrapped": true,
    "fields": [
      {
        "name": "arrayBounds",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "names",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "pct_type",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "setof",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "typemod",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "typeOid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "typmods",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "UnlistenStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "conditionname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "UpdateStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "fromClause",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "relation",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "returningList",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "targetList",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "whereClause",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "withClause",
        "type": "WithClause",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "VacuumRelation",
    "wrapped": true,
    "fields": [
      {
        "name": "oid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "relation",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "va_cols",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "VacuumStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "is_vacuumcmd",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "rels",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "Var",
    "wrapped": true,
    "fields": [
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "varattno",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "varcollid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "varlevelsup",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "varno",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "varnullingrels",
        "type": "uint64",
        "isNode": false,
        "isArray": true,
        "optional": true
      },
      {
        "name": "vartype",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "vartypmod",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "VariableSetStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "args",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "is_local",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "kind",
        "type": "VariableSetKind",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "VariableShowStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "ViewStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "aliases",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "query",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "replace",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "view",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "withCheckOption",
        "type": "ViewCheckOption",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "WindowClause",
    "wrapped": true,
    "fields": [
      {
        "name": "copiedOrder",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "endInRangeFunc",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "endOffset",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "frameOptions",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "inRangeAsc",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "inRangeColl",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "inRangeNullsFirst",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "orderClause",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "partitionClause",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "refname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "runCondition",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "startInRangeFunc",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "startOffset",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "winref",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "WindowDef",
    "wrapped": true,
    "fields": [
      {
        "name": "endOffset",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "frameOptions",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "orderClause",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "partitionClause",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "refname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "startOffset",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "WindowFunc",
    "wrapped": true,
    "fields": [
      {
        "name": "aggfilter",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "args",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "inputcollid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "winagg",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "wincollid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "winfnoid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "winref",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "winstar",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "wintype",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "WithCheckOption",
    "wrapped": true,
    "fields": [
      {
        "name": "cascaded",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "kind",
        "type": "WCOKind",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "polname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "qual",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "relname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "WithClause",
    "wrapped": true,
    "fields": [
      {
        "name": "ctes",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "recursive",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "XmlExpr",
    "wrapped": true,
    "fields": [
      {
        "name": "arg_names",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "args",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "indent",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "named_args",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "op",
        "type": "XmlExprOp",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "type",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "typmod",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xmloption",
        "type": "XmlOptionType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "XmlSerialize",
    "wrapped": true,
    "fields": [
      {
        "name": "expr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "indent",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "typeName",
        "type": "TypeName",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xmloption",
        "type": "XmlOptionType",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  }
]",
    "file": "complete-schema.json",
  },
  {
    "code": "/**
* This file was automatically generated by pg-proto-parser@latest.
* DO NOT MODIFY IT BY HAND. Instead, modify the source proto file,
* and run the pg-proto-parser generate command to regenerate this file.
*/
export type OverridingKind = "OVERRIDING_NOT_SET" | "OVERRIDING_USER_VALUE" | "OVERRIDING_SYSTEM_VALUE";
export type QuerySource = "QSRC_ORIGINAL" | "QSRC_PARSER" | "QSRC_INSTEAD_RULE" | "QSRC_QUAL_INSTEAD_RULE" | "QSRC_NON_INSTEAD_RULE";
export type SortByDir = "SORTBY_DEFAULT" | "SORTBY_ASC" | "SORTBY_DESC" | "SORTBY_USING";
export type SortByNulls = "SORTBY_NULLS_DEFAULT" | "SORTBY_NULLS_FIRST" | "SORTBY_NULLS_LAST";
export type SetQuantifier = "SET_QUANTIFIER_DEFAULT" | "SET_QUANTIFIER_ALL" | "SET_QUANTIFIER_DISTINCT";
export type A_Expr_Kind = "AEXPR_OP" | "AEXPR_OP_ANY" | "AEXPR_OP_ALL" | "AEXPR_DISTINCT" | "AEXPR_NOT_DISTINCT" | "AEXPR_NULLIF" | "AEXPR_IN" | "AEXPR_LIKE" | "AEXPR_ILIKE" | "AEXPR_SIMILAR" | "AEXPR_BETWEEN" | "AEXPR_NOT_BETWEEN" | "AEXPR_BETWEEN_SYM" | "AEXPR_NOT_BETWEEN_SYM";
export type RoleSpecType = "ROLESPEC_CSTRING" | "ROLESPEC_CURRENT_ROLE" | "ROLESPEC_CURRENT_USER" | "ROLESPEC_SESSION_USER" | "ROLESPEC_PUBLIC";
export type TableLikeOption = "CREATE_TABLE_LIKE_COMMENTS" | "CREATE_TABLE_LIKE_COMPRESSION" | "CREATE_TABLE_LIKE_CONSTRAINTS" | "CREATE_TABLE_LIKE_DEFAULTS" | "CREATE_TABLE_LIKE_GENERATED" | "CREATE_TABLE_LIKE_IDENTITY" | "CREATE_TABLE_LIKE_INDEXES" | "CREATE_TABLE_LIKE_STATISTICS" | "CREATE_TABLE_LIKE_STORAGE" | "CREATE_TABLE_LIKE_ALL";
export type DefElemAction = "DEFELEM_UNSPEC" | "DEFELEM_SET" | "DEFELEM_ADD" | "DEFELEM_DROP";
export type PartitionStrategy = "PARTITION_STRATEGY_LIST" | "PARTITION_STRATEGY_RANGE" | "PARTITION_STRATEGY_HASH";
export type PartitionRangeDatumKind = "PARTITION_RANGE_DATUM_MINVALUE" | "PARTITION_RANGE_DATUM_VALUE" | "PARTITION_RANGE_DATUM_MAXVALUE";
export type RTEKind = "RTE_RELATION" | "RTE_SUBQUERY" | "RTE_JOIN" | "RTE_FUNCTION" | "RTE_TABLEFUNC" | "RTE_VALUES" | "RTE_CTE" | "RTE_NAMEDTUPLESTORE" | "RTE_RESULT";
export type WCOKind = "WCO_VIEW_CHECK" | "WCO_RLS_INSERT_CHECK" | "WCO_RLS_UPDATE_CHECK" | "WCO_RLS_CONFLICT_CHECK" | "WCO_RLS_MERGE_UPDATE_CHECK" | "WCO_RLS_MERGE_DELETE_CHECK";
export type GroupingSetKind = "GROUPING_SET_EMPTY" | "GROUPING_SET_SIMPLE" | "GROUPING_SET_ROLLUP" | "GROUPING_SET_CUBE" | "GROUPING_SET_SETS";
export type CTEMaterialize = "CTEMaterializeDefault" | "CTEMaterializeAlways" | "CTEMaterializeNever";
export type SetOperation = "SETOP_NONE" | "SETOP_UNION" | "SETOP_INTERSECT" | "SETOP_EXCEPT";
export type ObjectType = "OBJECT_ACCESS_METHOD" | "OBJECT_AGGREGATE" | "OBJECT_AMOP" | "OBJECT_AMPROC" | "OBJECT_ATTRIBUTE" | "OBJECT_CAST" | "OBJECT_COLUMN" | "OBJECT_COLLATION" | "OBJECT_CONVERSION" | "OBJECT_DATABASE" | "OBJECT_DEFAULT" | "OBJECT_DEFACL" | "OBJECT_DOMAIN" | "OBJECT_DOMCONSTRAINT" | "OBJECT_EVENT_TRIGGER" | "OBJECT_EXTENSION" | "OBJECT_FDW" | "OBJECT_FOREIGN_SERVER" | "OBJECT_FOREIGN_TABLE" | "OBJECT_FUNCTION" | "OBJECT_INDEX" | "OBJECT_LANGUAGE" | "OBJECT_LARGEOBJECT" | "OBJECT_MATVIEW" | "OBJECT_OPCLASS" | "OBJECT_OPERATOR" | "OBJECT_OPFAMILY" | "OBJECT_PARAMETER_ACL" | "OBJECT_POLICY" | "OBJECT_PROCEDURE" | "OBJECT_PUBLICATION" | "OBJECT_PUBLICATION_NAMESPACE" | "OBJECT_PUBLICATION_REL" | "OBJECT_ROLE" | "OBJECT_ROUTINE" | "OBJECT_RULE" | "OBJECT_SCHEMA" | "OBJECT_SEQUENCE" | "OBJECT_SUBSCRIPTION" | "OBJECT_STATISTIC_EXT" | "OBJECT_TABCONSTRAINT" | "OBJECT_TABLE" | "OBJECT_TABLESPACE" | "OBJECT_TRANSFORM" | "OBJECT_TRIGGER" | "OBJECT_TSCONFIGURATION" | "OBJECT_TSDICTIONARY" | "OBJECT_TSPARSER" | "OBJECT_TSTEMPLATE" | "OBJECT_TYPE" | "OBJECT_USER_MAPPING" | "OBJECT_VIEW";
export type DropBehavior = "DROP_RESTRICT" | "DROP_CASCADE";
export type AlterTableType = "AT_AddColumn" | "AT_AddColumnToView" | "AT_ColumnDefault" | "AT_CookedColumnDefault" | "AT_DropNotNull" | "AT_SetNotNull" | "AT_DropExpression" | "AT_CheckNotNull" | "AT_SetStatistics" | "AT_SetOptions" | "AT_ResetOptions" | "AT_SetStorage" | "AT_SetCompression" | "AT_DropColumn" | "AT_AddIndex" | "AT_ReAddIndex" | "AT_AddConstraint" | "AT_ReAddConstraint" | "AT_ReAddDomainConstraint" | "AT_AlterConstraint" | "AT_ValidateConstraint" | "AT_AddIndexConstraint" | "AT_DropConstraint" | "AT_ReAddComment" | "AT_AlterColumnType" | "AT_AlterColumnGenericOptions" | "AT_ChangeOwner" | "AT_ClusterOn" | "AT_DropCluster" | "AT_SetLogged" | "AT_SetUnLogged" | "AT_DropOids" | "AT_SetAccessMethod" | "AT_SetTableSpace" | "AT_SetRelOptions" | "AT_ResetRelOptions" | "AT_ReplaceRelOptions" | "AT_EnableTrig" | "AT_EnableAlwaysTrig" | "AT_EnableReplicaTrig" | "AT_DisableTrig" | "AT_EnableTrigAll" | "AT_DisableTrigAll" | "AT_EnableTrigUser" | "AT_DisableTrigUser" | "AT_EnableRule" | "AT_EnableAlwaysRule" | "AT_EnableReplicaRule" | "AT_DisableRule" | "AT_AddInherit" | "AT_DropInherit" | "AT_AddOf" | "AT_DropOf" | "AT_ReplicaIdentity" | "AT_EnableRowSecurity" | "AT_DisableRowSecurity" | "AT_ForceRowSecurity" | "AT_NoForceRowSecurity" | "AT_GenericOptions" | "AT_AttachPartition" | "AT_DetachPartition" | "AT_DetachPartitionFinalize" | "AT_AddIdentity" | "AT_SetIdentity" | "AT_DropIdentity" | "AT_ReAddStatistics";
export type GrantTargetType = "ACL_TARGET_OBJECT" | "ACL_TARGET_ALL_IN_SCHEMA" | "ACL_TARGET_DEFAULTS";
export type VariableSetKind = "VAR_SET_VALUE" | "VAR_SET_DEFAULT" | "VAR_SET_CURRENT" | "VAR_SET_MULTI" | "VAR_RESET" | "VAR_RESET_ALL";
export type ConstrType = "CONSTR_NULL" | "CONSTR_NOTNULL" | "CONSTR_DEFAULT" | "CONSTR_IDENTITY" | "CONSTR_GENERATED" | "CONSTR_CHECK" | "CONSTR_PRIMARY" | "CONSTR_UNIQUE" | "CONSTR_EXCLUSION" | "CONSTR_FOREIGN" | "CONSTR_ATTR_DEFERRABLE" | "CONSTR_ATTR_NOT_DEFERRABLE" | "CONSTR_ATTR_DEFERRED" | "CONSTR_ATTR_IMMEDIATE";
export type ImportForeignSchemaType = "FDW_IMPORT_SCHEMA_ALL" | "FDW_IMPORT_SCHEMA_LIMIT_TO" | "FDW_IMPORT_SCHEMA_EXCEPT";
export type RoleStmtType = "ROLESTMT_ROLE" | "ROLESTMT_USER" | "ROLESTMT_GROUP";
export type FetchDirection = "FETCH_FORWARD" | "FETCH_BACKWARD" | "FETCH_ABSOLUTE" | "FETCH_RELATIVE";
export type FunctionParameterMode = "FUNC_PARAM_IN" | "FUNC_PARAM_OUT" | "FUNC_PARAM_INOUT" | "FUNC_PARAM_VARIADIC" | "FUNC_PARAM_TABLE" | "FUNC_PARAM_DEFAULT";
export type TransactionStmtKind = "TRANS_STMT_BEGIN" | "TRANS_STMT_START" | "TRANS_STMT_COMMIT" | "TRANS_STMT_ROLLBACK" | "TRANS_STMT_SAVEPOINT" | "TRANS_STMT_RELEASE" | "TRANS_STMT_ROLLBACK_TO" | "TRANS_STMT_PREPARE" | "TRANS_STMT_COMMIT_PREPARED" | "TRANS_STMT_ROLLBACK_PREPARED";
export type ViewCheckOption = "NO_CHECK_OPTION" | "LOCAL_CHECK_OPTION" | "CASCADED_CHECK_OPTION";
export type DiscardMode = "DISCARD_ALL" | "DISCARD_PLANS" | "DISCARD_SEQUENCES" | "DISCARD_TEMP";
export type ReindexObjectType = "REINDEX_OBJECT_INDEX" | "REINDEX_OBJECT_TABLE" | "REINDEX_OBJECT_SCHEMA" | "REINDEX_OBJECT_SYSTEM" | "REINDEX_OBJECT_DATABASE";
export type AlterTSConfigType = "ALTER_TSCONFIG_ADD_MAPPING" | "ALTER_TSCONFIG_ALTER_MAPPING_FOR_TOKEN" | "ALTER_TSCONFIG_REPLACE_DICT" | "ALTER_TSCONFIG_REPLACE_DICT_FOR_TOKEN" | "ALTER_TSCONFIG_DROP_MAPPING";
export type PublicationObjSpecType = "PUBLICATIONOBJ_TABLE" | "PUBLICATIONOBJ_TABLES_IN_SCHEMA" | "PUBLICATIONOBJ_TABLES_IN_CUR_SCHEMA" | "PUBLICATIONOBJ_CONTINUATION";
export type AlterPublicationAction = "AP_AddObjects" | "AP_DropObjects" | "AP_SetObjects";
export type AlterSubscriptionType = "ALTER_SUBSCRIPTION_OPTIONS" | "ALTER_SUBSCRIPTION_CONNECTION" | "ALTER_SUBSCRIPTION_SET_PUBLICATION" | "ALTER_SUBSCRIPTION_ADD_PUBLICATION" | "ALTER_SUBSCRIPTION_DROP_PUBLICATION" | "ALTER_SUBSCRIPTION_REFRESH" | "ALTER_SUBSCRIPTION_ENABLED" | "ALTER_SUBSCRIPTION_SKIP";
export type OnCommitAction = "ONCOMMIT_NOOP" | "ONCOMMIT_PRESERVE_ROWS" | "ONCOMMIT_DELETE_ROWS" | "ONCOMMIT_DROP";
export type ParamKind = "PARAM_EXTERN" | "PARAM_EXEC" | "PARAM_SUBLINK" | "PARAM_MULTIEXPR";
export type CoercionContext = "COERCION_IMPLICIT" | "COERCION_ASSIGNMENT" | "COERCION_PLPGSQL" | "COERCION_EXPLICIT";
export type CoercionForm = "COERCE_EXPLICIT_CALL" | "COERCE_EXPLICIT_CAST" | "COERCE_IMPLICIT_CAST" | "COERCE_SQL_SYNTAX";
export type BoolExprType = "AND_EXPR" | "OR_EXPR" | "NOT_EXPR";
export type SubLinkType = "EXISTS_SUBLINK" | "ALL_SUBLINK" | "ANY_SUBLINK" | "ROWCOMPARE_SUBLINK" | "EXPR_SUBLINK" | "MULTIEXPR_SUBLINK" | "ARRAY_SUBLINK" | "CTE_SUBLINK";
export type RowCompareType = "ROWCOMPARE_LT" | "ROWCOMPARE_LE" | "ROWCOMPARE_EQ" | "ROWCOMPARE_GE" | "ROWCOMPARE_GT" | "ROWCOMPARE_NE";
export type MinMaxOp = "IS_GREATEST" | "IS_LEAST";
export type SQLValueFunctionOp = "SVFOP_CURRENT_DATE" | "SVFOP_CURRENT_TIME" | "SVFOP_CURRENT_TIME_N" | "SVFOP_CURRENT_TIMESTAMP" | "SVFOP_CURRENT_TIMESTAMP_N" | "SVFOP_LOCALTIME" | "SVFOP_LOCALTIME_N" | "SVFOP_LOCALTIMESTAMP" | "SVFOP_LOCALTIMESTAMP_N" | "SVFOP_CURRENT_ROLE" | "SVFOP_CURRENT_USER" | "SVFOP_USER" | "SVFOP_SESSION_USER" | "SVFOP_CURRENT_CATALOG" | "SVFOP_CURRENT_SCHEMA";
export type XmlExprOp = "IS_XMLCONCAT" | "IS_XMLELEMENT" | "IS_XMLFOREST" | "IS_XMLPARSE" | "IS_XMLPI" | "IS_XMLROOT" | "IS_XMLSERIALIZE" | "IS_DOCUMENT";
export type XmlOptionType = "XMLOPTION_DOCUMENT" | "XMLOPTION_CONTENT";
export type JsonEncoding = "JS_ENC_DEFAULT" | "JS_ENC_UTF8" | "JS_ENC_UTF16" | "JS_ENC_UTF32";
export type JsonFormatType = "JS_FORMAT_DEFAULT" | "JS_FORMAT_JSON" | "JS_FORMAT_JSONB";
export type JsonConstructorType = "JSCTOR_JSON_OBJECT" | "JSCTOR_JSON_ARRAY" | "JSCTOR_JSON_OBJECTAGG" | "JSCTOR_JSON_ARRAYAGG";
export type JsonValueType = "JS_TYPE_ANY" | "JS_TYPE_OBJECT" | "JS_TYPE_ARRAY" | "JS_TYPE_SCALAR";
export type NullTestType = "IS_NULL" | "IS_NOT_NULL";
export type BoolTestType = "IS_TRUE" | "IS_NOT_TRUE" | "IS_FALSE" | "IS_NOT_FALSE" | "IS_UNKNOWN" | "IS_NOT_UNKNOWN";
export type CmdType = "CMD_UNKNOWN" | "CMD_SELECT" | "CMD_UPDATE" | "CMD_INSERT" | "CMD_DELETE" | "CMD_MERGE" | "CMD_UTILITY" | "CMD_NOTHING";
export type JoinType = "JOIN_INNER" | "JOIN_LEFT" | "JOIN_FULL" | "JOIN_RIGHT" | "JOIN_SEMI" | "JOIN_ANTI" | "JOIN_RIGHT_ANTI" | "JOIN_UNIQUE_OUTER" | "JOIN_UNIQUE_INNER";
export type AggStrategy = "AGG_PLAIN" | "AGG_SORTED" | "AGG_HASHED" | "AGG_MIXED";
export type AggSplit = "AGGSPLIT_SIMPLE" | "AGGSPLIT_INITIAL_SERIAL" | "AGGSPLIT_FINAL_DESERIAL";
export type SetOpCmd = "SETOPCMD_INTERSECT" | "SETOPCMD_INTERSECT_ALL" | "SETOPCMD_EXCEPT" | "SETOPCMD_EXCEPT_ALL";
export type SetOpStrategy = "SETOP_SORTED" | "SETOP_HASHED";
export type OnConflictAction = "ONCONFLICT_NONE" | "ONCONFLICT_NOTHING" | "ONCONFLICT_UPDATE";
export type LimitOption = "LIMIT_OPTION_DEFAULT" | "LIMIT_OPTION_COUNT" | "LIMIT_OPTION_WITH_TIES";
export type LockClauseStrength = "LCS_NONE" | "LCS_FORKEYSHARE" | "LCS_FORSHARE" | "LCS_FORNOKEYUPDATE" | "LCS_FORUPDATE";
export type LockWaitPolicy = "LockWaitBlock" | "LockWaitSkip" | "LockWaitError";
export type LockTupleMode = "LockTupleKeyShare" | "LockTupleShare" | "LockTupleNoKeyExclusive" | "LockTupleExclusive";
export type KeywordKind = "NO_KEYWORD" | "UNRESERVED_KEYWORD" | "COL_NAME_KEYWORD" | "TYPE_FUNC_NAME_KEYWORD" | "RESERVED_KEYWORD";
export type Token = "NUL" | "ASCII_36" | "ASCII_37" | "ASCII_40" | "ASCII_41" | "ASCII_42" | "ASCII_43" | "ASCII_44" | "ASCII_45" | "ASCII_46" | "ASCII_47" | "ASCII_58" | "ASCII_59" | "ASCII_60" | "ASCII_61" | "ASCII_62" | "ASCII_63" | "ASCII_91" | "ASCII_92" | "ASCII_93" | "ASCII_94" | "IDENT" | "UIDENT" | "FCONST" | "SCONST" | "USCONST" | "BCONST" | "XCONST" | "Op" | "ICONST" | "PARAM" | "TYPECAST" | "DOT_DOT" | "COLON_EQUALS" | "EQUALS_GREATER" | "LESS_EQUALS" | "GREATER_EQUALS" | "NOT_EQUALS" | "SQL_COMMENT" | "C_COMMENT" | "ABORT_P" | "ABSENT" | "ABSOLUTE_P" | "ACCESS" | "ACTION" | "ADD_P" | "ADMIN" | "AFTER" | "AGGREGATE" | "ALL" | "ALSO" | "ALTER" | "ALWAYS" | "ANALYSE" | "ANALYZE" | "AND" | "ANY" | "ARRAY" | "AS" | "ASC" | "ASENSITIVE" | "ASSERTION" | "ASSIGNMENT" | "ASYMMETRIC" | "ATOMIC" | "AT" | "ATTACH" | "ATTRIBUTE" | "AUTHORIZATION" | "BACKWARD" | "BEFORE" | "BEGIN_P" | "BETWEEN" | "BIGINT" | "BINARY" | "BIT" | "BOOLEAN_P" | "BOTH" | "BREADTH" | "BY" | "CACHE" | "CALL" | "CALLED" | "CASCADE" | "CASCADED" | "CASE" | "CAST" | "CATALOG_P" | "CHAIN" | "CHAR_P" | "CHARACTER" | "CHARACTERISTICS" | "CHECK" | "CHECKPOINT" | "CLASS" | "CLOSE" | "CLUSTER" | "COALESCE" | "COLLATE" | "COLLATION" | "COLUMN" | "COLUMNS" | "COMMENT" | "COMMENTS" | "COMMIT" | "COMMITTED" | "COMPRESSION" | "CONCURRENTLY" | "CONFIGURATION" | "CONFLICT" | "CONNECTION" | "CONSTRAINT" | "CONSTRAINTS" | "CONTENT_P" | "CONTINUE_P" | "CONVERSION_P" | "COPY" | "COST" | "CREATE" | "CROSS" | "CSV" | "CUBE" | "CURRENT_P" | "CURRENT_CATALOG" | "CURRENT_DATE" | "CURRENT_ROLE" | "CURRENT_SCHEMA" | "CURRENT_TIME" | "CURRENT_TIMESTAMP" | "CURRENT_USER" | "CURSOR" | "CYCLE" | "DATA_P" | "DATABASE" | "DAY_P" | "DEALLOCATE" | "DEC" | "DECIMAL_P" | "DECLARE" | "DEFAULT" | "DEFAULTS" | "DEFERRABLE" | "DEFERRED" | "DEFINER" | "DELETE_P" | "DELIMITER" | "DELIMITERS" | "DEPENDS" | "DEPTH" | "DESC" | "DETACH" | "DICTIONARY" | "DISABLE_P" | "DISCARD" | "DISTINCT" | "DO" | "DOCUMENT_P" | "DOMAIN_P" | "DOUBLE_P" | "DROP" | "EACH" | "ELSE" | "ENABLE_P" | "ENCODING" | "ENCRYPTED" | "END_P" | "ENUM_P" | "ESCAPE" | "EVENT" | "EXCEPT" | "EXCLUDE" | "EXCLUDING" | "EXCLUSIVE" | "EXECUTE" | "EXISTS" | "EXPLAIN" | "EXPRESSION" | "EXTENSION" | "EXTERNAL" | "EXTRACT" | "FALSE_P" | "FAMILY" | "FETCH" | "FILTER" | "FINALIZE" | "FIRST_P" | "FLOAT_P" | "FOLLOWING" | "FOR" | "FORCE" | "FOREIGN" | "FORMAT" | "FORWARD" | "FREEZE" | "FROM" | "FULL" | "FUNCTION" | "FUNCTIONS" | "GENERATED" | "GLOBAL" | "GRANT" | "GRANTED" | "GREATEST" | "GROUP_P" | "GROUPING" | "GROUPS" | "HANDLER" | "HAVING" | "HEADER_P" | "HOLD" | "HOUR_P" | "IDENTITY_P" | "IF_P" | "ILIKE" | "IMMEDIATE" | "IMMUTABLE" | "IMPLICIT_P" | "IMPORT_P" | "IN_P" | "INCLUDE" | "INCLUDING" | "INCREMENT" | "INDENT" | "INDEX" | "INDEXES" | "INHERIT" | "INHERITS" | "INITIALLY" | "INLINE_P" | "INNER_P" | "INOUT" | "INPUT_P" | "INSENSITIVE" | "INSERT" | "INSTEAD" | "INT_P" | "INTEGER" | "INTERSECT" | "INTERVAL" | "INTO" | "INVOKER" | "IS" | "ISNULL" | "ISOLATION" | "JOIN" | "JSON" | "JSON_ARRAY" | "JSON_ARRAYAGG" | "JSON_OBJECT" | "JSON_OBJECTAGG" | "KEY" | "KEYS" | "LABEL" | "LANGUAGE" | "LARGE_P" | "LAST_P" | "LATERAL_P" | "LEADING" | "LEAKPROOF" | "LEAST" | "LEFT" | "LEVEL" | "LIKE" | "LIMIT" | "LISTEN" | "LOAD" | "LOCAL" | "LOCALTIME" | "LOCALTIMESTAMP" | "LOCATION" | "LOCK_P" | "LOCKED" | "LOGGED" | "MAPPING" | "MATCH" | "MATCHED" | "MATERIALIZED" | "MAXVALUE" | "MERGE" | "METHOD" | "MINUTE_P" | "MINVALUE" | "MODE" | "MONTH_P" | "MOVE" | "NAME_P" | "NAMES" | "NATIONAL" | "NATURAL" | "NCHAR" | "NEW" | "NEXT" | "NFC" | "NFD" | "NFKC" | "NFKD" | "NO" | "NONE" | "NORMALIZE" | "NORMALIZED" | "NOT" | "NOTHING" | "NOTIFY" | "NOTNULL" | "NOWAIT" | "NULL_P" | "NULLIF" | "NULLS_P" | "NUMERIC" | "OBJECT_P" | "OF" | "OFF" | "OFFSET" | "OIDS" | "OLD" | "ON" | "ONLY" | "OPERATOR" | "OPTION" | "OPTIONS" | "OR" | "ORDER" | "ORDINALITY" | "OTHERS" | "OUT_P" | "OUTER_P" | "OVER" | "OVERLAPS" | "OVERLAY" | "OVERRIDING" | "OWNED" | "OWNER" | "PARALLEL" | "PARAMETER" | "PARSER" | "PARTIAL" | "PARTITION" | "PASSING" | "PASSWORD" | "PLACING" | "PLANS" | "POLICY" | "POSITION" | "PRECEDING" | "PRECISION" | "PRESERVE" | "PREPARE" | "PREPARED" | "PRIMARY" | "PRIOR" | "PRIVILEGES" | "PROCEDURAL" | "PROCEDURE" | "PROCEDURES" | "PROGRAM" | "PUBLICATION" | "QUOTE" | "RANGE" | "READ" | "REAL" | "REASSIGN" | "RECHECK" | "RECURSIVE" | "REF_P" | "REFERENCES" | "REFERENCING" | "REFRESH" | "REINDEX" | "RELATIVE_P" | "RELEASE" | "RENAME" | "REPEATABLE" | "REPLACE" | "REPLICA" | "RESET" | "RESTART" | "RESTRICT" | "RETURN" | "RETURNING" | "RETURNS" | "REVOKE" | "RIGHT" | "ROLE" | "ROLLBACK" | "ROLLUP" | "ROUTINE" | "ROUTINES" | "ROW" | "ROWS" | "RULE" | "SAVEPOINT" | "SCALAR" | "SCHEMA" | "SCHEMAS" | "SCROLL" | "SEARCH" | "SECOND_P" | "SECURITY" | "SELECT" | "SEQUENCE" | "SEQUENCES" | "SERIALIZABLE" | "SERVER" | "SESSION" | "SESSION_USER" | "SET" | "SETS" | "SETOF" | "SHARE" | "SHOW" | "SIMILAR" | "SIMPLE" | "SKIP" | "SMALLINT" | "SNAPSHOT" | "SOME" | "SQL_P" | "STABLE" | "STANDALONE_P" | "START" | "STATEMENT" | "STATISTICS" | "STDIN" | "STDOUT" | "STORAGE" | "STORED" | "STRICT_P" | "STRIP_P" | "SUBSCRIPTION" | "SUBSTRING" | "SUPPORT" | "SYMMETRIC" | "SYSID" | "SYSTEM_P" | "SYSTEM_USER" | "TABLE" | "TABLES" | "TABLESAMPLE" | "TABLESPACE" | "TEMP" | "TEMPLATE" | "TEMPORARY" | "TEXT_P" | "THEN" | "TIES" | "TIME" | "TIMESTAMP" | "TO" | "TRAILING" | "TRANSACTION" | "TRANSFORM" | "TREAT" | "TRIGGER" | "TRIM" | "TRUE_P" | "TRUNCATE" | "TRUSTED" | "TYPE_P" | "TYPES_P" | "UESCAPE" | "UNBOUNDED" | "UNCOMMITTED" | "UNENCRYPTED" | "UNION" | "UNIQUE" | "UNKNOWN" | "UNLISTEN" | "UNLOGGED" | "UNTIL" | "UPDATE" | "USER" | "USING" | "VACUUM" | "VALID" | "VALIDATE" | "VALIDATOR" | "VALUE_P" | "VALUES" | "VARCHAR" | "VARIADIC" | "VARYING" | "VERBOSE" | "VERSION_P" | "VIEW" | "VIEWS" | "VOLATILE" | "WHEN" | "WHERE" | "WHITESPACE_P" | "WINDOW" | "WITH" | "WITHIN" | "WITHOUT" | "WORK" | "WRAPPER" | "WRITE" | "XML_P" | "XMLATTRIBUTES" | "XMLCONCAT" | "XMLELEMENT" | "XMLEXISTS" | "XMLFOREST" | "XMLNAMESPACES" | "XMLPARSE" | "XMLPI" | "XMLROOT" | "XMLSERIALIZE" | "XMLTABLE" | "YEAR_P" | "YES_P" | "ZONE" | "FORMAT_LA" | "NOT_LA" | "NULLS_LA" | "WITH_LA" | "WITHOUT_LA" | "MODE_TYPE_NAME" | "MODE_PLPGSQL_EXPR" | "MODE_PLPGSQL_ASSIGN1" | "MODE_PLPGSQL_ASSIGN2" | "MODE_PLPGSQL_ASSIGN3" | "UMINUS";",
    "file": "enums.ts",
  },
  {
    "code": "/**
* This file was automatically generated by pg-proto-parser@latest.
* DO NOT MODIFY IT BY HAND. Instead, modify the source proto file,
* and run the pg-proto-parser generate command to regenerate this file.
*/
import { OverridingKind, QuerySource, SortByDir, SortByNulls, SetQuantifier, A_Expr_Kind, RoleSpecType, TableLikeOption, DefElemAction, PartitionStrategy, PartitionRangeDatumKind, RTEKind, WCOKind, GroupingSetKind, CTEMaterialize, SetOperation, ObjectType, DropBehavior, AlterTableType, GrantTargetType, VariableSetKind, ConstrType, ImportForeignSchemaType, RoleStmtType, FetchDirection, FunctionParameterMode, TransactionStmtKind, ViewCheckOption, DiscardMode, ReindexObjectType, AlterTSConfigType, PublicationObjSpecType, AlterPublicationAction, AlterSubscriptionType, OnCommitAction, ParamKind, CoercionContext, CoercionForm, BoolExprType, SubLinkType, RowCompareType, MinMaxOp, SQLValueFunctionOp, XmlExprOp, XmlOptionType, JsonEncoding, JsonFormatType, JsonConstructorType, JsonValueType, NullTestType, BoolTestType, CmdType, JoinType, AggStrategy, AggSplit, SetOpCmd, SetOpStrategy, OnConflictAction, LimitOption, LockClauseStrength, LockWaitPolicy, LockTupleMode, KeywordKind, Token } from "./enums";
export type Node = ParseResult | ScanResult | Integer | Float | Boolean | String | BitString | List | OidList | IntList | A_Const | Alias | RangeVar | TableFunc | IntoClause | Var | Param | Aggref | GroupingFunc | WindowFunc | SubscriptingRef | FuncExpr | NamedArgExpr | OpExpr | DistinctExpr | NullIfExpr | ScalarArrayOpExpr | BoolExpr | SubLink | SubPlan | AlternativeSubPlan | FieldSelect | FieldStore | RelabelType | CoerceViaIO | ArrayCoerceExpr | ConvertRowtypeExpr | CollateExpr | CaseExpr | CaseWhen | CaseTestExpr | ArrayExpr | RowExpr | RowCompareExpr | CoalesceExpr | MinMaxExpr | SQLValueFunction | XmlExpr | JsonFormat | JsonReturning | JsonValueExpr | JsonConstructorExpr | JsonIsPredicate | NullTest | BooleanTest | CoerceToDomain | CoerceToDomainValue | SetToDefault | CurrentOfExpr | NextValueExpr | InferenceElem | TargetEntry | RangeTblRef | JoinExpr | FromExpr | OnConflictExpr | Query | TypeName | ColumnRef | ParamRef | A_Expr | TypeCast | CollateClause | RoleSpec | FuncCall | A_Star | A_Indices | A_Indirection | A_ArrayExpr | ResTarget | MultiAssignRef | SortBy | WindowDef | RangeSubselect | RangeFunction | RangeTableFunc | RangeTableFuncCol | RangeTableSample | ColumnDef | TableLikeClause | IndexElem | DefElem | LockingClause | XmlSerialize | PartitionElem | PartitionSpec | PartitionBoundSpec | PartitionRangeDatum | PartitionCmd | RangeTblEntry | RTEPermissionInfo | RangeTblFunction | TableSampleClause | WithCheckOption | SortGroupClause | GroupingSet | WindowClause | RowMarkClause | WithClause | InferClause | OnConflictClause | CTESearchClause | CTECycleClause | CommonTableExpr | MergeWhenClause | MergeAction | TriggerTransition | JsonOutput | JsonKeyValue | JsonObjectConstructor | JsonArrayConstructor | JsonArrayQueryConstructor | JsonAggConstructor | JsonObjectAgg | JsonArrayAgg | RawStmt | InsertStmt | DeleteStmt | UpdateStmt | MergeStmt | SelectStmt | SetOperationStmt | ReturnStmt | PLAssignStmt | CreateSchemaStmt | AlterTableStmt | ReplicaIdentityStmt | AlterTableCmd | AlterCollationStmt | AlterDomainStmt | GrantStmt | ObjectWithArgs | AccessPriv | GrantRoleStmt | AlterDefaultPrivilegesStmt | CopyStmt | VariableSetStmt | VariableShowStmt | CreateStmt | Constraint | CreateTableSpaceStmt | DropTableSpaceStmt | AlterTableSpaceOptionsStmt | AlterTableMoveAllStmt | CreateExtensionStmt | AlterExtensionStmt | AlterExtensionContentsStmt | CreateFdwStmt | AlterFdwStmt | CreateForeignServerStmt | AlterForeignServerStmt | CreateForeignTableStmt | CreateUserMappingStmt | AlterUserMappingStmt | DropUserMappingStmt | ImportForeignSchemaStmt | CreatePolicyStmt | AlterPolicyStmt | CreateAmStmt | CreateTrigStmt | CreateEventTrigStmt | AlterEventTrigStmt | CreatePLangStmt | CreateRoleStmt | AlterRoleStmt | AlterRoleSetStmt | DropRoleStmt | CreateSeqStmt | AlterSeqStmt | DefineStmt | CreateDomainStmt | CreateOpClassStmt | CreateOpClassItem | CreateOpFamilyStmt | AlterOpFamilyStmt | DropStmt | TruncateStmt | CommentStmt | SecLabelStmt | DeclareCursorStmt | ClosePortalStmt | FetchStmt | IndexStmt | CreateStatsStmt | StatsElem | AlterStatsStmt | CreateFunctionStmt | FunctionParameter | AlterFunctionStmt | DoStmt | InlineCodeBlock | CallStmt | CallContext | RenameStmt | AlterObjectDependsStmt | AlterObjectSchemaStmt | AlterOwnerStmt | AlterOperatorStmt | AlterTypeStmt | RuleStmt | NotifyStmt | ListenStmt | UnlistenStmt | TransactionStmt | CompositeTypeStmt | CreateEnumStmt | CreateRangeStmt | AlterEnumStmt | ViewStmt | LoadStmt | CreatedbStmt | AlterDatabaseStmt | AlterDatabaseRefreshCollStmt | AlterDatabaseSetStmt | DropdbStmt | AlterSystemStmt | ClusterStmt | VacuumStmt | VacuumRelation | ExplainStmt | CreateTableAsStmt | RefreshMatViewStmt | CheckPointStmt | DiscardStmt | LockStmt | ConstraintsSetStmt | ReindexStmt | CreateConversionStmt | CreateCastStmt | CreateTransformStmt | PrepareStmt | ExecuteStmt | DeallocateStmt | DropOwnedStmt | ReassignOwnedStmt | AlterTSDictionaryStmt | AlterTSConfigurationStmt | PublicationTable | PublicationObjSpec | CreatePublicationStmt | AlterPublicationStmt | CreateSubscriptionStmt | AlterSubscriptionStmt | DropSubscriptionStmt | ScanToken;
export interface ParseResult {
  version?: number;
  stmts?: RawStmt[];
}
export interface ScanResult {
  version?: number;
  tokens?: ScanToken[];
}
export interface Integer {
  ival?: number;
}
export interface Float {
  fval?: string;
}
export interface Boolean {
  boolval?: boolean;
}
export interface String {
  sval?: string;
}
export interface BitString {
  bsval?: string;
}
export interface List {
  items?: Node[];
}
export interface OidList {
  items?: Node[];
}
export interface IntList {
  items?: Node[];
}
export interface A_Const {
  ival?: Integer;
  fval?: Float;
  boolval?: Boolean;
  sval?: String;
  bsval?: BitString;
  isnull?: boolean;
  location?: number;
}
export interface Alias {
  aliasname?: string;
  colnames?: Node[];
}
export interface RangeVar {
  catalogname?: string;
  schemaname?: string;
  relname?: string;
  inh?: boolean;
  relpersistence?: string;
  alias?: Alias;
  location?: number;
}
export interface TableFunc {
  ns_uris?: Node[];
  ns_names?: Node[];
  docexpr?: Node;
  rowexpr?: Node;
  colnames?: Node[];
  coltypes?: Node[];
  coltypmods?: Node[];
  colcollations?: Node[];
  colexprs?: Node[];
  coldefexprs?: Node[];
  notnulls?: bigint[];
  ordinalitycol?: number;
  location?: number;
}
export interface IntoClause {
  rel?: RangeVar;
  colNames?: Node[];
  accessMethod?: string;
  options?: Node[];
  onCommit?: OnCommitAction;
  tableSpaceName?: string;
  viewQuery?: Node;
  skipData?: boolean;
}
export interface Var {
  xpr?: Node;
  varno?: number;
  varattno?: number;
  vartype?: number;
  vartypmod?: number;
  varcollid?: number;
  varnullingrels?: bigint[];
  varlevelsup?: number;
  location?: number;
}
export interface Param {
  xpr?: Node;
  paramkind?: ParamKind;
  paramid?: number;
  paramtype?: number;
  paramtypmod?: number;
  paramcollid?: number;
  location?: number;
}
export interface Aggref {
  xpr?: Node;
  aggfnoid?: number;
  aggtype?: number;
  aggcollid?: number;
  inputcollid?: number;
  aggargtypes?: Node[];
  aggdirectargs?: Node[];
  args?: Node[];
  aggorder?: Node[];
  aggdistinct?: Node[];
  aggfilter?: Node;
  aggstar?: boolean;
  aggvariadic?: boolean;
  aggkind?: string;
  agglevelsup?: number;
  aggsplit?: AggSplit;
  aggno?: number;
  aggtransno?: number;
  location?: number;
}
export interface GroupingFunc {
  xpr?: Node;
  args?: Node[];
  refs?: Node[];
  agglevelsup?: number;
  location?: number;
}
export interface WindowFunc {
  xpr?: Node;
  winfnoid?: number;
  wintype?: number;
  wincollid?: number;
  inputcollid?: number;
  args?: Node[];
  aggfilter?: Node;
  winref?: number;
  winstar?: boolean;
  winagg?: boolean;
  location?: number;
}
export interface SubscriptingRef {
  xpr?: Node;
  refcontainertype?: number;
  refelemtype?: number;
  refrestype?: number;
  reftypmod?: number;
  refcollid?: number;
  refupperindexpr?: Node[];
  reflowerindexpr?: Node[];
  refexpr?: Node;
  refassgnexpr?: Node;
}
export interface FuncExpr {
  xpr?: Node;
  funcid?: number;
  funcresulttype?: number;
  funcretset?: boolean;
  funcvariadic?: boolean;
  funcformat?: CoercionForm;
  funccollid?: number;
  inputcollid?: number;
  args?: Node[];
  location?: number;
}
export interface NamedArgExpr {
  xpr?: Node;
  arg?: Node;
  name?: string;
  argnumber?: number;
  location?: number;
}
export interface OpExpr {
  xpr?: Node;
  opno?: number;
  opresulttype?: number;
  opretset?: boolean;
  opcollid?: number;
  inputcollid?: number;
  args?: Node[];
  location?: number;
}
export interface DistinctExpr {
  xpr?: Node;
  opno?: number;
  opresulttype?: number;
  opretset?: boolean;
  opcollid?: number;
  inputcollid?: number;
  args?: Node[];
  location?: number;
}
export interface NullIfExpr {
  xpr?: Node;
  opno?: number;
  opresulttype?: number;
  opretset?: boolean;
  opcollid?: number;
  inputcollid?: number;
  args?: Node[];
  location?: number;
}
export interface ScalarArrayOpExpr {
  xpr?: Node;
  opno?: number;
  useOr?: boolean;
  inputcollid?: number;
  args?: Node[];
  location?: number;
}
export interface BoolExpr {
  xpr?: Node;
  boolop?: BoolExprType;
  args?: Node[];
  location?: number;
}
export interface SubLink {
  xpr?: Node;
  subLinkType?: SubLinkType;
  subLinkId?: number;
  testexpr?: Node;
  operName?: Node[];
  subselect?: Node;
  location?: number;
}
export interface SubPlan {
  xpr?: Node;
  subLinkType?: SubLinkType;
  testexpr?: Node;
  paramIds?: Node[];
  plan_id?: number;
  plan_name?: string;
  firstColType?: number;
  firstColTypmod?: number;
  firstColCollation?: number;
  useHashTable?: boolean;
  unknownEqFalse?: boolean;
  parallel_safe?: boolean;
  setParam?: Node[];
  parParam?: Node[];
  args?: Node[];
  startup_cost?: number;
  per_call_cost?: number;
}
export interface AlternativeSubPlan {
  xpr?: Node;
  subplans?: Node[];
}
export interface FieldSelect {
  xpr?: Node;
  arg?: Node;
  fieldnum?: number;
  resulttype?: number;
  resulttypmod?: number;
  resultcollid?: number;
}
export interface FieldStore {
  xpr?: Node;
  arg?: Node;
  newvals?: Node[];
  fieldnums?: Node[];
  resulttype?: number;
}
export interface RelabelType {
  xpr?: Node;
  arg?: Node;
  resulttype?: number;
  resulttypmod?: number;
  resultcollid?: number;
  relabelformat?: CoercionForm;
  location?: number;
}
export interface CoerceViaIO {
  xpr?: Node;
  arg?: Node;
  resulttype?: number;
  resultcollid?: number;
  coerceformat?: CoercionForm;
  location?: number;
}
export interface ArrayCoerceExpr {
  xpr?: Node;
  arg?: Node;
  elemexpr?: Node;
  resulttype?: number;
  resulttypmod?: number;
  resultcollid?: number;
  coerceformat?: CoercionForm;
  location?: number;
}
export interface ConvertRowtypeExpr {
  xpr?: Node;
  arg?: Node;
  resulttype?: number;
  convertformat?: CoercionForm;
  location?: number;
}
export interface CollateExpr {
  xpr?: Node;
  arg?: Node;
  collOid?: number;
  location?: number;
}
export interface CaseExpr {
  xpr?: Node;
  casetype?: number;
  casecollid?: number;
  arg?: Node;
  args?: Node[];
  defresult?: Node;
  location?: number;
}
export interface CaseWhen {
  xpr?: Node;
  expr?: Node;
  result?: Node;
  location?: number;
}
export interface CaseTestExpr {
  xpr?: Node;
  typeId?: number;
  typeMod?: number;
  collation?: number;
}
export interface ArrayExpr {
  xpr?: Node;
  array_typeid?: number;
  array_collid?: number;
  element_typeid?: number;
  elements?: Node[];
  multidims?: boolean;
  location?: number;
}
export interface RowExpr {
  xpr?: Node;
  args?: Node[];
  row_typeid?: number;
  row_format?: CoercionForm;
  colnames?: Node[];
  location?: number;
}
export interface RowCompareExpr {
  xpr?: Node;
  rctype?: RowCompareType;
  opnos?: Node[];
  opfamilies?: Node[];
  inputcollids?: Node[];
  largs?: Node[];
  rargs?: Node[];
}
export interface CoalesceExpr {
  xpr?: Node;
  coalescetype?: number;
  coalescecollid?: number;
  args?: Node[];
  location?: number;
}
export interface MinMaxExpr {
  xpr?: Node;
  minmaxtype?: number;
  minmaxcollid?: number;
  inputcollid?: number;
  op?: MinMaxOp;
  args?: Node[];
  location?: number;
}
export interface SQLValueFunction {
  xpr?: Node;
  op?: SQLValueFunctionOp;
  type?: number;
  typmod?: number;
  location?: number;
}
export interface XmlExpr {
  xpr?: Node;
  op?: XmlExprOp;
  name?: string;
  named_args?: Node[];
  arg_names?: Node[];
  args?: Node[];
  xmloption?: XmlOptionType;
  indent?: boolean;
  type?: number;
  typmod?: number;
  location?: number;
}
export interface JsonFormat {
  format_type?: JsonFormatType;
  encoding?: JsonEncoding;
  location?: number;
}
export interface JsonReturning {
  format?: JsonFormat;
  typid?: number;
  typmod?: number;
}
export interface JsonValueExpr {
  raw_expr?: Node;
  formatted_expr?: Node;
  format?: JsonFormat;
}
export interface JsonConstructorExpr {
  xpr?: Node;
  type?: JsonConstructorType;
  args?: Node[];
  func?: Node;
  coercion?: Node;
  returning?: JsonReturning;
  absent_on_null?: boolean;
  unique?: boolean;
  location?: number;
}
export interface JsonIsPredicate {
  expr?: Node;
  format?: JsonFormat;
  item_type?: JsonValueType;
  unique_keys?: boolean;
  location?: number;
}
export interface NullTest {
  xpr?: Node;
  arg?: Node;
  nulltesttype?: NullTestType;
  argisrow?: boolean;
  location?: number;
}
export interface BooleanTest {
  xpr?: Node;
  arg?: Node;
  booltesttype?: BoolTestType;
  location?: number;
}
export interface CoerceToDomain {
  xpr?: Node;
  arg?: Node;
  resulttype?: number;
  resulttypmod?: number;
  resultcollid?: number;
  coercionformat?: CoercionForm;
  location?: number;
}
export interface CoerceToDomainValue {
  xpr?: Node;
  typeId?: number;
  typeMod?: number;
  collation?: number;
  location?: number;
}
export interface SetToDefault {
  xpr?: Node;
  typeId?: number;
  typeMod?: number;
  collation?: number;
  location?: number;
}
export interface CurrentOfExpr {
  xpr?: Node;
  cvarno?: number;
  cursor_name?: string;
  cursor_param?: number;
}
export interface NextValueExpr {
  xpr?: Node;
  seqid?: number;
  typeId?: number;
}
export interface InferenceElem {
  xpr?: Node;
  expr?: Node;
  infercollid?: number;
  inferopclass?: number;
}
export interface TargetEntry {
  xpr?: Node;
  expr?: Node;
  resno?: number;
  resname?: string;
  ressortgroupref?: number;
  resorigtbl?: number;
  resorigcol?: number;
  resjunk?: boolean;
}
export interface RangeTblRef {
  rtindex?: number;
}
export interface JoinExpr {
  jointype?: JoinType;
  isNatural?: boolean;
  larg?: Node;
  rarg?: Node;
  usingClause?: Node[];
  join_using_alias?: Alias;
  quals?: Node;
  alias?: Alias;
  rtindex?: number;
}
export interface FromExpr {
  fromlist?: Node[];
  quals?: Node;
}
export interface OnConflictExpr {
  action?: OnConflictAction;
  arbiterElems?: Node[];
  arbiterWhere?: Node;
  constraint?: number;
  onConflictSet?: Node[];
  onConflictWhere?: Node;
  exclRelIndex?: number;
  exclRelTlist?: Node[];
}
export interface Query {
  commandType?: CmdType;
  querySource?: QuerySource;
  canSetTag?: boolean;
  utilityStmt?: Node;
  resultRelation?: number;
  hasAggs?: boolean;
  hasWindowFuncs?: boolean;
  hasTargetSRFs?: boolean;
  hasSubLinks?: boolean;
  hasDistinctOn?: boolean;
  hasRecursive?: boolean;
  hasModifyingCTE?: boolean;
  hasForUpdate?: boolean;
  hasRowSecurity?: boolean;
  isReturn?: boolean;
  cteList?: Node[];
  rtable?: Node[];
  rteperminfos?: Node[];
  jointree?: FromExpr;
  mergeActionList?: Node[];
  mergeUseOuterJoin?: boolean;
  targetList?: Node[];
  override?: OverridingKind;
  onConflict?: OnConflictExpr;
  returningList?: Node[];
  groupClause?: Node[];
  groupDistinct?: boolean;
  groupingSets?: Node[];
  havingQual?: Node;
  windowClause?: Node[];
  distinctClause?: Node[];
  sortClause?: Node[];
  limitOffset?: Node;
  limitCount?: Node;
  limitOption?: LimitOption;
  rowMarks?: Node[];
  setOperations?: Node;
  constraintDeps?: Node[];
  withCheckOptions?: Node[];
  stmt_location?: number;
  stmt_len?: number;
}
export interface TypeName {
  names?: Node[];
  typeOid?: number;
  setof?: boolean;
  pct_type?: boolean;
  typmods?: Node[];
  typemod?: number;
  arrayBounds?: Node[];
  location?: number;
}
export interface ColumnRef {
  fields?: Node[];
  location?: number;
}
export interface ParamRef {
  number?: number;
  location?: number;
}
export interface A_Expr {
  kind?: A_Expr_Kind;
  name?: Node[];
  lexpr?: Node;
  rexpr?: Node;
  location?: number;
}
export interface TypeCast {
  arg?: Node;
  typeName?: TypeName;
  location?: number;
}
export interface CollateClause {
  arg?: Node;
  collname?: Node[];
  location?: number;
}
export interface RoleSpec {
  roletype?: RoleSpecType;
  rolename?: string;
  location?: number;
}
export interface FuncCall {
  funcname?: Node[];
  args?: Node[];
  agg_order?: Node[];
  agg_filter?: Node;
  over?: WindowDef;
  agg_within_group?: boolean;
  agg_star?: boolean;
  agg_distinct?: boolean;
  func_variadic?: boolean;
  funcformat?: CoercionForm;
  location?: number;
}
export interface A_Star {}
export interface A_Indices {
  is_slice?: boolean;
  lidx?: Node;
  uidx?: Node;
}
export interface A_Indirection {
  arg?: Node;
  indirection?: Node[];
}
export interface A_ArrayExpr {
  elements?: Node[];
  location?: number;
}
export interface ResTarget {
  name?: string;
  indirection?: Node[];
  val?: Node;
  location?: number;
}
export interface MultiAssignRef {
  source?: Node;
  colno?: number;
  ncolumns?: number;
}
export interface SortBy {
  node?: Node;
  sortby_dir?: SortByDir;
  sortby_nulls?: SortByNulls;
  useOp?: Node[];
  location?: number;
}
export interface WindowDef {
  name?: string;
  refname?: string;
  partitionClause?: Node[];
  orderClause?: Node[];
  frameOptions?: number;
  startOffset?: Node;
  endOffset?: Node;
  location?: number;
}
export interface RangeSubselect {
  lateral?: boolean;
  subquery?: Node;
  alias?: Alias;
}
export interface RangeFunction {
  lateral?: boolean;
  ordinality?: boolean;
  is_rowsfrom?: boolean;
  functions?: Node[];
  alias?: Alias;
  coldeflist?: Node[];
}
export interface RangeTableFunc {
  lateral?: boolean;
  docexpr?: Node;
  rowexpr?: Node;
  namespaces?: Node[];
  columns?: Node[];
  alias?: Alias;
  location?: number;
}
export interface RangeTableFuncCol {
  colname?: string;
  typeName?: TypeName;
  for_ordinality?: boolean;
  is_not_null?: boolean;
  colexpr?: Node;
  coldefexpr?: Node;
  location?: number;
}
export interface RangeTableSample {
  relation?: Node;
  method?: Node[];
  args?: Node[];
  repeatable?: Node;
  location?: number;
}
export interface ColumnDef {
  colname?: string;
  typeName?: TypeName;
  compression?: string;
  inhcount?: number;
  is_local?: boolean;
  is_not_null?: boolean;
  is_from_type?: boolean;
  storage?: string;
  storage_name?: string;
  raw_default?: Node;
  cooked_default?: Node;
  identity?: string;
  identitySequence?: RangeVar;
  generated?: string;
  collClause?: CollateClause;
  collOid?: number;
  constraints?: Node[];
  fdwoptions?: Node[];
  location?: number;
}
export interface TableLikeClause {
  relation?: RangeVar;
  options?: number;
  relationOid?: number;
}
export interface IndexElem {
  name?: string;
  expr?: Node;
  indexcolname?: string;
  collation?: Node[];
  opclass?: Node[];
  opclassopts?: Node[];
  ordering?: SortByDir;
  nulls_ordering?: SortByNulls;
}
export interface DefElem {
  defnamespace?: string;
  defname?: string;
  arg?: Node;
  defaction?: DefElemAction;
  location?: number;
}
export interface LockingClause {
  lockedRels?: Node[];
  strength?: LockClauseStrength;
  waitPolicy?: LockWaitPolicy;
}
export interface XmlSerialize {
  xmloption?: XmlOptionType;
  expr?: Node;
  typeName?: TypeName;
  indent?: boolean;
  location?: number;
}
export interface PartitionElem {
  name?: string;
  expr?: Node;
  collation?: Node[];
  opclass?: Node[];
  location?: number;
}
export interface PartitionSpec {
  strategy?: PartitionStrategy;
  partParams?: Node[];
  location?: number;
}
export interface PartitionBoundSpec {
  strategy?: string;
  is_default?: boolean;
  modulus?: number;
  remainder?: number;
  listdatums?: Node[];
  lowerdatums?: Node[];
  upperdatums?: Node[];
  location?: number;
}
export interface PartitionRangeDatum {
  kind?: PartitionRangeDatumKind;
  value?: Node;
  location?: number;
}
export interface PartitionCmd {
  name?: RangeVar;
  bound?: PartitionBoundSpec;
  concurrent?: boolean;
}
export interface RangeTblEntry {
  rtekind?: RTEKind;
  relid?: number;
  relkind?: string;
  rellockmode?: number;
  tablesample?: TableSampleClause;
  perminfoindex?: number;
  subquery?: Query;
  security_barrier?: boolean;
  jointype?: JoinType;
  joinmergedcols?: number;
  joinaliasvars?: Node[];
  joinleftcols?: Node[];
  joinrightcols?: Node[];
  join_using_alias?: Alias;
  functions?: Node[];
  funcordinality?: boolean;
  tablefunc?: TableFunc;
  values_lists?: Node[];
  ctename?: string;
  ctelevelsup?: number;
  self_reference?: boolean;
  coltypes?: Node[];
  coltypmods?: Node[];
  colcollations?: Node[];
  enrname?: string;
  enrtuples?: number;
  alias?: Alias;
  eref?: Alias;
  lateral?: boolean;
  inh?: boolean;
  inFromCl?: boolean;
  securityQuals?: Node[];
}
export interface RTEPermissionInfo {
  relid?: number;
  inh?: boolean;
  requiredPerms?: bigint;
  checkAsUser?: number;
  selectedCols?: bigint[];
  insertedCols?: bigint[];
  updatedCols?: bigint[];
}
export interface RangeTblFunction {
  funcexpr?: Node;
  funccolcount?: number;
  funccolnames?: Node[];
  funccoltypes?: Node[];
  funccoltypmods?: Node[];
  funccolcollations?: Node[];
  funcparams?: bigint[];
}
export interface TableSampleClause {
  tsmhandler?: number;
  args?: Node[];
  repeatable?: Node;
}
export interface WithCheckOption {
  kind?: WCOKind;
  relname?: string;
  polname?: string;
  qual?: Node;
  cascaded?: boolean;
}
export interface SortGroupClause {
  tleSortGroupRef?: number;
  eqop?: number;
  sortop?: number;
  nulls_first?: boolean;
  hashable?: boolean;
}
export interface GroupingSet {
  kind?: GroupingSetKind;
  content?: Node[];
  location?: number;
}
export interface WindowClause {
  name?: string;
  refname?: string;
  partitionClause?: Node[];
  orderClause?: Node[];
  frameOptions?: number;
  startOffset?: Node;
  endOffset?: Node;
  runCondition?: Node[];
  startInRangeFunc?: number;
  endInRangeFunc?: number;
  inRangeColl?: number;
  inRangeAsc?: boolean;
  inRangeNullsFirst?: boolean;
  winref?: number;
  copiedOrder?: boolean;
}
export interface RowMarkClause {
  rti?: number;
  strength?: LockClauseStrength;
  waitPolicy?: LockWaitPolicy;
  pushedDown?: boolean;
}
export interface WithClause {
  ctes?: Node[];
  recursive?: boolean;
  location?: number;
}
export interface InferClause {
  indexElems?: Node[];
  whereClause?: Node;
  conname?: string;
  location?: number;
}
export interface OnConflictClause {
  action?: OnConflictAction;
  infer?: InferClause;
  targetList?: Node[];
  whereClause?: Node;
  location?: number;
}
export interface CTESearchClause {
  search_col_list?: Node[];
  search_breadth_first?: boolean;
  search_seq_column?: string;
  location?: number;
}
export interface CTECycleClause {
  cycle_col_list?: Node[];
  cycle_mark_column?: string;
  cycle_mark_value?: Node;
  cycle_mark_default?: Node;
  cycle_path_column?: string;
  location?: number;
  cycle_mark_type?: number;
  cycle_mark_typmod?: number;
  cycle_mark_collation?: number;
  cycle_mark_neop?: number;
}
export interface CommonTableExpr {
  ctename?: string;
  aliascolnames?: Node[];
  ctematerialized?: CTEMaterialize;
  ctequery?: Node;
  search_clause?: CTESearchClause;
  cycle_clause?: CTECycleClause;
  location?: number;
  cterecursive?: boolean;
  cterefcount?: number;
  ctecolnames?: Node[];
  ctecoltypes?: Node[];
  ctecoltypmods?: Node[];
  ctecolcollations?: Node[];
}
export interface MergeWhenClause {
  matched?: boolean;
  commandType?: CmdType;
  override?: OverridingKind;
  condition?: Node;
  targetList?: Node[];
  values?: Node[];
}
export interface MergeAction {
  matched?: boolean;
  commandType?: CmdType;
  override?: OverridingKind;
  qual?: Node;
  targetList?: Node[];
  updateColnos?: Node[];
}
export interface TriggerTransition {
  name?: string;
  isNew?: boolean;
  isTable?: boolean;
}
export interface JsonOutput {
  typeName?: TypeName;
  returning?: JsonReturning;
}
export interface JsonKeyValue {
  key?: Node;
  value?: JsonValueExpr;
}
export interface JsonObjectConstructor {
  exprs?: Node[];
  output?: JsonOutput;
  absent_on_null?: boolean;
  unique?: boolean;
  location?: number;
}
export interface JsonArrayConstructor {
  exprs?: Node[];
  output?: JsonOutput;
  absent_on_null?: boolean;
  location?: number;
}
export interface JsonArrayQueryConstructor {
  query?: Node;
  output?: JsonOutput;
  format?: JsonFormat;
  absent_on_null?: boolean;
  location?: number;
}
export interface JsonAggConstructor {
  output?: JsonOutput;
  agg_filter?: Node;
  agg_order?: Node[];
  over?: WindowDef;
  location?: number;
}
export interface JsonObjectAgg {
  constructor?: JsonAggConstructor;
  arg?: JsonKeyValue;
  absent_on_null?: boolean;
  unique?: boolean;
}
export interface JsonArrayAgg {
  constructor?: JsonAggConstructor;
  arg?: JsonValueExpr;
  absent_on_null?: boolean;
}
export interface RawStmt {
  stmt?: Node;
  stmt_location?: number;
  stmt_len?: number;
}
export interface InsertStmt {
  relation?: RangeVar;
  cols?: Node[];
  selectStmt?: Node;
  onConflictClause?: OnConflictClause;
  returningList?: Node[];
  withClause?: WithClause;
  override?: OverridingKind;
}
export interface DeleteStmt {
  relation?: RangeVar;
  usingClause?: Node[];
  whereClause?: Node;
  returningList?: Node[];
  withClause?: WithClause;
}
export interface UpdateStmt {
  relation?: RangeVar;
  targetList?: Node[];
  whereClause?: Node;
  fromClause?: Node[];
  returningList?: Node[];
  withClause?: WithClause;
}
export interface MergeStmt {
  relation?: RangeVar;
  sourceRelation?: Node;
  joinCondition?: Node;
  mergeWhenClauses?: Node[];
  withClause?: WithClause;
}
export interface SelectStmt {
  distinctClause?: Node[];
  intoClause?: IntoClause;
  targetList?: Node[];
  fromClause?: Node[];
  whereClause?: Node;
  groupClause?: Node[];
  groupDistinct?: boolean;
  havingClause?: Node;
  windowClause?: Node[];
  valuesLists?: Node[];
  sortClause?: Node[];
  limitOffset?: Node;
  limitCount?: Node;
  limitOption?: LimitOption;
  lockingClause?: Node[];
  withClause?: WithClause;
  op?: SetOperation;
  all?: boolean;
  larg?: SelectStmt;
  rarg?: SelectStmt;
}
export interface SetOperationStmt {
  op?: SetOperation;
  all?: boolean;
  larg?: Node;
  rarg?: Node;
  colTypes?: Node[];
  colTypmods?: Node[];
  colCollations?: Node[];
  groupClauses?: Node[];
}
export interface ReturnStmt {
  returnval?: Node;
}
export interface PLAssignStmt {
  name?: string;
  indirection?: Node[];
  nnames?: number;
  val?: SelectStmt;
  location?: number;
}
export interface CreateSchemaStmt {
  schemaname?: string;
  authrole?: RoleSpec;
  schemaElts?: Node[];
  if_not_exists?: boolean;
}
export interface AlterTableStmt {
  relation?: RangeVar;
  cmds?: Node[];
  objtype?: ObjectType;
  missing_ok?: boolean;
}
export interface ReplicaIdentityStmt {
  identity_type?: string;
  name?: string;
}
export interface AlterTableCmd {
  subtype?: AlterTableType;
  name?: string;
  num?: number;
  newowner?: RoleSpec;
  def?: Node;
  behavior?: DropBehavior;
  missing_ok?: boolean;
  recurse?: boolean;
}
export interface AlterCollationStmt {
  collname?: Node[];
}
export interface AlterDomainStmt {
  subtype?: string;
  typeName?: Node[];
  name?: string;
  def?: Node;
  behavior?: DropBehavior;
  missing_ok?: boolean;
}
export interface GrantStmt {
  is_grant?: boolean;
  targtype?: GrantTargetType;
  objtype?: ObjectType;
  objects?: Node[];
  privileges?: Node[];
  grantees?: Node[];
  grant_option?: boolean;
  grantor?: RoleSpec;
  behavior?: DropBehavior;
}
export interface ObjectWithArgs {
  objname?: Node[];
  objargs?: Node[];
  objfuncargs?: Node[];
  args_unspecified?: boolean;
}
export interface AccessPriv {
  priv_name?: string;
  cols?: Node[];
}
export interface GrantRoleStmt {
  granted_roles?: Node[];
  grantee_roles?: Node[];
  is_grant?: boolean;
  opt?: Node[];
  grantor?: RoleSpec;
  behavior?: DropBehavior;
}
export interface AlterDefaultPrivilegesStmt {
  options?: Node[];
  action?: GrantStmt;
}
export interface CopyStmt {
  relation?: RangeVar;
  query?: Node;
  attlist?: Node[];
  is_from?: boolean;
  is_program?: boolean;
  filename?: string;
  options?: Node[];
  whereClause?: Node;
}
export interface VariableSetStmt {
  kind?: VariableSetKind;
  name?: string;
  args?: Node[];
  is_local?: boolean;
}
export interface VariableShowStmt {
  name?: string;
}
export interface CreateStmt {
  relation?: RangeVar;
  tableElts?: Node[];
  inhRelations?: Node[];
  partbound?: PartitionBoundSpec;
  partspec?: PartitionSpec;
  ofTypename?: TypeName;
  constraints?: Node[];
  options?: Node[];
  oncommit?: OnCommitAction;
  tablespacename?: string;
  accessMethod?: string;
  if_not_exists?: boolean;
}
export interface Constraint {
  contype?: ConstrType;
  conname?: string;
  deferrable?: boolean;
  initdeferred?: boolean;
  location?: number;
  is_no_inherit?: boolean;
  raw_expr?: Node;
  cooked_expr?: string;
  generated_when?: string;
  nulls_not_distinct?: boolean;
  keys?: Node[];
  including?: Node[];
  exclusions?: Node[];
  options?: Node[];
  indexname?: string;
  indexspace?: string;
  reset_default_tblspc?: boolean;
  access_method?: string;
  where_clause?: Node;
  pktable?: RangeVar;
  fk_attrs?: Node[];
  pk_attrs?: Node[];
  fk_matchtype?: string;
  fk_upd_action?: string;
  fk_del_action?: string;
  fk_del_set_cols?: Node[];
  old_conpfeqop?: Node[];
  old_pktable_oid?: number;
  skip_validation?: boolean;
  initially_valid?: boolean;
}
export interface CreateTableSpaceStmt {
  tablespacename?: string;
  owner?: RoleSpec;
  location?: string;
  options?: Node[];
}
export interface DropTableSpaceStmt {
  tablespacename?: string;
  missing_ok?: boolean;
}
export interface AlterTableSpaceOptionsStmt {
  tablespacename?: string;
  options?: Node[];
  isReset?: boolean;
}
export interface AlterTableMoveAllStmt {
  orig_tablespacename?: string;
  objtype?: ObjectType;
  roles?: Node[];
  new_tablespacename?: string;
  nowait?: boolean;
}
export interface CreateExtensionStmt {
  extname?: string;
  if_not_exists?: boolean;
  options?: Node[];
}
export interface AlterExtensionStmt {
  extname?: string;
  options?: Node[];
}
export interface AlterExtensionContentsStmt {
  extname?: string;
  action?: number;
  objtype?: ObjectType;
  object?: Node;
}
export interface CreateFdwStmt {
  fdwname?: string;
  func_options?: Node[];
  options?: Node[];
}
export interface AlterFdwStmt {
  fdwname?: string;
  func_options?: Node[];
  options?: Node[];
}
export interface CreateForeignServerStmt {
  servername?: string;
  servertype?: string;
  version?: string;
  fdwname?: string;
  if_not_exists?: boolean;
  options?: Node[];
}
export interface AlterForeignServerStmt {
  servername?: string;
  version?: string;
  options?: Node[];
  has_version?: boolean;
}
export interface CreateForeignTableStmt {
  base?: CreateStmt;
  servername?: string;
  options?: Node[];
}
export interface CreateUserMappingStmt {
  user?: RoleSpec;
  servername?: string;
  if_not_exists?: boolean;
  options?: Node[];
}
export interface AlterUserMappingStmt {
  user?: RoleSpec;
  servername?: string;
  options?: Node[];
}
export interface DropUserMappingStmt {
  user?: RoleSpec;
  servername?: string;
  missing_ok?: boolean;
}
export interface ImportForeignSchemaStmt {
  server_name?: string;
  remote_schema?: string;
  local_schema?: string;
  list_type?: ImportForeignSchemaType;
  table_list?: Node[];
  options?: Node[];
}
export interface CreatePolicyStmt {
  policy_name?: string;
  table?: RangeVar;
  cmd_name?: string;
  permissive?: boolean;
  roles?: Node[];
  qual?: Node;
  with_check?: Node;
}
export interface AlterPolicyStmt {
  policy_name?: string;
  table?: RangeVar;
  roles?: Node[];
  qual?: Node;
  with_check?: Node;
}
export interface CreateAmStmt {
  amname?: string;
  handler_name?: Node[];
  amtype?: string;
}
export interface CreateTrigStmt {
  replace?: boolean;
  isconstraint?: boolean;
  trigname?: string;
  relation?: RangeVar;
  funcname?: Node[];
  args?: Node[];
  row?: boolean;
  timing?: number;
  events?: number;
  columns?: Node[];
  whenClause?: Node;
  transitionRels?: Node[];
  deferrable?: boolean;
  initdeferred?: boolean;
  constrrel?: RangeVar;
}
export interface CreateEventTrigStmt {
  trigname?: string;
  eventname?: string;
  whenclause?: Node[];
  funcname?: Node[];
}
export interface AlterEventTrigStmt {
  trigname?: string;
  tgenabled?: string;
}
export interface CreatePLangStmt {
  replace?: boolean;
  plname?: string;
  plhandler?: Node[];
  plinline?: Node[];
  plvalidator?: Node[];
  pltrusted?: boolean;
}
export interface CreateRoleStmt {
  stmt_type?: RoleStmtType;
  role?: string;
  options?: Node[];
}
export interface AlterRoleStmt {
  role?: RoleSpec;
  options?: Node[];
  action?: number;
}
export interface AlterRoleSetStmt {
  role?: RoleSpec;
  database?: string;
  setstmt?: VariableSetStmt;
}
export interface DropRoleStmt {
  roles?: Node[];
  missing_ok?: boolean;
}
export interface CreateSeqStmt {
  sequence?: RangeVar;
  options?: Node[];
  ownerId?: number;
  for_identity?: boolean;
  if_not_exists?: boolean;
}
export interface AlterSeqStmt {
  sequence?: RangeVar;
  options?: Node[];
  for_identity?: boolean;
  missing_ok?: boolean;
}
export interface DefineStmt {
  kind?: ObjectType;
  oldstyle?: boolean;
  defnames?: Node[];
  args?: Node[];
  definition?: Node[];
  if_not_exists?: boolean;
  replace?: boolean;
}
export interface CreateDomainStmt {
  domainname?: Node[];
  typeName?: TypeName;
  collClause?: CollateClause;
  constraints?: Node[];
}
export interface CreateOpClassStmt {
  opclassname?: Node[];
  opfamilyname?: Node[];
  amname?: string;
  datatype?: TypeName;
  items?: Node[];
  isDefault?: boolean;
}
export interface CreateOpClassItem {
  itemtype?: number;
  name?: ObjectWithArgs;
  number?: number;
  order_family?: Node[];
  class_args?: Node[];
  storedtype?: TypeName;
}
export interface CreateOpFamilyStmt {
  opfamilyname?: Node[];
  amname?: string;
}
export interface AlterOpFamilyStmt {
  opfamilyname?: Node[];
  amname?: string;
  isDrop?: boolean;
  items?: Node[];
}
export interface DropStmt {
  objects?: Node[];
  removeType?: ObjectType;
  behavior?: DropBehavior;
  missing_ok?: boolean;
  concurrent?: boolean;
}
export interface TruncateStmt {
  relations?: Node[];
  restart_seqs?: boolean;
  behavior?: DropBehavior;
}
export interface CommentStmt {
  objtype?: ObjectType;
  object?: Node;
  comment?: string;
}
export interface SecLabelStmt {
  objtype?: ObjectType;
  object?: Node;
  provider?: string;
  label?: string;
}
export interface DeclareCursorStmt {
  portalname?: string;
  options?: number;
  query?: Node;
}
export interface ClosePortalStmt {
  portalname?: string;
}
export interface FetchStmt {
  direction?: FetchDirection;
  howMany?: bigint;
  portalname?: string;
  ismove?: boolean;
}
export interface IndexStmt {
  idxname?: string;
  relation?: RangeVar;
  accessMethod?: string;
  tableSpace?: string;
  indexParams?: Node[];
  indexIncludingParams?: Node[];
  options?: Node[];
  whereClause?: Node;
  excludeOpNames?: Node[];
  idxcomment?: string;
  indexOid?: number;
  oldNumber?: number;
  oldCreateSubid?: number;
  oldFirstRelfilelocatorSubid?: number;
  unique?: boolean;
  nulls_not_distinct?: boolean;
  primary?: boolean;
  isconstraint?: boolean;
  deferrable?: boolean;
  initdeferred?: boolean;
  transformed?: boolean;
  concurrent?: boolean;
  if_not_exists?: boolean;
  reset_default_tblspc?: boolean;
}
export interface CreateStatsStmt {
  defnames?: Node[];
  stat_types?: Node[];
  exprs?: Node[];
  relations?: Node[];
  stxcomment?: string;
  transformed?: boolean;
  if_not_exists?: boolean;
}
export interface StatsElem {
  name?: string;
  expr?: Node;
}
export interface AlterStatsStmt {
  defnames?: Node[];
  stxstattarget?: number;
  missing_ok?: boolean;
}
export interface CreateFunctionStmt {
  is_procedure?: boolean;
  replace?: boolean;
  funcname?: Node[];
  parameters?: Node[];
  returnType?: TypeName;
  options?: Node[];
  sql_body?: Node;
}
export interface FunctionParameter {
  name?: string;
  argType?: TypeName;
  mode?: FunctionParameterMode;
  defexpr?: Node;
}
export interface AlterFunctionStmt {
  objtype?: ObjectType;
  func?: ObjectWithArgs;
  actions?: Node[];
}
export interface DoStmt {
  args?: Node[];
}
export interface InlineCodeBlock {
  source_text?: string;
  langOid?: number;
  langIsTrusted?: boolean;
  atomic?: boolean;
}
export interface CallStmt {
  funccall?: FuncCall;
  funcexpr?: FuncExpr;
  outargs?: Node[];
}
export interface CallContext {
  atomic?: boolean;
}
export interface RenameStmt {
  renameType?: ObjectType;
  relationType?: ObjectType;
  relation?: RangeVar;
  object?: Node;
  subname?: string;
  newname?: string;
  behavior?: DropBehavior;
  missing_ok?: boolean;
}
export interface AlterObjectDependsStmt {
  objectType?: ObjectType;
  relation?: RangeVar;
  object?: Node;
  extname?: String;
  remove?: boolean;
}
export interface AlterObjectSchemaStmt {
  objectType?: ObjectType;
  relation?: RangeVar;
  object?: Node;
  newschema?: string;
  missing_ok?: boolean;
}
export interface AlterOwnerStmt {
  objectType?: ObjectType;
  relation?: RangeVar;
  object?: Node;
  newowner?: RoleSpec;
}
export interface AlterOperatorStmt {
  opername?: ObjectWithArgs;
  options?: Node[];
}
export interface AlterTypeStmt {
  typeName?: Node[];
  options?: Node[];
}
export interface RuleStmt {
  relation?: RangeVar;
  rulename?: string;
  whereClause?: Node;
  event?: CmdType;
  instead?: boolean;
  actions?: Node[];
  replace?: boolean;
}
export interface NotifyStmt {
  conditionname?: string;
  payload?: string;
}
export interface ListenStmt {
  conditionname?: string;
}
export interface UnlistenStmt {
  conditionname?: string;
}
export interface TransactionStmt {
  kind?: TransactionStmtKind;
  options?: Node[];
  savepoint_name?: string;
  gid?: string;
  chain?: boolean;
}
export interface CompositeTypeStmt {
  typevar?: RangeVar;
  coldeflist?: Node[];
}
export interface CreateEnumStmt {
  typeName?: Node[];
  vals?: Node[];
}
export interface CreateRangeStmt {
  typeName?: Node[];
  params?: Node[];
}
export interface AlterEnumStmt {
  typeName?: Node[];
  oldVal?: string;
  newVal?: string;
  newValNeighbor?: string;
  newValIsAfter?: boolean;
  skipIfNewValExists?: boolean;
}
export interface ViewStmt {
  view?: RangeVar;
  aliases?: Node[];
  query?: Node;
  replace?: boolean;
  options?: Node[];
  withCheckOption?: ViewCheckOption;
}
export interface LoadStmt {
  filename?: string;
}
export interface CreatedbStmt {
  dbname?: string;
  options?: Node[];
}
export interface AlterDatabaseStmt {
  dbname?: string;
  options?: Node[];
}
export interface AlterDatabaseRefreshCollStmt {
  dbname?: string;
}
export interface AlterDatabaseSetStmt {
  dbname?: string;
  setstmt?: VariableSetStmt;
}
export interface DropdbStmt {
  dbname?: string;
  missing_ok?: boolean;
  options?: Node[];
}
export interface AlterSystemStmt {
  setstmt?: VariableSetStmt;
}
export interface ClusterStmt {
  relation?: RangeVar;
  indexname?: string;
  params?: Node[];
}
export interface VacuumStmt {
  options?: Node[];
  rels?: Node[];
  is_vacuumcmd?: boolean;
}
export interface VacuumRelation {
  relation?: RangeVar;
  oid?: number;
  va_cols?: Node[];
}
export interface ExplainStmt {
  query?: Node;
  options?: Node[];
}
export interface CreateTableAsStmt {
  query?: Node;
  into?: IntoClause;
  objtype?: ObjectType;
  is_select_into?: boolean;
  if_not_exists?: boolean;
}
export interface RefreshMatViewStmt {
  concurrent?: boolean;
  skipData?: boolean;
  relation?: RangeVar;
}
export interface CheckPointStmt {}
export interface DiscardStmt {
  target?: DiscardMode;
}
export interface LockStmt {
  relations?: Node[];
  mode?: number;
  nowait?: boolean;
}
export interface ConstraintsSetStmt {
  constraints?: Node[];
  deferred?: boolean;
}
export interface ReindexStmt {
  kind?: ReindexObjectType;
  relation?: RangeVar;
  name?: string;
  params?: Node[];
}
export interface CreateConversionStmt {
  conversion_name?: Node[];
  for_encoding_name?: string;
  to_encoding_name?: string;
  func_name?: Node[];
  def?: boolean;
}
export interface CreateCastStmt {
  sourcetype?: TypeName;
  targettype?: TypeName;
  func?: ObjectWithArgs;
  context?: CoercionContext;
  inout?: boolean;
}
export interface CreateTransformStmt {
  replace?: boolean;
  type_name?: TypeName;
  lang?: string;
  fromsql?: ObjectWithArgs;
  tosql?: ObjectWithArgs;
}
export interface PrepareStmt {
  name?: string;
  argtypes?: Node[];
  query?: Node;
}
export interface ExecuteStmt {
  name?: string;
  params?: Node[];
}
export interface DeallocateStmt {
  name?: string;
}
export interface DropOwnedStmt {
  roles?: Node[];
  behavior?: DropBehavior;
}
export interface ReassignOwnedStmt {
  roles?: Node[];
  newrole?: RoleSpec;
}
export interface AlterTSDictionaryStmt {
  dictname?: Node[];
  options?: Node[];
}
export interface AlterTSConfigurationStmt {
  kind?: AlterTSConfigType;
  cfgname?: Node[];
  tokentype?: Node[];
  dicts?: Node[];
  override?: boolean;
  replace?: boolean;
  missing_ok?: boolean;
}
export interface PublicationTable {
  relation?: RangeVar;
  whereClause?: Node;
  columns?: Node[];
}
export interface PublicationObjSpec {
  pubobjtype?: PublicationObjSpecType;
  name?: string;
  pubtable?: PublicationTable;
  location?: number;
}
export interface CreatePublicationStmt {
  pubname?: string;
  options?: Node[];
  pubobjects?: Node[];
  for_all_tables?: boolean;
}
export interface AlterPublicationStmt {
  pubname?: string;
  options?: Node[];
  pubobjects?: Node[];
  for_all_tables?: boolean;
  action?: AlterPublicationAction;
}
export interface CreateSubscriptionStmt {
  subname?: string;
  conninfo?: string;
  publication?: Node[];
  options?: Node[];
}
export interface AlterSubscriptionStmt {
  kind?: AlterSubscriptionType;
  subname?: string;
  conninfo?: string;
  publication?: Node[];
  options?: Node[];
}
export interface DropSubscriptionStmt {
  subname?: string;
  missing_ok?: boolean;
  behavior?: DropBehavior;
}
export interface ScanToken {
  start?: number;
  end?: number;
  token?: Token;
  keywordKind?: KeywordKind;
}",
    "file": "types.ts",
  },
  {
    "code": "/**
* This file was automatically generated by pg-proto-parser@latest.
* DO NOT MODIFY IT BY HAND. Instead, modify the source proto file,
* and run the pg-proto-parser generate command to regenerate this file.
*/
import { OverridingKind, QuerySource, SortByDir, SortByNulls, SetQuantifier, A_Expr_Kind, RoleSpecType, TableLikeOption, DefElemAction, PartitionStrategy, PartitionRangeDatumKind, RTEKind, WCOKind, GroupingSetKind, CTEMaterialize, SetOperation, ObjectType, DropBehavior, AlterTableType, GrantTargetType, VariableSetKind, ConstrType, ImportForeignSchemaType, RoleStmtType, FetchDirection, FunctionParameterMode, TransactionStmtKind, ViewCheckOption, DiscardMode, ReindexObjectType, AlterTSConfigType, PublicationObjSpecType, AlterPublicationAction, AlterSubscriptionType, OnCommitAction, ParamKind, CoercionContext, CoercionForm, BoolExprType, SubLinkType, RowCompareType, MinMaxOp, SQLValueFunctionOp, XmlExprOp, XmlOptionType, JsonEncoding, JsonFormatType, JsonConstructorType, JsonValueType, NullTestType, BoolTestType, CmdType, JoinType, AggStrategy, AggSplit, SetOpCmd, SetOpStrategy, OnConflictAction, LimitOption, LockClauseStrength, LockWaitPolicy, LockTupleMode, KeywordKind, Token } from "./enums";
export type Node = ParseResult | ScanResult | Integer | Float | Boolean | String | BitString | List | OidList | IntList | A_Const | Alias | RangeVar | TableFunc | IntoClause | Var | Param | Aggref | GroupingFunc | WindowFunc | SubscriptingRef | FuncExpr | NamedArgExpr | OpExpr | DistinctExpr | NullIfExpr | ScalarArrayOpExpr | BoolExpr | SubLink | SubPlan | AlternativeSubPlan | FieldSelect | FieldStore | RelabelType | CoerceViaIO | ArrayCoerceExpr | ConvertRowtypeExpr | CollateExpr | CaseExpr | CaseWhen | CaseTestExpr | ArrayExpr | RowExpr | RowCompareExpr | CoalesceExpr | MinMaxExpr | SQLValueFunction | XmlExpr | JsonFormat | JsonReturning | JsonValueExpr | JsonConstructorExpr | JsonIsPredicate | NullTest | BooleanTest | CoerceToDomain | CoerceToDomainValue | SetToDefault | CurrentOfExpr | NextValueExpr | InferenceElem | TargetEntry | RangeTblRef | JoinExpr | FromExpr | OnConflictExpr | Query | TypeName | ColumnRef | ParamRef | A_Expr | TypeCast | CollateClause | RoleSpec | FuncCall | A_Star | A_Indices | A_Indirection | A_ArrayExpr | ResTarget | MultiAssignRef | SortBy | WindowDef | RangeSubselect | RangeFunction | RangeTableFunc | RangeTableFuncCol | RangeTableSample | ColumnDef | TableLikeClause | IndexElem | DefElem | LockingClause | XmlSerialize | PartitionElem | PartitionSpec | PartitionBoundSpec | PartitionRangeDatum | PartitionCmd | RangeTblEntry | RTEPermissionInfo | RangeTblFunction | TableSampleClause | WithCheckOption | SortGroupClause | GroupingSet | WindowClause | RowMarkClause | WithClause | InferClause | OnConflictClause | CTESearchClause | CTECycleClause | CommonTableExpr | MergeWhenClause | MergeAction | TriggerTransition | JsonOutput | JsonKeyValue | JsonObjectConstructor | JsonArrayConstructor | JsonArrayQueryConstructor | JsonAggConstructor | JsonObjectAgg | JsonArrayAgg | RawStmt | InsertStmt | DeleteStmt | UpdateStmt | MergeStmt | SelectStmt | SetOperationStmt | ReturnStmt | PLAssignStmt | CreateSchemaStmt | AlterTableStmt | ReplicaIdentityStmt | AlterTableCmd | AlterCollationStmt | AlterDomainStmt | GrantStmt | ObjectWithArgs | AccessPriv | GrantRoleStmt | AlterDefaultPrivilegesStmt | CopyStmt | VariableSetStmt | VariableShowStmt | CreateStmt | Constraint | CreateTableSpaceStmt | DropTableSpaceStmt | AlterTableSpaceOptionsStmt | AlterTableMoveAllStmt | CreateExtensionStmt | AlterExtensionStmt | AlterExtensionContentsStmt | CreateFdwStmt | AlterFdwStmt | CreateForeignServerStmt | AlterForeignServerStmt | CreateForeignTableStmt | CreateUserMappingStmt | AlterUserMappingStmt | DropUserMappingStmt | ImportForeignSchemaStmt | CreatePolicyStmt | AlterPolicyStmt | CreateAmStmt | CreateTrigStmt | CreateEventTrigStmt | AlterEventTrigStmt | CreatePLangStmt | CreateRoleStmt | AlterRoleStmt | AlterRoleSetStmt | DropRoleStmt | CreateSeqStmt | AlterSeqStmt | DefineStmt | CreateDomainStmt | CreateOpClassStmt | CreateOpClassItem | CreateOpFamilyStmt | AlterOpFamilyStmt | DropStmt | TruncateStmt | CommentStmt | SecLabelStmt | DeclareCursorStmt | ClosePortalStmt | FetchStmt | IndexStmt | CreateStatsStmt | StatsElem | AlterStatsStmt | CreateFunctionStmt | FunctionParameter | AlterFunctionStmt | DoStmt | InlineCodeBlock | CallStmt | CallContext | RenameStmt | AlterObjectDependsStmt | AlterObjectSchemaStmt | AlterOwnerStmt | AlterOperatorStmt | AlterTypeStmt | RuleStmt | NotifyStmt | ListenStmt | UnlistenStmt | TransactionStmt | CompositeTypeStmt | CreateEnumStmt | CreateRangeStmt | AlterEnumStmt | ViewStmt | LoadStmt | CreatedbStmt | AlterDatabaseStmt | AlterDatabaseRefreshCollStmt | AlterDatabaseSetStmt | DropdbStmt | AlterSystemStmt | ClusterStmt | VacuumStmt | VacuumRelation | ExplainStmt | CreateTableAsStmt | RefreshMatViewStmt | CheckPointStmt | DiscardStmt | LockStmt | ConstraintsSetStmt | ReindexStmt | CreateConversionStmt | CreateCastStmt | CreateTransformStmt | PrepareStmt | ExecuteStmt | DeallocateStmt | DropOwnedStmt | ReassignOwnedStmt | AlterTSDictionaryStmt | AlterTSConfigurationStmt | PublicationTable | PublicationObjSpec | CreatePublicationStmt | AlterPublicationStmt | CreateSubscriptionStmt | AlterSubscriptionStmt | DropSubscriptionStmt | ScanToken;
export interface ParseResult {
  ParseResult: {
    version?: number;
    stmts?: RawStmt[];
  };
}
export interface ScanResult {
  ScanResult: {
    version?: number;
    tokens?: ScanToken[];
  };
}
export interface Integer {
  ival?: number;
}
export interface Float {
  fval?: string;
}
export interface Boolean {
  boolval?: boolean;
}
export interface String {
  sval?: string;
}
export interface BitString {
  bsval?: string;
}
export interface List {
  items?: Node[];
}
export interface OidList {
  items?: Node[];
}
export interface IntList {
  items?: Node[];
}
export interface A_Const {
  ival?: Integer;
  fval?: Float;
  boolval?: Boolean;
  sval?: String;
  bsval?: BitString;
  isnull?: boolean;
  location?: number;
}
export interface Alias {
  aliasname?: string;
  colnames?: Node[];
}
export interface RangeVar {
  catalogname?: string;
  schemaname?: string;
  relname?: string;
  inh?: boolean;
  relpersistence?: string;
  alias?: Alias;
  location?: number;
}
export interface TableFunc {
  ns_uris?: Node[];
  ns_names?: Node[];
  docexpr?: Node;
  rowexpr?: Node;
  colnames?: Node[];
  coltypes?: Node[];
  coltypmods?: Node[];
  colcollations?: Node[];
  colexprs?: Node[];
  coldefexprs?: Node[];
  notnulls?: bigint[];
  ordinalitycol?: number;
  location?: number;
}
export interface IntoClause {
  rel?: RangeVar;
  colNames?: Node[];
  accessMethod?: string;
  options?: Node[];
  onCommit?: OnCommitAction;
  tableSpaceName?: string;
  viewQuery?: Node;
  skipData?: boolean;
}
export interface Var {
  xpr?: Node;
  varno?: number;
  varattno?: number;
  vartype?: number;
  vartypmod?: number;
  varcollid?: number;
  varnullingrels?: bigint[];
  varlevelsup?: number;
  location?: number;
}
export interface Param {
  xpr?: Node;
  paramkind?: ParamKind;
  paramid?: number;
  paramtype?: number;
  paramtypmod?: number;
  paramcollid?: number;
  location?: number;
}
export interface Aggref {
  xpr?: Node;
  aggfnoid?: number;
  aggtype?: number;
  aggcollid?: number;
  inputcollid?: number;
  aggargtypes?: Node[];
  aggdirectargs?: Node[];
  args?: Node[];
  aggorder?: Node[];
  aggdistinct?: Node[];
  aggfilter?: Node;
  aggstar?: boolean;
  aggvariadic?: boolean;
  aggkind?: string;
  agglevelsup?: number;
  aggsplit?: AggSplit;
  aggno?: number;
  aggtransno?: number;
  location?: number;
}
export interface GroupingFunc {
  xpr?: Node;
  args?: Node[];
  refs?: Node[];
  agglevelsup?: number;
  location?: number;
}
export interface WindowFunc {
  xpr?: Node;
  winfnoid?: number;
  wintype?: number;
  wincollid?: number;
  inputcollid?: number;
  args?: Node[];
  aggfilter?: Node;
  winref?: number;
  winstar?: boolean;
  winagg?: boolean;
  location?: number;
}
export interface SubscriptingRef {
  xpr?: Node;
  refcontainertype?: number;
  refelemtype?: number;
  refrestype?: number;
  reftypmod?: number;
  refcollid?: number;
  refupperindexpr?: Node[];
  reflowerindexpr?: Node[];
  refexpr?: Node;
  refassgnexpr?: Node;
}
export interface FuncExpr {
  xpr?: Node;
  funcid?: number;
  funcresulttype?: number;
  funcretset?: boolean;
  funcvariadic?: boolean;
  funcformat?: CoercionForm;
  funccollid?: number;
  inputcollid?: number;
  args?: Node[];
  location?: number;
}
export interface NamedArgExpr {
  xpr?: Node;
  arg?: Node;
  name?: string;
  argnumber?: number;
  location?: number;
}
export interface OpExpr {
  xpr?: Node;
  opno?: number;
  opresulttype?: number;
  opretset?: boolean;
  opcollid?: number;
  inputcollid?: number;
  args?: Node[];
  location?: number;
}
export interface DistinctExpr {
  xpr?: Node;
  opno?: number;
  opresulttype?: number;
  opretset?: boolean;
  opcollid?: number;
  inputcollid?: number;
  args?: Node[];
  location?: number;
}
export interface NullIfExpr {
  xpr?: Node;
  opno?: number;
  opresulttype?: number;
  opretset?: boolean;
  opcollid?: number;
  inputcollid?: number;
  args?: Node[];
  location?: number;
}
export interface ScalarArrayOpExpr {
  xpr?: Node;
  opno?: number;
  useOr?: boolean;
  inputcollid?: number;
  args?: Node[];
  location?: number;
}
export interface BoolExpr {
  xpr?: Node;
  boolop?: BoolExprType;
  args?: Node[];
  location?: number;
}
export interface SubLink {
  xpr?: Node;
  subLinkType?: SubLinkType;
  subLinkId?: number;
  testexpr?: Node;
  operName?: Node[];
  subselect?: Node;
  location?: number;
}
export interface SubPlan {
  xpr?: Node;
  subLinkType?: SubLinkType;
  testexpr?: Node;
  paramIds?: Node[];
  plan_id?: number;
  plan_name?: string;
  firstColType?: number;
  firstColTypmod?: number;
  firstColCollation?: number;
  useHashTable?: boolean;
  unknownEqFalse?: boolean;
  parallel_safe?: boolean;
  setParam?: Node[];
  parParam?: Node[];
  args?: Node[];
  startup_cost?: number;
  per_call_cost?: number;
}
export interface AlternativeSubPlan {
  xpr?: Node;
  subplans?: Node[];
}
export interface FieldSelect {
  xpr?: Node;
  arg?: Node;
  fieldnum?: number;
  resulttype?: number;
  resulttypmod?: number;
  resultcollid?: number;
}
export interface FieldStore {
  xpr?: Node;
  arg?: Node;
  newvals?: Node[];
  fieldnums?: Node[];
  resulttype?: number;
}
export interface RelabelType {
  xpr?: Node;
  arg?: Node;
  resulttype?: number;
  resulttypmod?: number;
  resultcollid?: number;
  relabelformat?: CoercionForm;
  location?: number;
}
export interface CoerceViaIO {
  xpr?: Node;
  arg?: Node;
  resulttype?: number;
  resultcollid?: number;
  coerceformat?: CoercionForm;
  location?: number;
}
export interface ArrayCoerceExpr {
  xpr?: Node;
  arg?: Node;
  elemexpr?: Node;
  resulttype?: number;
  resulttypmod?: number;
  resultcollid?: number;
  coerceformat?: CoercionForm;
  location?: number;
}
export interface ConvertRowtypeExpr {
  xpr?: Node;
  arg?: Node;
  resulttype?: number;
  convertformat?: CoercionForm;
  location?: number;
}
export interface CollateExpr {
  xpr?: Node;
  arg?: Node;
  collOid?: number;
  location?: number;
}
export interface CaseExpr {
  xpr?: Node;
  casetype?: number;
  casecollid?: number;
  arg?: Node;
  args?: Node[];
  defresult?: Node;
  location?: number;
}
export interface CaseWhen {
  xpr?: Node;
  expr?: Node;
  result?: Node;
  location?: number;
}
export interface CaseTestExpr {
  xpr?: Node;
  typeId?: number;
  typeMod?: number;
  collation?: number;
}
export interface ArrayExpr {
  xpr?: Node;
  array_typeid?: number;
  array_collid?: number;
  element_typeid?: number;
  elements?: Node[];
  multidims?: boolean;
  location?: number;
}
export interface RowExpr {
  xpr?: Node;
  args?: Node[];
  row_typeid?: number;
  row_format?: CoercionForm;
  colnames?: Node[];
  location?: number;
}
export interface RowCompareExpr {
  xpr?: Node;
  rctype?: RowCompareType;
  opnos?: Node[];
  opfamilies?: Node[];
  inputcollids?: Node[];
  largs?: Node[];
  rargs?: Node[];
}
export interface CoalesceExpr {
  xpr?: Node;
  coalescetype?: number;
  coalescecollid?: number;
  args?: Node[];
  location?: number;
}
export interface MinMaxExpr {
  xpr?: Node;
  minmaxtype?: number;
  minmaxcollid?: number;
  inputcollid?: number;
  op?: MinMaxOp;
  args?: Node[];
  location?: number;
}
export interface SQLValueFunction {
  xpr?: Node;
  op?: SQLValueFunctionOp;
  type?: number;
  typmod?: number;
  location?: number;
}
export interface XmlExpr {
  xpr?: Node;
  op?: XmlExprOp;
  name?: string;
  named_args?: Node[];
  arg_names?: Node[];
  args?: Node[];
  xmloption?: XmlOptionType;
  indent?: boolean;
  type?: number;
  typmod?: number;
  location?: number;
}
export interface JsonFormat {
  format_type?: JsonFormatType;
  encoding?: JsonEncoding;
  location?: number;
}
export interface JsonReturning {
  format?: JsonFormat;
  typid?: number;
  typmod?: number;
}
export interface JsonValueExpr {
  raw_expr?: Node;
  formatted_expr?: Node;
  format?: JsonFormat;
}
export interface JsonConstructorExpr {
  xpr?: Node;
  type?: JsonConstructorType;
  args?: Node[];
  func?: Node;
  coercion?: Node;
  returning?: JsonReturning;
  absent_on_null?: boolean;
  unique?: boolean;
  location?: number;
}
export interface JsonIsPredicate {
  expr?: Node;
  format?: JsonFormat;
  item_type?: JsonValueType;
  unique_keys?: boolean;
  location?: number;
}
export interface NullTest {
  xpr?: Node;
  arg?: Node;
  nulltesttype?: NullTestType;
  argisrow?: boolean;
  location?: number;
}
export interface BooleanTest {
  xpr?: Node;
  arg?: Node;
  booltesttype?: BoolTestType;
  location?: number;
}
export interface CoerceToDomain {
  xpr?: Node;
  arg?: Node;
  resulttype?: number;
  resulttypmod?: number;
  resultcollid?: number;
  coercionformat?: CoercionForm;
  location?: number;
}
export interface CoerceToDomainValue {
  xpr?: Node;
  typeId?: number;
  typeMod?: number;
  collation?: number;
  location?: number;
}
export interface SetToDefault {
  xpr?: Node;
  typeId?: number;
  typeMod?: number;
  collation?: number;
  location?: number;
}
export interface CurrentOfExpr {
  xpr?: Node;
  cvarno?: number;
  cursor_name?: string;
  cursor_param?: number;
}
export interface NextValueExpr {
  xpr?: Node;
  seqid?: number;
  typeId?: number;
}
export interface InferenceElem {
  xpr?: Node;
  expr?: Node;
  infercollid?: number;
  inferopclass?: number;
}
export interface TargetEntry {
  xpr?: Node;
  expr?: Node;
  resno?: number;
  resname?: string;
  ressortgroupref?: number;
  resorigtbl?: number;
  resorigcol?: number;
  resjunk?: boolean;
}
export interface RangeTblRef {
  rtindex?: number;
}
export interface JoinExpr {
  jointype?: JoinType;
  isNatural?: boolean;
  larg?: Node;
  rarg?: Node;
  usingClause?: Node[];
  join_using_alias?: Alias;
  quals?: Node;
  alias?: Alias;
  rtindex?: number;
}
export interface FromExpr {
  fromlist?: Node[];
  quals?: Node;
}
export interface OnConflictExpr {
  action?: OnConflictAction;
  arbiterElems?: Node[];
  arbiterWhere?: Node;
  constraint?: number;
  onConflictSet?: Node[];
  onConflictWhere?: Node;
  exclRelIndex?: number;
  exclRelTlist?: Node[];
}
export interface Query {
  commandType?: CmdType;
  querySource?: QuerySource;
  canSetTag?: boolean;
  utilityStmt?: Node;
  resultRelation?: number;
  hasAggs?: boolean;
  hasWindowFuncs?: boolean;
  hasTargetSRFs?: boolean;
  hasSubLinks?: boolean;
  hasDistinctOn?: boolean;
  hasRecursive?: boolean;
  hasModifyingCTE?: boolean;
  hasForUpdate?: boolean;
  hasRowSecurity?: boolean;
  isReturn?: boolean;
  cteList?: Node[];
  rtable?: Node[];
  rteperminfos?: Node[];
  jointree?: FromExpr;
  mergeActionList?: Node[];
  mergeUseOuterJoin?: boolean;
  targetList?: Node[];
  override?: OverridingKind;
  onConflict?: OnConflictExpr;
  returningList?: Node[];
  groupClause?: Node[];
  groupDistinct?: boolean;
  groupingSets?: Node[];
  havingQual?: Node;
  windowClause?: Node[];
  distinctClause?: Node[];
  sortClause?: Node[];
  limitOffset?: Node;
  limitCount?: Node;
  limitOption?: LimitOption;
  rowMarks?: Node[];
  setOperations?: Node;
  constraintDeps?: Node[];
  withCheckOptions?: Node[];
  stmt_location?: number;
  stmt_len?: number;
}
export interface TypeName {
  names?: Node[];
  typeOid?: number;
  setof?: boolean;
  pct_type?: boolean;
  typmods?: Node[];
  typemod?: number;
  arrayBounds?: Node[];
  location?: number;
}
export interface ColumnRef {
  fields?: Node[];
  location?: number;
}
export interface ParamRef {
  number?: number;
  location?: number;
}
export interface A_Expr {
  kind?: A_Expr_Kind;
  name?: Node[];
  lexpr?: Node;
  rexpr?: Node;
  location?: number;
}
export interface TypeCast {
  arg?: Node;
  typeName?: TypeName;
  location?: number;
}
export interface CollateClause {
  arg?: Node;
  collname?: Node[];
  location?: number;
}
export interface RoleSpec {
  roletype?: RoleSpecType;
  rolename?: string;
  location?: number;
}
export interface FuncCall {
  funcname?: Node[];
  args?: Node[];
  agg_order?: Node[];
  agg_filter?: Node;
  over?: WindowDef;
  agg_within_group?: boolean;
  agg_star?: boolean;
  agg_distinct?: boolean;
  func_variadic?: boolean;
  funcformat?: CoercionForm;
  location?: number;
}
export interface A_Star {}
export interface A_Indices {
  is_slice?: boolean;
  lidx?: Node;
  uidx?: Node;
}
export interface A_Indirection {
  arg?: Node;
  indirection?: Node[];
}
export interface A_ArrayExpr {
  elements?: Node[];
  location?: number;
}
export interface ResTarget {
  name?: string;
  indirection?: Node[];
  val?: Node;
  location?: number;
}
export interface MultiAssignRef {
  source?: Node;
  colno?: number;
  ncolumns?: number;
}
export interface SortBy {
  node?: Node;
  sortby_dir?: SortByDir;
  sortby_nulls?: SortByNulls;
  useOp?: Node[];
  location?: number;
}
export interface WindowDef {
  name?: string;
  refname?: string;
  partitionClause?: Node[];
  orderClause?: Node[];
  frameOptions?: number;
  startOffset?: Node;
  endOffset?: Node;
  location?: number;
}
export interface RangeSubselect {
  lateral?: boolean;
  subquery?: Node;
  alias?: Alias;
}
export interface RangeFunction {
  lateral?: boolean;
  ordinality?: boolean;
  is_rowsfrom?: boolean;
  functions?: Node[];
  alias?: Alias;
  coldeflist?: Node[];
}
export interface RangeTableFunc {
  lateral?: boolean;
  docexpr?: Node;
  rowexpr?: Node;
  namespaces?: Node[];
  columns?: Node[];
  alias?: Alias;
  location?: number;
}
export interface RangeTableFuncCol {
  colname?: string;
  typeName?: TypeName;
  for_ordinality?: boolean;
  is_not_null?: boolean;
  colexpr?: Node;
  coldefexpr?: Node;
  location?: number;
}
export interface RangeTableSample {
  relation?: Node;
  method?: Node[];
  args?: Node[];
  repeatable?: Node;
  location?: number;
}
export interface ColumnDef {
  colname?: string;
  typeName?: TypeName;
  compression?: string;
  inhcount?: number;
  is_local?: boolean;
  is_not_null?: boolean;
  is_from_type?: boolean;
  storage?: string;
  storage_name?: string;
  raw_default?: Node;
  cooked_default?: Node;
  identity?: string;
  identitySequence?: RangeVar;
  generated?: string;
  collClause?: CollateClause;
  collOid?: number;
  constraints?: Node[];
  fdwoptions?: Node[];
  location?: number;
}
export interface TableLikeClause {
  relation?: RangeVar;
  options?: number;
  relationOid?: number;
}
export interface IndexElem {
  name?: string;
  expr?: Node;
  indexcolname?: string;
  collation?: Node[];
  opclass?: Node[];
  opclassopts?: Node[];
  ordering?: SortByDir;
  nulls_ordering?: SortByNulls;
}
export interface DefElem {
  defnamespace?: string;
  defname?: string;
  arg?: Node;
  defaction?: DefElemAction;
  location?: number;
}
export interface LockingClause {
  lockedRels?: Node[];
  strength?: LockClauseStrength;
  waitPolicy?: LockWaitPolicy;
}
export interface XmlSerialize {
  xmloption?: XmlOptionType;
  expr?: Node;
  typeName?: TypeName;
  indent?: boolean;
  location?: number;
}
export interface PartitionElem {
  name?: string;
  expr?: Node;
  collation?: Node[];
  opclass?: Node[];
  location?: number;
}
export interface PartitionSpec {
  strategy?: PartitionStrategy;
  partParams?: Node[];
  location?: number;
}
export interface PartitionBoundSpec {
  strategy?: string;
  is_default?: boolean;
  modulus?: number;
  remainder?: number;
  listdatums?: Node[];
  lowerdatums?: Node[];
  upperdatums?: Node[];
  location?: number;
}
export interface PartitionRangeDatum {
  kind?: PartitionRangeDatumKind;
  value?: Node;
  location?: number;
}
export interface PartitionCmd {
  name?: RangeVar;
  bound?: PartitionBoundSpec;
  concurrent?: boolean;
}
export interface RangeTblEntry {
  rtekind?: RTEKind;
  relid?: number;
  relkind?: string;
  rellockmode?: number;
  tablesample?: TableSampleClause;
  perminfoindex?: number;
  subquery?: Query;
  security_barrier?: boolean;
  jointype?: JoinType;
  joinmergedcols?: number;
  joinaliasvars?: Node[];
  joinleftcols?: Node[];
  joinrightcols?: Node[];
  join_using_alias?: Alias;
  functions?: Node[];
  funcordinality?: boolean;
  tablefunc?: TableFunc;
  values_lists?: Node[];
  ctename?: string;
  ctelevelsup?: number;
  self_reference?: boolean;
  coltypes?: Node[];
  coltypmods?: Node[];
  colcollations?: Node[];
  enrname?: string;
  enrtuples?: number;
  alias?: Alias;
  eref?: Alias;
  lateral?: boolean;
  inh?: boolean;
  inFromCl?: boolean;
  securityQuals?: Node[];
}
export interface RTEPermissionInfo {
  relid?: number;
  inh?: boolean;
  requiredPerms?: bigint;
  checkAsUser?: number;
  selectedCols?: bigint[];
  insertedCols?: bigint[];
  updatedCols?: bigint[];
}
export interface RangeTblFunction {
  funcexpr?: Node;
  funccolcount?: number;
  funccolnames?: Node[];
  funccoltypes?: Node[];
  funccoltypmods?: Node[];
  funccolcollations?: Node[];
  funcparams?: bigint[];
}
export interface TableSampleClause {
  tsmhandler?: number;
  args?: Node[];
  repeatable?: Node;
}
export interface WithCheckOption {
  kind?: WCOKind;
  relname?: string;
  polname?: string;
  qual?: Node;
  cascaded?: boolean;
}
export interface SortGroupClause {
  tleSortGroupRef?: number;
  eqop?: number;
  sortop?: number;
  nulls_first?: boolean;
  hashable?: boolean;
}
export interface GroupingSet {
  kind?: GroupingSetKind;
  content?: Node[];
  location?: number;
}
export interface WindowClause {
  name?: string;
  refname?: string;
  partitionClause?: Node[];
  orderClause?: Node[];
  frameOptions?: number;
  startOffset?: Node;
  endOffset?: Node;
  runCondition?: Node[];
  startInRangeFunc?: number;
  endInRangeFunc?: number;
  inRangeColl?: number;
  inRangeAsc?: boolean;
  inRangeNullsFirst?: boolean;
  winref?: number;
  copiedOrder?: boolean;
}
export interface RowMarkClause {
  rti?: number;
  strength?: LockClauseStrength;
  waitPolicy?: LockWaitPolicy;
  pushedDown?: boolean;
}
export interface WithClause {
  ctes?: Node[];
  recursive?: boolean;
  location?: number;
}
export interface InferClause {
  indexElems?: Node[];
  whereClause?: Node;
  conname?: string;
  location?: number;
}
export interface OnConflictClause {
  action?: OnConflictAction;
  infer?: InferClause;
  targetList?: Node[];
  whereClause?: Node;
  location?: number;
}
export interface CTESearchClause {
  search_col_list?: Node[];
  search_breadth_first?: boolean;
  search_seq_column?: string;
  location?: number;
}
export interface CTECycleClause {
  cycle_col_list?: Node[];
  cycle_mark_column?: string;
  cycle_mark_value?: Node;
  cycle_mark_default?: Node;
  cycle_path_column?: string;
  location?: number;
  cycle_mark_type?: number;
  cycle_mark_typmod?: number;
  cycle_mark_collation?: number;
  cycle_mark_neop?: number;
}
export interface CommonTableExpr {
  ctename?: string;
  aliascolnames?: Node[];
  ctematerialized?: CTEMaterialize;
  ctequery?: Node;
  search_clause?: CTESearchClause;
  cycle_clause?: CTECycleClause;
  location?: number;
  cterecursive?: boolean;
  cterefcount?: number;
  ctecolnames?: Node[];
  ctecoltypes?: Node[];
  ctecoltypmods?: Node[];
  ctecolcollations?: Node[];
}
export interface MergeWhenClause {
  matched?: boolean;
  commandType?: CmdType;
  override?: OverridingKind;
  condition?: Node;
  targetList?: Node[];
  values?: Node[];
}
export interface MergeAction {
  matched?: boolean;
  commandType?: CmdType;
  override?: OverridingKind;
  qual?: Node;
  targetList?: Node[];
  updateColnos?: Node[];
}
export interface TriggerTransition {
  name?: string;
  isNew?: boolean;
  isTable?: boolean;
}
export interface JsonOutput {
  typeName?: TypeName;
  returning?: JsonReturning;
}
export interface JsonKeyValue {
  key?: Node;
  value?: JsonValueExpr;
}
export interface JsonObjectConstructor {
  exprs?: Node[];
  output?: JsonOutput;
  absent_on_null?: boolean;
  unique?: boolean;
  location?: number;
}
export interface JsonArrayConstructor {
  exprs?: Node[];
  output?: JsonOutput;
  absent_on_null?: boolean;
  location?: number;
}
export interface JsonArrayQueryConstructor {
  query?: Node;
  output?: JsonOutput;
  format?: JsonFormat;
  absent_on_null?: boolean;
  location?: number;
}
export interface JsonAggConstructor {
  output?: JsonOutput;
  agg_filter?: Node;
  agg_order?: Node[];
  over?: WindowDef;
  location?: number;
}
export interface JsonObjectAgg {
  constructor?: JsonAggConstructor;
  arg?: JsonKeyValue;
  absent_on_null?: boolean;
  unique?: boolean;
}
export interface JsonArrayAgg {
  constructor?: JsonAggConstructor;
  arg?: JsonValueExpr;
  absent_on_null?: boolean;
}
export interface RawStmt {
  stmt?: Node;
  stmt_location?: number;
  stmt_len?: number;
}
export interface InsertStmt {
  relation?: RangeVar;
  cols?: Node[];
  selectStmt?: Node;
  onConflictClause?: OnConflictClause;
  returningList?: Node[];
  withClause?: WithClause;
  override?: OverridingKind;
}
export interface DeleteStmt {
  relation?: RangeVar;
  usingClause?: Node[];
  whereClause?: Node;
  returningList?: Node[];
  withClause?: WithClause;
}
export interface UpdateStmt {
  relation?: RangeVar;
  targetList?: Node[];
  whereClause?: Node;
  fromClause?: Node[];
  returningList?: Node[];
  withClause?: WithClause;
}
export interface MergeStmt {
  relation?: RangeVar;
  sourceRelation?: Node;
  joinCondition?: Node;
  mergeWhenClauses?: Node[];
  withClause?: WithClause;
}
export interface SelectStmt {
  distinctClause?: Node[];
  intoClause?: IntoClause;
  targetList?: Node[];
  fromClause?: Node[];
  whereClause?: Node;
  groupClause?: Node[];
  groupDistinct?: boolean;
  havingClause?: Node;
  windowClause?: Node[];
  valuesLists?: Node[];
  sortClause?: Node[];
  limitOffset?: Node;
  limitCount?: Node;
  limitOption?: LimitOption;
  lockingClause?: Node[];
  withClause?: WithClause;
  op?: SetOperation;
  all?: boolean;
  larg?: SelectStmt;
  rarg?: SelectStmt;
}
export interface SetOperationStmt {
  op?: SetOperation;
  all?: boolean;
  larg?: Node;
  rarg?: Node;
  colTypes?: Node[];
  colTypmods?: Node[];
  colCollations?: Node[];
  groupClauses?: Node[];
}
export interface ReturnStmt {
  returnval?: Node;
}
export interface PLAssignStmt {
  name?: string;
  indirection?: Node[];
  nnames?: number;
  val?: SelectStmt;
  location?: number;
}
export interface CreateSchemaStmt {
  schemaname?: string;
  authrole?: RoleSpec;
  schemaElts?: Node[];
  if_not_exists?: boolean;
}
export interface AlterTableStmt {
  relation?: RangeVar;
  cmds?: Node[];
  objtype?: ObjectType;
  missing_ok?: boolean;
}
export interface ReplicaIdentityStmt {
  identity_type?: string;
  name?: string;
}
export interface AlterTableCmd {
  subtype?: AlterTableType;
  name?: string;
  num?: number;
  newowner?: RoleSpec;
  def?: Node;
  behavior?: DropBehavior;
  missing_ok?: boolean;
  recurse?: boolean;
}
export interface AlterCollationStmt {
  collname?: Node[];
}
export interface AlterDomainStmt {
  subtype?: string;
  typeName?: Node[];
  name?: string;
  def?: Node;
  behavior?: DropBehavior;
  missing_ok?: boolean;
}
export interface GrantStmt {
  is_grant?: boolean;
  targtype?: GrantTargetType;
  objtype?: ObjectType;
  objects?: Node[];
  privileges?: Node[];
  grantees?: Node[];
  grant_option?: boolean;
  grantor?: RoleSpec;
  behavior?: DropBehavior;
}
export interface ObjectWithArgs {
  objname?: Node[];
  objargs?: Node[];
  objfuncargs?: Node[];
  args_unspecified?: boolean;
}
export interface AccessPriv {
  priv_name?: string;
  cols?: Node[];
}
export interface GrantRoleStmt {
  granted_roles?: Node[];
  grantee_roles?: Node[];
  is_grant?: boolean;
  opt?: Node[];
  grantor?: RoleSpec;
  behavior?: DropBehavior;
}
export interface AlterDefaultPrivilegesStmt {
  options?: Node[];
  action?: GrantStmt;
}
export interface CopyStmt {
  relation?: RangeVar;
  query?: Node;
  attlist?: Node[];
  is_from?: boolean;
  is_program?: boolean;
  filename?: string;
  options?: Node[];
  whereClause?: Node;
}
export interface VariableSetStmt {
  kind?: VariableSetKind;
  name?: string;
  args?: Node[];
  is_local?: boolean;
}
export interface VariableShowStmt {
  name?: string;
}
export interface CreateStmt {
  relation?: RangeVar;
  tableElts?: Node[];
  inhRelations?: Node[];
  partbound?: PartitionBoundSpec;
  partspec?: PartitionSpec;
  ofTypename?: TypeName;
  constraints?: Node[];
  options?: Node[];
  oncommit?: OnCommitAction;
  tablespacename?: string;
  accessMethod?: string;
  if_not_exists?: boolean;
}
export interface Constraint {
  contype?: ConstrType;
  conname?: string;
  deferrable?: boolean;
  initdeferred?: boolean;
  location?: number;
  is_no_inherit?: boolean;
  raw_expr?: Node;
  cooked_expr?: string;
  generated_when?: string;
  nulls_not_distinct?: boolean;
  keys?: Node[];
  including?: Node[];
  exclusions?: Node[];
  options?: Node[];
  indexname?: string;
  indexspace?: string;
  reset_default_tblspc?: boolean;
  access_method?: string;
  where_clause?: Node;
  pktable?: RangeVar;
  fk_attrs?: Node[];
  pk_attrs?: Node[];
  fk_matchtype?: string;
  fk_upd_action?: string;
  fk_del_action?: string;
  fk_del_set_cols?: Node[];
  old_conpfeqop?: Node[];
  old_pktable_oid?: number;
  skip_validation?: boolean;
  initially_valid?: boolean;
}
export interface CreateTableSpaceStmt {
  tablespacename?: string;
  owner?: RoleSpec;
  location?: string;
  options?: Node[];
}
export interface DropTableSpaceStmt {
  tablespacename?: string;
  missing_ok?: boolean;
}
export interface AlterTableSpaceOptionsStmt {
  tablespacename?: string;
  options?: Node[];
  isReset?: boolean;
}
export interface AlterTableMoveAllStmt {
  orig_tablespacename?: string;
  objtype?: ObjectType;
  roles?: Node[];
  new_tablespacename?: string;
  nowait?: boolean;
}
export interface CreateExtensionStmt {
  extname?: string;
  if_not_exists?: boolean;
  options?: Node[];
}
export interface AlterExtensionStmt {
  extname?: string;
  options?: Node[];
}
export interface AlterExtensionContentsStmt {
  extname?: string;
  action?: number;
  objtype?: ObjectType;
  object?: Node;
}
export interface CreateFdwStmt {
  fdwname?: string;
  func_options?: Node[];
  options?: Node[];
}
export interface AlterFdwStmt {
  fdwname?: string;
  func_options?: Node[];
  options?: Node[];
}
export interface CreateForeignServerStmt {
  servername?: string;
  servertype?: string;
  version?: string;
  fdwname?: string;
  if_not_exists?: boolean;
  options?: Node[];
}
export interface AlterForeignServerStmt {
  servername?: string;
  version?: string;
  options?: Node[];
  has_version?: boolean;
}
export interface CreateForeignTableStmt {
  base?: CreateStmt;
  servername?: string;
  options?: Node[];
}
export interface CreateUserMappingStmt {
  user?: RoleSpec;
  servername?: string;
  if_not_exists?: boolean;
  options?: Node[];
}
export interface AlterUserMappingStmt {
  user?: RoleSpec;
  servername?: string;
  options?: Node[];
}
export interface DropUserMappingStmt {
  user?: RoleSpec;
  servername?: string;
  missing_ok?: boolean;
}
export interface ImportForeignSchemaStmt {
  server_name?: string;
  remote_schema?: string;
  local_schema?: string;
  list_type?: ImportForeignSchemaType;
  table_list?: Node[];
  options?: Node[];
}
export interface CreatePolicyStmt {
  policy_name?: string;
  table?: RangeVar;
  cmd_name?: string;
  permissive?: boolean;
  roles?: Node[];
  qual?: Node;
  with_check?: Node;
}
export interface AlterPolicyStmt {
  policy_name?: string;
  table?: RangeVar;
  roles?: Node[];
  qual?: Node;
  with_check?: Node;
}
export interface CreateAmStmt {
  amname?: string;
  handler_name?: Node[];
  amtype?: string;
}
export interface CreateTrigStmt {
  replace?: boolean;
  isconstraint?: boolean;
  trigname?: string;
  relation?: RangeVar;
  funcname?: Node[];
  args?: Node[];
  row?: boolean;
  timing?: number;
  events?: number;
  columns?: Node[];
  whenClause?: Node;
  transitionRels?: Node[];
  deferrable?: boolean;
  initdeferred?: boolean;
  constrrel?: RangeVar;
}
export interface CreateEventTrigStmt {
  trigname?: string;
  eventname?: string;
  whenclause?: Node[];
  funcname?: Node[];
}
export interface AlterEventTrigStmt {
  trigname?: string;
  tgenabled?: string;
}
export interface CreatePLangStmt {
  replace?: boolean;
  plname?: string;
  plhandler?: Node[];
  plinline?: Node[];
  plvalidator?: Node[];
  pltrusted?: boolean;
}
export interface CreateRoleStmt {
  stmt_type?: RoleStmtType;
  role?: string;
  options?: Node[];
}
export interface AlterRoleStmt {
  role?: RoleSpec;
  options?: Node[];
  action?: number;
}
export interface AlterRoleSetStmt {
  role?: RoleSpec;
  database?: string;
  setstmt?: VariableSetStmt;
}
export interface DropRoleStmt {
  roles?: Node[];
  missing_ok?: boolean;
}
export interface CreateSeqStmt {
  sequence?: RangeVar;
  options?: Node[];
  ownerId?: number;
  for_identity?: boolean;
  if_not_exists?: boolean;
}
export interface AlterSeqStmt {
  sequence?: RangeVar;
  options?: Node[];
  for_identity?: boolean;
  missing_ok?: boolean;
}
export interface DefineStmt {
  kind?: ObjectType;
  oldstyle?: boolean;
  defnames?: Node[];
  args?: Node[];
  definition?: Node[];
  if_not_exists?: boolean;
  replace?: boolean;
}
export interface CreateDomainStmt {
  domainname?: Node[];
  typeName?: TypeName;
  collClause?: CollateClause;
  constraints?: Node[];
}
export interface CreateOpClassStmt {
  opclassname?: Node[];
  opfamilyname?: Node[];
  amname?: string;
  datatype?: TypeName;
  items?: Node[];
  isDefault?: boolean;
}
export interface CreateOpClassItem {
  itemtype?: number;
  name?: ObjectWithArgs;
  number?: number;
  order_family?: Node[];
  class_args?: Node[];
  storedtype?: TypeName;
}
export interface CreateOpFamilyStmt {
  opfamilyname?: Node[];
  amname?: string;
}
export interface AlterOpFamilyStmt {
  opfamilyname?: Node[];
  amname?: string;
  isDrop?: boolean;
  items?: Node[];
}
export interface DropStmt {
  objects?: Node[];
  removeType?: ObjectType;
  behavior?: DropBehavior;
  missing_ok?: boolean;
  concurrent?: boolean;
}
export interface TruncateStmt {
  relations?: Node[];
  restart_seqs?: boolean;
  behavior?: DropBehavior;
}
export interface CommentStmt {
  objtype?: ObjectType;
  object?: Node;
  comment?: string;
}
export interface SecLabelStmt {
  objtype?: ObjectType;
  object?: Node;
  provider?: string;
  label?: string;
}
export interface DeclareCursorStmt {
  portalname?: string;
  options?: number;
  query?: Node;
}
export interface ClosePortalStmt {
  portalname?: string;
}
export interface FetchStmt {
  direction?: FetchDirection;
  howMany?: bigint;
  portalname?: string;
  ismove?: boolean;
}
export interface IndexStmt {
  idxname?: string;
  relation?: RangeVar;
  accessMethod?: string;
  tableSpace?: string;
  indexParams?: Node[];
  indexIncludingParams?: Node[];
  options?: Node[];
  whereClause?: Node;
  excludeOpNames?: Node[];
  idxcomment?: string;
  indexOid?: number;
  oldNumber?: number;
  oldCreateSubid?: number;
  oldFirstRelfilelocatorSubid?: number;
  unique?: boolean;
  nulls_not_distinct?: boolean;
  primary?: boolean;
  isconstraint?: boolean;
  deferrable?: boolean;
  initdeferred?: boolean;
  transformed?: boolean;
  concurrent?: boolean;
  if_not_exists?: boolean;
  reset_default_tblspc?: boolean;
}
export interface CreateStatsStmt {
  defnames?: Node[];
  stat_types?: Node[];
  exprs?: Node[];
  relations?: Node[];
  stxcomment?: string;
  transformed?: boolean;
  if_not_exists?: boolean;
}
export interface StatsElem {
  name?: string;
  expr?: Node;
}
export interface AlterStatsStmt {
  defnames?: Node[];
  stxstattarget?: number;
  missing_ok?: boolean;
}
export interface CreateFunctionStmt {
  is_procedure?: boolean;
  replace?: boolean;
  funcname?: Node[];
  parameters?: Node[];
  returnType?: TypeName;
  options?: Node[];
  sql_body?: Node;
}
export interface FunctionParameter {
  name?: string;
  argType?: TypeName;
  mode?: FunctionParameterMode;
  defexpr?: Node;
}
export interface AlterFunctionStmt {
  objtype?: ObjectType;
  func?: ObjectWithArgs;
  actions?: Node[];
}
export interface DoStmt {
  args?: Node[];
}
export interface InlineCodeBlock {
  source_text?: string;
  langOid?: number;
  langIsTrusted?: boolean;
  atomic?: boolean;
}
export interface CallStmt {
  funccall?: FuncCall;
  funcexpr?: FuncExpr;
  outargs?: Node[];
}
export interface CallContext {
  atomic?: boolean;
}
export interface RenameStmt {
  renameType?: ObjectType;
  relationType?: ObjectType;
  relation?: RangeVar;
  object?: Node;
  subname?: string;
  newname?: string;
  behavior?: DropBehavior;
  missing_ok?: boolean;
}
export interface AlterObjectDependsStmt {
  objectType?: ObjectType;
  relation?: RangeVar;
  object?: Node;
  extname?: String;
  remove?: boolean;
}
export interface AlterObjectSchemaStmt {
  objectType?: ObjectType;
  relation?: RangeVar;
  object?: Node;
  newschema?: string;
  missing_ok?: boolean;
}
export interface AlterOwnerStmt {
  objectType?: ObjectType;
  relation?: RangeVar;
  object?: Node;
  newowner?: RoleSpec;
}
export interface AlterOperatorStmt {
  opername?: ObjectWithArgs;
  options?: Node[];
}
export interface AlterTypeStmt {
  typeName?: Node[];
  options?: Node[];
}
export interface RuleStmt {
  relation?: RangeVar;
  rulename?: string;
  whereClause?: Node;
  event?: CmdType;
  instead?: boolean;
  actions?: Node[];
  replace?: boolean;
}
export interface NotifyStmt {
  conditionname?: string;
  payload?: string;
}
export interface ListenStmt {
  conditionname?: string;
}
export interface UnlistenStmt {
  conditionname?: string;
}
export interface TransactionStmt {
  kind?: TransactionStmtKind;
  options?: Node[];
  savepoint_name?: string;
  gid?: string;
  chain?: boolean;
}
export interface CompositeTypeStmt {
  typevar?: RangeVar;
  coldeflist?: Node[];
}
export interface CreateEnumStmt {
  typeName?: Node[];
  vals?: Node[];
}
export interface CreateRangeStmt {
  typeName?: Node[];
  params?: Node[];
}
export interface AlterEnumStmt {
  typeName?: Node[];
  oldVal?: string;
  newVal?: string;
  newValNeighbor?: string;
  newValIsAfter?: boolean;
  skipIfNewValExists?: boolean;
}
export interface ViewStmt {
  view?: RangeVar;
  aliases?: Node[];
  query?: Node;
  replace?: boolean;
  options?: Node[];
  withCheckOption?: ViewCheckOption;
}
export interface LoadStmt {
  filename?: string;
}
export interface CreatedbStmt {
  dbname?: string;
  options?: Node[];
}
export interface AlterDatabaseStmt {
  dbname?: string;
  options?: Node[];
}
export interface AlterDatabaseRefreshCollStmt {
  dbname?: string;
}
export interface AlterDatabaseSetStmt {
  dbname?: string;
  setstmt?: VariableSetStmt;
}
export interface DropdbStmt {
  dbname?: string;
  missing_ok?: boolean;
  options?: Node[];
}
export interface AlterSystemStmt {
  setstmt?: VariableSetStmt;
}
export interface ClusterStmt {
  relation?: RangeVar;
  indexname?: string;
  params?: Node[];
}
export interface VacuumStmt {
  options?: Node[];
  rels?: Node[];
  is_vacuumcmd?: boolean;
}
export interface VacuumRelation {
  relation?: RangeVar;
  oid?: number;
  va_cols?: Node[];
}
export interface ExplainStmt {
  query?: Node;
  options?: Node[];
}
export interface CreateTableAsStmt {
  query?: Node;
  into?: IntoClause;
  objtype?: ObjectType;
  is_select_into?: boolean;
  if_not_exists?: boolean;
}
export interface RefreshMatViewStmt {
  concurrent?: boolean;
  skipData?: boolean;
  relation?: RangeVar;
}
export interface CheckPointStmt {}
export interface DiscardStmt {
  target?: DiscardMode;
}
export interface LockStmt {
  relations?: Node[];
  mode?: number;
  nowait?: boolean;
}
export interface ConstraintsSetStmt {
  constraints?: Node[];
  deferred?: boolean;
}
export interface ReindexStmt {
  kind?: ReindexObjectType;
  relation?: RangeVar;
  name?: string;
  params?: Node[];
}
export interface CreateConversionStmt {
  conversion_name?: Node[];
  for_encoding_name?: string;
  to_encoding_name?: string;
  func_name?: Node[];
  def?: boolean;
}
export interface CreateCastStmt {
  sourcetype?: TypeName;
  targettype?: TypeName;
  func?: ObjectWithArgs;
  context?: CoercionContext;
  inout?: boolean;
}
export interface CreateTransformStmt {
  replace?: boolean;
  type_name?: TypeName;
  lang?: string;
  fromsql?: ObjectWithArgs;
  tosql?: ObjectWithArgs;
}
export interface PrepareStmt {
  name?: string;
  argtypes?: Node[];
  query?: Node;
}
export interface ExecuteStmt {
  name?: string;
  params?: Node[];
}
export interface DeallocateStmt {
  name?: string;
}
export interface DropOwnedStmt {
  roles?: Node[];
  behavior?: DropBehavior;
}
export interface ReassignOwnedStmt {
  roles?: Node[];
  newrole?: RoleSpec;
}
export interface AlterTSDictionaryStmt {
  dictname?: Node[];
  options?: Node[];
}
export interface AlterTSConfigurationStmt {
  kind?: AlterTSConfigType;
  cfgname?: Node[];
  tokentype?: Node[];
  dicts?: Node[];
  override?: boolean;
  replace?: boolean;
  missing_ok?: boolean;
}
export interface PublicationTable {
  relation?: RangeVar;
  whereClause?: Node;
  columns?: Node[];
}
export interface PublicationObjSpec {
  pubobjtype?: PublicationObjSpecType;
  name?: string;
  pubtable?: PublicationTable;
  location?: number;
}
export interface CreatePublicationStmt {
  pubname?: string;
  options?: Node[];
  pubobjects?: Node[];
  for_all_tables?: boolean;
}
export interface AlterPublicationStmt {
  pubname?: string;
  options?: Node[];
  pubobjects?: Node[];
  for_all_tables?: boolean;
  action?: AlterPublicationAction;
}
export interface CreateSubscriptionStmt {
  subname?: string;
  conninfo?: string;
  publication?: Node[];
  options?: Node[];
}
export interface AlterSubscriptionStmt {
  kind?: AlterSubscriptionType;
  subname?: string;
  conninfo?: string;
  publication?: Node[];
  options?: Node[];
}
export interface DropSubscriptionStmt {
  subname?: string;
  missing_ok?: boolean;
  behavior?: DropBehavior;
}
export interface ScanToken {
  ScanToken: {
    start?: number;
    end?: number;
    token?: Token;
    keywordKind?: KeywordKind;
  };
}",
    "file": "wrapped.ts",
  },
]
`;

exports[`runtime-schema runtime schema with latest proto 1`] = `
[
  {
    "code": "[
  {
    "name": "A_ArrayExpr",
    "wrapped": true,
    "fields": [
      {
        "name": "elements",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "A_Const",
    "wrapped": true,
    "fields": [
      {
        "name": "boolval",
        "type": "Boolean",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "bsval",
        "type": "BitString",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "fval",
        "type": "Float",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "isnull",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "ival",
        "type": "Integer",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "sval",
        "type": "String",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "A_Expr",
    "wrapped": true,
    "fields": [
      {
        "name": "kind",
        "type": "A_Expr_Kind",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "lexpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "name",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "rexpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "A_Indices",
    "wrapped": true,
    "fields": [
      {
        "name": "is_slice",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "lidx",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "uidx",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "A_Indirection",
    "wrapped": true,
    "fields": [
      {
        "name": "arg",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "indirection",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "A_Star",
    "wrapped": true,
    "fields": []
  },
  {
    "name": "AccessPriv",
    "wrapped": true,
    "fields": [
      {
        "name": "cols",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "priv_name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "Aggref",
    "wrapped": true,
    "fields": [
      {
        "name": "aggargtypes",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "aggcollid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "aggdirectargs",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "aggdistinct",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "aggfilter",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "aggfnoid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "aggkind",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "agglevelsup",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "aggno",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "aggorder",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "aggsplit",
        "type": "AggSplit",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "aggstar",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "aggtransno",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "aggtype",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "aggvariadic",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "args",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "inputcollid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "Alias",
    "wrapped": true,
    "fields": [
      {
        "name": "aliasname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "colnames",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterCollationStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "collname",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterDatabaseRefreshCollStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "dbname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterDatabaseSetStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "dbname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "setstmt",
        "type": "VariableSetStmt",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterDatabaseStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "dbname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterDefaultPrivilegesStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "action",
        "type": "GrantStmt",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterDomainStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "behavior",
        "type": "DropBehavior",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "def",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "missing_ok",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "subtype",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "typeName",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterEnumStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "newVal",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "newValIsAfter",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "newValNeighbor",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "oldVal",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "skipIfNewValExists",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "typeName",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterEventTrigStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "tgenabled",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "trigname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterExtensionContentsStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "action",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "extname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "object",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "objtype",
        "type": "ObjectType",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterExtensionStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "extname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterFdwStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "fdwname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "func_options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterForeignServerStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "has_version",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "servername",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "version",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterFunctionStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "actions",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "func",
        "type": "ObjectWithArgs",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "objtype",
        "type": "ObjectType",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "AlternativeSubPlan",
    "wrapped": true,
    "fields": [
      {
        "name": "subplans",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterObjectDependsStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "extname",
        "type": "String",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "object",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "objectType",
        "type": "ObjectType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "relation",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "remove",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterObjectSchemaStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "missing_ok",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "newschema",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "object",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "objectType",
        "type": "ObjectType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "relation",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterOperatorStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "opername",
        "type": "ObjectWithArgs",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterOpFamilyStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "amname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "isDrop",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "items",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "opfamilyname",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterOwnerStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "newowner",
        "type": "RoleSpec",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "object",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "objectType",
        "type": "ObjectType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "relation",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterPolicyStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "policy_name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "qual",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "roles",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "table",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "with_check",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterPublicationStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "action",
        "type": "AlterPublicationAction",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "for_all_tables",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "pubname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "pubobjects",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterRoleSetStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "database",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "role",
        "type": "RoleSpec",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "setstmt",
        "type": "VariableSetStmt",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterRoleStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "action",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "role",
        "type": "RoleSpec",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterSeqStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "for_identity",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "missing_ok",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "sequence",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterStatsStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "defnames",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "missing_ok",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "stxstattarget",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterSubscriptionStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "conninfo",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "kind",
        "type": "AlterSubscriptionType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "publication",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "subname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterSystemStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "setstmt",
        "type": "VariableSetStmt",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterTableCmd",
    "wrapped": true,
    "fields": [
      {
        "name": "behavior",
        "type": "DropBehavior",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "def",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "missing_ok",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "newowner",
        "type": "RoleSpec",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "num",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "recurse",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "subtype",
        "type": "AlterTableType",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterTableMoveAllStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "new_tablespacename",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "nowait",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "objtype",
        "type": "ObjectType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "orig_tablespacename",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "roles",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterTableSpaceOptionsStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "isReset",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "tablespacename",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterTableStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "cmds",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "missing_ok",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "objtype",
        "type": "ObjectType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "relation",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterTSConfigurationStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "cfgname",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "dicts",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "kind",
        "type": "AlterTSConfigType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "missing_ok",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "override",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "replace",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "tokentype",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterTSDictionaryStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "dictname",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterTypeStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "typeName",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "AlterUserMappingStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "servername",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "user",
        "type": "RoleSpec",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "ArrayCoerceExpr",
    "wrapped": true,
    "fields": [
      {
        "name": "arg",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "coerceformat",
        "type": "CoercionForm",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "elemexpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "resultcollid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "resulttype",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "resulttypmod",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "ArrayExpr",
    "wrapped": true,
    "fields": [
      {
        "name": "array_collid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "array_typeid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "element_typeid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "elements",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "multidims",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "BitString",
    "wrapped": true,
    "fields": [
      {
        "name": "bsval",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "Boolean",
    "wrapped": true,
    "fields": [
      {
        "name": "boolval",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "BooleanTest",
    "wrapped": true,
    "fields": [
      {
        "name": "arg",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "booltesttype",
        "type": "BoolTestType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "BoolExpr",
    "wrapped": true,
    "fields": [
      {
        "name": "args",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "boolop",
        "type": "BoolExprType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CallContext",
    "wrapped": true,
    "fields": [
      {
        "name": "atomic",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CallStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "funccall",
        "type": "FuncCall",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "funcexpr",
        "type": "FuncExpr",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "outargs",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "CaseExpr",
    "wrapped": true,
    "fields": [
      {
        "name": "arg",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "args",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "casecollid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "casetype",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "defresult",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CaseTestExpr",
    "wrapped": true,
    "fields": [
      {
        "name": "collation",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "typeId",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "typeMod",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CaseWhen",
    "wrapped": true,
    "fields": [
      {
        "name": "expr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "result",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CheckPointStmt",
    "wrapped": true,
    "fields": []
  },
  {
    "name": "ClosePortalStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "portalname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "ClusterStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "indexname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "params",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "relation",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CoalesceExpr",
    "wrapped": true,
    "fields": [
      {
        "name": "args",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "coalescecollid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "coalescetype",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CoerceToDomain",
    "wrapped": true,
    "fields": [
      {
        "name": "arg",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "coercionformat",
        "type": "CoercionForm",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "resultcollid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "resulttype",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "resulttypmod",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CoerceToDomainValue",
    "wrapped": true,
    "fields": [
      {
        "name": "collation",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "typeId",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "typeMod",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CoerceViaIO",
    "wrapped": true,
    "fields": [
      {
        "name": "arg",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "coerceformat",
        "type": "CoercionForm",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "resultcollid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "resulttype",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CollateClause",
    "wrapped": true,
    "fields": [
      {
        "name": "arg",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "collname",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CollateExpr",
    "wrapped": true,
    "fields": [
      {
        "name": "arg",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "collOid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "ColumnDef",
    "wrapped": true,
    "fields": [
      {
        "name": "collClause",
        "type": "CollateClause",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "collOid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "colname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "compression",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "constraints",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "cooked_default",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "fdwoptions",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "generated",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "identity",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "identitySequence",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "inhcount",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "is_from_type",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "is_local",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "is_not_null",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "raw_default",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "storage",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "storage_name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "typeName",
        "type": "TypeName",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "ColumnRef",
    "wrapped": true,
    "fields": [
      {
        "name": "fields",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CommentStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "comment",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "object",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "objtype",
        "type": "ObjectType",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CommonTableExpr",
    "wrapped": true,
    "fields": [
      {
        "name": "aliascolnames",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "ctecolcollations",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "ctecolnames",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "ctecoltypes",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "ctecoltypmods",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "ctematerialized",
        "type": "CTEMaterialize",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "ctename",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "ctequery",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "cterecursive",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "cterefcount",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "cycle_clause",
        "type": "CTECycleClause",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "search_clause",
        "type": "CTESearchClause",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CompositeTypeStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "coldeflist",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "typevar",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "Constraint",
    "wrapped": true,
    "fields": [
      {
        "name": "access_method",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "conname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "contype",
        "type": "ConstrType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "cooked_expr",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "deferrable",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "exclusions",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "fk_attrs",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "fk_del_action",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "fk_del_set_cols",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "fk_matchtype",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "fk_upd_action",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "generated_when",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "including",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "indexname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "indexspace",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "inhcount",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "initdeferred",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "initially_valid",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "is_no_inherit",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "keys",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "nulls_not_distinct",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "old_conpfeqop",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "old_pktable_oid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "pk_attrs",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "pktable",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "raw_expr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "reset_default_tblspc",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "skip_validation",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "where_clause",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "ConstraintsSetStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "constraints",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "deferred",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "ConvertRowtypeExpr",
    "wrapped": true,
    "fields": [
      {
        "name": "arg",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "convertformat",
        "type": "CoercionForm",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "resulttype",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CopyStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "attlist",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "filename",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "is_from",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "is_program",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "query",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "relation",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "whereClause",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CreateAmStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "amname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "amtype",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "handler_name",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "CreateCastStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "context",
        "type": "CoercionContext",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "func",
        "type": "ObjectWithArgs",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "inout",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "sourcetype",
        "type": "TypeName",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "targettype",
        "type": "TypeName",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CreateConversionStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "conversion_name",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "def",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "for_encoding_name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "func_name",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "to_encoding_name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CreatedbStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "dbname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "CreateDomainStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "collClause",
        "type": "CollateClause",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "constraints",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "domainname",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "typeName",
        "type": "TypeName",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CreateEnumStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "typeName",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "vals",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "CreateEventTrigStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "eventname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "funcname",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "trigname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "whenclause",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "CreateExtensionStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "extname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "if_not_exists",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "CreateFdwStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "fdwname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "func_options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "CreateForeignServerStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "fdwname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "if_not_exists",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "servername",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "servertype",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "version",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CreateForeignTableStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "base",
        "type": "CreateStmt",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "servername",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CreateFunctionStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "funcname",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "is_procedure",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "parameters",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "replace",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "returnType",
        "type": "TypeName",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "sql_body",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CreateOpClassItem",
    "wrapped": true,
    "fields": [
      {
        "name": "class_args",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "itemtype",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "name",
        "type": "ObjectWithArgs",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "number",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "order_family",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "storedtype",
        "type": "TypeName",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CreateOpClassStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "amname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "datatype",
        "type": "TypeName",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "isDefault",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "items",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "opclassname",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "opfamilyname",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "CreateOpFamilyStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "amname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "opfamilyname",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "CreatePLangStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "plhandler",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "plinline",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "plname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "pltrusted",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "plvalidator",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "replace",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CreatePolicyStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "cmd_name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "permissive",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "policy_name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "qual",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "roles",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "table",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "with_check",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CreatePublicationStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "for_all_tables",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "pubname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "pubobjects",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "CreateRangeStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "params",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "typeName",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "CreateRoleStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "role",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "stmt_type",
        "type": "RoleStmtType",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CreateSchemaStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "authrole",
        "type": "RoleSpec",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "if_not_exists",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "schemaElts",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "schemaname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CreateSeqStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "for_identity",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "if_not_exists",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "ownerId",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "sequence",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CreateStatsStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "defnames",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "exprs",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "if_not_exists",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "relations",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "stat_types",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "stxcomment",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "transformed",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CreateStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "accessMethod",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "constraints",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "if_not_exists",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "inhRelations",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "ofTypename",
        "type": "TypeName",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "oncommit",
        "type": "OnCommitAction",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "partbound",
        "type": "PartitionBoundSpec",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "partspec",
        "type": "PartitionSpec",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "relation",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "tableElts",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "tablespacename",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CreateSubscriptionStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "conninfo",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "publication",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "subname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CreateTableAsStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "if_not_exists",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "into",
        "type": "IntoClause",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "is_select_into",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "objtype",
        "type": "ObjectType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "query",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CreateTableSpaceStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "location",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "owner",
        "type": "RoleSpec",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "tablespacename",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CreateTransformStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "fromsql",
        "type": "ObjectWithArgs",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "lang",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "replace",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "tosql",
        "type": "ObjectWithArgs",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "type_name",
        "type": "TypeName",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CreateTrigStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "args",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "columns",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "constrrel",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "deferrable",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "events",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "funcname",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "initdeferred",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "isconstraint",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "relation",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "replace",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "row",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "timing",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "transitionRels",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "trigname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "whenClause",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CreateUserMappingStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "if_not_exists",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "servername",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "user",
        "type": "RoleSpec",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CTECycleClause",
    "wrapped": true,
    "fields": [
      {
        "name": "cycle_col_list",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "cycle_mark_collation",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "cycle_mark_column",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "cycle_mark_default",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "cycle_mark_neop",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "cycle_mark_type",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "cycle_mark_typmod",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "cycle_mark_value",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "cycle_path_column",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CTESearchClause",
    "wrapped": true,
    "fields": [
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "search_breadth_first",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "search_col_list",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "search_seq_column",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "CurrentOfExpr",
    "wrapped": true,
    "fields": [
      {
        "name": "cursor_name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "cursor_param",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "cvarno",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "DeallocateStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "isall",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "DeclareCursorStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "options",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "portalname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "query",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "DefElem",
    "wrapped": true,
    "fields": [
      {
        "name": "arg",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "defaction",
        "type": "DefElemAction",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "defname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "defnamespace",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "DefineStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "args",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "definition",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "defnames",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "if_not_exists",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "kind",
        "type": "ObjectType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "oldstyle",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "replace",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "DeleteStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "relation",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "returningList",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "usingClause",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "whereClause",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "withClause",
        "type": "WithClause",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "DiscardStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "target",
        "type": "DiscardMode",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "DistinctExpr",
    "wrapped": true,
    "fields": [
      {
        "name": "args",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "inputcollid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "opcollid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "opno",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "opresulttype",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "opretset",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "DoStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "args",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "DropdbStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "dbname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "missing_ok",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "DropOwnedStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "behavior",
        "type": "DropBehavior",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "roles",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "DropRoleStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "missing_ok",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "roles",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "DropStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "behavior",
        "type": "DropBehavior",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "concurrent",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "missing_ok",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "objects",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "removeType",
        "type": "ObjectType",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "DropSubscriptionStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "behavior",
        "type": "DropBehavior",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "missing_ok",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "subname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "DropTableSpaceStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "missing_ok",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "tablespacename",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "DropUserMappingStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "missing_ok",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "servername",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "user",
        "type": "RoleSpec",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "ExecuteStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "params",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "ExplainStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "query",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "FetchStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "direction",
        "type": "FetchDirection",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "howMany",
        "type": "int64",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "ismove",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "portalname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "FieldSelect",
    "wrapped": true,
    "fields": [
      {
        "name": "arg",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "fieldnum",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "resultcollid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "resulttype",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "resulttypmod",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "FieldStore",
    "wrapped": true,
    "fields": [
      {
        "name": "arg",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "fieldnums",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "newvals",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "resulttype",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "Float",
    "wrapped": true,
    "fields": [
      {
        "name": "fval",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "FromExpr",
    "wrapped": true,
    "fields": [
      {
        "name": "fromlist",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "quals",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "FuncCall",
    "wrapped": true,
    "fields": [
      {
        "name": "agg_distinct",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "agg_filter",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "agg_order",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "agg_star",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "agg_within_group",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "args",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "func_variadic",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "funcformat",
        "type": "CoercionForm",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "funcname",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "over",
        "type": "WindowDef",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "FuncExpr",
    "wrapped": true,
    "fields": [
      {
        "name": "args",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "funccollid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "funcformat",
        "type": "CoercionForm",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "funcid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "funcresulttype",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "funcretset",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "funcvariadic",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "inputcollid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "FunctionParameter",
    "wrapped": true,
    "fields": [
      {
        "name": "argType",
        "type": "TypeName",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "defexpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "mode",
        "type": "FunctionParameterMode",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "GrantRoleStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "behavior",
        "type": "DropBehavior",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "granted_roles",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "grantee_roles",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "grantor",
        "type": "RoleSpec",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "is_grant",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "opt",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "GrantStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "behavior",
        "type": "DropBehavior",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "grant_option",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "grantees",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "grantor",
        "type": "RoleSpec",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "is_grant",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "objects",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "objtype",
        "type": "ObjectType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "privileges",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "targtype",
        "type": "GrantTargetType",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "GroupingFunc",
    "wrapped": true,
    "fields": [
      {
        "name": "agglevelsup",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "args",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "refs",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "GroupingSet",
    "wrapped": true,
    "fields": [
      {
        "name": "content",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "kind",
        "type": "GroupingSetKind",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "ImportForeignSchemaStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "list_type",
        "type": "ImportForeignSchemaType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "local_schema",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "remote_schema",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "server_name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "table_list",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "IndexElem",
    "wrapped": true,
    "fields": [
      {
        "name": "collation",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "expr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "indexcolname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "nulls_ordering",
        "type": "SortByNulls",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "opclass",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "opclassopts",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "ordering",
        "type": "SortByDir",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "IndexStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "accessMethod",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "concurrent",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "deferrable",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "excludeOpNames",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "idxcomment",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "idxname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "if_not_exists",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "indexIncludingParams",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "indexOid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "indexParams",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "initdeferred",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "isconstraint",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "nulls_not_distinct",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "oldCreateSubid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "oldFirstRelfilelocatorSubid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "oldNumber",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "primary",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "relation",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "reset_default_tblspc",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "tableSpace",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "transformed",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "unique",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "whereClause",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "InferClause",
    "wrapped": true,
    "fields": [
      {
        "name": "conname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "indexElems",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "whereClause",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "InferenceElem",
    "wrapped": true,
    "fields": [
      {
        "name": "expr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "infercollid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "inferopclass",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "InlineCodeBlock",
    "wrapped": true,
    "fields": [
      {
        "name": "atomic",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "langIsTrusted",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "langOid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "source_text",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "InsertStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "cols",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "onConflictClause",
        "type": "OnConflictClause",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "override",
        "type": "OverridingKind",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "relation",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "returningList",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "selectStmt",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "withClause",
        "type": "WithClause",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "Integer",
    "wrapped": true,
    "fields": [
      {
        "name": "ival",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "IntList",
    "wrapped": true,
    "fields": [
      {
        "name": "items",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "IntoClause",
    "wrapped": true,
    "fields": [
      {
        "name": "accessMethod",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "colNames",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "onCommit",
        "type": "OnCommitAction",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "rel",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "skipData",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "tableSpaceName",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "viewQuery",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "JoinExpr",
    "wrapped": true,
    "fields": [
      {
        "name": "alias",
        "type": "Alias",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "isNatural",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "join_using_alias",
        "type": "Alias",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "jointype",
        "type": "JoinType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "larg",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "quals",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "rarg",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "rtindex",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "usingClause",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "JsonAggConstructor",
    "wrapped": true,
    "fields": [
      {
        "name": "agg_filter",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "agg_order",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "output",
        "type": "JsonOutput",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "over",
        "type": "WindowDef",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "JsonArgument",
    "wrapped": true,
    "fields": [
      {
        "name": "name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "val",
        "type": "JsonValueExpr",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "JsonArrayAgg",
    "wrapped": true,
    "fields": [
      {
        "name": "absent_on_null",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "arg",
        "type": "JsonValueExpr",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "constructor",
        "type": "JsonAggConstructor",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "JsonArrayConstructor",
    "wrapped": true,
    "fields": [
      {
        "name": "absent_on_null",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "exprs",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "output",
        "type": "JsonOutput",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "JsonArrayQueryConstructor",
    "wrapped": true,
    "fields": [
      {
        "name": "absent_on_null",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "format",
        "type": "JsonFormat",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "output",
        "type": "JsonOutput",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "query",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "JsonBehavior",
    "wrapped": true,
    "fields": [
      {
        "name": "btype",
        "type": "JsonBehaviorType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "coerce",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "expr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "JsonConstructorExpr",
    "wrapped": true,
    "fields": [
      {
        "name": "absent_on_null",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "args",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "coercion",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "func",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "returning",
        "type": "JsonReturning",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "type",
        "type": "JsonConstructorType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "unique",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "JsonExpr",
    "wrapped": true,
    "fields": [
      {
        "name": "collation",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "column_name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "format",
        "type": "JsonFormat",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "formatted_expr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "omit_quotes",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "on_empty",
        "type": "JsonBehavior",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "on_error",
        "type": "JsonBehavior",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "op",
        "type": "JsonExprOp",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "passing_names",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "passing_values",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "path_spec",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "returning",
        "type": "JsonReturning",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "use_io_coercion",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "use_json_coercion",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "wrapper",
        "type": "JsonWrapper",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "JsonFormat",
    "wrapped": true,
    "fields": [
      {
        "name": "encoding",
        "type": "JsonEncoding",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "format_type",
        "type": "JsonFormatType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "JsonFuncExpr",
    "wrapped": true,
    "fields": [
      {
        "name": "column_name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "context_item",
        "type": "JsonValueExpr",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "on_empty",
        "type": "JsonBehavior",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "on_error",
        "type": "JsonBehavior",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "op",
        "type": "JsonExprOp",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "output",
        "type": "JsonOutput",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "passing",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "pathspec",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "quotes",
        "type": "JsonQuotes",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "wrapper",
        "type": "JsonWrapper",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "JsonIsPredicate",
    "wrapped": true,
    "fields": [
      {
        "name": "expr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "format",
        "type": "JsonFormat",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "item_type",
        "type": "JsonValueType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "unique_keys",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "JsonKeyValue",
    "wrapped": true,
    "fields": [
      {
        "name": "key",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "value",
        "type": "JsonValueExpr",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "JsonObjectAgg",
    "wrapped": true,
    "fields": [
      {
        "name": "absent_on_null",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "arg",
        "type": "JsonKeyValue",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "constructor",
        "type": "JsonAggConstructor",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "unique",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "JsonObjectConstructor",
    "wrapped": true,
    "fields": [
      {
        "name": "absent_on_null",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "exprs",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "output",
        "type": "JsonOutput",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "unique",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "JsonOutput",
    "wrapped": true,
    "fields": [
      {
        "name": "returning",
        "type": "JsonReturning",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "typeName",
        "type": "TypeName",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "JsonParseExpr",
    "wrapped": true,
    "fields": [
      {
        "name": "expr",
        "type": "JsonValueExpr",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "output",
        "type": "JsonOutput",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "unique_keys",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "JsonReturning",
    "wrapped": true,
    "fields": [
      {
        "name": "format",
        "type": "JsonFormat",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "typid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "typmod",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "JsonScalarExpr",
    "wrapped": true,
    "fields": [
      {
        "name": "expr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "output",
        "type": "JsonOutput",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "JsonSerializeExpr",
    "wrapped": true,
    "fields": [
      {
        "name": "expr",
        "type": "JsonValueExpr",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "output",
        "type": "JsonOutput",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "JsonTable",
    "wrapped": true,
    "fields": [
      {
        "name": "alias",
        "type": "Alias",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "columns",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "context_item",
        "type": "JsonValueExpr",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "lateral",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "on_error",
        "type": "JsonBehavior",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "passing",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "pathspec",
        "type": "JsonTablePathSpec",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "JsonTableColumn",
    "wrapped": true,
    "fields": [
      {
        "name": "coltype",
        "type": "JsonTableColumnType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "columns",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "format",
        "type": "JsonFormat",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "on_empty",
        "type": "JsonBehavior",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "on_error",
        "type": "JsonBehavior",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "pathspec",
        "type": "JsonTablePathSpec",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "quotes",
        "type": "JsonQuotes",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "typeName",
        "type": "TypeName",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "wrapper",
        "type": "JsonWrapper",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "JsonTablePath",
    "wrapped": true,
    "fields": [
      {
        "name": "name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "JsonTablePathScan",
    "wrapped": true,
    "fields": [
      {
        "name": "child",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "colMax",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "colMin",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "errorOnError",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "path",
        "type": "JsonTablePath",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "plan",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "JsonTablePathSpec",
    "wrapped": true,
    "fields": [
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "name_location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "string",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "JsonTableSiblingJoin",
    "wrapped": true,
    "fields": [
      {
        "name": "lplan",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "plan",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "rplan",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "JsonValueExpr",
    "wrapped": true,
    "fields": [
      {
        "name": "format",
        "type": "JsonFormat",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "formatted_expr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "raw_expr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "List",
    "wrapped": true,
    "fields": [
      {
        "name": "items",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "ListenStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "conditionname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "LoadStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "filename",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "LockingClause",
    "wrapped": true,
    "fields": [
      {
        "name": "lockedRels",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "strength",
        "type": "LockClauseStrength",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "waitPolicy",
        "type": "LockWaitPolicy",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "LockStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "mode",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "nowait",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "relations",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "MergeAction",
    "wrapped": true,
    "fields": [
      {
        "name": "commandType",
        "type": "CmdType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "matchKind",
        "type": "MergeMatchKind",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "override",
        "type": "OverridingKind",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "qual",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "targetList",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "updateColnos",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "MergeStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "joinCondition",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "mergeWhenClauses",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "relation",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "returningList",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "sourceRelation",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "withClause",
        "type": "WithClause",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "MergeSupportFunc",
    "wrapped": true,
    "fields": [
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "msfcollid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "msftype",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "MergeWhenClause",
    "wrapped": true,
    "fields": [
      {
        "name": "commandType",
        "type": "CmdType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "condition",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "matchKind",
        "type": "MergeMatchKind",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "override",
        "type": "OverridingKind",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "targetList",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "values",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "MinMaxExpr",
    "wrapped": true,
    "fields": [
      {
        "name": "args",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "inputcollid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "minmaxcollid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "minmaxtype",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "op",
        "type": "MinMaxOp",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "MultiAssignRef",
    "wrapped": true,
    "fields": [
      {
        "name": "colno",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "ncolumns",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "source",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "NamedArgExpr",
    "wrapped": true,
    "fields": [
      {
        "name": "arg",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "argnumber",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "NextValueExpr",
    "wrapped": true,
    "fields": [
      {
        "name": "seqid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "typeId",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "NotifyStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "conditionname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "payload",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "NullIfExpr",
    "wrapped": true,
    "fields": [
      {
        "name": "args",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "inputcollid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "opcollid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "opno",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "opresulttype",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "opretset",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "NullTest",
    "wrapped": true,
    "fields": [
      {
        "name": "arg",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "argisrow",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "nulltesttype",
        "type": "NullTestType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "ObjectWithArgs",
    "wrapped": true,
    "fields": [
      {
        "name": "args_unspecified",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "objargs",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "objfuncargs",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "objname",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "OidList",
    "wrapped": true,
    "fields": [
      {
        "name": "items",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "OnConflictClause",
    "wrapped": true,
    "fields": [
      {
        "name": "action",
        "type": "OnConflictAction",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "infer",
        "type": "InferClause",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "targetList",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "whereClause",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "OnConflictExpr",
    "wrapped": true,
    "fields": [
      {
        "name": "action",
        "type": "OnConflictAction",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "arbiterElems",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "arbiterWhere",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "constraint",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "exclRelIndex",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "exclRelTlist",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "onConflictSet",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "onConflictWhere",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "OpExpr",
    "wrapped": true,
    "fields": [
      {
        "name": "args",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "inputcollid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "opcollid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "opno",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "opresulttype",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "opretset",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "Param",
    "wrapped": true,
    "fields": [
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "paramcollid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "paramid",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "paramkind",
        "type": "ParamKind",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "paramtype",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "paramtypmod",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "ParamRef",
    "wrapped": true,
    "fields": [
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "number",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "ParseResult",
    "wrapped": false,
    "fields": [
      {
        "name": "stmts",
        "type": "RawStmt",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "version",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "PartitionBoundSpec",
    "wrapped": true,
    "fields": [
      {
        "name": "is_default",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "listdatums",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "lowerdatums",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "modulus",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "remainder",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "strategy",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "upperdatums",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "PartitionCmd",
    "wrapped": true,
    "fields": [
      {
        "name": "bound",
        "type": "PartitionBoundSpec",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "concurrent",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "name",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "PartitionElem",
    "wrapped": true,
    "fields": [
      {
        "name": "collation",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "expr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "opclass",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "PartitionRangeDatum",
    "wrapped": true,
    "fields": [
      {
        "name": "kind",
        "type": "PartitionRangeDatumKind",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "value",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "PartitionSpec",
    "wrapped": true,
    "fields": [
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "partParams",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "strategy",
        "type": "PartitionStrategy",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "PLAssignStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "indirection",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "nnames",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "val",
        "type": "SelectStmt",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "PrepareStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "argtypes",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "query",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "PublicationObjSpec",
    "wrapped": true,
    "fields": [
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "pubobjtype",
        "type": "PublicationObjSpecType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "pubtable",
        "type": "PublicationTable",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "PublicationTable",
    "wrapped": true,
    "fields": [
      {
        "name": "columns",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "relation",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "whereClause",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "Query",
    "wrapped": true,
    "fields": [
      {
        "name": "canSetTag",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "commandType",
        "type": "CmdType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "constraintDeps",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "cteList",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "distinctClause",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "groupClause",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "groupDistinct",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "groupingSets",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "hasAggs",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "hasDistinctOn",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "hasForUpdate",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "hasModifyingCTE",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "hasRecursive",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "hasRowSecurity",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "hasSubLinks",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "hasTargetSRFs",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "hasWindowFuncs",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "havingQual",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "isReturn",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "jointree",
        "type": "FromExpr",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "limitCount",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "limitOffset",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "limitOption",
        "type": "LimitOption",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "mergeActionList",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "mergeJoinCondition",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "mergeTargetRelation",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "onConflict",
        "type": "OnConflictExpr",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "override",
        "type": "OverridingKind",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "querySource",
        "type": "QuerySource",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "resultRelation",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "returningList",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "rowMarks",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "rtable",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "rteperminfos",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "setOperations",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "sortClause",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "stmt_len",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "stmt_location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "targetList",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "utilityStmt",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "windowClause",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "withCheckOptions",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "RangeFunction",
    "wrapped": true,
    "fields": [
      {
        "name": "alias",
        "type": "Alias",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "coldeflist",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "functions",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "is_rowsfrom",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "lateral",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "ordinality",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "RangeSubselect",
    "wrapped": true,
    "fields": [
      {
        "name": "alias",
        "type": "Alias",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "lateral",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "subquery",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "RangeTableFunc",
    "wrapped": true,
    "fields": [
      {
        "name": "alias",
        "type": "Alias",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "columns",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "docexpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "lateral",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "namespaces",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "rowexpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "RangeTableFuncCol",
    "wrapped": true,
    "fields": [
      {
        "name": "coldefexpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "colexpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "colname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "for_ordinality",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "is_not_null",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "typeName",
        "type": "TypeName",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "RangeTableSample",
    "wrapped": true,
    "fields": [
      {
        "name": "args",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "method",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "relation",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "repeatable",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "RangeTblEntry",
    "wrapped": true,
    "fields": [
      {
        "name": "alias",
        "type": "Alias",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "colcollations",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "coltypes",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "coltypmods",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "ctelevelsup",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "ctename",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "enrname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "enrtuples",
        "type": "double",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "eref",
        "type": "Alias",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "funcordinality",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "functions",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "inFromCl",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "inh",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "join_using_alias",
        "type": "Alias",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "joinaliasvars",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "joinleftcols",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "joinmergedcols",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "joinrightcols",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "jointype",
        "type": "JoinType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "lateral",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "perminfoindex",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "relid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "relkind",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "rellockmode",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "rtekind",
        "type": "RTEKind",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "security_barrier",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "securityQuals",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "self_reference",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "subquery",
        "type": "Query",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "tablefunc",
        "type": "TableFunc",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "tablesample",
        "type": "TableSampleClause",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "values_lists",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "RangeTblFunction",
    "wrapped": true,
    "fields": [
      {
        "name": "funccolcollations",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "funccolcount",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "funccolnames",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "funccoltypes",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "funccoltypmods",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "funcexpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "funcparams",
        "type": "uint64",
        "isNode": false,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "RangeTblRef",
    "wrapped": true,
    "fields": [
      {
        "name": "rtindex",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "RangeVar",
    "wrapped": true,
    "fields": [
      {
        "name": "alias",
        "type": "Alias",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "catalogname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "inh",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "relname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "relpersistence",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "schemaname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "RawStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "stmt",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "stmt_len",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "stmt_location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "ReassignOwnedStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "newrole",
        "type": "RoleSpec",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "roles",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "RefreshMatViewStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "concurrent",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "relation",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "skipData",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "ReindexStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "kind",
        "type": "ReindexObjectType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "params",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "relation",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "RelabelType",
    "wrapped": true,
    "fields": [
      {
        "name": "arg",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "relabelformat",
        "type": "CoercionForm",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "resultcollid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "resulttype",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "resulttypmod",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "RenameStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "behavior",
        "type": "DropBehavior",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "missing_ok",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "newname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "object",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "relation",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "relationType",
        "type": "ObjectType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "renameType",
        "type": "ObjectType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "subname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "ReplicaIdentityStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "identity_type",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "ResTarget",
    "wrapped": true,
    "fields": [
      {
        "name": "indirection",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "val",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "ReturnStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "returnval",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "RoleSpec",
    "wrapped": true,
    "fields": [
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "rolename",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "roletype",
        "type": "RoleSpecType",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "RowCompareExpr",
    "wrapped": true,
    "fields": [
      {
        "name": "inputcollids",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "largs",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "opfamilies",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "opnos",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "rargs",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "rctype",
        "type": "RowCompareType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "RowExpr",
    "wrapped": true,
    "fields": [
      {
        "name": "args",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "colnames",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "row_format",
        "type": "CoercionForm",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "row_typeid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "RowMarkClause",
    "wrapped": true,
    "fields": [
      {
        "name": "pushedDown",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "rti",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "strength",
        "type": "LockClauseStrength",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "waitPolicy",
        "type": "LockWaitPolicy",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "RTEPermissionInfo",
    "wrapped": true,
    "fields": [
      {
        "name": "checkAsUser",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "inh",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "insertedCols",
        "type": "uint64",
        "isNode": false,
        "isArray": true,
        "optional": true
      },
      {
        "name": "relid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "requiredPerms",
        "type": "uint64",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "selectedCols",
        "type": "uint64",
        "isNode": false,
        "isArray": true,
        "optional": true
      },
      {
        "name": "updatedCols",
        "type": "uint64",
        "isNode": false,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "RuleStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "actions",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "event",
        "type": "CmdType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "instead",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "relation",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "replace",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "rulename",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "whereClause",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "ScalarArrayOpExpr",
    "wrapped": true,
    "fields": [
      {
        "name": "args",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "inputcollid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "opno",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "useOr",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "ScanResult",
    "wrapped": false,
    "fields": [
      {
        "name": "tokens",
        "type": "ScanToken",
        "isNode": false,
        "isArray": true,
        "optional": true
      },
      {
        "name": "version",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "ScanToken",
    "wrapped": false,
    "fields": [
      {
        "name": "end",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "keywordKind",
        "type": "KeywordKind",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "start",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "token",
        "type": "Token",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "SecLabelStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "label",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "object",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "objtype",
        "type": "ObjectType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "provider",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "SelectStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "all",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "distinctClause",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "fromClause",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "groupClause",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "groupDistinct",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "havingClause",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "intoClause",
        "type": "IntoClause",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "larg",
        "type": "SelectStmt",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "limitCount",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "limitOffset",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "limitOption",
        "type": "LimitOption",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "lockingClause",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "op",
        "type": "SetOperation",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "rarg",
        "type": "SelectStmt",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "sortClause",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "targetList",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "valuesLists",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "whereClause",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "windowClause",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "withClause",
        "type": "WithClause",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "SetOperationStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "all",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "colCollations",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "colTypes",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "colTypmods",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "groupClauses",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "larg",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "op",
        "type": "SetOperation",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "rarg",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "SetToDefault",
    "wrapped": true,
    "fields": [
      {
        "name": "collation",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "typeId",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "typeMod",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "SinglePartitionSpec",
    "wrapped": true,
    "fields": []
  },
  {
    "name": "SortBy",
    "wrapped": true,
    "fields": [
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "node",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "sortby_dir",
        "type": "SortByDir",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "sortby_nulls",
        "type": "SortByNulls",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "useOp",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "SortGroupClause",
    "wrapped": true,
    "fields": [
      {
        "name": "eqop",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "hashable",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "nulls_first",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "sortop",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "tleSortGroupRef",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "SQLValueFunction",
    "wrapped": true,
    "fields": [
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "op",
        "type": "SQLValueFunctionOp",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "type",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "typmod",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "StatsElem",
    "wrapped": true,
    "fields": [
      {
        "name": "expr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "String",
    "wrapped": true,
    "fields": [
      {
        "name": "sval",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "SubLink",
    "wrapped": true,
    "fields": [
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "operName",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "subLinkId",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "subLinkType",
        "type": "SubLinkType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "subselect",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "testexpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "SubPlan",
    "wrapped": true,
    "fields": [
      {
        "name": "args",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "firstColCollation",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "firstColType",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "firstColTypmod",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "parallel_safe",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "paramIds",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "parParam",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "per_call_cost",
        "type": "double",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "plan_id",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "plan_name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "setParam",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "startup_cost",
        "type": "double",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "subLinkType",
        "type": "SubLinkType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "testexpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "unknownEqFalse",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "useHashTable",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "SubscriptingRef",
    "wrapped": true,
    "fields": [
      {
        "name": "refassgnexpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "refcollid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "refcontainertype",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "refelemtype",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "refexpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "reflowerindexpr",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "refrestype",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "reftypmod",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "refupperindexpr",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "TableFunc",
    "wrapped": true,
    "fields": [
      {
        "name": "colcollations",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "coldefexprs",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "colexprs",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "colnames",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "coltypes",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "coltypmods",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "colvalexprs",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "docexpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "functype",
        "type": "TableFuncType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "notnulls",
        "type": "uint64",
        "isNode": false,
        "isArray": true,
        "optional": true
      },
      {
        "name": "ns_names",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "ns_uris",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "ordinalitycol",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "passingvalexprs",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "plan",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "rowexpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "TableLikeClause",
    "wrapped": true,
    "fields": [
      {
        "name": "options",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "relation",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "relationOid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "TableSampleClause",
    "wrapped": true,
    "fields": [
      {
        "name": "args",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "repeatable",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "tsmhandler",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "TargetEntry",
    "wrapped": true,
    "fields": [
      {
        "name": "expr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "resjunk",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "resname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "resno",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "resorigcol",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "resorigtbl",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "ressortgroupref",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "TransactionStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "chain",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "gid",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "kind",
        "type": "TransactionStmtKind",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "savepoint_name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "TriggerTransition",
    "wrapped": true,
    "fields": [
      {
        "name": "isNew",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "isTable",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "TruncateStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "behavior",
        "type": "DropBehavior",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "relations",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "restart_seqs",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "TypeCast",
    "wrapped": true,
    "fields": [
      {
        "name": "arg",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "typeName",
        "type": "TypeName",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "TypeName",
    "wrapped": true,
    "fields": [
      {
        "name": "arrayBounds",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "names",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "pct_type",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "setof",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "typemod",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "typeOid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "typmods",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "UnlistenStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "conditionname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "UpdateStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "fromClause",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "relation",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "returningList",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "targetList",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "whereClause",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "withClause",
        "type": "WithClause",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "VacuumRelation",
    "wrapped": true,
    "fields": [
      {
        "name": "oid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "relation",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "va_cols",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "VacuumStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "is_vacuumcmd",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "rels",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      }
    ]
  },
  {
    "name": "Var",
    "wrapped": true,
    "fields": [
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "varattno",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "varcollid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "varlevelsup",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "varno",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "varnullingrels",
        "type": "uint64",
        "isNode": false,
        "isArray": true,
        "optional": true
      },
      {
        "name": "vartype",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "vartypmod",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "VariableSetStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "args",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "is_local",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "kind",
        "type": "VariableSetKind",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "VariableShowStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "ViewStmt",
    "wrapped": true,
    "fields": [
      {
        "name": "aliases",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "options",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "query",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "replace",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "view",
        "type": "RangeVar",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "withCheckOption",
        "type": "ViewCheckOption",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "WindowClause",
    "wrapped": true,
    "fields": [
      {
        "name": "copiedOrder",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "endInRangeFunc",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "endOffset",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "frameOptions",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "inRangeAsc",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "inRangeColl",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "inRangeNullsFirst",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "orderClause",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "partitionClause",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "refname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "startInRangeFunc",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "startOffset",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "winref",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "WindowDef",
    "wrapped": true,
    "fields": [
      {
        "name": "endOffset",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "frameOptions",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "orderClause",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "partitionClause",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "refname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "startOffset",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "WindowFunc",
    "wrapped": true,
    "fields": [
      {
        "name": "aggfilter",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "args",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "inputcollid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "runCondition",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "winagg",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "wincollid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "winfnoid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "winref",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "winstar",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "wintype",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "WindowFuncRunCondition",
    "wrapped": true,
    "fields": [
      {
        "name": "arg",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "inputcollid",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "opno",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "wfunc_left",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "WithCheckOption",
    "wrapped": true,
    "fields": [
      {
        "name": "cascaded",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "kind",
        "type": "WCOKind",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "polname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "qual",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "relname",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "WithClause",
    "wrapped": true,
    "fields": [
      {
        "name": "ctes",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "recursive",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "XmlExpr",
    "wrapped": true,
    "fields": [
      {
        "name": "arg_names",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "args",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "indent",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "name",
        "type": "string",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "named_args",
        "type": "Node",
        "isNode": true,
        "isArray": true,
        "optional": true
      },
      {
        "name": "op",
        "type": "XmlExprOp",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "type",
        "type": "uint32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "typmod",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xmloption",
        "type": "XmlOptionType",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xpr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      }
    ]
  },
  {
    "name": "XmlSerialize",
    "wrapped": true,
    "fields": [
      {
        "name": "expr",
        "type": "Node",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "indent",
        "type": "bool",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "location",
        "type": "int32",
        "isNode": false,
        "isArray": false,
        "optional": true
      },
      {
        "name": "typeName",
        "type": "TypeName",
        "isNode": true,
        "isArray": false,
        "optional": true
      },
      {
        "name": "xmloption",
        "type": "XmlOptionType",
        "isNode": false,
        "isArray": false,
        "optional": true
      }
    ]
  }
]",
    "file": "latest-schema.json",
  },
]
`;

exports[`runtime-schema runtime schema with typescript and all features 1`] = `
[
  {
    "code": "/**
* This file was automatically generated by pg-proto-parser@latest.
* DO NOT MODIFY IT BY HAND. Instead, modify the source proto file,
* and run the pg-proto-parser generate command to regenerate this file.
*/
import _o from "nested-obj";
import { ParseResult, ScanResult, Integer, Float, Boolean, String, BitString, List, OidList, IntList, A_Const, Alias, RangeVar, TableFunc, IntoClause, Var, Param, Aggref, GroupingFunc, WindowFunc, SubscriptingRef, FuncExpr, NamedArgExpr, OpExpr, DistinctExpr, NullIfExpr, ScalarArrayOpExpr, BoolExpr, SubLink, SubPlan, AlternativeSubPlan, FieldSelect, FieldStore, RelabelType, CoerceViaIO, ArrayCoerceExpr, ConvertRowtypeExpr, CollateExpr, CaseExpr, CaseWhen, CaseTestExpr, ArrayExpr, RowExpr, RowCompareExpr, CoalesceExpr, MinMaxExpr, SQLValueFunction, XmlExpr, JsonFormat, JsonReturning, JsonValueExpr, JsonConstructorExpr, JsonIsPredicate, NullTest, BooleanTest, CoerceToDomain, CoerceToDomainValue, SetToDefault, CurrentOfExpr, NextValueExpr, InferenceElem, TargetEntry, RangeTblRef, JoinExpr, FromExpr, OnConflictExpr, Query, TypeName, ColumnRef, ParamRef, A_Expr, TypeCast, CollateClause, RoleSpec, FuncCall, A_Star, A_Indices, A_Indirection, A_ArrayExpr, ResTarget, MultiAssignRef, SortBy, WindowDef, RangeSubselect, RangeFunction, RangeTableFunc, RangeTableFuncCol, RangeTableSample, ColumnDef, TableLikeClause, IndexElem, DefElem, LockingClause, XmlSerialize, PartitionElem, PartitionSpec, PartitionBoundSpec, PartitionRangeDatum, PartitionCmd, RangeTblEntry, RTEPermissionInfo, RangeTblFunction, TableSampleClause, WithCheckOption, SortGroupClause, GroupingSet, WindowClause, RowMarkClause, WithClause, InferClause, OnConflictClause, CTESearchClause, CTECycleClause, CommonTableExpr, MergeWhenClause, MergeAction, TriggerTransition, JsonOutput, JsonKeyValue, JsonObjectConstructor, JsonArrayConstructor, JsonArrayQueryConstructor, JsonAggConstructor, JsonObjectAgg, JsonArrayAgg, RawStmt, InsertStmt, DeleteStmt, UpdateStmt, MergeStmt, SelectStmt, SetOperationStmt, ReturnStmt, PLAssignStmt, CreateSchemaStmt, AlterTableStmt, ReplicaIdentityStmt, AlterTableCmd, AlterCollationStmt, AlterDomainStmt, GrantStmt, ObjectWithArgs, AccessPriv, GrantRoleStmt, AlterDefaultPrivilegesStmt, CopyStmt, VariableSetStmt, VariableShowStmt, CreateStmt, Constraint, CreateTableSpaceStmt, DropTableSpaceStmt, AlterTableSpaceOptionsStmt, AlterTableMoveAllStmt, CreateExtensionStmt, AlterExtensionStmt, AlterExtensionContentsStmt, CreateFdwStmt, AlterFdwStmt, CreateForeignServerStmt, AlterForeignServerStmt, CreateForeignTableStmt, CreateUserMappingStmt, AlterUserMappingStmt, DropUserMappingStmt, ImportForeignSchemaStmt, CreatePolicyStmt, AlterPolicyStmt, CreateAmStmt, CreateTrigStmt, CreateEventTrigStmt, AlterEventTrigStmt, CreatePLangStmt, CreateRoleStmt, AlterRoleStmt, AlterRoleSetStmt, DropRoleStmt, CreateSeqStmt, AlterSeqStmt, DefineStmt, CreateDomainStmt, CreateOpClassStmt, CreateOpClassItem, CreateOpFamilyStmt, AlterOpFamilyStmt, DropStmt, TruncateStmt, CommentStmt, SecLabelStmt, DeclareCursorStmt, ClosePortalStmt, FetchStmt, IndexStmt, CreateStatsStmt, StatsElem, AlterStatsStmt, CreateFunctionStmt, FunctionParameter, AlterFunctionStmt, DoStmt, InlineCodeBlock, CallStmt, CallContext, RenameStmt, AlterObjectDependsStmt, AlterObjectSchemaStmt, AlterOwnerStmt, AlterOperatorStmt, AlterTypeStmt, RuleStmt, NotifyStmt, ListenStmt, UnlistenStmt, TransactionStmt, CompositeTypeStmt, CreateEnumStmt, CreateRangeStmt, AlterEnumStmt, ViewStmt, LoadStmt, CreatedbStmt, AlterDatabaseStmt, AlterDatabaseRefreshCollStmt, AlterDatabaseSetStmt, DropdbStmt, AlterSystemStmt, ClusterStmt, VacuumStmt, VacuumRelation, ExplainStmt, CreateTableAsStmt, RefreshMatViewStmt, CheckPointStmt, DiscardStmt, LockStmt, ConstraintsSetStmt, ReindexStmt, CreateConversionStmt, CreateCastStmt, CreateTransformStmt, PrepareStmt, ExecuteStmt, DeallocateStmt, DropOwnedStmt, ReassignOwnedStmt, AlterTSDictionaryStmt, AlterTSConfigurationStmt, PublicationTable, PublicationObjSpec, CreatePublicationStmt, AlterPublicationStmt, CreateSubscriptionStmt, AlterSubscriptionStmt, DropSubscriptionStmt, ScanToken } from "./wrapped";
export default {
  parseResult(_p?: ParseResult): ParseResult {
    const _j = ({} as ParseResult);
    _o.set(_j, "version", _p?.version);
    _o.set(_j, "stmts", _p?.stmts);
    return _j;
  },
  scanResult(_p?: ScanResult): ScanResult {
    const _j = ({} as ScanResult);
    _o.set(_j, "version", _p?.version);
    _o.set(_j, "tokens", _p?.tokens);
    return _j;
  },
  integer(_p?: Integer): Integer {
    const _j = ({} as Integer);
    _o.set(_j, "ival", _p?.ival);
    return _j;
  },
  float(_p?: Float): Float {
    const _j = ({} as Float);
    _o.set(_j, "fval", _p?.fval);
    return _j;
  },
  boolean(_p?: Boolean): Boolean {
    const _j = ({} as Boolean);
    _o.set(_j, "boolval", _p?.boolval);
    return _j;
  },
  string(_p?: String): String {
    const _j = ({} as String);
    _o.set(_j, "sval", _p?.sval);
    return _j;
  },
  bitString(_p?: BitString): BitString {
    const _j = ({} as BitString);
    _o.set(_j, "bsval", _p?.bsval);
    return _j;
  },
  list(_p?: List): List {
    const _j = ({} as List);
    _o.set(_j, "items", _p?.items);
    return _j;
  },
  oidList(_p?: OidList): OidList {
    const _j = ({} as OidList);
    _o.set(_j, "items", _p?.items);
    return _j;
  },
  intList(_p?: IntList): IntList {
    const _j = ({} as IntList);
    _o.set(_j, "items", _p?.items);
    return _j;
  },
  aConst(_p?: A_Const): A_Const {
    const _j = ({} as A_Const);
    _o.set(_j, "ival", _p?.ival);
    _o.set(_j, "fval", _p?.fval);
    _o.set(_j, "boolval", _p?.boolval);
    _o.set(_j, "sval", _p?.sval);
    _o.set(_j, "bsval", _p?.bsval);
    _o.set(_j, "isnull", _p?.isnull);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  alias(_p?: Alias): Alias {
    const _j = ({} as Alias);
    _o.set(_j, "aliasname", _p?.aliasname);
    _o.set(_j, "colnames", _p?.colnames);
    return _j;
  },
  rangeVar(_p?: RangeVar): RangeVar {
    const _j = ({} as RangeVar);
    _o.set(_j, "catalogname", _p?.catalogname);
    _o.set(_j, "schemaname", _p?.schemaname);
    _o.set(_j, "relname", _p?.relname);
    _o.set(_j, "inh", _p?.inh);
    _o.set(_j, "relpersistence", _p?.relpersistence);
    _o.set(_j, "alias", _p?.alias);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  tableFunc(_p?: TableFunc): TableFunc {
    const _j = ({} as TableFunc);
    _o.set(_j, "ns_uris", _p?.ns_uris);
    _o.set(_j, "ns_names", _p?.ns_names);
    _o.set(_j, "docexpr", _p?.docexpr);
    _o.set(_j, "rowexpr", _p?.rowexpr);
    _o.set(_j, "colnames", _p?.colnames);
    _o.set(_j, "coltypes", _p?.coltypes);
    _o.set(_j, "coltypmods", _p?.coltypmods);
    _o.set(_j, "colcollations", _p?.colcollations);
    _o.set(_j, "colexprs", _p?.colexprs);
    _o.set(_j, "coldefexprs", _p?.coldefexprs);
    _o.set(_j, "notnulls", _p?.notnulls);
    _o.set(_j, "ordinalitycol", _p?.ordinalitycol);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  intoClause(_p?: IntoClause): IntoClause {
    const _j = ({} as IntoClause);
    _o.set(_j, "rel", _p?.rel);
    _o.set(_j, "colNames", _p?.colNames);
    _o.set(_j, "accessMethod", _p?.accessMethod);
    _o.set(_j, "options", _p?.options);
    _o.set(_j, "onCommit", _p?.onCommit);
    _o.set(_j, "tableSpaceName", _p?.tableSpaceName);
    _o.set(_j, "viewQuery", _p?.viewQuery);
    _o.set(_j, "skipData", _p?.skipData);
    return _j;
  },
  var(_p?: Var): Var {
    const _j = ({} as Var);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "varno", _p?.varno);
    _o.set(_j, "varattno", _p?.varattno);
    _o.set(_j, "vartype", _p?.vartype);
    _o.set(_j, "vartypmod", _p?.vartypmod);
    _o.set(_j, "varcollid", _p?.varcollid);
    _o.set(_j, "varnullingrels", _p?.varnullingrels);
    _o.set(_j, "varlevelsup", _p?.varlevelsup);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  param(_p?: Param): Param {
    const _j = ({} as Param);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "paramkind", _p?.paramkind);
    _o.set(_j, "paramid", _p?.paramid);
    _o.set(_j, "paramtype", _p?.paramtype);
    _o.set(_j, "paramtypmod", _p?.paramtypmod);
    _o.set(_j, "paramcollid", _p?.paramcollid);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  aggref(_p?: Aggref): Aggref {
    const _j = ({} as Aggref);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "aggfnoid", _p?.aggfnoid);
    _o.set(_j, "aggtype", _p?.aggtype);
    _o.set(_j, "aggcollid", _p?.aggcollid);
    _o.set(_j, "inputcollid", _p?.inputcollid);
    _o.set(_j, "aggargtypes", _p?.aggargtypes);
    _o.set(_j, "aggdirectargs", _p?.aggdirectargs);
    _o.set(_j, "args", _p?.args);
    _o.set(_j, "aggorder", _p?.aggorder);
    _o.set(_j, "aggdistinct", _p?.aggdistinct);
    _o.set(_j, "aggfilter", _p?.aggfilter);
    _o.set(_j, "aggstar", _p?.aggstar);
    _o.set(_j, "aggvariadic", _p?.aggvariadic);
    _o.set(_j, "aggkind", _p?.aggkind);
    _o.set(_j, "agglevelsup", _p?.agglevelsup);
    _o.set(_j, "aggsplit", _p?.aggsplit);
    _o.set(_j, "aggno", _p?.aggno);
    _o.set(_j, "aggtransno", _p?.aggtransno);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  groupingFunc(_p?: GroupingFunc): GroupingFunc {
    const _j = ({} as GroupingFunc);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "args", _p?.args);
    _o.set(_j, "refs", _p?.refs);
    _o.set(_j, "agglevelsup", _p?.agglevelsup);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  windowFunc(_p?: WindowFunc): WindowFunc {
    const _j = ({} as WindowFunc);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "winfnoid", _p?.winfnoid);
    _o.set(_j, "wintype", _p?.wintype);
    _o.set(_j, "wincollid", _p?.wincollid);
    _o.set(_j, "inputcollid", _p?.inputcollid);
    _o.set(_j, "args", _p?.args);
    _o.set(_j, "aggfilter", _p?.aggfilter);
    _o.set(_j, "winref", _p?.winref);
    _o.set(_j, "winstar", _p?.winstar);
    _o.set(_j, "winagg", _p?.winagg);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  subscriptingRef(_p?: SubscriptingRef): SubscriptingRef {
    const _j = ({} as SubscriptingRef);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "refcontainertype", _p?.refcontainertype);
    _o.set(_j, "refelemtype", _p?.refelemtype);
    _o.set(_j, "refrestype", _p?.refrestype);
    _o.set(_j, "reftypmod", _p?.reftypmod);
    _o.set(_j, "refcollid", _p?.refcollid);
    _o.set(_j, "refupperindexpr", _p?.refupperindexpr);
    _o.set(_j, "reflowerindexpr", _p?.reflowerindexpr);
    _o.set(_j, "refexpr", _p?.refexpr);
    _o.set(_j, "refassgnexpr", _p?.refassgnexpr);
    return _j;
  },
  funcExpr(_p?: FuncExpr): FuncExpr {
    const _j = ({} as FuncExpr);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "funcid", _p?.funcid);
    _o.set(_j, "funcresulttype", _p?.funcresulttype);
    _o.set(_j, "funcretset", _p?.funcretset);
    _o.set(_j, "funcvariadic", _p?.funcvariadic);
    _o.set(_j, "funcformat", _p?.funcformat);
    _o.set(_j, "funccollid", _p?.funccollid);
    _o.set(_j, "inputcollid", _p?.inputcollid);
    _o.set(_j, "args", _p?.args);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  namedArgExpr(_p?: NamedArgExpr): NamedArgExpr {
    const _j = ({} as NamedArgExpr);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "arg", _p?.arg);
    _o.set(_j, "name", _p?.name);
    _o.set(_j, "argnumber", _p?.argnumber);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  opExpr(_p?: OpExpr): OpExpr {
    const _j = ({} as OpExpr);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "opno", _p?.opno);
    _o.set(_j, "opresulttype", _p?.opresulttype);
    _o.set(_j, "opretset", _p?.opretset);
    _o.set(_j, "opcollid", _p?.opcollid);
    _o.set(_j, "inputcollid", _p?.inputcollid);
    _o.set(_j, "args", _p?.args);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  distinctExpr(_p?: DistinctExpr): DistinctExpr {
    const _j = ({} as DistinctExpr);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "opno", _p?.opno);
    _o.set(_j, "opresulttype", _p?.opresulttype);
    _o.set(_j, "opretset", _p?.opretset);
    _o.set(_j, "opcollid", _p?.opcollid);
    _o.set(_j, "inputcollid", _p?.inputcollid);
    _o.set(_j, "args", _p?.args);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  nullIfExpr(_p?: NullIfExpr): NullIfExpr {
    const _j = ({} as NullIfExpr);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "opno", _p?.opno);
    _o.set(_j, "opresulttype", _p?.opresulttype);
    _o.set(_j, "opretset", _p?.opretset);
    _o.set(_j, "opcollid", _p?.opcollid);
    _o.set(_j, "inputcollid", _p?.inputcollid);
    _o.set(_j, "args", _p?.args);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  scalarArrayOpExpr(_p?: ScalarArrayOpExpr): ScalarArrayOpExpr {
    const _j = ({} as ScalarArrayOpExpr);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "opno", _p?.opno);
    _o.set(_j, "useOr", _p?.useOr);
    _o.set(_j, "inputcollid", _p?.inputcollid);
    _o.set(_j, "args", _p?.args);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  boolExpr(_p?: BoolExpr): BoolExpr {
    const _j = ({} as BoolExpr);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "boolop", _p?.boolop);
    _o.set(_j, "args", _p?.args);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  subLink(_p?: SubLink): SubLink {
    const _j = ({} as SubLink);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "subLinkType", _p?.subLinkType);
    _o.set(_j, "subLinkId", _p?.subLinkId);
    _o.set(_j, "testexpr", _p?.testexpr);
    _o.set(_j, "operName", _p?.operName);
    _o.set(_j, "subselect", _p?.subselect);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  subPlan(_p?: SubPlan): SubPlan {
    const _j = ({} as SubPlan);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "subLinkType", _p?.subLinkType);
    _o.set(_j, "testexpr", _p?.testexpr);
    _o.set(_j, "paramIds", _p?.paramIds);
    _o.set(_j, "plan_id", _p?.plan_id);
    _o.set(_j, "plan_name", _p?.plan_name);
    _o.set(_j, "firstColType", _p?.firstColType);
    _o.set(_j, "firstColTypmod", _p?.firstColTypmod);
    _o.set(_j, "firstColCollation", _p?.firstColCollation);
    _o.set(_j, "useHashTable", _p?.useHashTable);
    _o.set(_j, "unknownEqFalse", _p?.unknownEqFalse);
    _o.set(_j, "parallel_safe", _p?.parallel_safe);
    _o.set(_j, "setParam", _p?.setParam);
    _o.set(_j, "parParam", _p?.parParam);
    _o.set(_j, "args", _p?.args);
    _o.set(_j, "startup_cost", _p?.startup_cost);
    _o.set(_j, "per_call_cost", _p?.per_call_cost);
    return _j;
  },
  alternativeSubPlan(_p?: AlternativeSubPlan): AlternativeSubPlan {
    const _j = ({} as AlternativeSubPlan);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "subplans", _p?.subplans);
    return _j;
  },
  fieldSelect(_p?: FieldSelect): FieldSelect {
    const _j = ({} as FieldSelect);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "arg", _p?.arg);
    _o.set(_j, "fieldnum", _p?.fieldnum);
    _o.set(_j, "resulttype", _p?.resulttype);
    _o.set(_j, "resulttypmod", _p?.resulttypmod);
    _o.set(_j, "resultcollid", _p?.resultcollid);
    return _j;
  },
  fieldStore(_p?: FieldStore): FieldStore {
    const _j = ({} as FieldStore);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "arg", _p?.arg);
    _o.set(_j, "newvals", _p?.newvals);
    _o.set(_j, "fieldnums", _p?.fieldnums);
    _o.set(_j, "resulttype", _p?.resulttype);
    return _j;
  },
  relabelType(_p?: RelabelType): RelabelType {
    const _j = ({} as RelabelType);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "arg", _p?.arg);
    _o.set(_j, "resulttype", _p?.resulttype);
    _o.set(_j, "resulttypmod", _p?.resulttypmod);
    _o.set(_j, "resultcollid", _p?.resultcollid);
    _o.set(_j, "relabelformat", _p?.relabelformat);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  coerceViaio(_p?: CoerceViaIO): CoerceViaIO {
    const _j = ({} as CoerceViaIO);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "arg", _p?.arg);
    _o.set(_j, "resulttype", _p?.resulttype);
    _o.set(_j, "resultcollid", _p?.resultcollid);
    _o.set(_j, "coerceformat", _p?.coerceformat);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  arrayCoerceExpr(_p?: ArrayCoerceExpr): ArrayCoerceExpr {
    const _j = ({} as ArrayCoerceExpr);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "arg", _p?.arg);
    _o.set(_j, "elemexpr", _p?.elemexpr);
    _o.set(_j, "resulttype", _p?.resulttype);
    _o.set(_j, "resulttypmod", _p?.resulttypmod);
    _o.set(_j, "resultcollid", _p?.resultcollid);
    _o.set(_j, "coerceformat", _p?.coerceformat);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  convertRowtypeExpr(_p?: ConvertRowtypeExpr): ConvertRowtypeExpr {
    const _j = ({} as ConvertRowtypeExpr);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "arg", _p?.arg);
    _o.set(_j, "resulttype", _p?.resulttype);
    _o.set(_j, "convertformat", _p?.convertformat);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  collateExpr(_p?: CollateExpr): CollateExpr {
    const _j = ({} as CollateExpr);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "arg", _p?.arg);
    _o.set(_j, "collOid", _p?.collOid);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  caseExpr(_p?: CaseExpr): CaseExpr {
    const _j = ({} as CaseExpr);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "casetype", _p?.casetype);
    _o.set(_j, "casecollid", _p?.casecollid);
    _o.set(_j, "arg", _p?.arg);
    _o.set(_j, "args", _p?.args);
    _o.set(_j, "defresult", _p?.defresult);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  caseWhen(_p?: CaseWhen): CaseWhen {
    const _j = ({} as CaseWhen);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "expr", _p?.expr);
    _o.set(_j, "result", _p?.result);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  caseTestExpr(_p?: CaseTestExpr): CaseTestExpr {
    const _j = ({} as CaseTestExpr);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "typeId", _p?.typeId);
    _o.set(_j, "typeMod", _p?.typeMod);
    _o.set(_j, "collation", _p?.collation);
    return _j;
  },
  arrayExpr(_p?: ArrayExpr): ArrayExpr {
    const _j = ({} as ArrayExpr);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "array_typeid", _p?.array_typeid);
    _o.set(_j, "array_collid", _p?.array_collid);
    _o.set(_j, "element_typeid", _p?.element_typeid);
    _o.set(_j, "elements", _p?.elements);
    _o.set(_j, "multidims", _p?.multidims);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  rowExpr(_p?: RowExpr): RowExpr {
    const _j = ({} as RowExpr);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "args", _p?.args);
    _o.set(_j, "row_typeid", _p?.row_typeid);
    _o.set(_j, "row_format", _p?.row_format);
    _o.set(_j, "colnames", _p?.colnames);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  rowCompareExpr(_p?: RowCompareExpr): RowCompareExpr {
    const _j = ({} as RowCompareExpr);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "rctype", _p?.rctype);
    _o.set(_j, "opnos", _p?.opnos);
    _o.set(_j, "opfamilies", _p?.opfamilies);
    _o.set(_j, "inputcollids", _p?.inputcollids);
    _o.set(_j, "largs", _p?.largs);
    _o.set(_j, "rargs", _p?.rargs);
    return _j;
  },
  coalesceExpr(_p?: CoalesceExpr): CoalesceExpr {
    const _j = ({} as CoalesceExpr);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "coalescetype", _p?.coalescetype);
    _o.set(_j, "coalescecollid", _p?.coalescecollid);
    _o.set(_j, "args", _p?.args);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  minMaxExpr(_p?: MinMaxExpr): MinMaxExpr {
    const _j = ({} as MinMaxExpr);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "minmaxtype", _p?.minmaxtype);
    _o.set(_j, "minmaxcollid", _p?.minmaxcollid);
    _o.set(_j, "inputcollid", _p?.inputcollid);
    _o.set(_j, "op", _p?.op);
    _o.set(_j, "args", _p?.args);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  sqlValueFunction(_p?: SQLValueFunction): SQLValueFunction {
    const _j = ({} as SQLValueFunction);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "op", _p?.op);
    _o.set(_j, "type", _p?.type);
    _o.set(_j, "typmod", _p?.typmod);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  xmlExpr(_p?: XmlExpr): XmlExpr {
    const _j = ({} as XmlExpr);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "op", _p?.op);
    _o.set(_j, "name", _p?.name);
    _o.set(_j, "named_args", _p?.named_args);
    _o.set(_j, "arg_names", _p?.arg_names);
    _o.set(_j, "args", _p?.args);
    _o.set(_j, "xmloption", _p?.xmloption);
    _o.set(_j, "indent", _p?.indent);
    _o.set(_j, "type", _p?.type);
    _o.set(_j, "typmod", _p?.typmod);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  jsonFormat(_p?: JsonFormat): JsonFormat {
    const _j = ({} as JsonFormat);
    _o.set(_j, "format_type", _p?.format_type);
    _o.set(_j, "encoding", _p?.encoding);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  jsonReturning(_p?: JsonReturning): JsonReturning {
    const _j = ({} as JsonReturning);
    _o.set(_j, "format", _p?.format);
    _o.set(_j, "typid", _p?.typid);
    _o.set(_j, "typmod", _p?.typmod);
    return _j;
  },
  jsonValueExpr(_p?: JsonValueExpr): JsonValueExpr {
    const _j = ({} as JsonValueExpr);
    _o.set(_j, "raw_expr", _p?.raw_expr);
    _o.set(_j, "formatted_expr", _p?.formatted_expr);
    _o.set(_j, "format", _p?.format);
    return _j;
  },
  jsonConstructorExpr(_p?: JsonConstructorExpr): JsonConstructorExpr {
    const _j = ({} as JsonConstructorExpr);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "type", _p?.type);
    _o.set(_j, "args", _p?.args);
    _o.set(_j, "func", _p?.func);
    _o.set(_j, "coercion", _p?.coercion);
    _o.set(_j, "returning", _p?.returning);
    _o.set(_j, "absent_on_null", _p?.absent_on_null);
    _o.set(_j, "unique", _p?.unique);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  jsonIsPredicate(_p?: JsonIsPredicate): JsonIsPredicate {
    const _j = ({} as JsonIsPredicate);
    _o.set(_j, "expr", _p?.expr);
    _o.set(_j, "format", _p?.format);
    _o.set(_j, "item_type", _p?.item_type);
    _o.set(_j, "unique_keys", _p?.unique_keys);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  nullTest(_p?: NullTest): NullTest {
    const _j = ({} as NullTest);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "arg", _p?.arg);
    _o.set(_j, "nulltesttype", _p?.nulltesttype);
    _o.set(_j, "argisrow", _p?.argisrow);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  booleanTest(_p?: BooleanTest): BooleanTest {
    const _j = ({} as BooleanTest);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "arg", _p?.arg);
    _o.set(_j, "booltesttype", _p?.booltesttype);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  coerceToDomain(_p?: CoerceToDomain): CoerceToDomain {
    const _j = ({} as CoerceToDomain);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "arg", _p?.arg);
    _o.set(_j, "resulttype", _p?.resulttype);
    _o.set(_j, "resulttypmod", _p?.resulttypmod);
    _o.set(_j, "resultcollid", _p?.resultcollid);
    _o.set(_j, "coercionformat", _p?.coercionformat);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  coerceToDomainValue(_p?: CoerceToDomainValue): CoerceToDomainValue {
    const _j = ({} as CoerceToDomainValue);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "typeId", _p?.typeId);
    _o.set(_j, "typeMod", _p?.typeMod);
    _o.set(_j, "collation", _p?.collation);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  setToDefault(_p?: SetToDefault): SetToDefault {
    const _j = ({} as SetToDefault);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "typeId", _p?.typeId);
    _o.set(_j, "typeMod", _p?.typeMod);
    _o.set(_j, "collation", _p?.collation);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  currentOfExpr(_p?: CurrentOfExpr): CurrentOfExpr {
    const _j = ({} as CurrentOfExpr);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "cvarno", _p?.cvarno);
    _o.set(_j, "cursor_name", _p?.cursor_name);
    _o.set(_j, "cursor_param", _p?.cursor_param);
    return _j;
  },
  nextValueExpr(_p?: NextValueExpr): NextValueExpr {
    const _j = ({} as NextValueExpr);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "seqid", _p?.seqid);
    _o.set(_j, "typeId", _p?.typeId);
    return _j;
  },
  inferenceElem(_p?: InferenceElem): InferenceElem {
    const _j = ({} as InferenceElem);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "expr", _p?.expr);
    _o.set(_j, "infercollid", _p?.infercollid);
    _o.set(_j, "inferopclass", _p?.inferopclass);
    return _j;
  },
  targetEntry(_p?: TargetEntry): TargetEntry {
    const _j = ({} as TargetEntry);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "expr", _p?.expr);
    _o.set(_j, "resno", _p?.resno);
    _o.set(_j, "resname", _p?.resname);
    _o.set(_j, "ressortgroupref", _p?.ressortgroupref);
    _o.set(_j, "resorigtbl", _p?.resorigtbl);
    _o.set(_j, "resorigcol", _p?.resorigcol);
    _o.set(_j, "resjunk", _p?.resjunk);
    return _j;
  },
  rangeTblRef(_p?: RangeTblRef): RangeTblRef {
    const _j = ({} as RangeTblRef);
    _o.set(_j, "rtindex", _p?.rtindex);
    return _j;
  },
  joinExpr(_p?: JoinExpr): JoinExpr {
    const _j = ({} as JoinExpr);
    _o.set(_j, "jointype", _p?.jointype);
    _o.set(_j, "isNatural", _p?.isNatural);
    _o.set(_j, "larg", _p?.larg);
    _o.set(_j, "rarg", _p?.rarg);
    _o.set(_j, "usingClause", _p?.usingClause);
    _o.set(_j, "join_using_alias", _p?.join_using_alias);
    _o.set(_j, "quals", _p?.quals);
    _o.set(_j, "alias", _p?.alias);
    _o.set(_j, "rtindex", _p?.rtindex);
    return _j;
  },
  fromExpr(_p?: FromExpr): FromExpr {
    const _j = ({} as FromExpr);
    _o.set(_j, "fromlist", _p?.fromlist);
    _o.set(_j, "quals", _p?.quals);
    return _j;
  },
  onConflictExpr(_p?: OnConflictExpr): OnConflictExpr {
    const _j = ({} as OnConflictExpr);
    _o.set(_j, "action", _p?.action);
    _o.set(_j, "arbiterElems", _p?.arbiterElems);
    _o.set(_j, "arbiterWhere", _p?.arbiterWhere);
    _o.set(_j, "constraint", _p?.constraint);
    _o.set(_j, "onConflictSet", _p?.onConflictSet);
    _o.set(_j, "onConflictWhere", _p?.onConflictWhere);
    _o.set(_j, "exclRelIndex", _p?.exclRelIndex);
    _o.set(_j, "exclRelTlist", _p?.exclRelTlist);
    return _j;
  },
  query(_p?: Query): Query {
    const _j = ({} as Query);
    _o.set(_j, "commandType", _p?.commandType);
    _o.set(_j, "querySource", _p?.querySource);
    _o.set(_j, "canSetTag", _p?.canSetTag);
    _o.set(_j, "utilityStmt", _p?.utilityStmt);
    _o.set(_j, "resultRelation", _p?.resultRelation);
    _o.set(_j, "hasAggs", _p?.hasAggs);
    _o.set(_j, "hasWindowFuncs", _p?.hasWindowFuncs);
    _o.set(_j, "hasTargetSRFs", _p?.hasTargetSRFs);
    _o.set(_j, "hasSubLinks", _p?.hasSubLinks);
    _o.set(_j, "hasDistinctOn", _p?.hasDistinctOn);
    _o.set(_j, "hasRecursive", _p?.hasRecursive);
    _o.set(_j, "hasModifyingCTE", _p?.hasModifyingCTE);
    _o.set(_j, "hasForUpdate", _p?.hasForUpdate);
    _o.set(_j, "hasRowSecurity", _p?.hasRowSecurity);
    _o.set(_j, "isReturn", _p?.isReturn);
    _o.set(_j, "cteList", _p?.cteList);
    _o.set(_j, "rtable", _p?.rtable);
    _o.set(_j, "rteperminfos", _p?.rteperminfos);
    _o.set(_j, "jointree", _p?.jointree);
    _o.set(_j, "mergeActionList", _p?.mergeActionList);
    _o.set(_j, "mergeUseOuterJoin", _p?.mergeUseOuterJoin);
    _o.set(_j, "targetList", _p?.targetList);
    _o.set(_j, "override", _p?.override);
    _o.set(_j, "onConflict", _p?.onConflict);
    _o.set(_j, "returningList", _p?.returningList);
    _o.set(_j, "groupClause", _p?.groupClause);
    _o.set(_j, "groupDistinct", _p?.groupDistinct);
    _o.set(_j, "groupingSets", _p?.groupingSets);
    _o.set(_j, "havingQual", _p?.havingQual);
    _o.set(_j, "windowClause", _p?.windowClause);
    _o.set(_j, "distinctClause", _p?.distinctClause);
    _o.set(_j, "sortClause", _p?.sortClause);
    _o.set(_j, "limitOffset", _p?.limitOffset);
    _o.set(_j, "limitCount", _p?.limitCount);
    _o.set(_j, "limitOption", _p?.limitOption);
    _o.set(_j, "rowMarks", _p?.rowMarks);
    _o.set(_j, "setOperations", _p?.setOperations);
    _o.set(_j, "constraintDeps", _p?.constraintDeps);
    _o.set(_j, "withCheckOptions", _p?.withCheckOptions);
    _o.set(_j, "stmt_location", _p?.stmt_location);
    _o.set(_j, "stmt_len", _p?.stmt_len);
    return _j;
  },
  typeName(_p?: TypeName): TypeName {
    const _j = ({} as TypeName);
    _o.set(_j, "names", _p?.names);
    _o.set(_j, "typeOid", _p?.typeOid);
    _o.set(_j, "setof", _p?.setof);
    _o.set(_j, "pct_type", _p?.pct_type);
    _o.set(_j, "typmods", _p?.typmods);
    _o.set(_j, "typemod", _p?.typemod);
    _o.set(_j, "arrayBounds", _p?.arrayBounds);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  columnRef(_p?: ColumnRef): ColumnRef {
    const _j = ({} as ColumnRef);
    _o.set(_j, "fields", _p?.fields);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  paramRef(_p?: ParamRef): ParamRef {
    const _j = ({} as ParamRef);
    _o.set(_j, "number", _p?.number);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  aExpr(_p?: A_Expr): A_Expr {
    const _j = ({} as A_Expr);
    _o.set(_j, "kind", _p?.kind);
    _o.set(_j, "name", _p?.name);
    _o.set(_j, "lexpr", _p?.lexpr);
    _o.set(_j, "rexpr", _p?.rexpr);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  typeCast(_p?: TypeCast): TypeCast {
    const _j = ({} as TypeCast);
    _o.set(_j, "arg", _p?.arg);
    _o.set(_j, "typeName", _p?.typeName);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  collateClause(_p?: CollateClause): CollateClause {
    const _j = ({} as CollateClause);
    _o.set(_j, "arg", _p?.arg);
    _o.set(_j, "collname", _p?.collname);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  roleSpec(_p?: RoleSpec): RoleSpec {
    const _j = ({} as RoleSpec);
    _o.set(_j, "roletype", _p?.roletype);
    _o.set(_j, "rolename", _p?.rolename);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  funcCall(_p?: FuncCall): FuncCall {
    const _j = ({} as FuncCall);
    _o.set(_j, "funcname", _p?.funcname);
    _o.set(_j, "args", _p?.args);
    _o.set(_j, "agg_order", _p?.agg_order);
    _o.set(_j, "agg_filter", _p?.agg_filter);
    _o.set(_j, "over", _p?.over);
    _o.set(_j, "agg_within_group", _p?.agg_within_group);
    _o.set(_j, "agg_star", _p?.agg_star);
    _o.set(_j, "agg_distinct", _p?.agg_distinct);
    _o.set(_j, "func_variadic", _p?.func_variadic);
    _o.set(_j, "funcformat", _p?.funcformat);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  aStar(_p?: A_Star): A_Star {
    const _j = ({} as A_Star);
    return _j;
  },
  aIndices(_p?: A_Indices): A_Indices {
    const _j = ({} as A_Indices);
    _o.set(_j, "is_slice", _p?.is_slice);
    _o.set(_j, "lidx", _p?.lidx);
    _o.set(_j, "uidx", _p?.uidx);
    return _j;
  },
  aIndirection(_p?: A_Indirection): A_Indirection {
    const _j = ({} as A_Indirection);
    _o.set(_j, "arg", _p?.arg);
    _o.set(_j, "indirection", _p?.indirection);
    return _j;
  },
  aArrayExpr(_p?: A_ArrayExpr): A_ArrayExpr {
    const _j = ({} as A_ArrayExpr);
    _o.set(_j, "elements", _p?.elements);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  resTarget(_p?: ResTarget): ResTarget {
    const _j = ({} as ResTarget);
    _o.set(_j, "name", _p?.name);
    _o.set(_j, "indirection", _p?.indirection);
    _o.set(_j, "val", _p?.val);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  multiAssignRef(_p?: MultiAssignRef): MultiAssignRef {
    const _j = ({} as MultiAssignRef);
    _o.set(_j, "source", _p?.source);
    _o.set(_j, "colno", _p?.colno);
    _o.set(_j, "ncolumns", _p?.ncolumns);
    return _j;
  },
  sortBy(_p?: SortBy): SortBy {
    const _j = ({} as SortBy);
    _o.set(_j, "node", _p?.node);
    _o.set(_j, "sortby_dir", _p?.sortby_dir);
    _o.set(_j, "sortby_nulls", _p?.sortby_nulls);
    _o.set(_j, "useOp", _p?.useOp);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  windowDef(_p?: WindowDef): WindowDef {
    const _j = ({} as WindowDef);
    _o.set(_j, "name", _p?.name);
    _o.set(_j, "refname", _p?.refname);
    _o.set(_j, "partitionClause", _p?.partitionClause);
    _o.set(_j, "orderClause", _p?.orderClause);
    _o.set(_j, "frameOptions", _p?.frameOptions);
    _o.set(_j, "startOffset", _p?.startOffset);
    _o.set(_j, "endOffset", _p?.endOffset);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  rangeSubselect(_p?: RangeSubselect): RangeSubselect {
    const _j = ({} as RangeSubselect);
    _o.set(_j, "lateral", _p?.lateral);
    _o.set(_j, "subquery", _p?.subquery);
    _o.set(_j, "alias", _p?.alias);
    return _j;
  },
  rangeFunction(_p?: RangeFunction): RangeFunction {
    const _j = ({} as RangeFunction);
    _o.set(_j, "lateral", _p?.lateral);
    _o.set(_j, "ordinality", _p?.ordinality);
    _o.set(_j, "is_rowsfrom", _p?.is_rowsfrom);
    _o.set(_j, "functions", _p?.functions);
    _o.set(_j, "alias", _p?.alias);
    _o.set(_j, "coldeflist", _p?.coldeflist);
    return _j;
  },
  rangeTableFunc(_p?: RangeTableFunc): RangeTableFunc {
    const _j = ({} as RangeTableFunc);
    _o.set(_j, "lateral", _p?.lateral);
    _o.set(_j, "docexpr", _p?.docexpr);
    _o.set(_j, "rowexpr", _p?.rowexpr);
    _o.set(_j, "namespaces", _p?.namespaces);
    _o.set(_j, "columns", _p?.columns);
    _o.set(_j, "alias", _p?.alias);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  rangeTableFuncCol(_p?: RangeTableFuncCol): RangeTableFuncCol {
    const _j = ({} as RangeTableFuncCol);
    _o.set(_j, "colname", _p?.colname);
    _o.set(_j, "typeName", _p?.typeName);
    _o.set(_j, "for_ordinality", _p?.for_ordinality);
    _o.set(_j, "is_not_null", _p?.is_not_null);
    _o.set(_j, "colexpr", _p?.colexpr);
    _o.set(_j, "coldefexpr", _p?.coldefexpr);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  rangeTableSample(_p?: RangeTableSample): RangeTableSample {
    const _j = ({} as RangeTableSample);
    _o.set(_j, "relation", _p?.relation);
    _o.set(_j, "method", _p?.method);
    _o.set(_j, "args", _p?.args);
    _o.set(_j, "repeatable", _p?.repeatable);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  columnDef(_p?: ColumnDef): ColumnDef {
    const _j = ({} as ColumnDef);
    _o.set(_j, "colname", _p?.colname);
    _o.set(_j, "typeName", _p?.typeName);
    _o.set(_j, "compression", _p?.compression);
    _o.set(_j, "inhcount", _p?.inhcount);
    _o.set(_j, "is_local", _p?.is_local);
    _o.set(_j, "is_not_null", _p?.is_not_null);
    _o.set(_j, "is_from_type", _p?.is_from_type);
    _o.set(_j, "storage", _p?.storage);
    _o.set(_j, "storage_name", _p?.storage_name);
    _o.set(_j, "raw_default", _p?.raw_default);
    _o.set(_j, "cooked_default", _p?.cooked_default);
    _o.set(_j, "identity", _p?.identity);
    _o.set(_j, "identitySequence", _p?.identitySequence);
    _o.set(_j, "generated", _p?.generated);
    _o.set(_j, "collClause", _p?.collClause);
    _o.set(_j, "collOid", _p?.collOid);
    _o.set(_j, "constraints", _p?.constraints);
    _o.set(_j, "fdwoptions", _p?.fdwoptions);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  tableLikeClause(_p?: TableLikeClause): TableLikeClause {
    const _j = ({} as TableLikeClause);
    _o.set(_j, "relation", _p?.relation);
    _o.set(_j, "options", _p?.options);
    _o.set(_j, "relationOid", _p?.relationOid);
    return _j;
  },
  indexElem(_p?: IndexElem): IndexElem {
    const _j = ({} as IndexElem);
    _o.set(_j, "name", _p?.name);
    _o.set(_j, "expr", _p?.expr);
    _o.set(_j, "indexcolname", _p?.indexcolname);
    _o.set(_j, "collation", _p?.collation);
    _o.set(_j, "opclass", _p?.opclass);
    _o.set(_j, "opclassopts", _p?.opclassopts);
    _o.set(_j, "ordering", _p?.ordering);
    _o.set(_j, "nulls_ordering", _p?.nulls_ordering);
    return _j;
  },
  defElem(_p?: DefElem): DefElem {
    const _j = ({} as DefElem);
    _o.set(_j, "defnamespace", _p?.defnamespace);
    _o.set(_j, "defname", _p?.defname);
    _o.set(_j, "arg", _p?.arg);
    _o.set(_j, "defaction", _p?.defaction);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  lockingClause(_p?: LockingClause): LockingClause {
    const _j = ({} as LockingClause);
    _o.set(_j, "lockedRels", _p?.lockedRels);
    _o.set(_j, "strength", _p?.strength);
    _o.set(_j, "waitPolicy", _p?.waitPolicy);
    return _j;
  },
  xmlSerialize(_p?: XmlSerialize): XmlSerialize {
    const _j = ({} as XmlSerialize);
    _o.set(_j, "xmloption", _p?.xmloption);
    _o.set(_j, "expr", _p?.expr);
    _o.set(_j, "typeName", _p?.typeName);
    _o.set(_j, "indent", _p?.indent);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  partitionElem(_p?: PartitionElem): PartitionElem {
    const _j = ({} as PartitionElem);
    _o.set(_j, "name", _p?.name);
    _o.set(_j, "expr", _p?.expr);
    _o.set(_j, "collation", _p?.collation);
    _o.set(_j, "opclass", _p?.opclass);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  partitionSpec(_p?: PartitionSpec): PartitionSpec {
    const _j = ({} as PartitionSpec);
    _o.set(_j, "strategy", _p?.strategy);
    _o.set(_j, "partParams", _p?.partParams);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  partitionBoundSpec(_p?: PartitionBoundSpec): PartitionBoundSpec {
    const _j = ({} as PartitionBoundSpec);
    _o.set(_j, "strategy", _p?.strategy);
    _o.set(_j, "is_default", _p?.is_default);
    _o.set(_j, "modulus", _p?.modulus);
    _o.set(_j, "remainder", _p?.remainder);
    _o.set(_j, "listdatums", _p?.listdatums);
    _o.set(_j, "lowerdatums", _p?.lowerdatums);
    _o.set(_j, "upperdatums", _p?.upperdatums);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  partitionRangeDatum(_p?: PartitionRangeDatum): PartitionRangeDatum {
    const _j = ({} as PartitionRangeDatum);
    _o.set(_j, "kind", _p?.kind);
    _o.set(_j, "value", _p?.value);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  partitionCmd(_p?: PartitionCmd): PartitionCmd {
    const _j = ({} as PartitionCmd);
    _o.set(_j, "name", _p?.name);
    _o.set(_j, "bound", _p?.bound);
    _o.set(_j, "concurrent", _p?.concurrent);
    return _j;
  },
  rangeTblEntry(_p?: RangeTblEntry): RangeTblEntry {
    const _j = ({} as RangeTblEntry);
    _o.set(_j, "rtekind", _p?.rtekind);
    _o.set(_j, "relid", _p?.relid);
    _o.set(_j, "relkind", _p?.relkind);
    _o.set(_j, "rellockmode", _p?.rellockmode);
    _o.set(_j, "tablesample", _p?.tablesample);
    _o.set(_j, "perminfoindex", _p?.perminfoindex);
    _o.set(_j, "subquery", _p?.subquery);
    _o.set(_j, "security_barrier", _p?.security_barrier);
    _o.set(_j, "jointype", _p?.jointype);
    _o.set(_j, "joinmergedcols", _p?.joinmergedcols);
    _o.set(_j, "joinaliasvars", _p?.joinaliasvars);
    _o.set(_j, "joinleftcols", _p?.joinleftcols);
    _o.set(_j, "joinrightcols", _p?.joinrightcols);
    _o.set(_j, "join_using_alias", _p?.join_using_alias);
    _o.set(_j, "functions", _p?.functions);
    _o.set(_j, "funcordinality", _p?.funcordinality);
    _o.set(_j, "tablefunc", _p?.tablefunc);
    _o.set(_j, "values_lists", _p?.values_lists);
    _o.set(_j, "ctename", _p?.ctename);
    _o.set(_j, "ctelevelsup", _p?.ctelevelsup);
    _o.set(_j, "self_reference", _p?.self_reference);
    _o.set(_j, "coltypes", _p?.coltypes);
    _o.set(_j, "coltypmods", _p?.coltypmods);
    _o.set(_j, "colcollations", _p?.colcollations);
    _o.set(_j, "enrname", _p?.enrname);
    _o.set(_j, "enrtuples", _p?.enrtuples);
    _o.set(_j, "alias", _p?.alias);
    _o.set(_j, "eref", _p?.eref);
    _o.set(_j, "lateral", _p?.lateral);
    _o.set(_j, "inh", _p?.inh);
    _o.set(_j, "inFromCl", _p?.inFromCl);
    _o.set(_j, "securityQuals", _p?.securityQuals);
    return _j;
  },
  rtePermissionInfo(_p?: RTEPermissionInfo): RTEPermissionInfo {
    const _j = ({} as RTEPermissionInfo);
    _o.set(_j, "relid", _p?.relid);
    _o.set(_j, "inh", _p?.inh);
    _o.set(_j, "requiredPerms", _p?.requiredPerms);
    _o.set(_j, "checkAsUser", _p?.checkAsUser);
    _o.set(_j, "selectedCols", _p?.selectedCols);
    _o.set(_j, "insertedCols", _p?.insertedCols);
    _o.set(_j, "updatedCols", _p?.updatedCols);
    return _j;
  },
  rangeTblFunction(_p?: RangeTblFunction): RangeTblFunction {
    const _j = ({} as RangeTblFunction);
    _o.set(_j, "funcexpr", _p?.funcexpr);
    _o.set(_j, "funccolcount", _p?.funccolcount);
    _o.set(_j, "funccolnames", _p?.funccolnames);
    _o.set(_j, "funccoltypes", _p?.funccoltypes);
    _o.set(_j, "funccoltypmods", _p?.funccoltypmods);
    _o.set(_j, "funccolcollations", _p?.funccolcollations);
    _o.set(_j, "funcparams", _p?.funcparams);
    return _j;
  },
  tableSampleClause(_p?: TableSampleClause): TableSampleClause {
    const _j = ({} as TableSampleClause);
    _o.set(_j, "tsmhandler", _p?.tsmhandler);
    _o.set(_j, "args", _p?.args);
    _o.set(_j, "repeatable", _p?.repeatable);
    return _j;
  },
  withCheckOption(_p?: WithCheckOption): WithCheckOption {
    const _j = ({} as WithCheckOption);
    _o.set(_j, "kind", _p?.kind);
    _o.set(_j, "relname", _p?.relname);
    _o.set(_j, "polname", _p?.polname);
    _o.set(_j, "qual", _p?.qual);
    _o.set(_j, "cascaded", _p?.cascaded);
    return _j;
  },
  sortGroupClause(_p?: SortGroupClause): SortGroupClause {
    const _j = ({} as SortGroupClause);
    _o.set(_j, "tleSortGroupRef", _p?.tleSortGroupRef);
    _o.set(_j, "eqop", _p?.eqop);
    _o.set(_j, "sortop", _p?.sortop);
    _o.set(_j, "nulls_first", _p?.nulls_first);
    _o.set(_j, "hashable", _p?.hashable);
    return _j;
  },
  groupingSet(_p?: GroupingSet): GroupingSet {
    const _j = ({} as GroupingSet);
    _o.set(_j, "kind", _p?.kind);
    _o.set(_j, "content", _p?.content);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  windowClause(_p?: WindowClause): WindowClause {
    const _j = ({} as WindowClause);
    _o.set(_j, "name", _p?.name);
    _o.set(_j, "refname", _p?.refname);
    _o.set(_j, "partitionClause", _p?.partitionClause);
    _o.set(_j, "orderClause", _p?.orderClause);
    _o.set(_j, "frameOptions", _p?.frameOptions);
    _o.set(_j, "startOffset", _p?.startOffset);
    _o.set(_j, "endOffset", _p?.endOffset);
    _o.set(_j, "runCondition", _p?.runCondition);
    _o.set(_j, "startInRangeFunc", _p?.startInRangeFunc);
    _o.set(_j, "endInRangeFunc", _p?.endInRangeFunc);
    _o.set(_j, "inRangeColl", _p?.inRangeColl);
    _o.set(_j, "inRangeAsc", _p?.inRangeAsc);
    _o.set(_j, "inRangeNullsFirst", _p?.inRangeNullsFirst);
    _o.set(_j, "winref", _p?.winref);
    _o.set(_j, "copiedOrder", _p?.copiedOrder);
    return _j;
  },
  rowMarkClause(_p?: RowMarkClause): RowMarkClause {
    const _j = ({} as RowMarkClause);
    _o.set(_j, "rti", _p?.rti);
    _o.set(_j, "strength", _p?.strength);
    _o.set(_j, "waitPolicy", _p?.waitPolicy);
    _o.set(_j, "pushedDown", _p?.pushedDown);
    return _j;
  },
  withClause(_p?: WithClause): WithClause {
    const _j = ({} as WithClause);
    _o.set(_j, "ctes", _p?.ctes);
    _o.set(_j, "recursive", _p?.recursive);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  inferClause(_p?: InferClause): InferClause {
    const _j = ({} as InferClause);
    _o.set(_j, "indexElems", _p?.indexElems);
    _o.set(_j, "whereClause", _p?.whereClause);
    _o.set(_j, "conname", _p?.conname);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  onConflictClause(_p?: OnConflictClause): OnConflictClause {
    const _j = ({} as OnConflictClause);
    _o.set(_j, "action", _p?.action);
    _o.set(_j, "infer", _p?.infer);
    _o.set(_j, "targetList", _p?.targetList);
    _o.set(_j, "whereClause", _p?.whereClause);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  cteSearchClause(_p?: CTESearchClause): CTESearchClause {
    const _j = ({} as CTESearchClause);
    _o.set(_j, "search_col_list", _p?.search_col_list);
    _o.set(_j, "search_breadth_first", _p?.search_breadth_first);
    _o.set(_j, "search_seq_column", _p?.search_seq_column);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  cteCycleClause(_p?: CTECycleClause): CTECycleClause {
    const _j = ({} as CTECycleClause);
    _o.set(_j, "cycle_col_list", _p?.cycle_col_list);
    _o.set(_j, "cycle_mark_column", _p?.cycle_mark_column);
    _o.set(_j, "cycle_mark_value", _p?.cycle_mark_value);
    _o.set(_j, "cycle_mark_default", _p?.cycle_mark_default);
    _o.set(_j, "cycle_path_column", _p?.cycle_path_column);
    _o.set(_j, "location", _p?.location);
    _o.set(_j, "cycle_mark_type", _p?.cycle_mark_type);
    _o.set(_j, "cycle_mark_typmod", _p?.cycle_mark_typmod);
    _o.set(_j, "cycle_mark_collation", _p?.cycle_mark_collation);
    _o.set(_j, "cycle_mark_neop", _p?.cycle_mark_neop);
    return _j;
  },
  commonTableExpr(_p?: CommonTableExpr): CommonTableExpr {
    const _j = ({} as CommonTableExpr);
    _o.set(_j, "ctename", _p?.ctename);
    _o.set(_j, "aliascolnames", _p?.aliascolnames);
    _o.set(_j, "ctematerialized", _p?.ctematerialized);
    _o.set(_j, "ctequery", _p?.ctequery);
    _o.set(_j, "search_clause", _p?.search_clause);
    _o.set(_j, "cycle_clause", _p?.cycle_clause);
    _o.set(_j, "location", _p?.location);
    _o.set(_j, "cterecursive", _p?.cterecursive);
    _o.set(_j, "cterefcount", _p?.cterefcount);
    _o.set(_j, "ctecolnames", _p?.ctecolnames);
    _o.set(_j, "ctecoltypes", _p?.ctecoltypes);
    _o.set(_j, "ctecoltypmods", _p?.ctecoltypmods);
    _o.set(_j, "ctecolcollations", _p?.ctecolcollations);
    return _j;
  },
  mergeWhenClause(_p?: MergeWhenClause): MergeWhenClause {
    const _j = ({} as MergeWhenClause);
    _o.set(_j, "matched", _p?.matched);
    _o.set(_j, "commandType", _p?.commandType);
    _o.set(_j, "override", _p?.override);
    _o.set(_j, "condition", _p?.condition);
    _o.set(_j, "targetList", _p?.targetList);
    _o.set(_j, "values", _p?.values);
    return _j;
  },
  mergeAction(_p?: MergeAction): MergeAction {
    const _j = ({} as MergeAction);
    _o.set(_j, "matched", _p?.matched);
    _o.set(_j, "commandType", _p?.commandType);
    _o.set(_j, "override", _p?.override);
    _o.set(_j, "qual", _p?.qual);
    _o.set(_j, "targetList", _p?.targetList);
    _o.set(_j, "updateColnos", _p?.updateColnos);
    return _j;
  },
  triggerTransition(_p?: TriggerTransition): TriggerTransition {
    const _j = ({} as TriggerTransition);
    _o.set(_j, "name", _p?.name);
    _o.set(_j, "isNew", _p?.isNew);
    _o.set(_j, "isTable", _p?.isTable);
    return _j;
  },
  jsonOutput(_p?: JsonOutput): JsonOutput {
    const _j = ({} as JsonOutput);
    _o.set(_j, "typeName", _p?.typeName);
    _o.set(_j, "returning", _p?.returning);
    return _j;
  },
  jsonKeyValue(_p?: JsonKeyValue): JsonKeyValue {
    const _j = ({} as JsonKeyValue);
    _o.set(_j, "key", _p?.key);
    _o.set(_j, "value", _p?.value);
    return _j;
  },
  jsonObjectConstructor(_p?: JsonObjectConstructor): JsonObjectConstructor {
    const _j = ({} as JsonObjectConstructor);
    _o.set(_j, "exprs", _p?.exprs);
    _o.set(_j, "output", _p?.output);
    _o.set(_j, "absent_on_null", _p?.absent_on_null);
    _o.set(_j, "unique", _p?.unique);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  jsonArrayConstructor(_p?: JsonArrayConstructor): JsonArrayConstructor {
    const _j = ({} as JsonArrayConstructor);
    _o.set(_j, "exprs", _p?.exprs);
    _o.set(_j, "output", _p?.output);
    _o.set(_j, "absent_on_null", _p?.absent_on_null);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  jsonArrayQueryConstructor(_p?: JsonArrayQueryConstructor): JsonArrayQueryConstructor {
    const _j = ({} as JsonArrayQueryConstructor);
    _o.set(_j, "query", _p?.query);
    _o.set(_j, "output", _p?.output);
    _o.set(_j, "format", _p?.format);
    _o.set(_j, "absent_on_null", _p?.absent_on_null);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  jsonAggConstructor(_p?: JsonAggConstructor): JsonAggConstructor {
    const _j = ({} as JsonAggConstructor);
    _o.set(_j, "output", _p?.output);
    _o.set(_j, "agg_filter", _p?.agg_filter);
    _o.set(_j, "agg_order", _p?.agg_order);
    _o.set(_j, "over", _p?.over);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  jsonObjectAgg(_p?: JsonObjectAgg): JsonObjectAgg {
    const _j = ({} as JsonObjectAgg);
    _o.set(_j, "constructor", _p?.constructor);
    _o.set(_j, "arg", _p?.arg);
    _o.set(_j, "absent_on_null", _p?.absent_on_null);
    _o.set(_j, "unique", _p?.unique);
    return _j;
  },
  jsonArrayAgg(_p?: JsonArrayAgg): JsonArrayAgg {
    const _j = ({} as JsonArrayAgg);
    _o.set(_j, "constructor", _p?.constructor);
    _o.set(_j, "arg", _p?.arg);
    _o.set(_j, "absent_on_null", _p?.absent_on_null);
    return _j;
  },
  rawStmt(_p?: RawStmt): RawStmt {
    const _j = ({} as RawStmt);
    _o.set(_j, "stmt", _p?.stmt);
    _o.set(_j, "stmt_location", _p?.stmt_location);
    _o.set(_j, "stmt_len", _p?.stmt_len);
    return _j;
  },
  insertStmt(_p?: InsertStmt): InsertStmt {
    const _j = ({} as InsertStmt);
    _o.set(_j, "relation", _p?.relation);
    _o.set(_j, "cols", _p?.cols);
    _o.set(_j, "selectStmt", _p?.selectStmt);
    _o.set(_j, "onConflictClause", _p?.onConflictClause);
    _o.set(_j, "returningList", _p?.returningList);
    _o.set(_j, "withClause", _p?.withClause);
    _o.set(_j, "override", _p?.override);
    return _j;
  },
  deleteStmt(_p?: DeleteStmt): DeleteStmt {
    const _j = ({} as DeleteStmt);
    _o.set(_j, "relation", _p?.relation);
    _o.set(_j, "usingClause", _p?.usingClause);
    _o.set(_j, "whereClause", _p?.whereClause);
    _o.set(_j, "returningList", _p?.returningList);
    _o.set(_j, "withClause", _p?.withClause);
    return _j;
  },
  updateStmt(_p?: UpdateStmt): UpdateStmt {
    const _j = ({} as UpdateStmt);
    _o.set(_j, "relation", _p?.relation);
    _o.set(_j, "targetList", _p?.targetList);
    _o.set(_j, "whereClause", _p?.whereClause);
    _o.set(_j, "fromClause", _p?.fromClause);
    _o.set(_j, "returningList", _p?.returningList);
    _o.set(_j, "withClause", _p?.withClause);
    return _j;
  },
  mergeStmt(_p?: MergeStmt): MergeStmt {
    const _j = ({} as MergeStmt);
    _o.set(_j, "relation", _p?.relation);
    _o.set(_j, "sourceRelation", _p?.sourceRelation);
    _o.set(_j, "joinCondition", _p?.joinCondition);
    _o.set(_j, "mergeWhenClauses", _p?.mergeWhenClauses);
    _o.set(_j, "withClause", _p?.withClause);
    return _j;
  },
  selectStmt(_p?: SelectStmt): SelectStmt {
    const _j = ({} as SelectStmt);
    _o.set(_j, "distinctClause", _p?.distinctClause);
    _o.set(_j, "intoClause", _p?.intoClause);
    _o.set(_j, "targetList", _p?.targetList);
    _o.set(_j, "fromClause", _p?.fromClause);
    _o.set(_j, "whereClause", _p?.whereClause);
    _o.set(_j, "groupClause", _p?.groupClause);
    _o.set(_j, "groupDistinct", _p?.groupDistinct);
    _o.set(_j, "havingClause", _p?.havingClause);
    _o.set(_j, "windowClause", _p?.windowClause);
    _o.set(_j, "valuesLists", _p?.valuesLists);
    _o.set(_j, "sortClause", _p?.sortClause);
    _o.set(_j, "limitOffset", _p?.limitOffset);
    _o.set(_j, "limitCount", _p?.limitCount);
    _o.set(_j, "limitOption", _p?.limitOption);
    _o.set(_j, "lockingClause", _p?.lockingClause);
    _o.set(_j, "withClause", _p?.withClause);
    _o.set(_j, "op", _p?.op);
    _o.set(_j, "all", _p?.all);
    _o.set(_j, "larg", _p?.larg);
    _o.set(_j, "rarg", _p?.rarg);
    return _j;
  },
  setOperationStmt(_p?: SetOperationStmt): SetOperationStmt {
    const _j = ({} as SetOperationStmt);
    _o.set(_j, "op", _p?.op);
    _o.set(_j, "all", _p?.all);
    _o.set(_j, "larg", _p?.larg);
    _o.set(_j, "rarg", _p?.rarg);
    _o.set(_j, "colTypes", _p?.colTypes);
    _o.set(_j, "colTypmods", _p?.colTypmods);
    _o.set(_j, "colCollations", _p?.colCollations);
    _o.set(_j, "groupClauses", _p?.groupClauses);
    return _j;
  },
  returnStmt(_p?: ReturnStmt): ReturnStmt {
    const _j = ({} as ReturnStmt);
    _o.set(_j, "returnval", _p?.returnval);
    return _j;
  },
  plAssignStmt(_p?: PLAssignStmt): PLAssignStmt {
    const _j = ({} as PLAssignStmt);
    _o.set(_j, "name", _p?.name);
    _o.set(_j, "indirection", _p?.indirection);
    _o.set(_j, "nnames", _p?.nnames);
    _o.set(_j, "val", _p?.val);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  createSchemaStmt(_p?: CreateSchemaStmt): CreateSchemaStmt {
    const _j = ({} as CreateSchemaStmt);
    _o.set(_j, "schemaname", _p?.schemaname);
    _o.set(_j, "authrole", _p?.authrole);
    _o.set(_j, "schemaElts", _p?.schemaElts);
    _o.set(_j, "if_not_exists", _p?.if_not_exists);
    return _j;
  },
  alterTableStmt(_p?: AlterTableStmt): AlterTableStmt {
    const _j = ({} as AlterTableStmt);
    _o.set(_j, "relation", _p?.relation);
    _o.set(_j, "cmds", _p?.cmds);
    _o.set(_j, "objtype", _p?.objtype);
    _o.set(_j, "missing_ok", _p?.missing_ok);
    return _j;
  },
  replicaIdentityStmt(_p?: ReplicaIdentityStmt): ReplicaIdentityStmt {
    const _j = ({} as ReplicaIdentityStmt);
    _o.set(_j, "identity_type", _p?.identity_type);
    _o.set(_j, "name", _p?.name);
    return _j;
  },
  alterTableCmd(_p?: AlterTableCmd): AlterTableCmd {
    const _j = ({} as AlterTableCmd);
    _o.set(_j, "subtype", _p?.subtype);
    _o.set(_j, "name", _p?.name);
    _o.set(_j, "num", _p?.num);
    _o.set(_j, "newowner", _p?.newowner);
    _o.set(_j, "def", _p?.def);
    _o.set(_j, "behavior", _p?.behavior);
    _o.set(_j, "missing_ok", _p?.missing_ok);
    _o.set(_j, "recurse", _p?.recurse);
    return _j;
  },
  alterCollationStmt(_p?: AlterCollationStmt): AlterCollationStmt {
    const _j = ({} as AlterCollationStmt);
    _o.set(_j, "collname", _p?.collname);
    return _j;
  },
  alterDomainStmt(_p?: AlterDomainStmt): AlterDomainStmt {
    const _j = ({} as AlterDomainStmt);
    _o.set(_j, "subtype", _p?.subtype);
    _o.set(_j, "typeName", _p?.typeName);
    _o.set(_j, "name", _p?.name);
    _o.set(_j, "def", _p?.def);
    _o.set(_j, "behavior", _p?.behavior);
    _o.set(_j, "missing_ok", _p?.missing_ok);
    return _j;
  },
  grantStmt(_p?: GrantStmt): GrantStmt {
    const _j = ({} as GrantStmt);
    _o.set(_j, "is_grant", _p?.is_grant);
    _o.set(_j, "targtype", _p?.targtype);
    _o.set(_j, "objtype", _p?.objtype);
    _o.set(_j, "objects", _p?.objects);
    _o.set(_j, "privileges", _p?.privileges);
    _o.set(_j, "grantees", _p?.grantees);
    _o.set(_j, "grant_option", _p?.grant_option);
    _o.set(_j, "grantor", _p?.grantor);
    _o.set(_j, "behavior", _p?.behavior);
    return _j;
  },
  objectWithArgs(_p?: ObjectWithArgs): ObjectWithArgs {
    const _j = ({} as ObjectWithArgs);
    _o.set(_j, "objname", _p?.objname);
    _o.set(_j, "objargs", _p?.objargs);
    _o.set(_j, "objfuncargs", _p?.objfuncargs);
    _o.set(_j, "args_unspecified", _p?.args_unspecified);
    return _j;
  },
  accessPriv(_p?: AccessPriv): AccessPriv {
    const _j = ({} as AccessPriv);
    _o.set(_j, "priv_name", _p?.priv_name);
    _o.set(_j, "cols", _p?.cols);
    return _j;
  },
  grantRoleStmt(_p?: GrantRoleStmt): GrantRoleStmt {
    const _j = ({} as GrantRoleStmt);
    _o.set(_j, "granted_roles", _p?.granted_roles);
    _o.set(_j, "grantee_roles", _p?.grantee_roles);
    _o.set(_j, "is_grant", _p?.is_grant);
    _o.set(_j, "opt", _p?.opt);
    _o.set(_j, "grantor", _p?.grantor);
    _o.set(_j, "behavior", _p?.behavior);
    return _j;
  },
  alterDefaultPrivilegesStmt(_p?: AlterDefaultPrivilegesStmt): AlterDefaultPrivilegesStmt {
    const _j = ({} as AlterDefaultPrivilegesStmt);
    _o.set(_j, "options", _p?.options);
    _o.set(_j, "action", _p?.action);
    return _j;
  },
  copyStmt(_p?: CopyStmt): CopyStmt {
    const _j = ({} as CopyStmt);
    _o.set(_j, "relation", _p?.relation);
    _o.set(_j, "query", _p?.query);
    _o.set(_j, "attlist", _p?.attlist);
    _o.set(_j, "is_from", _p?.is_from);
    _o.set(_j, "is_program", _p?.is_program);
    _o.set(_j, "filename", _p?.filename);
    _o.set(_j, "options", _p?.options);
    _o.set(_j, "whereClause", _p?.whereClause);
    return _j;
  },
  variableSetStmt(_p?: VariableSetStmt): VariableSetStmt {
    const _j = ({} as VariableSetStmt);
    _o.set(_j, "kind", _p?.kind);
    _o.set(_j, "name", _p?.name);
    _o.set(_j, "args", _p?.args);
    _o.set(_j, "is_local", _p?.is_local);
    return _j;
  },
  variableShowStmt(_p?: VariableShowStmt): VariableShowStmt {
    const _j = ({} as VariableShowStmt);
    _o.set(_j, "name", _p?.name);
    return _j;
  },
  createStmt(_p?: CreateStmt): CreateStmt {
    const _j = ({} as CreateStmt);
    _o.set(_j, "relation", _p?.relation);
    _o.set(_j, "tableElts", _p?.tableElts);
    _o.set(_j, "inhRelations", _p?.inhRelations);
    _o.set(_j, "partbound", _p?.partbound);
    _o.set(_j, "partspec", _p?.partspec);
    _o.set(_j, "ofTypename", _p?.ofTypename);
    _o.set(_j, "constraints", _p?.constraints);
    _o.set(_j, "options", _p?.options);
    _o.set(_j, "oncommit", _p?.oncommit);
    _o.set(_j, "tablespacename", _p?.tablespacename);
    _o.set(_j, "accessMethod", _p?.accessMethod);
    _o.set(_j, "if_not_exists", _p?.if_not_exists);
    return _j;
  },
  constraint(_p?: Constraint): Constraint {
    const _j = ({} as Constraint);
    _o.set(_j, "contype", _p?.contype);
    _o.set(_j, "conname", _p?.conname);
    _o.set(_j, "deferrable", _p?.deferrable);
    _o.set(_j, "initdeferred", _p?.initdeferred);
    _o.set(_j, "location", _p?.location);
    _o.set(_j, "is_no_inherit", _p?.is_no_inherit);
    _o.set(_j, "raw_expr", _p?.raw_expr);
    _o.set(_j, "cooked_expr", _p?.cooked_expr);
    _o.set(_j, "generated_when", _p?.generated_when);
    _o.set(_j, "nulls_not_distinct", _p?.nulls_not_distinct);
    _o.set(_j, "keys", _p?.keys);
    _o.set(_j, "including", _p?.including);
    _o.set(_j, "exclusions", _p?.exclusions);
    _o.set(_j, "options", _p?.options);
    _o.set(_j, "indexname", _p?.indexname);
    _o.set(_j, "indexspace", _p?.indexspace);
    _o.set(_j, "reset_default_tblspc", _p?.reset_default_tblspc);
    _o.set(_j, "access_method", _p?.access_method);
    _o.set(_j, "where_clause", _p?.where_clause);
    _o.set(_j, "pktable", _p?.pktable);
    _o.set(_j, "fk_attrs", _p?.fk_attrs);
    _o.set(_j, "pk_attrs", _p?.pk_attrs);
    _o.set(_j, "fk_matchtype", _p?.fk_matchtype);
    _o.set(_j, "fk_upd_action", _p?.fk_upd_action);
    _o.set(_j, "fk_del_action", _p?.fk_del_action);
    _o.set(_j, "fk_del_set_cols", _p?.fk_del_set_cols);
    _o.set(_j, "old_conpfeqop", _p?.old_conpfeqop);
    _o.set(_j, "old_pktable_oid", _p?.old_pktable_oid);
    _o.set(_j, "skip_validation", _p?.skip_validation);
    _o.set(_j, "initially_valid", _p?.initially_valid);
    return _j;
  },
  createTableSpaceStmt(_p?: CreateTableSpaceStmt): CreateTableSpaceStmt {
    const _j = ({} as CreateTableSpaceStmt);
    _o.set(_j, "tablespacename", _p?.tablespacename);
    _o.set(_j, "owner", _p?.owner);
    _o.set(_j, "location", _p?.location);
    _o.set(_j, "options", _p?.options);
    return _j;
  },
  dropTableSpaceStmt(_p?: DropTableSpaceStmt): DropTableSpaceStmt {
    const _j = ({} as DropTableSpaceStmt);
    _o.set(_j, "tablespacename", _p?.tablespacename);
    _o.set(_j, "missing_ok", _p?.missing_ok);
    return _j;
  },
  alterTableSpaceOptionsStmt(_p?: AlterTableSpaceOptionsStmt): AlterTableSpaceOptionsStmt {
    const _j = ({} as AlterTableSpaceOptionsStmt);
    _o.set(_j, "tablespacename", _p?.tablespacename);
    _o.set(_j, "options", _p?.options);
    _o.set(_j, "isReset", _p?.isReset);
    return _j;
  },
  alterTableMoveAllStmt(_p?: AlterTableMoveAllStmt): AlterTableMoveAllStmt {
    const _j = ({} as AlterTableMoveAllStmt);
    _o.set(_j, "orig_tablespacename", _p?.orig_tablespacename);
    _o.set(_j, "objtype", _p?.objtype);
    _o.set(_j, "roles", _p?.roles);
    _o.set(_j, "new_tablespacename", _p?.new_tablespacename);
    _o.set(_j, "nowait", _p?.nowait);
    return _j;
  },
  createExtensionStmt(_p?: CreateExtensionStmt): CreateExtensionStmt {
    const _j = ({} as CreateExtensionStmt);
    _o.set(_j, "extname", _p?.extname);
    _o.set(_j, "if_not_exists", _p?.if_not_exists);
    _o.set(_j, "options", _p?.options);
    return _j;
  },
  alterExtensionStmt(_p?: AlterExtensionStmt): AlterExtensionStmt {
    const _j = ({} as AlterExtensionStmt);
    _o.set(_j, "extname", _p?.extname);
    _o.set(_j, "options", _p?.options);
    return _j;
  },
  alterExtensionContentsStmt(_p?: AlterExtensionContentsStmt): AlterExtensionContentsStmt {
    const _j = ({} as AlterExtensionContentsStmt);
    _o.set(_j, "extname", _p?.extname);
    _o.set(_j, "action", _p?.action);
    _o.set(_j, "objtype", _p?.objtype);
    _o.set(_j, "object", _p?.object);
    return _j;
  },
  createFdwStmt(_p?: CreateFdwStmt): CreateFdwStmt {
    const _j = ({} as CreateFdwStmt);
    _o.set(_j, "fdwname", _p?.fdwname);
    _o.set(_j, "func_options", _p?.func_options);
    _o.set(_j, "options", _p?.options);
    return _j;
  },
  alterFdwStmt(_p?: AlterFdwStmt): AlterFdwStmt {
    const _j = ({} as AlterFdwStmt);
    _o.set(_j, "fdwname", _p?.fdwname);
    _o.set(_j, "func_options", _p?.func_options);
    _o.set(_j, "options", _p?.options);
    return _j;
  },
  createForeignServerStmt(_p?: CreateForeignServerStmt): CreateForeignServerStmt {
    const _j = ({} as CreateForeignServerStmt);
    _o.set(_j, "servername", _p?.servername);
    _o.set(_j, "servertype", _p?.servertype);
    _o.set(_j, "version", _p?.version);
    _o.set(_j, "fdwname", _p?.fdwname);
    _o.set(_j, "if_not_exists", _p?.if_not_exists);
    _o.set(_j, "options", _p?.options);
    return _j;
  },
  alterForeignServerStmt(_p?: AlterForeignServerStmt): AlterForeignServerStmt {
    const _j = ({} as AlterForeignServerStmt);
    _o.set(_j, "servername", _p?.servername);
    _o.set(_j, "version", _p?.version);
    _o.set(_j, "options", _p?.options);
    _o.set(_j, "has_version", _p?.has_version);
    return _j;
  },
  createForeignTableStmt(_p?: CreateForeignTableStmt): CreateForeignTableStmt {
    const _j = ({} as CreateForeignTableStmt);
    _o.set(_j, "base", _p?.base);
    _o.set(_j, "servername", _p?.servername);
    _o.set(_j, "options", _p?.options);
    return _j;
  },
  createUserMappingStmt(_p?: CreateUserMappingStmt): CreateUserMappingStmt {
    const _j = ({} as CreateUserMappingStmt);
    _o.set(_j, "user", _p?.user);
    _o.set(_j, "servername", _p?.servername);
    _o.set(_j, "if_not_exists", _p?.if_not_exists);
    _o.set(_j, "options", _p?.options);
    return _j;
  },
  alterUserMappingStmt(_p?: AlterUserMappingStmt): AlterUserMappingStmt {
    const _j = ({} as AlterUserMappingStmt);
    _o.set(_j, "user", _p?.user);
    _o.set(_j, "servername", _p?.servername);
    _o.set(_j, "options", _p?.options);
    return _j;
  },
  dropUserMappingStmt(_p?: DropUserMappingStmt): DropUserMappingStmt {
    const _j = ({} as DropUserMappingStmt);
    _o.set(_j, "user", _p?.user);
    _o.set(_j, "servername", _p?.servername);
    _o.set(_j, "missing_ok", _p?.missing_ok);
    return _j;
  },
  importForeignSchemaStmt(_p?: ImportForeignSchemaStmt): ImportForeignSchemaStmt {
    const _j = ({} as ImportForeignSchemaStmt);
    _o.set(_j, "server_name", _p?.server_name);
    _o.set(_j, "remote_schema", _p?.remote_schema);
    _o.set(_j, "local_schema", _p?.local_schema);
    _o.set(_j, "list_type", _p?.list_type);
    _o.set(_j, "table_list", _p?.table_list);
    _o.set(_j, "options", _p?.options);
    return _j;
  },
  createPolicyStmt(_p?: CreatePolicyStmt): CreatePolicyStmt {
    const _j = ({} as CreatePolicyStmt);
    _o.set(_j, "policy_name", _p?.policy_name);
    _o.set(_j, "table", _p?.table);
    _o.set(_j, "cmd_name", _p?.cmd_name);
    _o.set(_j, "permissive", _p?.permissive);
    _o.set(_j, "roles", _p?.roles);
    _o.set(_j, "qual", _p?.qual);
    _o.set(_j, "with_check", _p?.with_check);
    return _j;
  },
  alterPolicyStmt(_p?: AlterPolicyStmt): AlterPolicyStmt {
    const _j = ({} as AlterPolicyStmt);
    _o.set(_j, "policy_name", _p?.policy_name);
    _o.set(_j, "table", _p?.table);
    _o.set(_j, "roles", _p?.roles);
    _o.set(_j, "qual", _p?.qual);
    _o.set(_j, "with_check", _p?.with_check);
    return _j;
  },
  createAmStmt(_p?: CreateAmStmt): CreateAmStmt {
    const _j = ({} as CreateAmStmt);
    _o.set(_j, "amname", _p?.amname);
    _o.set(_j, "handler_name", _p?.handler_name);
    _o.set(_j, "amtype", _p?.amtype);
    return _j;
  },
  createTrigStmt(_p?: CreateTrigStmt): CreateTrigStmt {
    const _j = ({} as CreateTrigStmt);
    _o.set(_j, "replace", _p?.replace);
    _o.set(_j, "isconstraint", _p?.isconstraint);
    _o.set(_j, "trigname", _p?.trigname);
    _o.set(_j, "relation", _p?.relation);
    _o.set(_j, "funcname", _p?.funcname);
    _o.set(_j, "args", _p?.args);
    _o.set(_j, "row", _p?.row);
    _o.set(_j, "timing", _p?.timing);
    _o.set(_j, "events", _p?.events);
    _o.set(_j, "columns", _p?.columns);
    _o.set(_j, "whenClause", _p?.whenClause);
    _o.set(_j, "transitionRels", _p?.transitionRels);
    _o.set(_j, "deferrable", _p?.deferrable);
    _o.set(_j, "initdeferred", _p?.initdeferred);
    _o.set(_j, "constrrel", _p?.constrrel);
    return _j;
  },
  createEventTrigStmt(_p?: CreateEventTrigStmt): CreateEventTrigStmt {
    const _j = ({} as CreateEventTrigStmt);
    _o.set(_j, "trigname", _p?.trigname);
    _o.set(_j, "eventname", _p?.eventname);
    _o.set(_j, "whenclause", _p?.whenclause);
    _o.set(_j, "funcname", _p?.funcname);
    return _j;
  },
  alterEventTrigStmt(_p?: AlterEventTrigStmt): AlterEventTrigStmt {
    const _j = ({} as AlterEventTrigStmt);
    _o.set(_j, "trigname", _p?.trigname);
    _o.set(_j, "tgenabled", _p?.tgenabled);
    return _j;
  },
  createpLangStmt(_p?: CreatePLangStmt): CreatePLangStmt {
    const _j = ({} as CreatePLangStmt);
    _o.set(_j, "replace", _p?.replace);
    _o.set(_j, "plname", _p?.plname);
    _o.set(_j, "plhandler", _p?.plhandler);
    _o.set(_j, "plinline", _p?.plinline);
    _o.set(_j, "plvalidator", _p?.plvalidator);
    _o.set(_j, "pltrusted", _p?.pltrusted);
    return _j;
  },
  createRoleStmt(_p?: CreateRoleStmt): CreateRoleStmt {
    const _j = ({} as CreateRoleStmt);
    _o.set(_j, "stmt_type", _p?.stmt_type);
    _o.set(_j, "role", _p?.role);
    _o.set(_j, "options", _p?.options);
    return _j;
  },
  alterRoleStmt(_p?: AlterRoleStmt): AlterRoleStmt {
    const _j = ({} as AlterRoleStmt);
    _o.set(_j, "role", _p?.role);
    _o.set(_j, "options", _p?.options);
    _o.set(_j, "action", _p?.action);
    return _j;
  },
  alterRoleSetStmt(_p?: AlterRoleSetStmt): AlterRoleSetStmt {
    const _j = ({} as AlterRoleSetStmt);
    _o.set(_j, "role", _p?.role);
    _o.set(_j, "database", _p?.database);
    _o.set(_j, "setstmt", _p?.setstmt);
    return _j;
  },
  dropRoleStmt(_p?: DropRoleStmt): DropRoleStmt {
    const _j = ({} as DropRoleStmt);
    _o.set(_j, "roles", _p?.roles);
    _o.set(_j, "missing_ok", _p?.missing_ok);
    return _j;
  },
  createSeqStmt(_p?: CreateSeqStmt): CreateSeqStmt {
    const _j = ({} as CreateSeqStmt);
    _o.set(_j, "sequence", _p?.sequence);
    _o.set(_j, "options", _p?.options);
    _o.set(_j, "ownerId", _p?.ownerId);
    _o.set(_j, "for_identity", _p?.for_identity);
    _o.set(_j, "if_not_exists", _p?.if_not_exists);
    return _j;
  },
  alterSeqStmt(_p?: AlterSeqStmt): AlterSeqStmt {
    const _j = ({} as AlterSeqStmt);
    _o.set(_j, "sequence", _p?.sequence);
    _o.set(_j, "options", _p?.options);
    _o.set(_j, "for_identity", _p?.for_identity);
    _o.set(_j, "missing_ok", _p?.missing_ok);
    return _j;
  },
  defineStmt(_p?: DefineStmt): DefineStmt {
    const _j = ({} as DefineStmt);
    _o.set(_j, "kind", _p?.kind);
    _o.set(_j, "oldstyle", _p?.oldstyle);
    _o.set(_j, "defnames", _p?.defnames);
    _o.set(_j, "args", _p?.args);
    _o.set(_j, "definition", _p?.definition);
    _o.set(_j, "if_not_exists", _p?.if_not_exists);
    _o.set(_j, "replace", _p?.replace);
    return _j;
  },
  createDomainStmt(_p?: CreateDomainStmt): CreateDomainStmt {
    const _j = ({} as CreateDomainStmt);
    _o.set(_j, "domainname", _p?.domainname);
    _o.set(_j, "typeName", _p?.typeName);
    _o.set(_j, "collClause", _p?.collClause);
    _o.set(_j, "constraints", _p?.constraints);
    return _j;
  },
  createOpClassStmt(_p?: CreateOpClassStmt): CreateOpClassStmt {
    const _j = ({} as CreateOpClassStmt);
    _o.set(_j, "opclassname", _p?.opclassname);
    _o.set(_j, "opfamilyname", _p?.opfamilyname);
    _o.set(_j, "amname", _p?.amname);
    _o.set(_j, "datatype", _p?.datatype);
    _o.set(_j, "items", _p?.items);
    _o.set(_j, "isDefault", _p?.isDefault);
    return _j;
  },
  createOpClassItem(_p?: CreateOpClassItem): CreateOpClassItem {
    const _j = ({} as CreateOpClassItem);
    _o.set(_j, "itemtype", _p?.itemtype);
    _o.set(_j, "name", _p?.name);
    _o.set(_j, "number", _p?.number);
    _o.set(_j, "order_family", _p?.order_family);
    _o.set(_j, "class_args", _p?.class_args);
    _o.set(_j, "storedtype", _p?.storedtype);
    return _j;
  },
  createOpFamilyStmt(_p?: CreateOpFamilyStmt): CreateOpFamilyStmt {
    const _j = ({} as CreateOpFamilyStmt);
    _o.set(_j, "opfamilyname", _p?.opfamilyname);
    _o.set(_j, "amname", _p?.amname);
    return _j;
  },
  alterOpFamilyStmt(_p?: AlterOpFamilyStmt): AlterOpFamilyStmt {
    const _j = ({} as AlterOpFamilyStmt);
    _o.set(_j, "opfamilyname", _p?.opfamilyname);
    _o.set(_j, "amname", _p?.amname);
    _o.set(_j, "isDrop", _p?.isDrop);
    _o.set(_j, "items", _p?.items);
    return _j;
  },
  dropStmt(_p?: DropStmt): DropStmt {
    const _j = ({} as DropStmt);
    _o.set(_j, "objects", _p?.objects);
    _o.set(_j, "removeType", _p?.removeType);
    _o.set(_j, "behavior", _p?.behavior);
    _o.set(_j, "missing_ok", _p?.missing_ok);
    _o.set(_j, "concurrent", _p?.concurrent);
    return _j;
  },
  truncateStmt(_p?: TruncateStmt): TruncateStmt {
    const _j = ({} as TruncateStmt);
    _o.set(_j, "relations", _p?.relations);
    _o.set(_j, "restart_seqs", _p?.restart_seqs);
    _o.set(_j, "behavior", _p?.behavior);
    return _j;
  },
  commentStmt(_p?: CommentStmt): CommentStmt {
    const _j = ({} as CommentStmt);
    _o.set(_j, "objtype", _p?.objtype);
    _o.set(_j, "object", _p?.object);
    _o.set(_j, "comment", _p?.comment);
    return _j;
  },
  secLabelStmt(_p?: SecLabelStmt): SecLabelStmt {
    const _j = ({} as SecLabelStmt);
    _o.set(_j, "objtype", _p?.objtype);
    _o.set(_j, "object", _p?.object);
    _o.set(_j, "provider", _p?.provider);
    _o.set(_j, "label", _p?.label);
    return _j;
  },
  declareCursorStmt(_p?: DeclareCursorStmt): DeclareCursorStmt {
    const _j = ({} as DeclareCursorStmt);
    _o.set(_j, "portalname", _p?.portalname);
    _o.set(_j, "options", _p?.options);
    _o.set(_j, "query", _p?.query);
    return _j;
  },
  closePortalStmt(_p?: ClosePortalStmt): ClosePortalStmt {
    const _j = ({} as ClosePortalStmt);
    _o.set(_j, "portalname", _p?.portalname);
    return _j;
  },
  fetchStmt(_p?: FetchStmt): FetchStmt {
    const _j = ({} as FetchStmt);
    _o.set(_j, "direction", _p?.direction);
    _o.set(_j, "howMany", _p?.howMany);
    _o.set(_j, "portalname", _p?.portalname);
    _o.set(_j, "ismove", _p?.ismove);
    return _j;
  },
  indexStmt(_p?: IndexStmt): IndexStmt {
    const _j = ({} as IndexStmt);
    _o.set(_j, "idxname", _p?.idxname);
    _o.set(_j, "relation", _p?.relation);
    _o.set(_j, "accessMethod", _p?.accessMethod);
    _o.set(_j, "tableSpace", _p?.tableSpace);
    _o.set(_j, "indexParams", _p?.indexParams);
    _o.set(_j, "indexIncludingParams", _p?.indexIncludingParams);
    _o.set(_j, "options", _p?.options);
    _o.set(_j, "whereClause", _p?.whereClause);
    _o.set(_j, "excludeOpNames", _p?.excludeOpNames);
    _o.set(_j, "idxcomment", _p?.idxcomment);
    _o.set(_j, "indexOid", _p?.indexOid);
    _o.set(_j, "oldNumber", _p?.oldNumber);
    _o.set(_j, "oldCreateSubid", _p?.oldCreateSubid);
    _o.set(_j, "oldFirstRelfilelocatorSubid", _p?.oldFirstRelfilelocatorSubid);
    _o.set(_j, "unique", _p?.unique);
    _o.set(_j, "nulls_not_distinct", _p?.nulls_not_distinct);
    _o.set(_j, "primary", _p?.primary);
    _o.set(_j, "isconstraint", _p?.isconstraint);
    _o.set(_j, "deferrable", _p?.deferrable);
    _o.set(_j, "initdeferred", _p?.initdeferred);
    _o.set(_j, "transformed", _p?.transformed);
    _o.set(_j, "concurrent", _p?.concurrent);
    _o.set(_j, "if_not_exists", _p?.if_not_exists);
    _o.set(_j, "reset_default_tblspc", _p?.reset_default_tblspc);
    return _j;
  },
  createStatsStmt(_p?: CreateStatsStmt): CreateStatsStmt {
    const _j = ({} as CreateStatsStmt);
    _o.set(_j, "defnames", _p?.defnames);
    _o.set(_j, "stat_types", _p?.stat_types);
    _o.set(_j, "exprs", _p?.exprs);
    _o.set(_j, "relations", _p?.relations);
    _o.set(_j, "stxcomment", _p?.stxcomment);
    _o.set(_j, "transformed", _p?.transformed);
    _o.set(_j, "if_not_exists", _p?.if_not_exists);
    return _j;
  },
  statsElem(_p?: StatsElem): StatsElem {
    const _j = ({} as StatsElem);
    _o.set(_j, "name", _p?.name);
    _o.set(_j, "expr", _p?.expr);
    return _j;
  },
  alterStatsStmt(_p?: AlterStatsStmt): AlterStatsStmt {
    const _j = ({} as AlterStatsStmt);
    _o.set(_j, "defnames", _p?.defnames);
    _o.set(_j, "stxstattarget", _p?.stxstattarget);
    _o.set(_j, "missing_ok", _p?.missing_ok);
    return _j;
  },
  createFunctionStmt(_p?: CreateFunctionStmt): CreateFunctionStmt {
    const _j = ({} as CreateFunctionStmt);
    _o.set(_j, "is_procedure", _p?.is_procedure);
    _o.set(_j, "replace", _p?.replace);
    _o.set(_j, "funcname", _p?.funcname);
    _o.set(_j, "parameters", _p?.parameters);
    _o.set(_j, "returnType", _p?.returnType);
    _o.set(_j, "options", _p?.options);
    _o.set(_j, "sql_body", _p?.sql_body);
    return _j;
  },
  functionParameter(_p?: FunctionParameter): FunctionParameter {
    const _j = ({} as FunctionParameter);
    _o.set(_j, "name", _p?.name);
    _o.set(_j, "argType", _p?.argType);
    _o.set(_j, "mode", _p?.mode);
    _o.set(_j, "defexpr", _p?.defexpr);
    return _j;
  },
  alterFunctionStmt(_p?: AlterFunctionStmt): AlterFunctionStmt {
    const _j = ({} as AlterFunctionStmt);
    _o.set(_j, "objtype", _p?.objtype);
    _o.set(_j, "func", _p?.func);
    _o.set(_j, "actions", _p?.actions);
    return _j;
  },
  doStmt(_p?: DoStmt): DoStmt {
    const _j = ({} as DoStmt);
    _o.set(_j, "args", _p?.args);
    return _j;
  },
  inlineCodeBlock(_p?: InlineCodeBlock): InlineCodeBlock {
    const _j = ({} as InlineCodeBlock);
    _o.set(_j, "source_text", _p?.source_text);
    _o.set(_j, "langOid", _p?.langOid);
    _o.set(_j, "langIsTrusted", _p?.langIsTrusted);
    _o.set(_j, "atomic", _p?.atomic);
    return _j;
  },
  callStmt(_p?: CallStmt): CallStmt {
    const _j = ({} as CallStmt);
    _o.set(_j, "funccall", _p?.funccall);
    _o.set(_j, "funcexpr", _p?.funcexpr);
    _o.set(_j, "outargs", _p?.outargs);
    return _j;
  },
  callContext(_p?: CallContext): CallContext {
    const _j = ({} as CallContext);
    _o.set(_j, "atomic", _p?.atomic);
    return _j;
  },
  renameStmt(_p?: RenameStmt): RenameStmt {
    const _j = ({} as RenameStmt);
    _o.set(_j, "renameType", _p?.renameType);
    _o.set(_j, "relationType", _p?.relationType);
    _o.set(_j, "relation", _p?.relation);
    _o.set(_j, "object", _p?.object);
    _o.set(_j, "subname", _p?.subname);
    _o.set(_j, "newname", _p?.newname);
    _o.set(_j, "behavior", _p?.behavior);
    _o.set(_j, "missing_ok", _p?.missing_ok);
    return _j;
  },
  alterObjectDependsStmt(_p?: AlterObjectDependsStmt): AlterObjectDependsStmt {
    const _j = ({} as AlterObjectDependsStmt);
    _o.set(_j, "objectType", _p?.objectType);
    _o.set(_j, "relation", _p?.relation);
    _o.set(_j, "object", _p?.object);
    _o.set(_j, "extname", _p?.extname);
    _o.set(_j, "remove", _p?.remove);
    return _j;
  },
  alterObjectSchemaStmt(_p?: AlterObjectSchemaStmt): AlterObjectSchemaStmt {
    const _j = ({} as AlterObjectSchemaStmt);
    _o.set(_j, "objectType", _p?.objectType);
    _o.set(_j, "relation", _p?.relation);
    _o.set(_j, "object", _p?.object);
    _o.set(_j, "newschema", _p?.newschema);
    _o.set(_j, "missing_ok", _p?.missing_ok);
    return _j;
  },
  alterOwnerStmt(_p?: AlterOwnerStmt): AlterOwnerStmt {
    const _j = ({} as AlterOwnerStmt);
    _o.set(_j, "objectType", _p?.objectType);
    _o.set(_j, "relation", _p?.relation);
    _o.set(_j, "object", _p?.object);
    _o.set(_j, "newowner", _p?.newowner);
    return _j;
  },
  alterOperatorStmt(_p?: AlterOperatorStmt): AlterOperatorStmt {
    const _j = ({} as AlterOperatorStmt);
    _o.set(_j, "opername", _p?.opername);
    _o.set(_j, "options", _p?.options);
    return _j;
  },
  alterTypeStmt(_p?: AlterTypeStmt): AlterTypeStmt {
    const _j = ({} as AlterTypeStmt);
    _o.set(_j, "typeName", _p?.typeName);
    _o.set(_j, "options", _p?.options);
    return _j;
  },
  ruleStmt(_p?: RuleStmt): RuleStmt {
    const _j = ({} as RuleStmt);
    _o.set(_j, "relation", _p?.relation);
    _o.set(_j, "rulename", _p?.rulename);
    _o.set(_j, "whereClause", _p?.whereClause);
    _o.set(_j, "event", _p?.event);
    _o.set(_j, "instead", _p?.instead);
    _o.set(_j, "actions", _p?.actions);
    _o.set(_j, "replace", _p?.replace);
    return _j;
  },
  notifyStmt(_p?: NotifyStmt): NotifyStmt {
    const _j = ({} as NotifyStmt);
    _o.set(_j, "conditionname", _p?.conditionname);
    _o.set(_j, "payload", _p?.payload);
    return _j;
  },
  listenStmt(_p?: ListenStmt): ListenStmt {
    const _j = ({} as ListenStmt);
    _o.set(_j, "conditionname", _p?.conditionname);
    return _j;
  },
  unlistenStmt(_p?: UnlistenStmt): UnlistenStmt {
    const _j = ({} as UnlistenStmt);
    _o.set(_j, "conditionname", _p?.conditionname);
    return _j;
  },
  transactionStmt(_p?: TransactionStmt): TransactionStmt {
    const _j = ({} as TransactionStmt);
    _o.set(_j, "kind", _p?.kind);
    _o.set(_j, "options", _p?.options);
    _o.set(_j, "savepoint_name", _p?.savepoint_name);
    _o.set(_j, "gid", _p?.gid);
    _o.set(_j, "chain", _p?.chain);
    return _j;
  },
  compositeTypeStmt(_p?: CompositeTypeStmt): CompositeTypeStmt {
    const _j = ({} as CompositeTypeStmt);
    _o.set(_j, "typevar", _p?.typevar);
    _o.set(_j, "coldeflist", _p?.coldeflist);
    return _j;
  },
  createEnumStmt(_p?: CreateEnumStmt): CreateEnumStmt {
    const _j = ({} as CreateEnumStmt);
    _o.set(_j, "typeName", _p?.typeName);
    _o.set(_j, "vals", _p?.vals);
    return _j;
  },
  createRangeStmt(_p?: CreateRangeStmt): CreateRangeStmt {
    const _j = ({} as CreateRangeStmt);
    _o.set(_j, "typeName", _p?.typeName);
    _o.set(_j, "params", _p?.params);
    return _j;
  },
  alterEnumStmt(_p?: AlterEnumStmt): AlterEnumStmt {
    const _j = ({} as AlterEnumStmt);
    _o.set(_j, "typeName", _p?.typeName);
    _o.set(_j, "oldVal", _p?.oldVal);
    _o.set(_j, "newVal", _p?.newVal);
    _o.set(_j, "newValNeighbor", _p?.newValNeighbor);
    _o.set(_j, "newValIsAfter", _p?.newValIsAfter);
    _o.set(_j, "skipIfNewValExists", _p?.skipIfNewValExists);
    return _j;
  },
  viewStmt(_p?: ViewStmt): ViewStmt {
    const _j = ({} as ViewStmt);
    _o.set(_j, "view", _p?.view);
    _o.set(_j, "aliases", _p?.aliases);
    _o.set(_j, "query", _p?.query);
    _o.set(_j, "replace", _p?.replace);
    _o.set(_j, "options", _p?.options);
    _o.set(_j, "withCheckOption", _p?.withCheckOption);
    return _j;
  },
  loadStmt(_p?: LoadStmt): LoadStmt {
    const _j = ({} as LoadStmt);
    _o.set(_j, "filename", _p?.filename);
    return _j;
  },
  createdbStmt(_p?: CreatedbStmt): CreatedbStmt {
    const _j = ({} as CreatedbStmt);
    _o.set(_j, "dbname", _p?.dbname);
    _o.set(_j, "options", _p?.options);
    return _j;
  },
  alterDatabaseStmt(_p?: AlterDatabaseStmt): AlterDatabaseStmt {
    const _j = ({} as AlterDatabaseStmt);
    _o.set(_j, "dbname", _p?.dbname);
    _o.set(_j, "options", _p?.options);
    return _j;
  },
  alterDatabaseRefreshCollStmt(_p?: AlterDatabaseRefreshCollStmt): AlterDatabaseRefreshCollStmt {
    const _j = ({} as AlterDatabaseRefreshCollStmt);
    _o.set(_j, "dbname", _p?.dbname);
    return _j;
  },
  alterDatabaseSetStmt(_p?: AlterDatabaseSetStmt): AlterDatabaseSetStmt {
    const _j = ({} as AlterDatabaseSetStmt);
    _o.set(_j, "dbname", _p?.dbname);
    _o.set(_j, "setstmt", _p?.setstmt);
    return _j;
  },
  dropdbStmt(_p?: DropdbStmt): DropdbStmt {
    const _j = ({} as DropdbStmt);
    _o.set(_j, "dbname", _p?.dbname);
    _o.set(_j, "missing_ok", _p?.missing_ok);
    _o.set(_j, "options", _p?.options);
    return _j;
  },
  alterSystemStmt(_p?: AlterSystemStmt): AlterSystemStmt {
    const _j = ({} as AlterSystemStmt);
    _o.set(_j, "setstmt", _p?.setstmt);
    return _j;
  },
  clusterStmt(_p?: ClusterStmt): ClusterStmt {
    const _j = ({} as ClusterStmt);
    _o.set(_j, "relation", _p?.relation);
    _o.set(_j, "indexname", _p?.indexname);
    _o.set(_j, "params", _p?.params);
    return _j;
  },
  vacuumStmt(_p?: VacuumStmt): VacuumStmt {
    const _j = ({} as VacuumStmt);
    _o.set(_j, "options", _p?.options);
    _o.set(_j, "rels", _p?.rels);
    _o.set(_j, "is_vacuumcmd", _p?.is_vacuumcmd);
    return _j;
  },
  vacuumRelation(_p?: VacuumRelation): VacuumRelation {
    const _j = ({} as VacuumRelation);
    _o.set(_j, "relation", _p?.relation);
    _o.set(_j, "oid", _p?.oid);
    _o.set(_j, "va_cols", _p?.va_cols);
    return _j;
  },
  explainStmt(_p?: ExplainStmt): ExplainStmt {
    const _j = ({} as ExplainStmt);
    _o.set(_j, "query", _p?.query);
    _o.set(_j, "options", _p?.options);
    return _j;
  },
  createTableAsStmt(_p?: CreateTableAsStmt): CreateTableAsStmt {
    const _j = ({} as CreateTableAsStmt);
    _o.set(_j, "query", _p?.query);
    _o.set(_j, "into", _p?.into);
    _o.set(_j, "objtype", _p?.objtype);
    _o.set(_j, "is_select_into", _p?.is_select_into);
    _o.set(_j, "if_not_exists", _p?.if_not_exists);
    return _j;
  },
  refreshMatViewStmt(_p?: RefreshMatViewStmt): RefreshMatViewStmt {
    const _j = ({} as RefreshMatViewStmt);
    _o.set(_j, "concurrent", _p?.concurrent);
    _o.set(_j, "skipData", _p?.skipData);
    _o.set(_j, "relation", _p?.relation);
    return _j;
  },
  checkPointStmt(_p?: CheckPointStmt): CheckPointStmt {
    const _j = ({} as CheckPointStmt);
    return _j;
  },
  discardStmt(_p?: DiscardStmt): DiscardStmt {
    const _j = ({} as DiscardStmt);
    _o.set(_j, "target", _p?.target);
    return _j;
  },
  lockStmt(_p?: LockStmt): LockStmt {
    const _j = ({} as LockStmt);
    _o.set(_j, "relations", _p?.relations);
    _o.set(_j, "mode", _p?.mode);
    _o.set(_j, "nowait", _p?.nowait);
    return _j;
  },
  constraintsSetStmt(_p?: ConstraintsSetStmt): ConstraintsSetStmt {
    const _j = ({} as ConstraintsSetStmt);
    _o.set(_j, "constraints", _p?.constraints);
    _o.set(_j, "deferred", _p?.deferred);
    return _j;
  },
  reindexStmt(_p?: ReindexStmt): ReindexStmt {
    const _j = ({} as ReindexStmt);
    _o.set(_j, "kind", _p?.kind);
    _o.set(_j, "relation", _p?.relation);
    _o.set(_j, "name", _p?.name);
    _o.set(_j, "params", _p?.params);
    return _j;
  },
  createConversionStmt(_p?: CreateConversionStmt): CreateConversionStmt {
    const _j = ({} as CreateConversionStmt);
    _o.set(_j, "conversion_name", _p?.conversion_name);
    _o.set(_j, "for_encoding_name", _p?.for_encoding_name);
    _o.set(_j, "to_encoding_name", _p?.to_encoding_name);
    _o.set(_j, "func_name", _p?.func_name);
    _o.set(_j, "def", _p?.def);
    return _j;
  },
  createCastStmt(_p?: CreateCastStmt): CreateCastStmt {
    const _j = ({} as CreateCastStmt);
    _o.set(_j, "sourcetype", _p?.sourcetype);
    _o.set(_j, "targettype", _p?.targettype);
    _o.set(_j, "func", _p?.func);
    _o.set(_j, "context", _p?.context);
    _o.set(_j, "inout", _p?.inout);
    return _j;
  },
  createTransformStmt(_p?: CreateTransformStmt): CreateTransformStmt {
    const _j = ({} as CreateTransformStmt);
    _o.set(_j, "replace", _p?.replace);
    _o.set(_j, "type_name", _p?.type_name);
    _o.set(_j, "lang", _p?.lang);
    _o.set(_j, "fromsql", _p?.fromsql);
    _o.set(_j, "tosql", _p?.tosql);
    return _j;
  },
  prepareStmt(_p?: PrepareStmt): PrepareStmt {
    const _j = ({} as PrepareStmt);
    _o.set(_j, "name", _p?.name);
    _o.set(_j, "argtypes", _p?.argtypes);
    _o.set(_j, "query", _p?.query);
    return _j;
  },
  executeStmt(_p?: ExecuteStmt): ExecuteStmt {
    const _j = ({} as ExecuteStmt);
    _o.set(_j, "name", _p?.name);
    _o.set(_j, "params", _p?.params);
    return _j;
  },
  deallocateStmt(_p?: DeallocateStmt): DeallocateStmt {
    const _j = ({} as DeallocateStmt);
    _o.set(_j, "name", _p?.name);
    return _j;
  },
  dropOwnedStmt(_p?: DropOwnedStmt): DropOwnedStmt {
    const _j = ({} as DropOwnedStmt);
    _o.set(_j, "roles", _p?.roles);
    _o.set(_j, "behavior", _p?.behavior);
    return _j;
  },
  reassignOwnedStmt(_p?: ReassignOwnedStmt): ReassignOwnedStmt {
    const _j = ({} as ReassignOwnedStmt);
    _o.set(_j, "roles", _p?.roles);
    _o.set(_j, "newrole", _p?.newrole);
    return _j;
  },
  altertsDictionaryStmt(_p?: AlterTSDictionaryStmt): AlterTSDictionaryStmt {
    const _j = ({} as AlterTSDictionaryStmt);
    _o.set(_j, "dictname", _p?.dictname);
    _o.set(_j, "options", _p?.options);
    return _j;
  },
  altertsConfigurationStmt(_p?: AlterTSConfigurationStmt): AlterTSConfigurationStmt {
    const _j = ({} as AlterTSConfigurationStmt);
    _o.set(_j, "kind", _p?.kind);
    _o.set(_j, "cfgname", _p?.cfgname);
    _o.set(_j, "tokentype", _p?.tokentype);
    _o.set(_j, "dicts", _p?.dicts);
    _o.set(_j, "override", _p?.override);
    _o.set(_j, "replace", _p?.replace);
    _o.set(_j, "missing_ok", _p?.missing_ok);
    return _j;
  },
  publicationTable(_p?: PublicationTable): PublicationTable {
    const _j = ({} as PublicationTable);
    _o.set(_j, "relation", _p?.relation);
    _o.set(_j, "whereClause", _p?.whereClause);
    _o.set(_j, "columns", _p?.columns);
    return _j;
  },
  publicationObjSpec(_p?: PublicationObjSpec): PublicationObjSpec {
    const _j = ({} as PublicationObjSpec);
    _o.set(_j, "pubobjtype", _p?.pubobjtype);
    _o.set(_j, "name", _p?.name);
    _o.set(_j, "pubtable", _p?.pubtable);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  createPublicationStmt(_p?: CreatePublicationStmt): CreatePublicationStmt {
    const _j = ({} as CreatePublicationStmt);
    _o.set(_j, "pubname", _p?.pubname);
    _o.set(_j, "options", _p?.options);
    _o.set(_j, "pubobjects", _p?.pubobjects);
    _o.set(_j, "for_all_tables", _p?.for_all_tables);
    return _j;
  },
  alterPublicationStmt(_p?: AlterPublicationStmt): AlterPublicationStmt {
    const _j = ({} as AlterPublicationStmt);
    _o.set(_j, "pubname", _p?.pubname);
    _o.set(_j, "options", _p?.options);
    _o.set(_j, "pubobjects", _p?.pubobjects);
    _o.set(_j, "for_all_tables", _p?.for_all_tables);
    _o.set(_j, "action", _p?.action);
    return _j;
  },
  createSubscriptionStmt(_p?: CreateSubscriptionStmt): CreateSubscriptionStmt {
    const _j = ({} as CreateSubscriptionStmt);
    _o.set(_j, "subname", _p?.subname);
    _o.set(_j, "conninfo", _p?.conninfo);
    _o.set(_j, "publication", _p?.publication);
    _o.set(_j, "options", _p?.options);
    return _j;
  },
  alterSubscriptionStmt(_p?: AlterSubscriptionStmt): AlterSubscriptionStmt {
    const _j = ({} as AlterSubscriptionStmt);
    _o.set(_j, "kind", _p?.kind);
    _o.set(_j, "subname", _p?.subname);
    _o.set(_j, "conninfo", _p?.conninfo);
    _o.set(_j, "publication", _p?.publication);
    _o.set(_j, "options", _p?.options);
    return _j;
  },
  dropSubscriptionStmt(_p?: DropSubscriptionStmt): DropSubscriptionStmt {
    const _j = ({} as DropSubscriptionStmt);
    _o.set(_j, "subname", _p?.subname);
    _o.set(_j, "missing_ok", _p?.missing_ok);
    _o.set(_j, "behavior", _p?.behavior);
    return _j;
  },
  scanToken(_p?: ScanToken): ScanToken {
    const _j = ({} as ScanToken);
    _o.set(_j, "start", _p?.start);
    _o.set(_j, "end", _p?.end);
    _o.set(_j, "token", _p?.token);
    _o.set(_j, "keywordKind", _p?.keywordKind);
    return _j;
  }
};",
    "file": "asts.ts",
  },
  {
    "code": "/**
* This file was automatically generated by pg-proto-parser@latest.
* DO NOT MODIFY IT BY HAND. Instead, modify the source proto file,
* and run the pg-proto-parser generate command to regenerate this file.
*/
// Generated by pg-proto-parser
export interface FieldSpec {
  name: string;
  type: string;
  isNode: boolean;
  isArray: boolean;
  optional: boolean;
}
export interface NodeSpec {
  name: string;
  wrapped: boolean;
  fields: FieldSpec[];
}
export const runtimeSchema: NodeSpec[] = [
  {
    name: 'A_ArrayExpr',
    wrapped: true,
    fields: [
      {
        name: 'elements',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'A_Const',
    wrapped: true,
    fields: [
      {
        name: 'boolval',
        type: 'Boolean',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'bsval',
        type: 'BitString',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'fval',
        type: 'Float',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'isnull',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'ival',
        type: 'Integer',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'sval',
        type: 'String',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'A_Expr',
    wrapped: true,
    fields: [
      {
        name: 'kind',
        type: 'A_Expr_Kind',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'lexpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'name',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'rexpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'A_Indices',
    wrapped: true,
    fields: [
      {
        name: 'is_slice',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'lidx',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'uidx',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'A_Indirection',
    wrapped: true,
    fields: [
      {
        name: 'arg',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'indirection',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'A_Star',
    wrapped: true,
    fields: [

    ]
  },
  {
    name: 'AccessPriv',
    wrapped: true,
    fields: [
      {
        name: 'cols',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'priv_name',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'Aggref',
    wrapped: true,
    fields: [
      {
        name: 'aggargtypes',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'aggcollid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'aggdirectargs',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'aggdistinct',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'aggfilter',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'aggfnoid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'aggkind',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'agglevelsup',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'aggno',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'aggorder',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'aggsplit',
        type: 'AggSplit',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'aggstar',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'aggtransno',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'aggtype',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'aggvariadic',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'args',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'inputcollid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'Alias',
    wrapped: true,
    fields: [
      {
        name: 'aliasname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'colnames',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'AlterCollationStmt',
    wrapped: true,
    fields: [
      {
        name: 'collname',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'AlterDatabaseRefreshCollStmt',
    wrapped: true,
    fields: [
      {
        name: 'dbname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'AlterDatabaseSetStmt',
    wrapped: true,
    fields: [
      {
        name: 'dbname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'setstmt',
        type: 'VariableSetStmt',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'AlterDatabaseStmt',
    wrapped: true,
    fields: [
      {
        name: 'dbname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'AlterDefaultPrivilegesStmt',
    wrapped: true,
    fields: [
      {
        name: 'action',
        type: 'GrantStmt',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'AlterDomainStmt',
    wrapped: true,
    fields: [
      {
        name: 'behavior',
        type: 'DropBehavior',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'def',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'missing_ok',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'name',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'subtype',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'typeName',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'AlterEnumStmt',
    wrapped: true,
    fields: [
      {
        name: 'newVal',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'newValIsAfter',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'newValNeighbor',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'oldVal',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'skipIfNewValExists',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'typeName',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'AlterEventTrigStmt',
    wrapped: true,
    fields: [
      {
        name: 'tgenabled',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'trigname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'AlterExtensionContentsStmt',
    wrapped: true,
    fields: [
      {
        name: 'action',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'extname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'object',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'objtype',
        type: 'ObjectType',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'AlterExtensionStmt',
    wrapped: true,
    fields: [
      {
        name: 'extname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'AlterFdwStmt',
    wrapped: true,
    fields: [
      {
        name: 'fdwname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'func_options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'AlterForeignServerStmt',
    wrapped: true,
    fields: [
      {
        name: 'has_version',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'servername',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'version',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'AlterFunctionStmt',
    wrapped: true,
    fields: [
      {
        name: 'actions',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'func',
        type: 'ObjectWithArgs',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'objtype',
        type: 'ObjectType',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'AlternativeSubPlan',
    wrapped: true,
    fields: [
      {
        name: 'subplans',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'AlterObjectDependsStmt',
    wrapped: true,
    fields: [
      {
        name: 'extname',
        type: 'String',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'object',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'objectType',
        type: 'ObjectType',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'relation',
        type: 'RangeVar',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'remove',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'AlterObjectSchemaStmt',
    wrapped: true,
    fields: [
      {
        name: 'missing_ok',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'newschema',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'object',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'objectType',
        type: 'ObjectType',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'relation',
        type: 'RangeVar',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'AlterOperatorStmt',
    wrapped: true,
    fields: [
      {
        name: 'opername',
        type: 'ObjectWithArgs',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'AlterOpFamilyStmt',
    wrapped: true,
    fields: [
      {
        name: 'amname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'isDrop',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'items',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'opfamilyname',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'AlterOwnerStmt',
    wrapped: true,
    fields: [
      {
        name: 'newowner',
        type: 'RoleSpec',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'object',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'objectType',
        type: 'ObjectType',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'relation',
        type: 'RangeVar',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'AlterPolicyStmt',
    wrapped: true,
    fields: [
      {
        name: 'policy_name',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'qual',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'roles',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'table',
        type: 'RangeVar',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'with_check',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'AlterPublicationStmt',
    wrapped: true,
    fields: [
      {
        name: 'action',
        type: 'AlterPublicationAction',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'for_all_tables',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'pubname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'pubobjects',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'AlterRoleSetStmt',
    wrapped: true,
    fields: [
      {
        name: 'database',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'role',
        type: 'RoleSpec',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'setstmt',
        type: 'VariableSetStmt',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'AlterRoleStmt',
    wrapped: true,
    fields: [
      {
        name: 'action',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'role',
        type: 'RoleSpec',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'AlterSeqStmt',
    wrapped: true,
    fields: [
      {
        name: 'for_identity',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'missing_ok',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'sequence',
        type: 'RangeVar',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'AlterStatsStmt',
    wrapped: true,
    fields: [
      {
        name: 'defnames',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'missing_ok',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'stxstattarget',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'AlterSubscriptionStmt',
    wrapped: true,
    fields: [
      {
        name: 'conninfo',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'kind',
        type: 'AlterSubscriptionType',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'publication',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'subname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'AlterSystemStmt',
    wrapped: true,
    fields: [
      {
        name: 'setstmt',
        type: 'VariableSetStmt',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'AlterTableCmd',
    wrapped: true,
    fields: [
      {
        name: 'behavior',
        type: 'DropBehavior',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'def',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'missing_ok',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'name',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'newowner',
        type: 'RoleSpec',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'num',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'recurse',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'subtype',
        type: 'AlterTableType',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'AlterTableMoveAllStmt',
    wrapped: true,
    fields: [
      {
        name: 'new_tablespacename',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'nowait',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'objtype',
        type: 'ObjectType',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'orig_tablespacename',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'roles',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'AlterTableSpaceOptionsStmt',
    wrapped: true,
    fields: [
      {
        name: 'isReset',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'tablespacename',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'AlterTableStmt',
    wrapped: true,
    fields: [
      {
        name: 'cmds',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'missing_ok',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'objtype',
        type: 'ObjectType',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'relation',
        type: 'RangeVar',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'AlterTSConfigurationStmt',
    wrapped: true,
    fields: [
      {
        name: 'cfgname',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'dicts',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'kind',
        type: 'AlterTSConfigType',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'missing_ok',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'override',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'replace',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'tokentype',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'AlterTSDictionaryStmt',
    wrapped: true,
    fields: [
      {
        name: 'dictname',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'AlterTypeStmt',
    wrapped: true,
    fields: [
      {
        name: 'options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'typeName',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'AlterUserMappingStmt',
    wrapped: true,
    fields: [
      {
        name: 'options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'servername',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'user',
        type: 'RoleSpec',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'ArrayCoerceExpr',
    wrapped: true,
    fields: [
      {
        name: 'arg',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'coerceformat',
        type: 'CoercionForm',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'elemexpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'resultcollid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'resulttype',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'resulttypmod',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'ArrayExpr',
    wrapped: true,
    fields: [
      {
        name: 'array_collid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'array_typeid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'element_typeid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'elements',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'multidims',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'BitString',
    wrapped: true,
    fields: [
      {
        name: 'bsval',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'Boolean',
    wrapped: true,
    fields: [
      {
        name: 'boolval',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'BooleanTest',
    wrapped: true,
    fields: [
      {
        name: 'arg',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'booltesttype',
        type: 'BoolTestType',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'BoolExpr',
    wrapped: true,
    fields: [
      {
        name: 'args',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'boolop',
        type: 'BoolExprType',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CallContext',
    wrapped: true,
    fields: [
      {
        name: 'atomic',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CallStmt',
    wrapped: true,
    fields: [
      {
        name: 'funccall',
        type: 'FuncCall',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'funcexpr',
        type: 'FuncExpr',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'outargs',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'CaseExpr',
    wrapped: true,
    fields: [
      {
        name: 'arg',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'args',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'casecollid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'casetype',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'defresult',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CaseTestExpr',
    wrapped: true,
    fields: [
      {
        name: 'collation',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'typeId',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'typeMod',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CaseWhen',
    wrapped: true,
    fields: [
      {
        name: 'expr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'result',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CheckPointStmt',
    wrapped: true,
    fields: [

    ]
  },
  {
    name: 'ClosePortalStmt',
    wrapped: true,
    fields: [
      {
        name: 'portalname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'ClusterStmt',
    wrapped: true,
    fields: [
      {
        name: 'indexname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'params',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'relation',
        type: 'RangeVar',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CoalesceExpr',
    wrapped: true,
    fields: [
      {
        name: 'args',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'coalescecollid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'coalescetype',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CoerceToDomain',
    wrapped: true,
    fields: [
      {
        name: 'arg',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'coercionformat',
        type: 'CoercionForm',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'resultcollid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'resulttype',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'resulttypmod',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CoerceToDomainValue',
    wrapped: true,
    fields: [
      {
        name: 'collation',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'typeId',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'typeMod',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CoerceViaIO',
    wrapped: true,
    fields: [
      {
        name: 'arg',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'coerceformat',
        type: 'CoercionForm',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'resultcollid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'resulttype',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CollateClause',
    wrapped: true,
    fields: [
      {
        name: 'arg',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'collname',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CollateExpr',
    wrapped: true,
    fields: [
      {
        name: 'arg',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'collOid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'ColumnDef',
    wrapped: true,
    fields: [
      {
        name: 'collClause',
        type: 'CollateClause',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'collOid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'colname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'compression',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'constraints',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'cooked_default',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'fdwoptions',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'generated',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'identity',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'identitySequence',
        type: 'RangeVar',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'inhcount',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'is_from_type',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'is_local',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'is_not_null',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'raw_default',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'storage',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'storage_name',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'typeName',
        type: 'TypeName',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'ColumnRef',
    wrapped: true,
    fields: [
      {
        name: 'fields',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CommentStmt',
    wrapped: true,
    fields: [
      {
        name: 'comment',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'object',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'objtype',
        type: 'ObjectType',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CommonTableExpr',
    wrapped: true,
    fields: [
      {
        name: 'aliascolnames',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'ctecolcollations',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'ctecolnames',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'ctecoltypes',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'ctecoltypmods',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'ctematerialized',
        type: 'CTEMaterialize',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'ctename',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'ctequery',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'cterecursive',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'cterefcount',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'cycle_clause',
        type: 'CTECycleClause',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'search_clause',
        type: 'CTESearchClause',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CompositeTypeStmt',
    wrapped: true,
    fields: [
      {
        name: 'coldeflist',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'typevar',
        type: 'RangeVar',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'Constraint',
    wrapped: true,
    fields: [
      {
        name: 'access_method',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'conname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'contype',
        type: 'ConstrType',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'cooked_expr',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'deferrable',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'exclusions',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'fk_attrs',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'fk_del_action',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'fk_del_set_cols',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'fk_matchtype',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'fk_upd_action',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'generated_when',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'including',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'indexname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'indexspace',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'initdeferred',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'initially_valid',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'is_no_inherit',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'keys',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'nulls_not_distinct',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'old_conpfeqop',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'old_pktable_oid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'pk_attrs',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'pktable',
        type: 'RangeVar',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'raw_expr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'reset_default_tblspc',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'skip_validation',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'where_clause',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'ConstraintsSetStmt',
    wrapped: true,
    fields: [
      {
        name: 'constraints',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'deferred',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'ConvertRowtypeExpr',
    wrapped: true,
    fields: [
      {
        name: 'arg',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'convertformat',
        type: 'CoercionForm',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'resulttype',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CopyStmt',
    wrapped: true,
    fields: [
      {
        name: 'attlist',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'filename',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'is_from',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'is_program',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'query',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'relation',
        type: 'RangeVar',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'whereClause',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CreateAmStmt',
    wrapped: true,
    fields: [
      {
        name: 'amname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'amtype',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'handler_name',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'CreateCastStmt',
    wrapped: true,
    fields: [
      {
        name: 'context',
        type: 'CoercionContext',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'func',
        type: 'ObjectWithArgs',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'inout',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'sourcetype',
        type: 'TypeName',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'targettype',
        type: 'TypeName',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CreateConversionStmt',
    wrapped: true,
    fields: [
      {
        name: 'conversion_name',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'def',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'for_encoding_name',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'func_name',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'to_encoding_name',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CreatedbStmt',
    wrapped: true,
    fields: [
      {
        name: 'dbname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'CreateDomainStmt',
    wrapped: true,
    fields: [
      {
        name: 'collClause',
        type: 'CollateClause',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'constraints',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'domainname',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'typeName',
        type: 'TypeName',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CreateEnumStmt',
    wrapped: true,
    fields: [
      {
        name: 'typeName',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'vals',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'CreateEventTrigStmt',
    wrapped: true,
    fields: [
      {
        name: 'eventname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'funcname',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'trigname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'whenclause',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'CreateExtensionStmt',
    wrapped: true,
    fields: [
      {
        name: 'extname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'if_not_exists',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'CreateFdwStmt',
    wrapped: true,
    fields: [
      {
        name: 'fdwname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'func_options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'CreateForeignServerStmt',
    wrapped: true,
    fields: [
      {
        name: 'fdwname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'if_not_exists',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'servername',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'servertype',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'version',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CreateForeignTableStmt',
    wrapped: true,
    fields: [
      {
        name: 'base',
        type: 'CreateStmt',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'servername',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CreateFunctionStmt',
    wrapped: true,
    fields: [
      {
        name: 'funcname',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'is_procedure',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'parameters',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'replace',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'returnType',
        type: 'TypeName',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'sql_body',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CreateOpClassItem',
    wrapped: true,
    fields: [
      {
        name: 'class_args',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'itemtype',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'name',
        type: 'ObjectWithArgs',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'number',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'order_family',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'storedtype',
        type: 'TypeName',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CreateOpClassStmt',
    wrapped: true,
    fields: [
      {
        name: 'amname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'datatype',
        type: 'TypeName',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'isDefault',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'items',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'opclassname',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'opfamilyname',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'CreateOpFamilyStmt',
    wrapped: true,
    fields: [
      {
        name: 'amname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'opfamilyname',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'CreatePLangStmt',
    wrapped: true,
    fields: [
      {
        name: 'plhandler',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'plinline',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'plname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'pltrusted',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'plvalidator',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'replace',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CreatePolicyStmt',
    wrapped: true,
    fields: [
      {
        name: 'cmd_name',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'permissive',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'policy_name',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'qual',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'roles',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'table',
        type: 'RangeVar',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'with_check',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CreatePublicationStmt',
    wrapped: true,
    fields: [
      {
        name: 'for_all_tables',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'pubname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'pubobjects',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'CreateRangeStmt',
    wrapped: true,
    fields: [
      {
        name: 'params',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'typeName',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'CreateRoleStmt',
    wrapped: true,
    fields: [
      {
        name: 'options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'role',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'stmt_type',
        type: 'RoleStmtType',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CreateSchemaStmt',
    wrapped: true,
    fields: [
      {
        name: 'authrole',
        type: 'RoleSpec',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'if_not_exists',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'schemaElts',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'schemaname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CreateSeqStmt',
    wrapped: true,
    fields: [
      {
        name: 'for_identity',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'if_not_exists',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'ownerId',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'sequence',
        type: 'RangeVar',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CreateStatsStmt',
    wrapped: true,
    fields: [
      {
        name: 'defnames',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'exprs',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'if_not_exists',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'relations',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'stat_types',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'stxcomment',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'transformed',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CreateStmt',
    wrapped: true,
    fields: [
      {
        name: 'accessMethod',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'constraints',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'if_not_exists',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'inhRelations',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'ofTypename',
        type: 'TypeName',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'oncommit',
        type: 'OnCommitAction',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'partbound',
        type: 'PartitionBoundSpec',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'partspec',
        type: 'PartitionSpec',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'relation',
        type: 'RangeVar',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'tableElts',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'tablespacename',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CreateSubscriptionStmt',
    wrapped: true,
    fields: [
      {
        name: 'conninfo',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'publication',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'subname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CreateTableAsStmt',
    wrapped: true,
    fields: [
      {
        name: 'if_not_exists',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'into',
        type: 'IntoClause',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'is_select_into',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'objtype',
        type: 'ObjectType',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'query',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CreateTableSpaceStmt',
    wrapped: true,
    fields: [
      {
        name: 'location',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'owner',
        type: 'RoleSpec',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'tablespacename',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CreateTransformStmt',
    wrapped: true,
    fields: [
      {
        name: 'fromsql',
        type: 'ObjectWithArgs',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'lang',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'replace',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'tosql',
        type: 'ObjectWithArgs',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'type_name',
        type: 'TypeName',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CreateTrigStmt',
    wrapped: true,
    fields: [
      {
        name: 'args',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'columns',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'constrrel',
        type: 'RangeVar',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'deferrable',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'events',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'funcname',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'initdeferred',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'isconstraint',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'relation',
        type: 'RangeVar',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'replace',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'row',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'timing',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'transitionRels',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'trigname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'whenClause',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CreateUserMappingStmt',
    wrapped: true,
    fields: [
      {
        name: 'if_not_exists',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'servername',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'user',
        type: 'RoleSpec',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CTECycleClause',
    wrapped: true,
    fields: [
      {
        name: 'cycle_col_list',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'cycle_mark_collation',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'cycle_mark_column',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'cycle_mark_default',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'cycle_mark_neop',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'cycle_mark_type',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'cycle_mark_typmod',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'cycle_mark_value',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'cycle_path_column',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CTESearchClause',
    wrapped: true,
    fields: [
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'search_breadth_first',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'search_col_list',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'search_seq_column',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CurrentOfExpr',
    wrapped: true,
    fields: [
      {
        name: 'cursor_name',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'cursor_param',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'cvarno',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'DeallocateStmt',
    wrapped: true,
    fields: [
      {
        name: 'name',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'DeclareCursorStmt',
    wrapped: true,
    fields: [
      {
        name: 'options',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'portalname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'query',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'DefElem',
    wrapped: true,
    fields: [
      {
        name: 'arg',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'defaction',
        type: 'DefElemAction',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'defname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'defnamespace',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'DefineStmt',
    wrapped: true,
    fields: [
      {
        name: 'args',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'definition',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'defnames',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'if_not_exists',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'kind',
        type: 'ObjectType',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'oldstyle',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'replace',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'DeleteStmt',
    wrapped: true,
    fields: [
      {
        name: 'relation',
        type: 'RangeVar',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'returningList',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'usingClause',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'whereClause',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'withClause',
        type: 'WithClause',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'DiscardStmt',
    wrapped: true,
    fields: [
      {
        name: 'target',
        type: 'DiscardMode',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'DistinctExpr',
    wrapped: true,
    fields: [
      {
        name: 'args',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'inputcollid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'opcollid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'opno',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'opresulttype',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'opretset',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'DoStmt',
    wrapped: true,
    fields: [
      {
        name: 'args',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'DropdbStmt',
    wrapped: true,
    fields: [
      {
        name: 'dbname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'missing_ok',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'DropOwnedStmt',
    wrapped: true,
    fields: [
      {
        name: 'behavior',
        type: 'DropBehavior',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'roles',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'DropRoleStmt',
    wrapped: true,
    fields: [
      {
        name: 'missing_ok',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'roles',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'DropStmt',
    wrapped: true,
    fields: [
      {
        name: 'behavior',
        type: 'DropBehavior',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'concurrent',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'missing_ok',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'objects',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'removeType',
        type: 'ObjectType',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'DropSubscriptionStmt',
    wrapped: true,
    fields: [
      {
        name: 'behavior',
        type: 'DropBehavior',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'missing_ok',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'subname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'DropTableSpaceStmt',
    wrapped: true,
    fields: [
      {
        name: 'missing_ok',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'tablespacename',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'DropUserMappingStmt',
    wrapped: true,
    fields: [
      {
        name: 'missing_ok',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'servername',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'user',
        type: 'RoleSpec',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'ExecuteStmt',
    wrapped: true,
    fields: [
      {
        name: 'name',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'params',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'ExplainStmt',
    wrapped: true,
    fields: [
      {
        name: 'options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'query',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'FetchStmt',
    wrapped: true,
    fields: [
      {
        name: 'direction',
        type: 'FetchDirection',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'howMany',
        type: 'int64',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'ismove',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'portalname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'FieldSelect',
    wrapped: true,
    fields: [
      {
        name: 'arg',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'fieldnum',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'resultcollid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'resulttype',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'resulttypmod',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'FieldStore',
    wrapped: true,
    fields: [
      {
        name: 'arg',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'fieldnums',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'newvals',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'resulttype',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'Float',
    wrapped: true,
    fields: [
      {
        name: 'fval',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'FromExpr',
    wrapped: true,
    fields: [
      {
        name: 'fromlist',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'quals',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'FuncCall',
    wrapped: true,
    fields: [
      {
        name: 'agg_distinct',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'agg_filter',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'agg_order',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'agg_star',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'agg_within_group',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'args',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'func_variadic',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'funcformat',
        type: 'CoercionForm',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'funcname',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'over',
        type: 'WindowDef',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'FuncExpr',
    wrapped: true,
    fields: [
      {
        name: 'args',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'funccollid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'funcformat',
        type: 'CoercionForm',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'funcid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'funcresulttype',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'funcretset',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'funcvariadic',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'inputcollid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'FunctionParameter',
    wrapped: true,
    fields: [
      {
        name: 'argType',
        type: 'TypeName',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'defexpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'mode',
        type: 'FunctionParameterMode',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'name',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'GrantRoleStmt',
    wrapped: true,
    fields: [
      {
        name: 'behavior',
        type: 'DropBehavior',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'granted_roles',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'grantee_roles',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'grantor',
        type: 'RoleSpec',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'is_grant',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'opt',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'GrantStmt',
    wrapped: true,
    fields: [
      {
        name: 'behavior',
        type: 'DropBehavior',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'grant_option',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'grantees',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'grantor',
        type: 'RoleSpec',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'is_grant',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'objects',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'objtype',
        type: 'ObjectType',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'privileges',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'targtype',
        type: 'GrantTargetType',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'GroupingFunc',
    wrapped: true,
    fields: [
      {
        name: 'agglevelsup',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'args',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'refs',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'GroupingSet',
    wrapped: true,
    fields: [
      {
        name: 'content',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'kind',
        type: 'GroupingSetKind',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'ImportForeignSchemaStmt',
    wrapped: true,
    fields: [
      {
        name: 'list_type',
        type: 'ImportForeignSchemaType',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'local_schema',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'remote_schema',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'server_name',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'table_list',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'IndexElem',
    wrapped: true,
    fields: [
      {
        name: 'collation',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'expr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'indexcolname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'name',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'nulls_ordering',
        type: 'SortByNulls',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'opclass',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'opclassopts',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'ordering',
        type: 'SortByDir',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'IndexStmt',
    wrapped: true,
    fields: [
      {
        name: 'accessMethod',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'concurrent',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'deferrable',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'excludeOpNames',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'idxcomment',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'idxname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'if_not_exists',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'indexIncludingParams',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'indexOid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'indexParams',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'initdeferred',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'isconstraint',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'nulls_not_distinct',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'oldCreateSubid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'oldFirstRelfilelocatorSubid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'oldNumber',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'primary',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'relation',
        type: 'RangeVar',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'reset_default_tblspc',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'tableSpace',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'transformed',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'unique',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'whereClause',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'InferClause',
    wrapped: true,
    fields: [
      {
        name: 'conname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'indexElems',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'whereClause',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'InferenceElem',
    wrapped: true,
    fields: [
      {
        name: 'expr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'infercollid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'inferopclass',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'InlineCodeBlock',
    wrapped: true,
    fields: [
      {
        name: 'atomic',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'langIsTrusted',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'langOid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'source_text',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'InsertStmt',
    wrapped: true,
    fields: [
      {
        name: 'cols',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'onConflictClause',
        type: 'OnConflictClause',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'override',
        type: 'OverridingKind',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'relation',
        type: 'RangeVar',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'returningList',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'selectStmt',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'withClause',
        type: 'WithClause',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'Integer',
    wrapped: true,
    fields: [
      {
        name: 'ival',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'IntList',
    wrapped: true,
    fields: [
      {
        name: 'items',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'IntoClause',
    wrapped: true,
    fields: [
      {
        name: 'accessMethod',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'colNames',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'onCommit',
        type: 'OnCommitAction',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'rel',
        type: 'RangeVar',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'skipData',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'tableSpaceName',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'viewQuery',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'JoinExpr',
    wrapped: true,
    fields: [
      {
        name: 'alias',
        type: 'Alias',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'isNatural',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'join_using_alias',
        type: 'Alias',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'jointype',
        type: 'JoinType',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'larg',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'quals',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'rarg',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'rtindex',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'usingClause',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'JsonAggConstructor',
    wrapped: true,
    fields: [
      {
        name: 'agg_filter',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'agg_order',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'output',
        type: 'JsonOutput',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'over',
        type: 'WindowDef',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'JsonArrayAgg',
    wrapped: true,
    fields: [
      {
        name: 'absent_on_null',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'arg',
        type: 'JsonValueExpr',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'constructor',
        type: 'JsonAggConstructor',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'JsonArrayConstructor',
    wrapped: true,
    fields: [
      {
        name: 'absent_on_null',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'exprs',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'output',
        type: 'JsonOutput',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'JsonArrayQueryConstructor',
    wrapped: true,
    fields: [
      {
        name: 'absent_on_null',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'format',
        type: 'JsonFormat',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'output',
        type: 'JsonOutput',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'query',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'JsonConstructorExpr',
    wrapped: true,
    fields: [
      {
        name: 'absent_on_null',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'args',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'coercion',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'func',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'returning',
        type: 'JsonReturning',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'type',
        type: 'JsonConstructorType',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'unique',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'JsonFormat',
    wrapped: true,
    fields: [
      {
        name: 'encoding',
        type: 'JsonEncoding',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'format_type',
        type: 'JsonFormatType',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'JsonIsPredicate',
    wrapped: true,
    fields: [
      {
        name: 'expr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'format',
        type: 'JsonFormat',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'item_type',
        type: 'JsonValueType',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'unique_keys',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'JsonKeyValue',
    wrapped: true,
    fields: [
      {
        name: 'key',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'value',
        type: 'JsonValueExpr',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'JsonObjectAgg',
    wrapped: true,
    fields: [
      {
        name: 'absent_on_null',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'arg',
        type: 'JsonKeyValue',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'constructor',
        type: 'JsonAggConstructor',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'unique',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'JsonObjectConstructor',
    wrapped: true,
    fields: [
      {
        name: 'absent_on_null',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'exprs',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'output',
        type: 'JsonOutput',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'unique',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'JsonOutput',
    wrapped: true,
    fields: [
      {
        name: 'returning',
        type: 'JsonReturning',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'typeName',
        type: 'TypeName',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'JsonReturning',
    wrapped: true,
    fields: [
      {
        name: 'format',
        type: 'JsonFormat',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'typid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'typmod',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'JsonValueExpr',
    wrapped: true,
    fields: [
      {
        name: 'format',
        type: 'JsonFormat',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'formatted_expr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'raw_expr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'List',
    wrapped: true,
    fields: [
      {
        name: 'items',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'ListenStmt',
    wrapped: true,
    fields: [
      {
        name: 'conditionname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'LoadStmt',
    wrapped: true,
    fields: [
      {
        name: 'filename',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'LockingClause',
    wrapped: true,
    fields: [
      {
        name: 'lockedRels',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'strength',
        type: 'LockClauseStrength',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'waitPolicy',
        type: 'LockWaitPolicy',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'LockStmt',
    wrapped: true,
    fields: [
      {
        name: 'mode',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'nowait',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'relations',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'MergeAction',
    wrapped: true,
    fields: [
      {
        name: 'commandType',
        type: 'CmdType',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'matched',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'override',
        type: 'OverridingKind',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'qual',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'targetList',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'updateColnos',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'MergeStmt',
    wrapped: true,
    fields: [
      {
        name: 'joinCondition',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'mergeWhenClauses',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'relation',
        type: 'RangeVar',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'sourceRelation',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'withClause',
        type: 'WithClause',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'MergeWhenClause',
    wrapped: true,
    fields: [
      {
        name: 'commandType',
        type: 'CmdType',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'condition',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'matched',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'override',
        type: 'OverridingKind',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'targetList',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'values',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'MinMaxExpr',
    wrapped: true,
    fields: [
      {
        name: 'args',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'inputcollid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'minmaxcollid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'minmaxtype',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'op',
        type: 'MinMaxOp',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'MultiAssignRef',
    wrapped: true,
    fields: [
      {
        name: 'colno',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'ncolumns',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'source',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'NamedArgExpr',
    wrapped: true,
    fields: [
      {
        name: 'arg',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'argnumber',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'name',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'NextValueExpr',
    wrapped: true,
    fields: [
      {
        name: 'seqid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'typeId',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'NotifyStmt',
    wrapped: true,
    fields: [
      {
        name: 'conditionname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'payload',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'NullIfExpr',
    wrapped: true,
    fields: [
      {
        name: 'args',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'inputcollid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'opcollid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'opno',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'opresulttype',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'opretset',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'NullTest',
    wrapped: true,
    fields: [
      {
        name: 'arg',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'argisrow',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'nulltesttype',
        type: 'NullTestType',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'ObjectWithArgs',
    wrapped: true,
    fields: [
      {
        name: 'args_unspecified',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'objargs',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'objfuncargs',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'objname',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'OidList',
    wrapped: true,
    fields: [
      {
        name: 'items',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'OnConflictClause',
    wrapped: true,
    fields: [
      {
        name: 'action',
        type: 'OnConflictAction',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'infer',
        type: 'InferClause',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'targetList',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'whereClause',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'OnConflictExpr',
    wrapped: true,
    fields: [
      {
        name: 'action',
        type: 'OnConflictAction',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'arbiterElems',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'arbiterWhere',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'constraint',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'exclRelIndex',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'exclRelTlist',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'onConflictSet',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'onConflictWhere',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'OpExpr',
    wrapped: true,
    fields: [
      {
        name: 'args',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'inputcollid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'opcollid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'opno',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'opresulttype',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'opretset',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'Param',
    wrapped: true,
    fields: [
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'paramcollid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'paramid',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'paramkind',
        type: 'ParamKind',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'paramtype',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'paramtypmod',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'ParamRef',
    wrapped: true,
    fields: [
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'number',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'ParseResult',
    wrapped: false,
    fields: [
      {
        name: 'stmts',
        type: 'RawStmt',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'version',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'PartitionBoundSpec',
    wrapped: true,
    fields: [
      {
        name: 'is_default',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'listdatums',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'lowerdatums',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'modulus',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'remainder',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'strategy',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'upperdatums',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'PartitionCmd',
    wrapped: true,
    fields: [
      {
        name: 'bound',
        type: 'PartitionBoundSpec',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'concurrent',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'name',
        type: 'RangeVar',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'PartitionElem',
    wrapped: true,
    fields: [
      {
        name: 'collation',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'expr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'name',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'opclass',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'PartitionRangeDatum',
    wrapped: true,
    fields: [
      {
        name: 'kind',
        type: 'PartitionRangeDatumKind',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'value',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'PartitionSpec',
    wrapped: true,
    fields: [
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'partParams',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'strategy',
        type: 'PartitionStrategy',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'PLAssignStmt',
    wrapped: true,
    fields: [
      {
        name: 'indirection',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'name',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'nnames',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'val',
        type: 'SelectStmt',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'PrepareStmt',
    wrapped: true,
    fields: [
      {
        name: 'argtypes',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'name',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'query',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'PublicationObjSpec',
    wrapped: true,
    fields: [
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'name',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'pubobjtype',
        type: 'PublicationObjSpecType',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'pubtable',
        type: 'PublicationTable',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'PublicationTable',
    wrapped: true,
    fields: [
      {
        name: 'columns',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'relation',
        type: 'RangeVar',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'whereClause',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'Query',
    wrapped: true,
    fields: [
      {
        name: 'canSetTag',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'commandType',
        type: 'CmdType',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'constraintDeps',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'cteList',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'distinctClause',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'groupClause',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'groupDistinct',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'groupingSets',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'hasAggs',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'hasDistinctOn',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'hasForUpdate',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'hasModifyingCTE',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'hasRecursive',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'hasRowSecurity',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'hasSubLinks',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'hasTargetSRFs',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'hasWindowFuncs',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'havingQual',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'isReturn',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'jointree',
        type: 'FromExpr',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'limitCount',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'limitOffset',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'limitOption',
        type: 'LimitOption',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'mergeActionList',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'mergeUseOuterJoin',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'onConflict',
        type: 'OnConflictExpr',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'override',
        type: 'OverridingKind',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'querySource',
        type: 'QuerySource',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'resultRelation',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'returningList',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'rowMarks',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'rtable',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'rteperminfos',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'setOperations',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'sortClause',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'stmt_len',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'stmt_location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'targetList',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'utilityStmt',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'windowClause',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'withCheckOptions',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'RangeFunction',
    wrapped: true,
    fields: [
      {
        name: 'alias',
        type: 'Alias',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'coldeflist',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'functions',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'is_rowsfrom',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'lateral',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'ordinality',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'RangeSubselect',
    wrapped: true,
    fields: [
      {
        name: 'alias',
        type: 'Alias',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'lateral',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'subquery',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'RangeTableFunc',
    wrapped: true,
    fields: [
      {
        name: 'alias',
        type: 'Alias',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'columns',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'docexpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'lateral',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'namespaces',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'rowexpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'RangeTableFuncCol',
    wrapped: true,
    fields: [
      {
        name: 'coldefexpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'colexpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'colname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'for_ordinality',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'is_not_null',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'typeName',
        type: 'TypeName',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'RangeTableSample',
    wrapped: true,
    fields: [
      {
        name: 'args',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'method',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'relation',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'repeatable',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'RangeTblEntry',
    wrapped: true,
    fields: [
      {
        name: 'alias',
        type: 'Alias',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'colcollations',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'coltypes',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'coltypmods',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'ctelevelsup',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'ctename',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'enrname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'enrtuples',
        type: 'double',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'eref',
        type: 'Alias',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'funcordinality',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'functions',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'inFromCl',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'inh',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'join_using_alias',
        type: 'Alias',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'joinaliasvars',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'joinleftcols',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'joinmergedcols',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'joinrightcols',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'jointype',
        type: 'JoinType',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'lateral',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'perminfoindex',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'relid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'relkind',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'rellockmode',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'rtekind',
        type: 'RTEKind',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'security_barrier',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'securityQuals',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'self_reference',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'subquery',
        type: 'Query',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'tablefunc',
        type: 'TableFunc',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'tablesample',
        type: 'TableSampleClause',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'values_lists',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'RangeTblFunction',
    wrapped: true,
    fields: [
      {
        name: 'funccolcollations',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'funccolcount',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'funccolnames',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'funccoltypes',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'funccoltypmods',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'funcexpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'funcparams',
        type: 'uint64',
        isNode: false,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'RangeTblRef',
    wrapped: true,
    fields: [
      {
        name: 'rtindex',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'RangeVar',
    wrapped: true,
    fields: [
      {
        name: 'alias',
        type: 'Alias',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'catalogname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'inh',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'relname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'relpersistence',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'schemaname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'RawStmt',
    wrapped: true,
    fields: [
      {
        name: 'stmt',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'stmt_len',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'stmt_location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'ReassignOwnedStmt',
    wrapped: true,
    fields: [
      {
        name: 'newrole',
        type: 'RoleSpec',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'roles',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'RefreshMatViewStmt',
    wrapped: true,
    fields: [
      {
        name: 'concurrent',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'relation',
        type: 'RangeVar',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'skipData',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'ReindexStmt',
    wrapped: true,
    fields: [
      {
        name: 'kind',
        type: 'ReindexObjectType',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'name',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'params',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'relation',
        type: 'RangeVar',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'RelabelType',
    wrapped: true,
    fields: [
      {
        name: 'arg',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'relabelformat',
        type: 'CoercionForm',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'resultcollid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'resulttype',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'resulttypmod',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'RenameStmt',
    wrapped: true,
    fields: [
      {
        name: 'behavior',
        type: 'DropBehavior',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'missing_ok',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'newname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'object',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'relation',
        type: 'RangeVar',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'relationType',
        type: 'ObjectType',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'renameType',
        type: 'ObjectType',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'subname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'ReplicaIdentityStmt',
    wrapped: true,
    fields: [
      {
        name: 'identity_type',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'name',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'ResTarget',
    wrapped: true,
    fields: [
      {
        name: 'indirection',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'name',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'val',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'ReturnStmt',
    wrapped: true,
    fields: [
      {
        name: 'returnval',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'RoleSpec',
    wrapped: true,
    fields: [
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'rolename',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'roletype',
        type: 'RoleSpecType',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'RowCompareExpr',
    wrapped: true,
    fields: [
      {
        name: 'inputcollids',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'largs',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'opfamilies',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'opnos',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'rargs',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'rctype',
        type: 'RowCompareType',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'RowExpr',
    wrapped: true,
    fields: [
      {
        name: 'args',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'colnames',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'row_format',
        type: 'CoercionForm',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'row_typeid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'RowMarkClause',
    wrapped: true,
    fields: [
      {
        name: 'pushedDown',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'rti',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'strength',
        type: 'LockClauseStrength',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'waitPolicy',
        type: 'LockWaitPolicy',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'RTEPermissionInfo',
    wrapped: true,
    fields: [
      {
        name: 'checkAsUser',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'inh',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'insertedCols',
        type: 'uint64',
        isNode: false,
        isArray: true,
        optional: true
      },
      {
        name: 'relid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'requiredPerms',
        type: 'uint64',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'selectedCols',
        type: 'uint64',
        isNode: false,
        isArray: true,
        optional: true
      },
      {
        name: 'updatedCols',
        type: 'uint64',
        isNode: false,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'RuleStmt',
    wrapped: true,
    fields: [
      {
        name: 'actions',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'event',
        type: 'CmdType',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'instead',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'relation',
        type: 'RangeVar',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'replace',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'rulename',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'whereClause',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'ScalarArrayOpExpr',
    wrapped: true,
    fields: [
      {
        name: 'args',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'inputcollid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'opno',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'useOr',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'ScanResult',
    wrapped: false,
    fields: [
      {
        name: 'tokens',
        type: 'ScanToken',
        isNode: false,
        isArray: true,
        optional: true
      },
      {
        name: 'version',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'ScanToken',
    wrapped: false,
    fields: [
      {
        name: 'end',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'keywordKind',
        type: 'KeywordKind',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'start',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'token',
        type: 'Token',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'SecLabelStmt',
    wrapped: true,
    fields: [
      {
        name: 'label',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'object',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'objtype',
        type: 'ObjectType',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'provider',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'SelectStmt',
    wrapped: true,
    fields: [
      {
        name: 'all',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'distinctClause',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'fromClause',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'groupClause',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'groupDistinct',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'havingClause',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'intoClause',
        type: 'IntoClause',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'larg',
        type: 'SelectStmt',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'limitCount',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'limitOffset',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'limitOption',
        type: 'LimitOption',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'lockingClause',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'op',
        type: 'SetOperation',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'rarg',
        type: 'SelectStmt',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'sortClause',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'targetList',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'valuesLists',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'whereClause',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'windowClause',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'withClause',
        type: 'WithClause',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'SetOperationStmt',
    wrapped: true,
    fields: [
      {
        name: 'all',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'colCollations',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'colTypes',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'colTypmods',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'groupClauses',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'larg',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'op',
        type: 'SetOperation',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'rarg',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'SetToDefault',
    wrapped: true,
    fields: [
      {
        name: 'collation',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'typeId',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'typeMod',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'SortBy',
    wrapped: true,
    fields: [
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'node',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'sortby_dir',
        type: 'SortByDir',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'sortby_nulls',
        type: 'SortByNulls',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'useOp',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'SortGroupClause',
    wrapped: true,
    fields: [
      {
        name: 'eqop',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'hashable',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'nulls_first',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'sortop',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'tleSortGroupRef',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'SQLValueFunction',
    wrapped: true,
    fields: [
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'op',
        type: 'SQLValueFunctionOp',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'type',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'typmod',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'StatsElem',
    wrapped: true,
    fields: [
      {
        name: 'expr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'name',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'String',
    wrapped: true,
    fields: [
      {
        name: 'sval',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'SubLink',
    wrapped: true,
    fields: [
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'operName',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'subLinkId',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'subLinkType',
        type: 'SubLinkType',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'subselect',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'testexpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'SubPlan',
    wrapped: true,
    fields: [
      {
        name: 'args',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'firstColCollation',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'firstColType',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'firstColTypmod',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'parallel_safe',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'paramIds',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'parParam',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'per_call_cost',
        type: 'double',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'plan_id',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'plan_name',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'setParam',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'startup_cost',
        type: 'double',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'subLinkType',
        type: 'SubLinkType',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'testexpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'unknownEqFalse',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'useHashTable',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'SubscriptingRef',
    wrapped: true,
    fields: [
      {
        name: 'refassgnexpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'refcollid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'refcontainertype',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'refelemtype',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'refexpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'reflowerindexpr',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'refrestype',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'reftypmod',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'refupperindexpr',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'TableFunc',
    wrapped: true,
    fields: [
      {
        name: 'colcollations',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'coldefexprs',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'colexprs',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'colnames',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'coltypes',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'coltypmods',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'docexpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'notnulls',
        type: 'uint64',
        isNode: false,
        isArray: true,
        optional: true
      },
      {
        name: 'ns_names',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'ns_uris',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'ordinalitycol',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'rowexpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'TableLikeClause',
    wrapped: true,
    fields: [
      {
        name: 'options',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'relation',
        type: 'RangeVar',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'relationOid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'TableSampleClause',
    wrapped: true,
    fields: [
      {
        name: 'args',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'repeatable',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'tsmhandler',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'TargetEntry',
    wrapped: true,
    fields: [
      {
        name: 'expr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'resjunk',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'resname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'resno',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'resorigcol',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'resorigtbl',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'ressortgroupref',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'TransactionStmt',
    wrapped: true,
    fields: [
      {
        name: 'chain',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'gid',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'kind',
        type: 'TransactionStmtKind',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'savepoint_name',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'TriggerTransition',
    wrapped: true,
    fields: [
      {
        name: 'isNew',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'isTable',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'name',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'TruncateStmt',
    wrapped: true,
    fields: [
      {
        name: 'behavior',
        type: 'DropBehavior',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'relations',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'restart_seqs',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'TypeCast',
    wrapped: true,
    fields: [
      {
        name: 'arg',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'typeName',
        type: 'TypeName',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'TypeName',
    wrapped: true,
    fields: [
      {
        name: 'arrayBounds',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'names',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'pct_type',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'setof',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'typemod',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'typeOid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'typmods',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'UnlistenStmt',
    wrapped: true,
    fields: [
      {
        name: 'conditionname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'UpdateStmt',
    wrapped: true,
    fields: [
      {
        name: 'fromClause',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'relation',
        type: 'RangeVar',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'returningList',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'targetList',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'whereClause',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'withClause',
        type: 'WithClause',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'VacuumRelation',
    wrapped: true,
    fields: [
      {
        name: 'oid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'relation',
        type: 'RangeVar',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'va_cols',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'VacuumStmt',
    wrapped: true,
    fields: [
      {
        name: 'is_vacuumcmd',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'rels',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'Var',
    wrapped: true,
    fields: [
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'varattno',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'varcollid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'varlevelsup',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'varno',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'varnullingrels',
        type: 'uint64',
        isNode: false,
        isArray: true,
        optional: true
      },
      {
        name: 'vartype',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'vartypmod',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'VariableSetStmt',
    wrapped: true,
    fields: [
      {
        name: 'args',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'is_local',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'kind',
        type: 'VariableSetKind',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'name',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'VariableShowStmt',
    wrapped: true,
    fields: [
      {
        name: 'name',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'ViewStmt',
    wrapped: true,
    fields: [
      {
        name: 'aliases',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'query',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'replace',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'view',
        type: 'RangeVar',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'withCheckOption',
        type: 'ViewCheckOption',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'WindowClause',
    wrapped: true,
    fields: [
      {
        name: 'copiedOrder',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'endInRangeFunc',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'endOffset',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'frameOptions',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'inRangeAsc',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'inRangeColl',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'inRangeNullsFirst',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'name',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'orderClause',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'partitionClause',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'refname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'runCondition',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'startInRangeFunc',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'startOffset',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'winref',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'WindowDef',
    wrapped: true,
    fields: [
      {
        name: 'endOffset',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'frameOptions',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'name',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'orderClause',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'partitionClause',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'refname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'startOffset',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'WindowFunc',
    wrapped: true,
    fields: [
      {
        name: 'aggfilter',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'args',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'inputcollid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'winagg',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'wincollid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'winfnoid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'winref',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'winstar',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'wintype',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'WithCheckOption',
    wrapped: true,
    fields: [
      {
        name: 'cascaded',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'kind',
        type: 'WCOKind',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'polname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'qual',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'relname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'WithClause',
    wrapped: true,
    fields: [
      {
        name: 'ctes',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'recursive',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'XmlExpr',
    wrapped: true,
    fields: [
      {
        name: 'arg_names',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'args',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'indent',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'name',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'named_args',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'op',
        type: 'XmlExprOp',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'type',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'typmod',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xmloption',
        type: 'XmlOptionType',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'XmlSerialize',
    wrapped: true,
    fields: [
      {
        name: 'expr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'indent',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'typeName',
        type: 'TypeName',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'xmloption',
        type: 'XmlOptionType',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  }
];",
    "file": "complete-schema.ts",
  },
  {
    "code": "/**
* This file was automatically generated by pg-proto-parser@latest.
* DO NOT MODIFY IT BY HAND. Instead, modify the source proto file,
* and run the pg-proto-parser generate command to regenerate this file.
*/
export type OverridingKind = "OVERRIDING_NOT_SET" | "OVERRIDING_USER_VALUE" | "OVERRIDING_SYSTEM_VALUE";
export type QuerySource = "QSRC_ORIGINAL" | "QSRC_PARSER" | "QSRC_INSTEAD_RULE" | "QSRC_QUAL_INSTEAD_RULE" | "QSRC_NON_INSTEAD_RULE";
export type SortByDir = "SORTBY_DEFAULT" | "SORTBY_ASC" | "SORTBY_DESC" | "SORTBY_USING";
export type SortByNulls = "SORTBY_NULLS_DEFAULT" | "SORTBY_NULLS_FIRST" | "SORTBY_NULLS_LAST";
export type SetQuantifier = "SET_QUANTIFIER_DEFAULT" | "SET_QUANTIFIER_ALL" | "SET_QUANTIFIER_DISTINCT";
export type A_Expr_Kind = "AEXPR_OP" | "AEXPR_OP_ANY" | "AEXPR_OP_ALL" | "AEXPR_DISTINCT" | "AEXPR_NOT_DISTINCT" | "AEXPR_NULLIF" | "AEXPR_IN" | "AEXPR_LIKE" | "AEXPR_ILIKE" | "AEXPR_SIMILAR" | "AEXPR_BETWEEN" | "AEXPR_NOT_BETWEEN" | "AEXPR_BETWEEN_SYM" | "AEXPR_NOT_BETWEEN_SYM";
export type RoleSpecType = "ROLESPEC_CSTRING" | "ROLESPEC_CURRENT_ROLE" | "ROLESPEC_CURRENT_USER" | "ROLESPEC_SESSION_USER" | "ROLESPEC_PUBLIC";
export type TableLikeOption = "CREATE_TABLE_LIKE_COMMENTS" | "CREATE_TABLE_LIKE_COMPRESSION" | "CREATE_TABLE_LIKE_CONSTRAINTS" | "CREATE_TABLE_LIKE_DEFAULTS" | "CREATE_TABLE_LIKE_GENERATED" | "CREATE_TABLE_LIKE_IDENTITY" | "CREATE_TABLE_LIKE_INDEXES" | "CREATE_TABLE_LIKE_STATISTICS" | "CREATE_TABLE_LIKE_STORAGE" | "CREATE_TABLE_LIKE_ALL";
export type DefElemAction = "DEFELEM_UNSPEC" | "DEFELEM_SET" | "DEFELEM_ADD" | "DEFELEM_DROP";
export type PartitionStrategy = "PARTITION_STRATEGY_LIST" | "PARTITION_STRATEGY_RANGE" | "PARTITION_STRATEGY_HASH";
export type PartitionRangeDatumKind = "PARTITION_RANGE_DATUM_MINVALUE" | "PARTITION_RANGE_DATUM_VALUE" | "PARTITION_RANGE_DATUM_MAXVALUE";
export type RTEKind = "RTE_RELATION" | "RTE_SUBQUERY" | "RTE_JOIN" | "RTE_FUNCTION" | "RTE_TABLEFUNC" | "RTE_VALUES" | "RTE_CTE" | "RTE_NAMEDTUPLESTORE" | "RTE_RESULT";
export type WCOKind = "WCO_VIEW_CHECK" | "WCO_RLS_INSERT_CHECK" | "WCO_RLS_UPDATE_CHECK" | "WCO_RLS_CONFLICT_CHECK" | "WCO_RLS_MERGE_UPDATE_CHECK" | "WCO_RLS_MERGE_DELETE_CHECK";
export type GroupingSetKind = "GROUPING_SET_EMPTY" | "GROUPING_SET_SIMPLE" | "GROUPING_SET_ROLLUP" | "GROUPING_SET_CUBE" | "GROUPING_SET_SETS";
export type CTEMaterialize = "CTEMaterializeDefault" | "CTEMaterializeAlways" | "CTEMaterializeNever";
export type SetOperation = "SETOP_NONE" | "SETOP_UNION" | "SETOP_INTERSECT" | "SETOP_EXCEPT";
export type ObjectType = "OBJECT_ACCESS_METHOD" | "OBJECT_AGGREGATE" | "OBJECT_AMOP" | "OBJECT_AMPROC" | "OBJECT_ATTRIBUTE" | "OBJECT_CAST" | "OBJECT_COLUMN" | "OBJECT_COLLATION" | "OBJECT_CONVERSION" | "OBJECT_DATABASE" | "OBJECT_DEFAULT" | "OBJECT_DEFACL" | "OBJECT_DOMAIN" | "OBJECT_DOMCONSTRAINT" | "OBJECT_EVENT_TRIGGER" | "OBJECT_EXTENSION" | "OBJECT_FDW" | "OBJECT_FOREIGN_SERVER" | "OBJECT_FOREIGN_TABLE" | "OBJECT_FUNCTION" | "OBJECT_INDEX" | "OBJECT_LANGUAGE" | "OBJECT_LARGEOBJECT" | "OBJECT_MATVIEW" | "OBJECT_OPCLASS" | "OBJECT_OPERATOR" | "OBJECT_OPFAMILY" | "OBJECT_PARAMETER_ACL" | "OBJECT_POLICY" | "OBJECT_PROCEDURE" | "OBJECT_PUBLICATION" | "OBJECT_PUBLICATION_NAMESPACE" | "OBJECT_PUBLICATION_REL" | "OBJECT_ROLE" | "OBJECT_ROUTINE" | "OBJECT_RULE" | "OBJECT_SCHEMA" | "OBJECT_SEQUENCE" | "OBJECT_SUBSCRIPTION" | "OBJECT_STATISTIC_EXT" | "OBJECT_TABCONSTRAINT" | "OBJECT_TABLE" | "OBJECT_TABLESPACE" | "OBJECT_TRANSFORM" | "OBJECT_TRIGGER" | "OBJECT_TSCONFIGURATION" | "OBJECT_TSDICTIONARY" | "OBJECT_TSPARSER" | "OBJECT_TSTEMPLATE" | "OBJECT_TYPE" | "OBJECT_USER_MAPPING" | "OBJECT_VIEW";
export type DropBehavior = "DROP_RESTRICT" | "DROP_CASCADE";
export type AlterTableType = "AT_AddColumn" | "AT_AddColumnToView" | "AT_ColumnDefault" | "AT_CookedColumnDefault" | "AT_DropNotNull" | "AT_SetNotNull" | "AT_DropExpression" | "AT_CheckNotNull" | "AT_SetStatistics" | "AT_SetOptions" | "AT_ResetOptions" | "AT_SetStorage" | "AT_SetCompression" | "AT_DropColumn" | "AT_AddIndex" | "AT_ReAddIndex" | "AT_AddConstraint" | "AT_ReAddConstraint" | "AT_ReAddDomainConstraint" | "AT_AlterConstraint" | "AT_ValidateConstraint" | "AT_AddIndexConstraint" | "AT_DropConstraint" | "AT_ReAddComment" | "AT_AlterColumnType" | "AT_AlterColumnGenericOptions" | "AT_ChangeOwner" | "AT_ClusterOn" | "AT_DropCluster" | "AT_SetLogged" | "AT_SetUnLogged" | "AT_DropOids" | "AT_SetAccessMethod" | "AT_SetTableSpace" | "AT_SetRelOptions" | "AT_ResetRelOptions" | "AT_ReplaceRelOptions" | "AT_EnableTrig" | "AT_EnableAlwaysTrig" | "AT_EnableReplicaTrig" | "AT_DisableTrig" | "AT_EnableTrigAll" | "AT_DisableTrigAll" | "AT_EnableTrigUser" | "AT_DisableTrigUser" | "AT_EnableRule" | "AT_EnableAlwaysRule" | "AT_EnableReplicaRule" | "AT_DisableRule" | "AT_AddInherit" | "AT_DropInherit" | "AT_AddOf" | "AT_DropOf" | "AT_ReplicaIdentity" | "AT_EnableRowSecurity" | "AT_DisableRowSecurity" | "AT_ForceRowSecurity" | "AT_NoForceRowSecurity" | "AT_GenericOptions" | "AT_AttachPartition" | "AT_DetachPartition" | "AT_DetachPartitionFinalize" | "AT_AddIdentity" | "AT_SetIdentity" | "AT_DropIdentity" | "AT_ReAddStatistics";
export type GrantTargetType = "ACL_TARGET_OBJECT" | "ACL_TARGET_ALL_IN_SCHEMA" | "ACL_TARGET_DEFAULTS";
export type VariableSetKind = "VAR_SET_VALUE" | "VAR_SET_DEFAULT" | "VAR_SET_CURRENT" | "VAR_SET_MULTI" | "VAR_RESET" | "VAR_RESET_ALL";
export type ConstrType = "CONSTR_NULL" | "CONSTR_NOTNULL" | "CONSTR_DEFAULT" | "CONSTR_IDENTITY" | "CONSTR_GENERATED" | "CONSTR_CHECK" | "CONSTR_PRIMARY" | "CONSTR_UNIQUE" | "CONSTR_EXCLUSION" | "CONSTR_FOREIGN" | "CONSTR_ATTR_DEFERRABLE" | "CONSTR_ATTR_NOT_DEFERRABLE" | "CONSTR_ATTR_DEFERRED" | "CONSTR_ATTR_IMMEDIATE";
export type ImportForeignSchemaType = "FDW_IMPORT_SCHEMA_ALL" | "FDW_IMPORT_SCHEMA_LIMIT_TO" | "FDW_IMPORT_SCHEMA_EXCEPT";
export type RoleStmtType = "ROLESTMT_ROLE" | "ROLESTMT_USER" | "ROLESTMT_GROUP";
export type FetchDirection = "FETCH_FORWARD" | "FETCH_BACKWARD" | "FETCH_ABSOLUTE" | "FETCH_RELATIVE";
export type FunctionParameterMode = "FUNC_PARAM_IN" | "FUNC_PARAM_OUT" | "FUNC_PARAM_INOUT" | "FUNC_PARAM_VARIADIC" | "FUNC_PARAM_TABLE" | "FUNC_PARAM_DEFAULT";
export type TransactionStmtKind = "TRANS_STMT_BEGIN" | "TRANS_STMT_START" | "TRANS_STMT_COMMIT" | "TRANS_STMT_ROLLBACK" | "TRANS_STMT_SAVEPOINT" | "TRANS_STMT_RELEASE" | "TRANS_STMT_ROLLBACK_TO" | "TRANS_STMT_PREPARE" | "TRANS_STMT_COMMIT_PREPARED" | "TRANS_STMT_ROLLBACK_PREPARED";
export type ViewCheckOption = "NO_CHECK_OPTION" | "LOCAL_CHECK_OPTION" | "CASCADED_CHECK_OPTION";
export type DiscardMode = "DISCARD_ALL" | "DISCARD_PLANS" | "DISCARD_SEQUENCES" | "DISCARD_TEMP";
export type ReindexObjectType = "REINDEX_OBJECT_INDEX" | "REINDEX_OBJECT_TABLE" | "REINDEX_OBJECT_SCHEMA" | "REINDEX_OBJECT_SYSTEM" | "REINDEX_OBJECT_DATABASE";
export type AlterTSConfigType = "ALTER_TSCONFIG_ADD_MAPPING" | "ALTER_TSCONFIG_ALTER_MAPPING_FOR_TOKEN" | "ALTER_TSCONFIG_REPLACE_DICT" | "ALTER_TSCONFIG_REPLACE_DICT_FOR_TOKEN" | "ALTER_TSCONFIG_DROP_MAPPING";
export type PublicationObjSpecType = "PUBLICATIONOBJ_TABLE" | "PUBLICATIONOBJ_TABLES_IN_SCHEMA" | "PUBLICATIONOBJ_TABLES_IN_CUR_SCHEMA" | "PUBLICATIONOBJ_CONTINUATION";
export type AlterPublicationAction = "AP_AddObjects" | "AP_DropObjects" | "AP_SetObjects";
export type AlterSubscriptionType = "ALTER_SUBSCRIPTION_OPTIONS" | "ALTER_SUBSCRIPTION_CONNECTION" | "ALTER_SUBSCRIPTION_SET_PUBLICATION" | "ALTER_SUBSCRIPTION_ADD_PUBLICATION" | "ALTER_SUBSCRIPTION_DROP_PUBLICATION" | "ALTER_SUBSCRIPTION_REFRESH" | "ALTER_SUBSCRIPTION_ENABLED" | "ALTER_SUBSCRIPTION_SKIP";
export type OnCommitAction = "ONCOMMIT_NOOP" | "ONCOMMIT_PRESERVE_ROWS" | "ONCOMMIT_DELETE_ROWS" | "ONCOMMIT_DROP";
export type ParamKind = "PARAM_EXTERN" | "PARAM_EXEC" | "PARAM_SUBLINK" | "PARAM_MULTIEXPR";
export type CoercionContext = "COERCION_IMPLICIT" | "COERCION_ASSIGNMENT" | "COERCION_PLPGSQL" | "COERCION_EXPLICIT";
export type CoercionForm = "COERCE_EXPLICIT_CALL" | "COERCE_EXPLICIT_CAST" | "COERCE_IMPLICIT_CAST" | "COERCE_SQL_SYNTAX";
export type BoolExprType = "AND_EXPR" | "OR_EXPR" | "NOT_EXPR";
export type SubLinkType = "EXISTS_SUBLINK" | "ALL_SUBLINK" | "ANY_SUBLINK" | "ROWCOMPARE_SUBLINK" | "EXPR_SUBLINK" | "MULTIEXPR_SUBLINK" | "ARRAY_SUBLINK" | "CTE_SUBLINK";
export type RowCompareType = "ROWCOMPARE_LT" | "ROWCOMPARE_LE" | "ROWCOMPARE_EQ" | "ROWCOMPARE_GE" | "ROWCOMPARE_GT" | "ROWCOMPARE_NE";
export type MinMaxOp = "IS_GREATEST" | "IS_LEAST";
export type SQLValueFunctionOp = "SVFOP_CURRENT_DATE" | "SVFOP_CURRENT_TIME" | "SVFOP_CURRENT_TIME_N" | "SVFOP_CURRENT_TIMESTAMP" | "SVFOP_CURRENT_TIMESTAMP_N" | "SVFOP_LOCALTIME" | "SVFOP_LOCALTIME_N" | "SVFOP_LOCALTIMESTAMP" | "SVFOP_LOCALTIMESTAMP_N" | "SVFOP_CURRENT_ROLE" | "SVFOP_CURRENT_USER" | "SVFOP_USER" | "SVFOP_SESSION_USER" | "SVFOP_CURRENT_CATALOG" | "SVFOP_CURRENT_SCHEMA";
export type XmlExprOp = "IS_XMLCONCAT" | "IS_XMLELEMENT" | "IS_XMLFOREST" | "IS_XMLPARSE" | "IS_XMLPI" | "IS_XMLROOT" | "IS_XMLSERIALIZE" | "IS_DOCUMENT";
export type XmlOptionType = "XMLOPTION_DOCUMENT" | "XMLOPTION_CONTENT";
export type JsonEncoding = "JS_ENC_DEFAULT" | "JS_ENC_UTF8" | "JS_ENC_UTF16" | "JS_ENC_UTF32";
export type JsonFormatType = "JS_FORMAT_DEFAULT" | "JS_FORMAT_JSON" | "JS_FORMAT_JSONB";
export type JsonConstructorType = "JSCTOR_JSON_OBJECT" | "JSCTOR_JSON_ARRAY" | "JSCTOR_JSON_OBJECTAGG" | "JSCTOR_JSON_ARRAYAGG";
export type JsonValueType = "JS_TYPE_ANY" | "JS_TYPE_OBJECT" | "JS_TYPE_ARRAY" | "JS_TYPE_SCALAR";
export type NullTestType = "IS_NULL" | "IS_NOT_NULL";
export type BoolTestType = "IS_TRUE" | "IS_NOT_TRUE" | "IS_FALSE" | "IS_NOT_FALSE" | "IS_UNKNOWN" | "IS_NOT_UNKNOWN";
export type CmdType = "CMD_UNKNOWN" | "CMD_SELECT" | "CMD_UPDATE" | "CMD_INSERT" | "CMD_DELETE" | "CMD_MERGE" | "CMD_UTILITY" | "CMD_NOTHING";
export type JoinType = "JOIN_INNER" | "JOIN_LEFT" | "JOIN_FULL" | "JOIN_RIGHT" | "JOIN_SEMI" | "JOIN_ANTI" | "JOIN_RIGHT_ANTI" | "JOIN_UNIQUE_OUTER" | "JOIN_UNIQUE_INNER";
export type AggStrategy = "AGG_PLAIN" | "AGG_SORTED" | "AGG_HASHED" | "AGG_MIXED";
export type AggSplit = "AGGSPLIT_SIMPLE" | "AGGSPLIT_INITIAL_SERIAL" | "AGGSPLIT_FINAL_DESERIAL";
export type SetOpCmd = "SETOPCMD_INTERSECT" | "SETOPCMD_INTERSECT_ALL" | "SETOPCMD_EXCEPT" | "SETOPCMD_EXCEPT_ALL";
export type SetOpStrategy = "SETOP_SORTED" | "SETOP_HASHED";
export type OnConflictAction = "ONCONFLICT_NONE" | "ONCONFLICT_NOTHING" | "ONCONFLICT_UPDATE";
export type LimitOption = "LIMIT_OPTION_DEFAULT" | "LIMIT_OPTION_COUNT" | "LIMIT_OPTION_WITH_TIES";
export type LockClauseStrength = "LCS_NONE" | "LCS_FORKEYSHARE" | "LCS_FORSHARE" | "LCS_FORNOKEYUPDATE" | "LCS_FORUPDATE";
export type LockWaitPolicy = "LockWaitBlock" | "LockWaitSkip" | "LockWaitError";
export type LockTupleMode = "LockTupleKeyShare" | "LockTupleShare" | "LockTupleNoKeyExclusive" | "LockTupleExclusive";
export type KeywordKind = "NO_KEYWORD" | "UNRESERVED_KEYWORD" | "COL_NAME_KEYWORD" | "TYPE_FUNC_NAME_KEYWORD" | "RESERVED_KEYWORD";
export type Token = "NUL" | "ASCII_36" | "ASCII_37" | "ASCII_40" | "ASCII_41" | "ASCII_42" | "ASCII_43" | "ASCII_44" | "ASCII_45" | "ASCII_46" | "ASCII_47" | "ASCII_58" | "ASCII_59" | "ASCII_60" | "ASCII_61" | "ASCII_62" | "ASCII_63" | "ASCII_91" | "ASCII_92" | "ASCII_93" | "ASCII_94" | "IDENT" | "UIDENT" | "FCONST" | "SCONST" | "USCONST" | "BCONST" | "XCONST" | "Op" | "ICONST" | "PARAM" | "TYPECAST" | "DOT_DOT" | "COLON_EQUALS" | "EQUALS_GREATER" | "LESS_EQUALS" | "GREATER_EQUALS" | "NOT_EQUALS" | "SQL_COMMENT" | "C_COMMENT" | "ABORT_P" | "ABSENT" | "ABSOLUTE_P" | "ACCESS" | "ACTION" | "ADD_P" | "ADMIN" | "AFTER" | "AGGREGATE" | "ALL" | "ALSO" | "ALTER" | "ALWAYS" | "ANALYSE" | "ANALYZE" | "AND" | "ANY" | "ARRAY" | "AS" | "ASC" | "ASENSITIVE" | "ASSERTION" | "ASSIGNMENT" | "ASYMMETRIC" | "ATOMIC" | "AT" | "ATTACH" | "ATTRIBUTE" | "AUTHORIZATION" | "BACKWARD" | "BEFORE" | "BEGIN_P" | "BETWEEN" | "BIGINT" | "BINARY" | "BIT" | "BOOLEAN_P" | "BOTH" | "BREADTH" | "BY" | "CACHE" | "CALL" | "CALLED" | "CASCADE" | "CASCADED" | "CASE" | "CAST" | "CATALOG_P" | "CHAIN" | "CHAR_P" | "CHARACTER" | "CHARACTERISTICS" | "CHECK" | "CHECKPOINT" | "CLASS" | "CLOSE" | "CLUSTER" | "COALESCE" | "COLLATE" | "COLLATION" | "COLUMN" | "COLUMNS" | "COMMENT" | "COMMENTS" | "COMMIT" | "COMMITTED" | "COMPRESSION" | "CONCURRENTLY" | "CONFIGURATION" | "CONFLICT" | "CONNECTION" | "CONSTRAINT" | "CONSTRAINTS" | "CONTENT_P" | "CONTINUE_P" | "CONVERSION_P" | "COPY" | "COST" | "CREATE" | "CROSS" | "CSV" | "CUBE" | "CURRENT_P" | "CURRENT_CATALOG" | "CURRENT_DATE" | "CURRENT_ROLE" | "CURRENT_SCHEMA" | "CURRENT_TIME" | "CURRENT_TIMESTAMP" | "CURRENT_USER" | "CURSOR" | "CYCLE" | "DATA_P" | "DATABASE" | "DAY_P" | "DEALLOCATE" | "DEC" | "DECIMAL_P" | "DECLARE" | "DEFAULT" | "DEFAULTS" | "DEFERRABLE" | "DEFERRED" | "DEFINER" | "DELETE_P" | "DELIMITER" | "DELIMITERS" | "DEPENDS" | "DEPTH" | "DESC" | "DETACH" | "DICTIONARY" | "DISABLE_P" | "DISCARD" | "DISTINCT" | "DO" | "DOCUMENT_P" | "DOMAIN_P" | "DOUBLE_P" | "DROP" | "EACH" | "ELSE" | "ENABLE_P" | "ENCODING" | "ENCRYPTED" | "END_P" | "ENUM_P" | "ESCAPE" | "EVENT" | "EXCEPT" | "EXCLUDE" | "EXCLUDING" | "EXCLUSIVE" | "EXECUTE" | "EXISTS" | "EXPLAIN" | "EXPRESSION" | "EXTENSION" | "EXTERNAL" | "EXTRACT" | "FALSE_P" | "FAMILY" | "FETCH" | "FILTER" | "FINALIZE" | "FIRST_P" | "FLOAT_P" | "FOLLOWING" | "FOR" | "FORCE" | "FOREIGN" | "FORMAT" | "FORWARD" | "FREEZE" | "FROM" | "FULL" | "FUNCTION" | "FUNCTIONS" | "GENERATED" | "GLOBAL" | "GRANT" | "GRANTED" | "GREATEST" | "GROUP_P" | "GROUPING" | "GROUPS" | "HANDLER" | "HAVING" | "HEADER_P" | "HOLD" | "HOUR_P" | "IDENTITY_P" | "IF_P" | "ILIKE" | "IMMEDIATE" | "IMMUTABLE" | "IMPLICIT_P" | "IMPORT_P" | "IN_P" | "INCLUDE" | "INCLUDING" | "INCREMENT" | "INDENT" | "INDEX" | "INDEXES" | "INHERIT" | "INHERITS" | "INITIALLY" | "INLINE_P" | "INNER_P" | "INOUT" | "INPUT_P" | "INSENSITIVE" | "INSERT" | "INSTEAD" | "INT_P" | "INTEGER" | "INTERSECT" | "INTERVAL" | "INTO" | "INVOKER" | "IS" | "ISNULL" | "ISOLATION" | "JOIN" | "JSON" | "JSON_ARRAY" | "JSON_ARRAYAGG" | "JSON_OBJECT" | "JSON_OBJECTAGG" | "KEY" | "KEYS" | "LABEL" | "LANGUAGE" | "LARGE_P" | "LAST_P" | "LATERAL_P" | "LEADING" | "LEAKPROOF" | "LEAST" | "LEFT" | "LEVEL" | "LIKE" | "LIMIT" | "LISTEN" | "LOAD" | "LOCAL" | "LOCALTIME" | "LOCALTIMESTAMP" | "LOCATION" | "LOCK_P" | "LOCKED" | "LOGGED" | "MAPPING" | "MATCH" | "MATCHED" | "MATERIALIZED" | "MAXVALUE" | "MERGE" | "METHOD" | "MINUTE_P" | "MINVALUE" | "MODE" | "MONTH_P" | "MOVE" | "NAME_P" | "NAMES" | "NATIONAL" | "NATURAL" | "NCHAR" | "NEW" | "NEXT" | "NFC" | "NFD" | "NFKC" | "NFKD" | "NO" | "NONE" | "NORMALIZE" | "NORMALIZED" | "NOT" | "NOTHING" | "NOTIFY" | "NOTNULL" | "NOWAIT" | "NULL_P" | "NULLIF" | "NULLS_P" | "NUMERIC" | "OBJECT_P" | "OF" | "OFF" | "OFFSET" | "OIDS" | "OLD" | "ON" | "ONLY" | "OPERATOR" | "OPTION" | "OPTIONS" | "OR" | "ORDER" | "ORDINALITY" | "OTHERS" | "OUT_P" | "OUTER_P" | "OVER" | "OVERLAPS" | "OVERLAY" | "OVERRIDING" | "OWNED" | "OWNER" | "PARALLEL" | "PARAMETER" | "PARSER" | "PARTIAL" | "PARTITION" | "PASSING" | "PASSWORD" | "PLACING" | "PLANS" | "POLICY" | "POSITION" | "PRECEDING" | "PRECISION" | "PRESERVE" | "PREPARE" | "PREPARED" | "PRIMARY" | "PRIOR" | "PRIVILEGES" | "PROCEDURAL" | "PROCEDURE" | "PROCEDURES" | "PROGRAM" | "PUBLICATION" | "QUOTE" | "RANGE" | "READ" | "REAL" | "REASSIGN" | "RECHECK" | "RECURSIVE" | "REF_P" | "REFERENCES" | "REFERENCING" | "REFRESH" | "REINDEX" | "RELATIVE_P" | "RELEASE" | "RENAME" | "REPEATABLE" | "REPLACE" | "REPLICA" | "RESET" | "RESTART" | "RESTRICT" | "RETURN" | "RETURNING" | "RETURNS" | "REVOKE" | "RIGHT" | "ROLE" | "ROLLBACK" | "ROLLUP" | "ROUTINE" | "ROUTINES" | "ROW" | "ROWS" | "RULE" | "SAVEPOINT" | "SCALAR" | "SCHEMA" | "SCHEMAS" | "SCROLL" | "SEARCH" | "SECOND_P" | "SECURITY" | "SELECT" | "SEQUENCE" | "SEQUENCES" | "SERIALIZABLE" | "SERVER" | "SESSION" | "SESSION_USER" | "SET" | "SETS" | "SETOF" | "SHARE" | "SHOW" | "SIMILAR" | "SIMPLE" | "SKIP" | "SMALLINT" | "SNAPSHOT" | "SOME" | "SQL_P" | "STABLE" | "STANDALONE_P" | "START" | "STATEMENT" | "STATISTICS" | "STDIN" | "STDOUT" | "STORAGE" | "STORED" | "STRICT_P" | "STRIP_P" | "SUBSCRIPTION" | "SUBSTRING" | "SUPPORT" | "SYMMETRIC" | "SYSID" | "SYSTEM_P" | "SYSTEM_USER" | "TABLE" | "TABLES" | "TABLESAMPLE" | "TABLESPACE" | "TEMP" | "TEMPLATE" | "TEMPORARY" | "TEXT_P" | "THEN" | "TIES" | "TIME" | "TIMESTAMP" | "TO" | "TRAILING" | "TRANSACTION" | "TRANSFORM" | "TREAT" | "TRIGGER" | "TRIM" | "TRUE_P" | "TRUNCATE" | "TRUSTED" | "TYPE_P" | "TYPES_P" | "UESCAPE" | "UNBOUNDED" | "UNCOMMITTED" | "UNENCRYPTED" | "UNION" | "UNIQUE" | "UNKNOWN" | "UNLISTEN" | "UNLOGGED" | "UNTIL" | "UPDATE" | "USER" | "USING" | "VACUUM" | "VALID" | "VALIDATE" | "VALIDATOR" | "VALUE_P" | "VALUES" | "VARCHAR" | "VARIADIC" | "VARYING" | "VERBOSE" | "VERSION_P" | "VIEW" | "VIEWS" | "VOLATILE" | "WHEN" | "WHERE" | "WHITESPACE_P" | "WINDOW" | "WITH" | "WITHIN" | "WITHOUT" | "WORK" | "WRAPPER" | "WRITE" | "XML_P" | "XMLATTRIBUTES" | "XMLCONCAT" | "XMLELEMENT" | "XMLEXISTS" | "XMLFOREST" | "XMLNAMESPACES" | "XMLPARSE" | "XMLPI" | "XMLROOT" | "XMLSERIALIZE" | "XMLTABLE" | "YEAR_P" | "YES_P" | "ZONE" | "FORMAT_LA" | "NOT_LA" | "NULLS_LA" | "WITH_LA" | "WITHOUT_LA" | "MODE_TYPE_NAME" | "MODE_PLPGSQL_EXPR" | "MODE_PLPGSQL_ASSIGN1" | "MODE_PLPGSQL_ASSIGN2" | "MODE_PLPGSQL_ASSIGN3" | "UMINUS";",
    "file": "enums.ts",
  },
  {
    "code": "/**
* This file was automatically generated by pg-proto-parser@latest.
* DO NOT MODIFY IT BY HAND. Instead, modify the source proto file,
* and run the pg-proto-parser generate command to regenerate this file.
*/
import { OverridingKind, QuerySource, SortByDir, SortByNulls, SetQuantifier, A_Expr_Kind, RoleSpecType, TableLikeOption, DefElemAction, PartitionStrategy, PartitionRangeDatumKind, RTEKind, WCOKind, GroupingSetKind, CTEMaterialize, SetOperation, ObjectType, DropBehavior, AlterTableType, GrantTargetType, VariableSetKind, ConstrType, ImportForeignSchemaType, RoleStmtType, FetchDirection, FunctionParameterMode, TransactionStmtKind, ViewCheckOption, DiscardMode, ReindexObjectType, AlterTSConfigType, PublicationObjSpecType, AlterPublicationAction, AlterSubscriptionType, OnCommitAction, ParamKind, CoercionContext, CoercionForm, BoolExprType, SubLinkType, RowCompareType, MinMaxOp, SQLValueFunctionOp, XmlExprOp, XmlOptionType, JsonEncoding, JsonFormatType, JsonConstructorType, JsonValueType, NullTestType, BoolTestType, CmdType, JoinType, AggStrategy, AggSplit, SetOpCmd, SetOpStrategy, OnConflictAction, LimitOption, LockClauseStrength, LockWaitPolicy, LockTupleMode, KeywordKind, Token } from "./enums";
export type Node = ParseResult | ScanResult | Integer | Float | Boolean | String | BitString | List | OidList | IntList | A_Const | Alias | RangeVar | TableFunc | IntoClause | Var | Param | Aggref | GroupingFunc | WindowFunc | SubscriptingRef | FuncExpr | NamedArgExpr | OpExpr | DistinctExpr | NullIfExpr | ScalarArrayOpExpr | BoolExpr | SubLink | SubPlan | AlternativeSubPlan | FieldSelect | FieldStore | RelabelType | CoerceViaIO | ArrayCoerceExpr | ConvertRowtypeExpr | CollateExpr | CaseExpr | CaseWhen | CaseTestExpr | ArrayExpr | RowExpr | RowCompareExpr | CoalesceExpr | MinMaxExpr | SQLValueFunction | XmlExpr | JsonFormat | JsonReturning | JsonValueExpr | JsonConstructorExpr | JsonIsPredicate | NullTest | BooleanTest | CoerceToDomain | CoerceToDomainValue | SetToDefault | CurrentOfExpr | NextValueExpr | InferenceElem | TargetEntry | RangeTblRef | JoinExpr | FromExpr | OnConflictExpr | Query | TypeName | ColumnRef | ParamRef | A_Expr | TypeCast | CollateClause | RoleSpec | FuncCall | A_Star | A_Indices | A_Indirection | A_ArrayExpr | ResTarget | MultiAssignRef | SortBy | WindowDef | RangeSubselect | RangeFunction | RangeTableFunc | RangeTableFuncCol | RangeTableSample | ColumnDef | TableLikeClause | IndexElem | DefElem | LockingClause | XmlSerialize | PartitionElem | PartitionSpec | PartitionBoundSpec | PartitionRangeDatum | PartitionCmd | RangeTblEntry | RTEPermissionInfo | RangeTblFunction | TableSampleClause | WithCheckOption | SortGroupClause | GroupingSet | WindowClause | RowMarkClause | WithClause | InferClause | OnConflictClause | CTESearchClause | CTECycleClause | CommonTableExpr | MergeWhenClause | MergeAction | TriggerTransition | JsonOutput | JsonKeyValue | JsonObjectConstructor | JsonArrayConstructor | JsonArrayQueryConstructor | JsonAggConstructor | JsonObjectAgg | JsonArrayAgg | RawStmt | InsertStmt | DeleteStmt | UpdateStmt | MergeStmt | SelectStmt | SetOperationStmt | ReturnStmt | PLAssignStmt | CreateSchemaStmt | AlterTableStmt | ReplicaIdentityStmt | AlterTableCmd | AlterCollationStmt | AlterDomainStmt | GrantStmt | ObjectWithArgs | AccessPriv | GrantRoleStmt | AlterDefaultPrivilegesStmt | CopyStmt | VariableSetStmt | VariableShowStmt | CreateStmt | Constraint | CreateTableSpaceStmt | DropTableSpaceStmt | AlterTableSpaceOptionsStmt | AlterTableMoveAllStmt | CreateExtensionStmt | AlterExtensionStmt | AlterExtensionContentsStmt | CreateFdwStmt | AlterFdwStmt | CreateForeignServerStmt | AlterForeignServerStmt | CreateForeignTableStmt | CreateUserMappingStmt | AlterUserMappingStmt | DropUserMappingStmt | ImportForeignSchemaStmt | CreatePolicyStmt | AlterPolicyStmt | CreateAmStmt | CreateTrigStmt | CreateEventTrigStmt | AlterEventTrigStmt | CreatePLangStmt | CreateRoleStmt | AlterRoleStmt | AlterRoleSetStmt | DropRoleStmt | CreateSeqStmt | AlterSeqStmt | DefineStmt | CreateDomainStmt | CreateOpClassStmt | CreateOpClassItem | CreateOpFamilyStmt | AlterOpFamilyStmt | DropStmt | TruncateStmt | CommentStmt | SecLabelStmt | DeclareCursorStmt | ClosePortalStmt | FetchStmt | IndexStmt | CreateStatsStmt | StatsElem | AlterStatsStmt | CreateFunctionStmt | FunctionParameter | AlterFunctionStmt | DoStmt | InlineCodeBlock | CallStmt | CallContext | RenameStmt | AlterObjectDependsStmt | AlterObjectSchemaStmt | AlterOwnerStmt | AlterOperatorStmt | AlterTypeStmt | RuleStmt | NotifyStmt | ListenStmt | UnlistenStmt | TransactionStmt | CompositeTypeStmt | CreateEnumStmt | CreateRangeStmt | AlterEnumStmt | ViewStmt | LoadStmt | CreatedbStmt | AlterDatabaseStmt | AlterDatabaseRefreshCollStmt | AlterDatabaseSetStmt | DropdbStmt | AlterSystemStmt | ClusterStmt | VacuumStmt | VacuumRelation | ExplainStmt | CreateTableAsStmt | RefreshMatViewStmt | CheckPointStmt | DiscardStmt | LockStmt | ConstraintsSetStmt | ReindexStmt | CreateConversionStmt | CreateCastStmt | CreateTransformStmt | PrepareStmt | ExecuteStmt | DeallocateStmt | DropOwnedStmt | ReassignOwnedStmt | AlterTSDictionaryStmt | AlterTSConfigurationStmt | PublicationTable | PublicationObjSpec | CreatePublicationStmt | AlterPublicationStmt | CreateSubscriptionStmt | AlterSubscriptionStmt | DropSubscriptionStmt | ScanToken;
export interface ParseResult {
  version?: number;
  stmts?: RawStmt[];
}
export interface ScanResult {
  version?: number;
  tokens?: ScanToken[];
}
export interface Integer {
  ival?: number;
}
export interface Float {
  fval?: string;
}
export interface Boolean {
  boolval?: boolean;
}
export interface String {
  sval?: string;
}
export interface BitString {
  bsval?: string;
}
export interface List {
  items?: Node[];
}
export interface OidList {
  items?: Node[];
}
export interface IntList {
  items?: Node[];
}
export interface A_Const {
  ival?: Integer;
  fval?: Float;
  boolval?: Boolean;
  sval?: String;
  bsval?: BitString;
  isnull?: boolean;
  location?: number;
}
export interface Alias {
  aliasname?: string;
  colnames?: Node[];
}
export interface RangeVar {
  catalogname?: string;
  schemaname?: string;
  relname?: string;
  inh?: boolean;
  relpersistence?: string;
  alias?: Alias;
  location?: number;
}
export interface TableFunc {
  ns_uris?: Node[];
  ns_names?: Node[];
  docexpr?: Node;
  rowexpr?: Node;
  colnames?: Node[];
  coltypes?: Node[];
  coltypmods?: Node[];
  colcollations?: Node[];
  colexprs?: Node[];
  coldefexprs?: Node[];
  notnulls?: bigint[];
  ordinalitycol?: number;
  location?: number;
}
export interface IntoClause {
  rel?: RangeVar;
  colNames?: Node[];
  accessMethod?: string;
  options?: Node[];
  onCommit?: OnCommitAction;
  tableSpaceName?: string;
  viewQuery?: Node;
  skipData?: boolean;
}
export interface Var {
  xpr?: Node;
  varno?: number;
  varattno?: number;
  vartype?: number;
  vartypmod?: number;
  varcollid?: number;
  varnullingrels?: bigint[];
  varlevelsup?: number;
  location?: number;
}
export interface Param {
  xpr?: Node;
  paramkind?: ParamKind;
  paramid?: number;
  paramtype?: number;
  paramtypmod?: number;
  paramcollid?: number;
  location?: number;
}
export interface Aggref {
  xpr?: Node;
  aggfnoid?: number;
  aggtype?: number;
  aggcollid?: number;
  inputcollid?: number;
  aggargtypes?: Node[];
  aggdirectargs?: Node[];
  args?: Node[];
  aggorder?: Node[];
  aggdistinct?: Node[];
  aggfilter?: Node;
  aggstar?: boolean;
  aggvariadic?: boolean;
  aggkind?: string;
  agglevelsup?: number;
  aggsplit?: AggSplit;
  aggno?: number;
  aggtransno?: number;
  location?: number;
}
export interface GroupingFunc {
  xpr?: Node;
  args?: Node[];
  refs?: Node[];
  agglevelsup?: number;
  location?: number;
}
export interface WindowFunc {
  xpr?: Node;
  winfnoid?: number;
  wintype?: number;
  wincollid?: number;
  inputcollid?: number;
  args?: Node[];
  aggfilter?: Node;
  winref?: number;
  winstar?: boolean;
  winagg?: boolean;
  location?: number;
}
export interface SubscriptingRef {
  xpr?: Node;
  refcontainertype?: number;
  refelemtype?: number;
  refrestype?: number;
  reftypmod?: number;
  refcollid?: number;
  refupperindexpr?: Node[];
  reflowerindexpr?: Node[];
  refexpr?: Node;
  refassgnexpr?: Node;
}
export interface FuncExpr {
  xpr?: Node;
  funcid?: number;
  funcresulttype?: number;
  funcretset?: boolean;
  funcvariadic?: boolean;
  funcformat?: CoercionForm;
  funccollid?: number;
  inputcollid?: number;
  args?: Node[];
  location?: number;
}
export interface NamedArgExpr {
  xpr?: Node;
  arg?: Node;
  name?: string;
  argnumber?: number;
  location?: number;
}
export interface OpExpr {
  xpr?: Node;
  opno?: number;
  opresulttype?: number;
  opretset?: boolean;
  opcollid?: number;
  inputcollid?: number;
  args?: Node[];
  location?: number;
}
export interface DistinctExpr {
  xpr?: Node;
  opno?: number;
  opresulttype?: number;
  opretset?: boolean;
  opcollid?: number;
  inputcollid?: number;
  args?: Node[];
  location?: number;
}
export interface NullIfExpr {
  xpr?: Node;
  opno?: number;
  opresulttype?: number;
  opretset?: boolean;
  opcollid?: number;
  inputcollid?: number;
  args?: Node[];
  location?: number;
}
export interface ScalarArrayOpExpr {
  xpr?: Node;
  opno?: number;
  useOr?: boolean;
  inputcollid?: number;
  args?: Node[];
  location?: number;
}
export interface BoolExpr {
  xpr?: Node;
  boolop?: BoolExprType;
  args?: Node[];
  location?: number;
}
export interface SubLink {
  xpr?: Node;
  subLinkType?: SubLinkType;
  subLinkId?: number;
  testexpr?: Node;
  operName?: Node[];
  subselect?: Node;
  location?: number;
}
export interface SubPlan {
  xpr?: Node;
  subLinkType?: SubLinkType;
  testexpr?: Node;
  paramIds?: Node[];
  plan_id?: number;
  plan_name?: string;
  firstColType?: number;
  firstColTypmod?: number;
  firstColCollation?: number;
  useHashTable?: boolean;
  unknownEqFalse?: boolean;
  parallel_safe?: boolean;
  setParam?: Node[];
  parParam?: Node[];
  args?: Node[];
  startup_cost?: number;
  per_call_cost?: number;
}
export interface AlternativeSubPlan {
  xpr?: Node;
  subplans?: Node[];
}
export interface FieldSelect {
  xpr?: Node;
  arg?: Node;
  fieldnum?: number;
  resulttype?: number;
  resulttypmod?: number;
  resultcollid?: number;
}
export interface FieldStore {
  xpr?: Node;
  arg?: Node;
  newvals?: Node[];
  fieldnums?: Node[];
  resulttype?: number;
}
export interface RelabelType {
  xpr?: Node;
  arg?: Node;
  resulttype?: number;
  resulttypmod?: number;
  resultcollid?: number;
  relabelformat?: CoercionForm;
  location?: number;
}
export interface CoerceViaIO {
  xpr?: Node;
  arg?: Node;
  resulttype?: number;
  resultcollid?: number;
  coerceformat?: CoercionForm;
  location?: number;
}
export interface ArrayCoerceExpr {
  xpr?: Node;
  arg?: Node;
  elemexpr?: Node;
  resulttype?: number;
  resulttypmod?: number;
  resultcollid?: number;
  coerceformat?: CoercionForm;
  location?: number;
}
export interface ConvertRowtypeExpr {
  xpr?: Node;
  arg?: Node;
  resulttype?: number;
  convertformat?: CoercionForm;
  location?: number;
}
export interface CollateExpr {
  xpr?: Node;
  arg?: Node;
  collOid?: number;
  location?: number;
}
export interface CaseExpr {
  xpr?: Node;
  casetype?: number;
  casecollid?: number;
  arg?: Node;
  args?: Node[];
  defresult?: Node;
  location?: number;
}
export interface CaseWhen {
  xpr?: Node;
  expr?: Node;
  result?: Node;
  location?: number;
}
export interface CaseTestExpr {
  xpr?: Node;
  typeId?: number;
  typeMod?: number;
  collation?: number;
}
export interface ArrayExpr {
  xpr?: Node;
  array_typeid?: number;
  array_collid?: number;
  element_typeid?: number;
  elements?: Node[];
  multidims?: boolean;
  location?: number;
}
export interface RowExpr {
  xpr?: Node;
  args?: Node[];
  row_typeid?: number;
  row_format?: CoercionForm;
  colnames?: Node[];
  location?: number;
}
export interface RowCompareExpr {
  xpr?: Node;
  rctype?: RowCompareType;
  opnos?: Node[];
  opfamilies?: Node[];
  inputcollids?: Node[];
  largs?: Node[];
  rargs?: Node[];
}
export interface CoalesceExpr {
  xpr?: Node;
  coalescetype?: number;
  coalescecollid?: number;
  args?: Node[];
  location?: number;
}
export interface MinMaxExpr {
  xpr?: Node;
  minmaxtype?: number;
  minmaxcollid?: number;
  inputcollid?: number;
  op?: MinMaxOp;
  args?: Node[];
  location?: number;
}
export interface SQLValueFunction {
  xpr?: Node;
  op?: SQLValueFunctionOp;
  type?: number;
  typmod?: number;
  location?: number;
}
export interface XmlExpr {
  xpr?: Node;
  op?: XmlExprOp;
  name?: string;
  named_args?: Node[];
  arg_names?: Node[];
  args?: Node[];
  xmloption?: XmlOptionType;
  indent?: boolean;
  type?: number;
  typmod?: number;
  location?: number;
}
export interface JsonFormat {
  format_type?: JsonFormatType;
  encoding?: JsonEncoding;
  location?: number;
}
export interface JsonReturning {
  format?: JsonFormat;
  typid?: number;
  typmod?: number;
}
export interface JsonValueExpr {
  raw_expr?: Node;
  formatted_expr?: Node;
  format?: JsonFormat;
}
export interface JsonConstructorExpr {
  xpr?: Node;
  type?: JsonConstructorType;
  args?: Node[];
  func?: Node;
  coercion?: Node;
  returning?: JsonReturning;
  absent_on_null?: boolean;
  unique?: boolean;
  location?: number;
}
export interface JsonIsPredicate {
  expr?: Node;
  format?: JsonFormat;
  item_type?: JsonValueType;
  unique_keys?: boolean;
  location?: number;
}
export interface NullTest {
  xpr?: Node;
  arg?: Node;
  nulltesttype?: NullTestType;
  argisrow?: boolean;
  location?: number;
}
export interface BooleanTest {
  xpr?: Node;
  arg?: Node;
  booltesttype?: BoolTestType;
  location?: number;
}
export interface CoerceToDomain {
  xpr?: Node;
  arg?: Node;
  resulttype?: number;
  resulttypmod?: number;
  resultcollid?: number;
  coercionformat?: CoercionForm;
  location?: number;
}
export interface CoerceToDomainValue {
  xpr?: Node;
  typeId?: number;
  typeMod?: number;
  collation?: number;
  location?: number;
}
export interface SetToDefault {
  xpr?: Node;
  typeId?: number;
  typeMod?: number;
  collation?: number;
  location?: number;
}
export interface CurrentOfExpr {
  xpr?: Node;
  cvarno?: number;
  cursor_name?: string;
  cursor_param?: number;
}
export interface NextValueExpr {
  xpr?: Node;
  seqid?: number;
  typeId?: number;
}
export interface InferenceElem {
  xpr?: Node;
  expr?: Node;
  infercollid?: number;
  inferopclass?: number;
}
export interface TargetEntry {
  xpr?: Node;
  expr?: Node;
  resno?: number;
  resname?: string;
  ressortgroupref?: number;
  resorigtbl?: number;
  resorigcol?: number;
  resjunk?: boolean;
}
export interface RangeTblRef {
  rtindex?: number;
}
export interface JoinExpr {
  jointype?: JoinType;
  isNatural?: boolean;
  larg?: Node;
  rarg?: Node;
  usingClause?: Node[];
  join_using_alias?: Alias;
  quals?: Node;
  alias?: Alias;
  rtindex?: number;
}
export interface FromExpr {
  fromlist?: Node[];
  quals?: Node;
}
export interface OnConflictExpr {
  action?: OnConflictAction;
  arbiterElems?: Node[];
  arbiterWhere?: Node;
  constraint?: number;
  onConflictSet?: Node[];
  onConflictWhere?: Node;
  exclRelIndex?: number;
  exclRelTlist?: Node[];
}
export interface Query {
  commandType?: CmdType;
  querySource?: QuerySource;
  canSetTag?: boolean;
  utilityStmt?: Node;
  resultRelation?: number;
  hasAggs?: boolean;
  hasWindowFuncs?: boolean;
  hasTargetSRFs?: boolean;
  hasSubLinks?: boolean;
  hasDistinctOn?: boolean;
  hasRecursive?: boolean;
  hasModifyingCTE?: boolean;
  hasForUpdate?: boolean;
  hasRowSecurity?: boolean;
  isReturn?: boolean;
  cteList?: Node[];
  rtable?: Node[];
  rteperminfos?: Node[];
  jointree?: FromExpr;
  mergeActionList?: Node[];
  mergeUseOuterJoin?: boolean;
  targetList?: Node[];
  override?: OverridingKind;
  onConflict?: OnConflictExpr;
  returningList?: Node[];
  groupClause?: Node[];
  groupDistinct?: boolean;
  groupingSets?: Node[];
  havingQual?: Node;
  windowClause?: Node[];
  distinctClause?: Node[];
  sortClause?: Node[];
  limitOffset?: Node;
  limitCount?: Node;
  limitOption?: LimitOption;
  rowMarks?: Node[];
  setOperations?: Node;
  constraintDeps?: Node[];
  withCheckOptions?: Node[];
  stmt_location?: number;
  stmt_len?: number;
}
export interface TypeName {
  names?: Node[];
  typeOid?: number;
  setof?: boolean;
  pct_type?: boolean;
  typmods?: Node[];
  typemod?: number;
  arrayBounds?: Node[];
  location?: number;
}
export interface ColumnRef {
  fields?: Node[];
  location?: number;
}
export interface ParamRef {
  number?: number;
  location?: number;
}
export interface A_Expr {
  kind?: A_Expr_Kind;
  name?: Node[];
  lexpr?: Node;
  rexpr?: Node;
  location?: number;
}
export interface TypeCast {
  arg?: Node;
  typeName?: TypeName;
  location?: number;
}
export interface CollateClause {
  arg?: Node;
  collname?: Node[];
  location?: number;
}
export interface RoleSpec {
  roletype?: RoleSpecType;
  rolename?: string;
  location?: number;
}
export interface FuncCall {
  funcname?: Node[];
  args?: Node[];
  agg_order?: Node[];
  agg_filter?: Node;
  over?: WindowDef;
  agg_within_group?: boolean;
  agg_star?: boolean;
  agg_distinct?: boolean;
  func_variadic?: boolean;
  funcformat?: CoercionForm;
  location?: number;
}
export interface A_Star {}
export interface A_Indices {
  is_slice?: boolean;
  lidx?: Node;
  uidx?: Node;
}
export interface A_Indirection {
  arg?: Node;
  indirection?: Node[];
}
export interface A_ArrayExpr {
  elements?: Node[];
  location?: number;
}
export interface ResTarget {
  name?: string;
  indirection?: Node[];
  val?: Node;
  location?: number;
}
export interface MultiAssignRef {
  source?: Node;
  colno?: number;
  ncolumns?: number;
}
export interface SortBy {
  node?: Node;
  sortby_dir?: SortByDir;
  sortby_nulls?: SortByNulls;
  useOp?: Node[];
  location?: number;
}
export interface WindowDef {
  name?: string;
  refname?: string;
  partitionClause?: Node[];
  orderClause?: Node[];
  frameOptions?: number;
  startOffset?: Node;
  endOffset?: Node;
  location?: number;
}
export interface RangeSubselect {
  lateral?: boolean;
  subquery?: Node;
  alias?: Alias;
}
export interface RangeFunction {
  lateral?: boolean;
  ordinality?: boolean;
  is_rowsfrom?: boolean;
  functions?: Node[];
  alias?: Alias;
  coldeflist?: Node[];
}
export interface RangeTableFunc {
  lateral?: boolean;
  docexpr?: Node;
  rowexpr?: Node;
  namespaces?: Node[];
  columns?: Node[];
  alias?: Alias;
  location?: number;
}
export interface RangeTableFuncCol {
  colname?: string;
  typeName?: TypeName;
  for_ordinality?: boolean;
  is_not_null?: boolean;
  colexpr?: Node;
  coldefexpr?: Node;
  location?: number;
}
export interface RangeTableSample {
  relation?: Node;
  method?: Node[];
  args?: Node[];
  repeatable?: Node;
  location?: number;
}
export interface ColumnDef {
  colname?: string;
  typeName?: TypeName;
  compression?: string;
  inhcount?: number;
  is_local?: boolean;
  is_not_null?: boolean;
  is_from_type?: boolean;
  storage?: string;
  storage_name?: string;
  raw_default?: Node;
  cooked_default?: Node;
  identity?: string;
  identitySequence?: RangeVar;
  generated?: string;
  collClause?: CollateClause;
  collOid?: number;
  constraints?: Node[];
  fdwoptions?: Node[];
  location?: number;
}
export interface TableLikeClause {
  relation?: RangeVar;
  options?: number;
  relationOid?: number;
}
export interface IndexElem {
  name?: string;
  expr?: Node;
  indexcolname?: string;
  collation?: Node[];
  opclass?: Node[];
  opclassopts?: Node[];
  ordering?: SortByDir;
  nulls_ordering?: SortByNulls;
}
export interface DefElem {
  defnamespace?: string;
  defname?: string;
  arg?: Node;
  defaction?: DefElemAction;
  location?: number;
}
export interface LockingClause {
  lockedRels?: Node[];
  strength?: LockClauseStrength;
  waitPolicy?: LockWaitPolicy;
}
export interface XmlSerialize {
  xmloption?: XmlOptionType;
  expr?: Node;
  typeName?: TypeName;
  indent?: boolean;
  location?: number;
}
export interface PartitionElem {
  name?: string;
  expr?: Node;
  collation?: Node[];
  opclass?: Node[];
  location?: number;
}
export interface PartitionSpec {
  strategy?: PartitionStrategy;
  partParams?: Node[];
  location?: number;
}
export interface PartitionBoundSpec {
  strategy?: string;
  is_default?: boolean;
  modulus?: number;
  remainder?: number;
  listdatums?: Node[];
  lowerdatums?: Node[];
  upperdatums?: Node[];
  location?: number;
}
export interface PartitionRangeDatum {
  kind?: PartitionRangeDatumKind;
  value?: Node;
  location?: number;
}
export interface PartitionCmd {
  name?: RangeVar;
  bound?: PartitionBoundSpec;
  concurrent?: boolean;
}
export interface RangeTblEntry {
  rtekind?: RTEKind;
  relid?: number;
  relkind?: string;
  rellockmode?: number;
  tablesample?: TableSampleClause;
  perminfoindex?: number;
  subquery?: Query;
  security_barrier?: boolean;
  jointype?: JoinType;
  joinmergedcols?: number;
  joinaliasvars?: Node[];
  joinleftcols?: Node[];
  joinrightcols?: Node[];
  join_using_alias?: Alias;
  functions?: Node[];
  funcordinality?: boolean;
  tablefunc?: TableFunc;
  values_lists?: Node[];
  ctename?: string;
  ctelevelsup?: number;
  self_reference?: boolean;
  coltypes?: Node[];
  coltypmods?: Node[];
  colcollations?: Node[];
  enrname?: string;
  enrtuples?: number;
  alias?: Alias;
  eref?: Alias;
  lateral?: boolean;
  inh?: boolean;
  inFromCl?: boolean;
  securityQuals?: Node[];
}
export interface RTEPermissionInfo {
  relid?: number;
  inh?: boolean;
  requiredPerms?: bigint;
  checkAsUser?: number;
  selectedCols?: bigint[];
  insertedCols?: bigint[];
  updatedCols?: bigint[];
}
export interface RangeTblFunction {
  funcexpr?: Node;
  funccolcount?: number;
  funccolnames?: Node[];
  funccoltypes?: Node[];
  funccoltypmods?: Node[];
  funccolcollations?: Node[];
  funcparams?: bigint[];
}
export interface TableSampleClause {
  tsmhandler?: number;
  args?: Node[];
  repeatable?: Node;
}
export interface WithCheckOption {
  kind?: WCOKind;
  relname?: string;
  polname?: string;
  qual?: Node;
  cascaded?: boolean;
}
export interface SortGroupClause {
  tleSortGroupRef?: number;
  eqop?: number;
  sortop?: number;
  nulls_first?: boolean;
  hashable?: boolean;
}
export interface GroupingSet {
  kind?: GroupingSetKind;
  content?: Node[];
  location?: number;
}
export interface WindowClause {
  name?: string;
  refname?: string;
  partitionClause?: Node[];
  orderClause?: Node[];
  frameOptions?: number;
  startOffset?: Node;
  endOffset?: Node;
  runCondition?: Node[];
  startInRangeFunc?: number;
  endInRangeFunc?: number;
  inRangeColl?: number;
  inRangeAsc?: boolean;
  inRangeNullsFirst?: boolean;
  winref?: number;
  copiedOrder?: boolean;
}
export interface RowMarkClause {
  rti?: number;
  strength?: LockClauseStrength;
  waitPolicy?: LockWaitPolicy;
  pushedDown?: boolean;
}
export interface WithClause {
  ctes?: Node[];
  recursive?: boolean;
  location?: number;
}
export interface InferClause {
  indexElems?: Node[];
  whereClause?: Node;
  conname?: string;
  location?: number;
}
export interface OnConflictClause {
  action?: OnConflictAction;
  infer?: InferClause;
  targetList?: Node[];
  whereClause?: Node;
  location?: number;
}
export interface CTESearchClause {
  search_col_list?: Node[];
  search_breadth_first?: boolean;
  search_seq_column?: string;
  location?: number;
}
export interface CTECycleClause {
  cycle_col_list?: Node[];
  cycle_mark_column?: string;
  cycle_mark_value?: Node;
  cycle_mark_default?: Node;
  cycle_path_column?: string;
  location?: number;
  cycle_mark_type?: number;
  cycle_mark_typmod?: number;
  cycle_mark_collation?: number;
  cycle_mark_neop?: number;
}
export interface CommonTableExpr {
  ctename?: string;
  aliascolnames?: Node[];
  ctematerialized?: CTEMaterialize;
  ctequery?: Node;
  search_clause?: CTESearchClause;
  cycle_clause?: CTECycleClause;
  location?: number;
  cterecursive?: boolean;
  cterefcount?: number;
  ctecolnames?: Node[];
  ctecoltypes?: Node[];
  ctecoltypmods?: Node[];
  ctecolcollations?: Node[];
}
export interface MergeWhenClause {
  matched?: boolean;
  commandType?: CmdType;
  override?: OverridingKind;
  condition?: Node;
  targetList?: Node[];
  values?: Node[];
}
export interface MergeAction {
  matched?: boolean;
  commandType?: CmdType;
  override?: OverridingKind;
  qual?: Node;
  targetList?: Node[];
  updateColnos?: Node[];
}
export interface TriggerTransition {
  name?: string;
  isNew?: boolean;
  isTable?: boolean;
}
export interface JsonOutput {
  typeName?: TypeName;
  returning?: JsonReturning;
}
export interface JsonKeyValue {
  key?: Node;
  value?: JsonValueExpr;
}
export interface JsonObjectConstructor {
  exprs?: Node[];
  output?: JsonOutput;
  absent_on_null?: boolean;
  unique?: boolean;
  location?: number;
}
export interface JsonArrayConstructor {
  exprs?: Node[];
  output?: JsonOutput;
  absent_on_null?: boolean;
  location?: number;
}
export interface JsonArrayQueryConstructor {
  query?: Node;
  output?: JsonOutput;
  format?: JsonFormat;
  absent_on_null?: boolean;
  location?: number;
}
export interface JsonAggConstructor {
  output?: JsonOutput;
  agg_filter?: Node;
  agg_order?: Node[];
  over?: WindowDef;
  location?: number;
}
export interface JsonObjectAgg {
  constructor?: JsonAggConstructor;
  arg?: JsonKeyValue;
  absent_on_null?: boolean;
  unique?: boolean;
}
export interface JsonArrayAgg {
  constructor?: JsonAggConstructor;
  arg?: JsonValueExpr;
  absent_on_null?: boolean;
}
export interface RawStmt {
  stmt?: Node;
  stmt_location?: number;
  stmt_len?: number;
}
export interface InsertStmt {
  relation?: RangeVar;
  cols?: Node[];
  selectStmt?: Node;
  onConflictClause?: OnConflictClause;
  returningList?: Node[];
  withClause?: WithClause;
  override?: OverridingKind;
}
export interface DeleteStmt {
  relation?: RangeVar;
  usingClause?: Node[];
  whereClause?: Node;
  returningList?: Node[];
  withClause?: WithClause;
}
export interface UpdateStmt {
  relation?: RangeVar;
  targetList?: Node[];
  whereClause?: Node;
  fromClause?: Node[];
  returningList?: Node[];
  withClause?: WithClause;
}
export interface MergeStmt {
  relation?: RangeVar;
  sourceRelation?: Node;
  joinCondition?: Node;
  mergeWhenClauses?: Node[];
  withClause?: WithClause;
}
export interface SelectStmt {
  distinctClause?: Node[];
  intoClause?: IntoClause;
  targetList?: Node[];
  fromClause?: Node[];
  whereClause?: Node;
  groupClause?: Node[];
  groupDistinct?: boolean;
  havingClause?: Node;
  windowClause?: Node[];
  valuesLists?: Node[];
  sortClause?: Node[];
  limitOffset?: Node;
  limitCount?: Node;
  limitOption?: LimitOption;
  lockingClause?: Node[];
  withClause?: WithClause;
  op?: SetOperation;
  all?: boolean;
  larg?: SelectStmt;
  rarg?: SelectStmt;
}
export interface SetOperationStmt {
  op?: SetOperation;
  all?: boolean;
  larg?: Node;
  rarg?: Node;
  colTypes?: Node[];
  colTypmods?: Node[];
  colCollations?: Node[];
  groupClauses?: Node[];
}
export interface ReturnStmt {
  returnval?: Node;
}
export interface PLAssignStmt {
  name?: string;
  indirection?: Node[];
  nnames?: number;
  val?: SelectStmt;
  location?: number;
}
export interface CreateSchemaStmt {
  schemaname?: string;
  authrole?: RoleSpec;
  schemaElts?: Node[];
  if_not_exists?: boolean;
}
export interface AlterTableStmt {
  relation?: RangeVar;
  cmds?: Node[];
  objtype?: ObjectType;
  missing_ok?: boolean;
}
export interface ReplicaIdentityStmt {
  identity_type?: string;
  name?: string;
}
export interface AlterTableCmd {
  subtype?: AlterTableType;
  name?: string;
  num?: number;
  newowner?: RoleSpec;
  def?: Node;
  behavior?: DropBehavior;
  missing_ok?: boolean;
  recurse?: boolean;
}
export interface AlterCollationStmt {
  collname?: Node[];
}
export interface AlterDomainStmt {
  subtype?: string;
  typeName?: Node[];
  name?: string;
  def?: Node;
  behavior?: DropBehavior;
  missing_ok?: boolean;
}
export interface GrantStmt {
  is_grant?: boolean;
  targtype?: GrantTargetType;
  objtype?: ObjectType;
  objects?: Node[];
  privileges?: Node[];
  grantees?: Node[];
  grant_option?: boolean;
  grantor?: RoleSpec;
  behavior?: DropBehavior;
}
export interface ObjectWithArgs {
  objname?: Node[];
  objargs?: Node[];
  objfuncargs?: Node[];
  args_unspecified?: boolean;
}
export interface AccessPriv {
  priv_name?: string;
  cols?: Node[];
}
export interface GrantRoleStmt {
  granted_roles?: Node[];
  grantee_roles?: Node[];
  is_grant?: boolean;
  opt?: Node[];
  grantor?: RoleSpec;
  behavior?: DropBehavior;
}
export interface AlterDefaultPrivilegesStmt {
  options?: Node[];
  action?: GrantStmt;
}
export interface CopyStmt {
  relation?: RangeVar;
  query?: Node;
  attlist?: Node[];
  is_from?: boolean;
  is_program?: boolean;
  filename?: string;
  options?: Node[];
  whereClause?: Node;
}
export interface VariableSetStmt {
  kind?: VariableSetKind;
  name?: string;
  args?: Node[];
  is_local?: boolean;
}
export interface VariableShowStmt {
  name?: string;
}
export interface CreateStmt {
  relation?: RangeVar;
  tableElts?: Node[];
  inhRelations?: Node[];
  partbound?: PartitionBoundSpec;
  partspec?: PartitionSpec;
  ofTypename?: TypeName;
  constraints?: Node[];
  options?: Node[];
  oncommit?: OnCommitAction;
  tablespacename?: string;
  accessMethod?: string;
  if_not_exists?: boolean;
}
export interface Constraint {
  contype?: ConstrType;
  conname?: string;
  deferrable?: boolean;
  initdeferred?: boolean;
  location?: number;
  is_no_inherit?: boolean;
  raw_expr?: Node;
  cooked_expr?: string;
  generated_when?: string;
  nulls_not_distinct?: boolean;
  keys?: Node[];
  including?: Node[];
  exclusions?: Node[];
  options?: Node[];
  indexname?: string;
  indexspace?: string;
  reset_default_tblspc?: boolean;
  access_method?: string;
  where_clause?: Node;
  pktable?: RangeVar;
  fk_attrs?: Node[];
  pk_attrs?: Node[];
  fk_matchtype?: string;
  fk_upd_action?: string;
  fk_del_action?: string;
  fk_del_set_cols?: Node[];
  old_conpfeqop?: Node[];
  old_pktable_oid?: number;
  skip_validation?: boolean;
  initially_valid?: boolean;
}
export interface CreateTableSpaceStmt {
  tablespacename?: string;
  owner?: RoleSpec;
  location?: string;
  options?: Node[];
}
export interface DropTableSpaceStmt {
  tablespacename?: string;
  missing_ok?: boolean;
}
export interface AlterTableSpaceOptionsStmt {
  tablespacename?: string;
  options?: Node[];
  isReset?: boolean;
}
export interface AlterTableMoveAllStmt {
  orig_tablespacename?: string;
  objtype?: ObjectType;
  roles?: Node[];
  new_tablespacename?: string;
  nowait?: boolean;
}
export interface CreateExtensionStmt {
  extname?: string;
  if_not_exists?: boolean;
  options?: Node[];
}
export interface AlterExtensionStmt {
  extname?: string;
  options?: Node[];
}
export interface AlterExtensionContentsStmt {
  extname?: string;
  action?: number;
  objtype?: ObjectType;
  object?: Node;
}
export interface CreateFdwStmt {
  fdwname?: string;
  func_options?: Node[];
  options?: Node[];
}
export interface AlterFdwStmt {
  fdwname?: string;
  func_options?: Node[];
  options?: Node[];
}
export interface CreateForeignServerStmt {
  servername?: string;
  servertype?: string;
  version?: string;
  fdwname?: string;
  if_not_exists?: boolean;
  options?: Node[];
}
export interface AlterForeignServerStmt {
  servername?: string;
  version?: string;
  options?: Node[];
  has_version?: boolean;
}
export interface CreateForeignTableStmt {
  base?: CreateStmt;
  servername?: string;
  options?: Node[];
}
export interface CreateUserMappingStmt {
  user?: RoleSpec;
  servername?: string;
  if_not_exists?: boolean;
  options?: Node[];
}
export interface AlterUserMappingStmt {
  user?: RoleSpec;
  servername?: string;
  options?: Node[];
}
export interface DropUserMappingStmt {
  user?: RoleSpec;
  servername?: string;
  missing_ok?: boolean;
}
export interface ImportForeignSchemaStmt {
  server_name?: string;
  remote_schema?: string;
  local_schema?: string;
  list_type?: ImportForeignSchemaType;
  table_list?: Node[];
  options?: Node[];
}
export interface CreatePolicyStmt {
  policy_name?: string;
  table?: RangeVar;
  cmd_name?: string;
  permissive?: boolean;
  roles?: Node[];
  qual?: Node;
  with_check?: Node;
}
export interface AlterPolicyStmt {
  policy_name?: string;
  table?: RangeVar;
  roles?: Node[];
  qual?: Node;
  with_check?: Node;
}
export interface CreateAmStmt {
  amname?: string;
  handler_name?: Node[];
  amtype?: string;
}
export interface CreateTrigStmt {
  replace?: boolean;
  isconstraint?: boolean;
  trigname?: string;
  relation?: RangeVar;
  funcname?: Node[];
  args?: Node[];
  row?: boolean;
  timing?: number;
  events?: number;
  columns?: Node[];
  whenClause?: Node;
  transitionRels?: Node[];
  deferrable?: boolean;
  initdeferred?: boolean;
  constrrel?: RangeVar;
}
export interface CreateEventTrigStmt {
  trigname?: string;
  eventname?: string;
  whenclause?: Node[];
  funcname?: Node[];
}
export interface AlterEventTrigStmt {
  trigname?: string;
  tgenabled?: string;
}
export interface CreatePLangStmt {
  replace?: boolean;
  plname?: string;
  plhandler?: Node[];
  plinline?: Node[];
  plvalidator?: Node[];
  pltrusted?: boolean;
}
export interface CreateRoleStmt {
  stmt_type?: RoleStmtType;
  role?: string;
  options?: Node[];
}
export interface AlterRoleStmt {
  role?: RoleSpec;
  options?: Node[];
  action?: number;
}
export interface AlterRoleSetStmt {
  role?: RoleSpec;
  database?: string;
  setstmt?: VariableSetStmt;
}
export interface DropRoleStmt {
  roles?: Node[];
  missing_ok?: boolean;
}
export interface CreateSeqStmt {
  sequence?: RangeVar;
  options?: Node[];
  ownerId?: number;
  for_identity?: boolean;
  if_not_exists?: boolean;
}
export interface AlterSeqStmt {
  sequence?: RangeVar;
  options?: Node[];
  for_identity?: boolean;
  missing_ok?: boolean;
}
export interface DefineStmt {
  kind?: ObjectType;
  oldstyle?: boolean;
  defnames?: Node[];
  args?: Node[];
  definition?: Node[];
  if_not_exists?: boolean;
  replace?: boolean;
}
export interface CreateDomainStmt {
  domainname?: Node[];
  typeName?: TypeName;
  collClause?: CollateClause;
  constraints?: Node[];
}
export interface CreateOpClassStmt {
  opclassname?: Node[];
  opfamilyname?: Node[];
  amname?: string;
  datatype?: TypeName;
  items?: Node[];
  isDefault?: boolean;
}
export interface CreateOpClassItem {
  itemtype?: number;
  name?: ObjectWithArgs;
  number?: number;
  order_family?: Node[];
  class_args?: Node[];
  storedtype?: TypeName;
}
export interface CreateOpFamilyStmt {
  opfamilyname?: Node[];
  amname?: string;
}
export interface AlterOpFamilyStmt {
  opfamilyname?: Node[];
  amname?: string;
  isDrop?: boolean;
  items?: Node[];
}
export interface DropStmt {
  objects?: Node[];
  removeType?: ObjectType;
  behavior?: DropBehavior;
  missing_ok?: boolean;
  concurrent?: boolean;
}
export interface TruncateStmt {
  relations?: Node[];
  restart_seqs?: boolean;
  behavior?: DropBehavior;
}
export interface CommentStmt {
  objtype?: ObjectType;
  object?: Node;
  comment?: string;
}
export interface SecLabelStmt {
  objtype?: ObjectType;
  object?: Node;
  provider?: string;
  label?: string;
}
export interface DeclareCursorStmt {
  portalname?: string;
  options?: number;
  query?: Node;
}
export interface ClosePortalStmt {
  portalname?: string;
}
export interface FetchStmt {
  direction?: FetchDirection;
  howMany?: bigint;
  portalname?: string;
  ismove?: boolean;
}
export interface IndexStmt {
  idxname?: string;
  relation?: RangeVar;
  accessMethod?: string;
  tableSpace?: string;
  indexParams?: Node[];
  indexIncludingParams?: Node[];
  options?: Node[];
  whereClause?: Node;
  excludeOpNames?: Node[];
  idxcomment?: string;
  indexOid?: number;
  oldNumber?: number;
  oldCreateSubid?: number;
  oldFirstRelfilelocatorSubid?: number;
  unique?: boolean;
  nulls_not_distinct?: boolean;
  primary?: boolean;
  isconstraint?: boolean;
  deferrable?: boolean;
  initdeferred?: boolean;
  transformed?: boolean;
  concurrent?: boolean;
  if_not_exists?: boolean;
  reset_default_tblspc?: boolean;
}
export interface CreateStatsStmt {
  defnames?: Node[];
  stat_types?: Node[];
  exprs?: Node[];
  relations?: Node[];
  stxcomment?: string;
  transformed?: boolean;
  if_not_exists?: boolean;
}
export interface StatsElem {
  name?: string;
  expr?: Node;
}
export interface AlterStatsStmt {
  defnames?: Node[];
  stxstattarget?: number;
  missing_ok?: boolean;
}
export interface CreateFunctionStmt {
  is_procedure?: boolean;
  replace?: boolean;
  funcname?: Node[];
  parameters?: Node[];
  returnType?: TypeName;
  options?: Node[];
  sql_body?: Node;
}
export interface FunctionParameter {
  name?: string;
  argType?: TypeName;
  mode?: FunctionParameterMode;
  defexpr?: Node;
}
export interface AlterFunctionStmt {
  objtype?: ObjectType;
  func?: ObjectWithArgs;
  actions?: Node[];
}
export interface DoStmt {
  args?: Node[];
}
export interface InlineCodeBlock {
  source_text?: string;
  langOid?: number;
  langIsTrusted?: boolean;
  atomic?: boolean;
}
export interface CallStmt {
  funccall?: FuncCall;
  funcexpr?: FuncExpr;
  outargs?: Node[];
}
export interface CallContext {
  atomic?: boolean;
}
export interface RenameStmt {
  renameType?: ObjectType;
  relationType?: ObjectType;
  relation?: RangeVar;
  object?: Node;
  subname?: string;
  newname?: string;
  behavior?: DropBehavior;
  missing_ok?: boolean;
}
export interface AlterObjectDependsStmt {
  objectType?: ObjectType;
  relation?: RangeVar;
  object?: Node;
  extname?: String;
  remove?: boolean;
}
export interface AlterObjectSchemaStmt {
  objectType?: ObjectType;
  relation?: RangeVar;
  object?: Node;
  newschema?: string;
  missing_ok?: boolean;
}
export interface AlterOwnerStmt {
  objectType?: ObjectType;
  relation?: RangeVar;
  object?: Node;
  newowner?: RoleSpec;
}
export interface AlterOperatorStmt {
  opername?: ObjectWithArgs;
  options?: Node[];
}
export interface AlterTypeStmt {
  typeName?: Node[];
  options?: Node[];
}
export interface RuleStmt {
  relation?: RangeVar;
  rulename?: string;
  whereClause?: Node;
  event?: CmdType;
  instead?: boolean;
  actions?: Node[];
  replace?: boolean;
}
export interface NotifyStmt {
  conditionname?: string;
  payload?: string;
}
export interface ListenStmt {
  conditionname?: string;
}
export interface UnlistenStmt {
  conditionname?: string;
}
export interface TransactionStmt {
  kind?: TransactionStmtKind;
  options?: Node[];
  savepoint_name?: string;
  gid?: string;
  chain?: boolean;
}
export interface CompositeTypeStmt {
  typevar?: RangeVar;
  coldeflist?: Node[];
}
export interface CreateEnumStmt {
  typeName?: Node[];
  vals?: Node[];
}
export interface CreateRangeStmt {
  typeName?: Node[];
  params?: Node[];
}
export interface AlterEnumStmt {
  typeName?: Node[];
  oldVal?: string;
  newVal?: string;
  newValNeighbor?: string;
  newValIsAfter?: boolean;
  skipIfNewValExists?: boolean;
}
export interface ViewStmt {
  view?: RangeVar;
  aliases?: Node[];
  query?: Node;
  replace?: boolean;
  options?: Node[];
  withCheckOption?: ViewCheckOption;
}
export interface LoadStmt {
  filename?: string;
}
export interface CreatedbStmt {
  dbname?: string;
  options?: Node[];
}
export interface AlterDatabaseStmt {
  dbname?: string;
  options?: Node[];
}
export interface AlterDatabaseRefreshCollStmt {
  dbname?: string;
}
export interface AlterDatabaseSetStmt {
  dbname?: string;
  setstmt?: VariableSetStmt;
}
export interface DropdbStmt {
  dbname?: string;
  missing_ok?: boolean;
  options?: Node[];
}
export interface AlterSystemStmt {
  setstmt?: VariableSetStmt;
}
export interface ClusterStmt {
  relation?: RangeVar;
  indexname?: string;
  params?: Node[];
}
export interface VacuumStmt {
  options?: Node[];
  rels?: Node[];
  is_vacuumcmd?: boolean;
}
export interface VacuumRelation {
  relation?: RangeVar;
  oid?: number;
  va_cols?: Node[];
}
export interface ExplainStmt {
  query?: Node;
  options?: Node[];
}
export interface CreateTableAsStmt {
  query?: Node;
  into?: IntoClause;
  objtype?: ObjectType;
  is_select_into?: boolean;
  if_not_exists?: boolean;
}
export interface RefreshMatViewStmt {
  concurrent?: boolean;
  skipData?: boolean;
  relation?: RangeVar;
}
export interface CheckPointStmt {}
export interface DiscardStmt {
  target?: DiscardMode;
}
export interface LockStmt {
  relations?: Node[];
  mode?: number;
  nowait?: boolean;
}
export interface ConstraintsSetStmt {
  constraints?: Node[];
  deferred?: boolean;
}
export interface ReindexStmt {
  kind?: ReindexObjectType;
  relation?: RangeVar;
  name?: string;
  params?: Node[];
}
export interface CreateConversionStmt {
  conversion_name?: Node[];
  for_encoding_name?: string;
  to_encoding_name?: string;
  func_name?: Node[];
  def?: boolean;
}
export interface CreateCastStmt {
  sourcetype?: TypeName;
  targettype?: TypeName;
  func?: ObjectWithArgs;
  context?: CoercionContext;
  inout?: boolean;
}
export interface CreateTransformStmt {
  replace?: boolean;
  type_name?: TypeName;
  lang?: string;
  fromsql?: ObjectWithArgs;
  tosql?: ObjectWithArgs;
}
export interface PrepareStmt {
  name?: string;
  argtypes?: Node[];
  query?: Node;
}
export interface ExecuteStmt {
  name?: string;
  params?: Node[];
}
export interface DeallocateStmt {
  name?: string;
}
export interface DropOwnedStmt {
  roles?: Node[];
  behavior?: DropBehavior;
}
export interface ReassignOwnedStmt {
  roles?: Node[];
  newrole?: RoleSpec;
}
export interface AlterTSDictionaryStmt {
  dictname?: Node[];
  options?: Node[];
}
export interface AlterTSConfigurationStmt {
  kind?: AlterTSConfigType;
  cfgname?: Node[];
  tokentype?: Node[];
  dicts?: Node[];
  override?: boolean;
  replace?: boolean;
  missing_ok?: boolean;
}
export interface PublicationTable {
  relation?: RangeVar;
  whereClause?: Node;
  columns?: Node[];
}
export interface PublicationObjSpec {
  pubobjtype?: PublicationObjSpecType;
  name?: string;
  pubtable?: PublicationTable;
  location?: number;
}
export interface CreatePublicationStmt {
  pubname?: string;
  options?: Node[];
  pubobjects?: Node[];
  for_all_tables?: boolean;
}
export interface AlterPublicationStmt {
  pubname?: string;
  options?: Node[];
  pubobjects?: Node[];
  for_all_tables?: boolean;
  action?: AlterPublicationAction;
}
export interface CreateSubscriptionStmt {
  subname?: string;
  conninfo?: string;
  publication?: Node[];
  options?: Node[];
}
export interface AlterSubscriptionStmt {
  kind?: AlterSubscriptionType;
  subname?: string;
  conninfo?: string;
  publication?: Node[];
  options?: Node[];
}
export interface DropSubscriptionStmt {
  subname?: string;
  missing_ok?: boolean;
  behavior?: DropBehavior;
}
export interface ScanToken {
  start?: number;
  end?: number;
  token?: Token;
  keywordKind?: KeywordKind;
}",
    "file": "types.ts",
  },
  {
    "code": "/**
* This file was automatically generated by pg-proto-parser@latest.
* DO NOT MODIFY IT BY HAND. Instead, modify the source proto file,
* and run the pg-proto-parser generate command to regenerate this file.
*/
import { OverridingKind, QuerySource, SortByDir, SortByNulls, SetQuantifier, A_Expr_Kind, RoleSpecType, TableLikeOption, DefElemAction, PartitionStrategy, PartitionRangeDatumKind, RTEKind, WCOKind, GroupingSetKind, CTEMaterialize, SetOperation, ObjectType, DropBehavior, AlterTableType, GrantTargetType, VariableSetKind, ConstrType, ImportForeignSchemaType, RoleStmtType, FetchDirection, FunctionParameterMode, TransactionStmtKind, ViewCheckOption, DiscardMode, ReindexObjectType, AlterTSConfigType, PublicationObjSpecType, AlterPublicationAction, AlterSubscriptionType, OnCommitAction, ParamKind, CoercionContext, CoercionForm, BoolExprType, SubLinkType, RowCompareType, MinMaxOp, SQLValueFunctionOp, XmlExprOp, XmlOptionType, JsonEncoding, JsonFormatType, JsonConstructorType, JsonValueType, NullTestType, BoolTestType, CmdType, JoinType, AggStrategy, AggSplit, SetOpCmd, SetOpStrategy, OnConflictAction, LimitOption, LockClauseStrength, LockWaitPolicy, LockTupleMode, KeywordKind, Token } from "./enums";
export type Node = ParseResult | ScanResult | Integer | Float | Boolean | String | BitString | List | OidList | IntList | A_Const | Alias | RangeVar | TableFunc | IntoClause | Var | Param | Aggref | GroupingFunc | WindowFunc | SubscriptingRef | FuncExpr | NamedArgExpr | OpExpr | DistinctExpr | NullIfExpr | ScalarArrayOpExpr | BoolExpr | SubLink | SubPlan | AlternativeSubPlan | FieldSelect | FieldStore | RelabelType | CoerceViaIO | ArrayCoerceExpr | ConvertRowtypeExpr | CollateExpr | CaseExpr | CaseWhen | CaseTestExpr | ArrayExpr | RowExpr | RowCompareExpr | CoalesceExpr | MinMaxExpr | SQLValueFunction | XmlExpr | JsonFormat | JsonReturning | JsonValueExpr | JsonConstructorExpr | JsonIsPredicate | NullTest | BooleanTest | CoerceToDomain | CoerceToDomainValue | SetToDefault | CurrentOfExpr | NextValueExpr | InferenceElem | TargetEntry | RangeTblRef | JoinExpr | FromExpr | OnConflictExpr | Query | TypeName | ColumnRef | ParamRef | A_Expr | TypeCast | CollateClause | RoleSpec | FuncCall | A_Star | A_Indices | A_Indirection | A_ArrayExpr | ResTarget | MultiAssignRef | SortBy | WindowDef | RangeSubselect | RangeFunction | RangeTableFunc | RangeTableFuncCol | RangeTableSample | ColumnDef | TableLikeClause | IndexElem | DefElem | LockingClause | XmlSerialize | PartitionElem | PartitionSpec | PartitionBoundSpec | PartitionRangeDatum | PartitionCmd | RangeTblEntry | RTEPermissionInfo | RangeTblFunction | TableSampleClause | WithCheckOption | SortGroupClause | GroupingSet | WindowClause | RowMarkClause | WithClause | InferClause | OnConflictClause | CTESearchClause | CTECycleClause | CommonTableExpr | MergeWhenClause | MergeAction | TriggerTransition | JsonOutput | JsonKeyValue | JsonObjectConstructor | JsonArrayConstructor | JsonArrayQueryConstructor | JsonAggConstructor | JsonObjectAgg | JsonArrayAgg | RawStmt | InsertStmt | DeleteStmt | UpdateStmt | MergeStmt | SelectStmt | SetOperationStmt | ReturnStmt | PLAssignStmt | CreateSchemaStmt | AlterTableStmt | ReplicaIdentityStmt | AlterTableCmd | AlterCollationStmt | AlterDomainStmt | GrantStmt | ObjectWithArgs | AccessPriv | GrantRoleStmt | AlterDefaultPrivilegesStmt | CopyStmt | VariableSetStmt | VariableShowStmt | CreateStmt | Constraint | CreateTableSpaceStmt | DropTableSpaceStmt | AlterTableSpaceOptionsStmt | AlterTableMoveAllStmt | CreateExtensionStmt | AlterExtensionStmt | AlterExtensionContentsStmt | CreateFdwStmt | AlterFdwStmt | CreateForeignServerStmt | AlterForeignServerStmt | CreateForeignTableStmt | CreateUserMappingStmt | AlterUserMappingStmt | DropUserMappingStmt | ImportForeignSchemaStmt | CreatePolicyStmt | AlterPolicyStmt | CreateAmStmt | CreateTrigStmt | CreateEventTrigStmt | AlterEventTrigStmt | CreatePLangStmt | CreateRoleStmt | AlterRoleStmt | AlterRoleSetStmt | DropRoleStmt | CreateSeqStmt | AlterSeqStmt | DefineStmt | CreateDomainStmt | CreateOpClassStmt | CreateOpClassItem | CreateOpFamilyStmt | AlterOpFamilyStmt | DropStmt | TruncateStmt | CommentStmt | SecLabelStmt | DeclareCursorStmt | ClosePortalStmt | FetchStmt | IndexStmt | CreateStatsStmt | StatsElem | AlterStatsStmt | CreateFunctionStmt | FunctionParameter | AlterFunctionStmt | DoStmt | InlineCodeBlock | CallStmt | CallContext | RenameStmt | AlterObjectDependsStmt | AlterObjectSchemaStmt | AlterOwnerStmt | AlterOperatorStmt | AlterTypeStmt | RuleStmt | NotifyStmt | ListenStmt | UnlistenStmt | TransactionStmt | CompositeTypeStmt | CreateEnumStmt | CreateRangeStmt | AlterEnumStmt | ViewStmt | LoadStmt | CreatedbStmt | AlterDatabaseStmt | AlterDatabaseRefreshCollStmt | AlterDatabaseSetStmt | DropdbStmt | AlterSystemStmt | ClusterStmt | VacuumStmt | VacuumRelation | ExplainStmt | CreateTableAsStmt | RefreshMatViewStmt | CheckPointStmt | DiscardStmt | LockStmt | ConstraintsSetStmt | ReindexStmt | CreateConversionStmt | CreateCastStmt | CreateTransformStmt | PrepareStmt | ExecuteStmt | DeallocateStmt | DropOwnedStmt | ReassignOwnedStmt | AlterTSDictionaryStmt | AlterTSConfigurationStmt | PublicationTable | PublicationObjSpec | CreatePublicationStmt | AlterPublicationStmt | CreateSubscriptionStmt | AlterSubscriptionStmt | DropSubscriptionStmt | ScanToken;
export interface ParseResult {
  ParseResult: {
    version?: number;
    stmts?: RawStmt[];
  };
}
export interface ScanResult {
  ScanResult: {
    version?: number;
    tokens?: ScanToken[];
  };
}
export interface Integer {
  ival?: number;
}
export interface Float {
  fval?: string;
}
export interface Boolean {
  boolval?: boolean;
}
export interface String {
  sval?: string;
}
export interface BitString {
  bsval?: string;
}
export interface List {
  items?: Node[];
}
export interface OidList {
  items?: Node[];
}
export interface IntList {
  items?: Node[];
}
export interface A_Const {
  ival?: Integer;
  fval?: Float;
  boolval?: Boolean;
  sval?: String;
  bsval?: BitString;
  isnull?: boolean;
  location?: number;
}
export interface Alias {
  aliasname?: string;
  colnames?: Node[];
}
export interface RangeVar {
  catalogname?: string;
  schemaname?: string;
  relname?: string;
  inh?: boolean;
  relpersistence?: string;
  alias?: Alias;
  location?: number;
}
export interface TableFunc {
  ns_uris?: Node[];
  ns_names?: Node[];
  docexpr?: Node;
  rowexpr?: Node;
  colnames?: Node[];
  coltypes?: Node[];
  coltypmods?: Node[];
  colcollations?: Node[];
  colexprs?: Node[];
  coldefexprs?: Node[];
  notnulls?: bigint[];
  ordinalitycol?: number;
  location?: number;
}
export interface IntoClause {
  rel?: RangeVar;
  colNames?: Node[];
  accessMethod?: string;
  options?: Node[];
  onCommit?: OnCommitAction;
  tableSpaceName?: string;
  viewQuery?: Node;
  skipData?: boolean;
}
export interface Var {
  xpr?: Node;
  varno?: number;
  varattno?: number;
  vartype?: number;
  vartypmod?: number;
  varcollid?: number;
  varnullingrels?: bigint[];
  varlevelsup?: number;
  location?: number;
}
export interface Param {
  xpr?: Node;
  paramkind?: ParamKind;
  paramid?: number;
  paramtype?: number;
  paramtypmod?: number;
  paramcollid?: number;
  location?: number;
}
export interface Aggref {
  xpr?: Node;
  aggfnoid?: number;
  aggtype?: number;
  aggcollid?: number;
  inputcollid?: number;
  aggargtypes?: Node[];
  aggdirectargs?: Node[];
  args?: Node[];
  aggorder?: Node[];
  aggdistinct?: Node[];
  aggfilter?: Node;
  aggstar?: boolean;
  aggvariadic?: boolean;
  aggkind?: string;
  agglevelsup?: number;
  aggsplit?: AggSplit;
  aggno?: number;
  aggtransno?: number;
  location?: number;
}
export interface GroupingFunc {
  xpr?: Node;
  args?: Node[];
  refs?: Node[];
  agglevelsup?: number;
  location?: number;
}
export interface WindowFunc {
  xpr?: Node;
  winfnoid?: number;
  wintype?: number;
  wincollid?: number;
  inputcollid?: number;
  args?: Node[];
  aggfilter?: Node;
  winref?: number;
  winstar?: boolean;
  winagg?: boolean;
  location?: number;
}
export interface SubscriptingRef {
  xpr?: Node;
  refcontainertype?: number;
  refelemtype?: number;
  refrestype?: number;
  reftypmod?: number;
  refcollid?: number;
  refupperindexpr?: Node[];
  reflowerindexpr?: Node[];
  refexpr?: Node;
  refassgnexpr?: Node;
}
export interface FuncExpr {
  xpr?: Node;
  funcid?: number;
  funcresulttype?: number;
  funcretset?: boolean;
  funcvariadic?: boolean;
  funcformat?: CoercionForm;
  funccollid?: number;
  inputcollid?: number;
  args?: Node[];
  location?: number;
}
export interface NamedArgExpr {
  xpr?: Node;
  arg?: Node;
  name?: string;
  argnumber?: number;
  location?: number;
}
export interface OpExpr {
  xpr?: Node;
  opno?: number;
  opresulttype?: number;
  opretset?: boolean;
  opcollid?: number;
  inputcollid?: number;
  args?: Node[];
  location?: number;
}
export interface DistinctExpr {
  xpr?: Node;
  opno?: number;
  opresulttype?: number;
  opretset?: boolean;
  opcollid?: number;
  inputcollid?: number;
  args?: Node[];
  location?: number;
}
export interface NullIfExpr {
  xpr?: Node;
  opno?: number;
  opresulttype?: number;
  opretset?: boolean;
  opcollid?: number;
  inputcollid?: number;
  args?: Node[];
  location?: number;
}
export interface ScalarArrayOpExpr {
  xpr?: Node;
  opno?: number;
  useOr?: boolean;
  inputcollid?: number;
  args?: Node[];
  location?: number;
}
export interface BoolExpr {
  xpr?: Node;
  boolop?: BoolExprType;
  args?: Node[];
  location?: number;
}
export interface SubLink {
  xpr?: Node;
  subLinkType?: SubLinkType;
  subLinkId?: number;
  testexpr?: Node;
  operName?: Node[];
  subselect?: Node;
  location?: number;
}
export interface SubPlan {
  xpr?: Node;
  subLinkType?: SubLinkType;
  testexpr?: Node;
  paramIds?: Node[];
  plan_id?: number;
  plan_name?: string;
  firstColType?: number;
  firstColTypmod?: number;
  firstColCollation?: number;
  useHashTable?: boolean;
  unknownEqFalse?: boolean;
  parallel_safe?: boolean;
  setParam?: Node[];
  parParam?: Node[];
  args?: Node[];
  startup_cost?: number;
  per_call_cost?: number;
}
export interface AlternativeSubPlan {
  xpr?: Node;
  subplans?: Node[];
}
export interface FieldSelect {
  xpr?: Node;
  arg?: Node;
  fieldnum?: number;
  resulttype?: number;
  resulttypmod?: number;
  resultcollid?: number;
}
export interface FieldStore {
  xpr?: Node;
  arg?: Node;
  newvals?: Node[];
  fieldnums?: Node[];
  resulttype?: number;
}
export interface RelabelType {
  xpr?: Node;
  arg?: Node;
  resulttype?: number;
  resulttypmod?: number;
  resultcollid?: number;
  relabelformat?: CoercionForm;
  location?: number;
}
export interface CoerceViaIO {
  xpr?: Node;
  arg?: Node;
  resulttype?: number;
  resultcollid?: number;
  coerceformat?: CoercionForm;
  location?: number;
}
export interface ArrayCoerceExpr {
  xpr?: Node;
  arg?: Node;
  elemexpr?: Node;
  resulttype?: number;
  resulttypmod?: number;
  resultcollid?: number;
  coerceformat?: CoercionForm;
  location?: number;
}
export interface ConvertRowtypeExpr {
  xpr?: Node;
  arg?: Node;
  resulttype?: number;
  convertformat?: CoercionForm;
  location?: number;
}
export interface CollateExpr {
  xpr?: Node;
  arg?: Node;
  collOid?: number;
  location?: number;
}
export interface CaseExpr {
  xpr?: Node;
  casetype?: number;
  casecollid?: number;
  arg?: Node;
  args?: Node[];
  defresult?: Node;
  location?: number;
}
export interface CaseWhen {
  xpr?: Node;
  expr?: Node;
  result?: Node;
  location?: number;
}
export interface CaseTestExpr {
  xpr?: Node;
  typeId?: number;
  typeMod?: number;
  collation?: number;
}
export interface ArrayExpr {
  xpr?: Node;
  array_typeid?: number;
  array_collid?: number;
  element_typeid?: number;
  elements?: Node[];
  multidims?: boolean;
  location?: number;
}
export interface RowExpr {
  xpr?: Node;
  args?: Node[];
  row_typeid?: number;
  row_format?: CoercionForm;
  colnames?: Node[];
  location?: number;
}
export interface RowCompareExpr {
  xpr?: Node;
  rctype?: RowCompareType;
  opnos?: Node[];
  opfamilies?: Node[];
  inputcollids?: Node[];
  largs?: Node[];
  rargs?: Node[];
}
export interface CoalesceExpr {
  xpr?: Node;
  coalescetype?: number;
  coalescecollid?: number;
  args?: Node[];
  location?: number;
}
export interface MinMaxExpr {
  xpr?: Node;
  minmaxtype?: number;
  minmaxcollid?: number;
  inputcollid?: number;
  op?: MinMaxOp;
  args?: Node[];
  location?: number;
}
export interface SQLValueFunction {
  xpr?: Node;
  op?: SQLValueFunctionOp;
  type?: number;
  typmod?: number;
  location?: number;
}
export interface XmlExpr {
  xpr?: Node;
  op?: XmlExprOp;
  name?: string;
  named_args?: Node[];
  arg_names?: Node[];
  args?: Node[];
  xmloption?: XmlOptionType;
  indent?: boolean;
  type?: number;
  typmod?: number;
  location?: number;
}
export interface JsonFormat {
  format_type?: JsonFormatType;
  encoding?: JsonEncoding;
  location?: number;
}
export interface JsonReturning {
  format?: JsonFormat;
  typid?: number;
  typmod?: number;
}
export interface JsonValueExpr {
  raw_expr?: Node;
  formatted_expr?: Node;
  format?: JsonFormat;
}
export interface JsonConstructorExpr {
  xpr?: Node;
  type?: JsonConstructorType;
  args?: Node[];
  func?: Node;
  coercion?: Node;
  returning?: JsonReturning;
  absent_on_null?: boolean;
  unique?: boolean;
  location?: number;
}
export interface JsonIsPredicate {
  expr?: Node;
  format?: JsonFormat;
  item_type?: JsonValueType;
  unique_keys?: boolean;
  location?: number;
}
export interface NullTest {
  xpr?: Node;
  arg?: Node;
  nulltesttype?: NullTestType;
  argisrow?: boolean;
  location?: number;
}
export interface BooleanTest {
  xpr?: Node;
  arg?: Node;
  booltesttype?: BoolTestType;
  location?: number;
}
export interface CoerceToDomain {
  xpr?: Node;
  arg?: Node;
  resulttype?: number;
  resulttypmod?: number;
  resultcollid?: number;
  coercionformat?: CoercionForm;
  location?: number;
}
export interface CoerceToDomainValue {
  xpr?: Node;
  typeId?: number;
  typeMod?: number;
  collation?: number;
  location?: number;
}
export interface SetToDefault {
  xpr?: Node;
  typeId?: number;
  typeMod?: number;
  collation?: number;
  location?: number;
}
export interface CurrentOfExpr {
  xpr?: Node;
  cvarno?: number;
  cursor_name?: string;
  cursor_param?: number;
}
export interface NextValueExpr {
  xpr?: Node;
  seqid?: number;
  typeId?: number;
}
export interface InferenceElem {
  xpr?: Node;
  expr?: Node;
  infercollid?: number;
  inferopclass?: number;
}
export interface TargetEntry {
  xpr?: Node;
  expr?: Node;
  resno?: number;
  resname?: string;
  ressortgroupref?: number;
  resorigtbl?: number;
  resorigcol?: number;
  resjunk?: boolean;
}
export interface RangeTblRef {
  rtindex?: number;
}
export interface JoinExpr {
  jointype?: JoinType;
  isNatural?: boolean;
  larg?: Node;
  rarg?: Node;
  usingClause?: Node[];
  join_using_alias?: Alias;
  quals?: Node;
  alias?: Alias;
  rtindex?: number;
}
export interface FromExpr {
  fromlist?: Node[];
  quals?: Node;
}
export interface OnConflictExpr {
  action?: OnConflictAction;
  arbiterElems?: Node[];
  arbiterWhere?: Node;
  constraint?: number;
  onConflictSet?: Node[];
  onConflictWhere?: Node;
  exclRelIndex?: number;
  exclRelTlist?: Node[];
}
export interface Query {
  commandType?: CmdType;
  querySource?: QuerySource;
  canSetTag?: boolean;
  utilityStmt?: Node;
  resultRelation?: number;
  hasAggs?: boolean;
  hasWindowFuncs?: boolean;
  hasTargetSRFs?: boolean;
  hasSubLinks?: boolean;
  hasDistinctOn?: boolean;
  hasRecursive?: boolean;
  hasModifyingCTE?: boolean;
  hasForUpdate?: boolean;
  hasRowSecurity?: boolean;
  isReturn?: boolean;
  cteList?: Node[];
  rtable?: Node[];
  rteperminfos?: Node[];
  jointree?: FromExpr;
  mergeActionList?: Node[];
  mergeUseOuterJoin?: boolean;
  targetList?: Node[];
  override?: OverridingKind;
  onConflict?: OnConflictExpr;
  returningList?: Node[];
  groupClause?: Node[];
  groupDistinct?: boolean;
  groupingSets?: Node[];
  havingQual?: Node;
  windowClause?: Node[];
  distinctClause?: Node[];
  sortClause?: Node[];
  limitOffset?: Node;
  limitCount?: Node;
  limitOption?: LimitOption;
  rowMarks?: Node[];
  setOperations?: Node;
  constraintDeps?: Node[];
  withCheckOptions?: Node[];
  stmt_location?: number;
  stmt_len?: number;
}
export interface TypeName {
  names?: Node[];
  typeOid?: number;
  setof?: boolean;
  pct_type?: boolean;
  typmods?: Node[];
  typemod?: number;
  arrayBounds?: Node[];
  location?: number;
}
export interface ColumnRef {
  fields?: Node[];
  location?: number;
}
export interface ParamRef {
  number?: number;
  location?: number;
}
export interface A_Expr {
  kind?: A_Expr_Kind;
  name?: Node[];
  lexpr?: Node;
  rexpr?: Node;
  location?: number;
}
export interface TypeCast {
  arg?: Node;
  typeName?: TypeName;
  location?: number;
}
export interface CollateClause {
  arg?: Node;
  collname?: Node[];
  location?: number;
}
export interface RoleSpec {
  roletype?: RoleSpecType;
  rolename?: string;
  location?: number;
}
export interface FuncCall {
  funcname?: Node[];
  args?: Node[];
  agg_order?: Node[];
  agg_filter?: Node;
  over?: WindowDef;
  agg_within_group?: boolean;
  agg_star?: boolean;
  agg_distinct?: boolean;
  func_variadic?: boolean;
  funcformat?: CoercionForm;
  location?: number;
}
export interface A_Star {}
export interface A_Indices {
  is_slice?: boolean;
  lidx?: Node;
  uidx?: Node;
}
export interface A_Indirection {
  arg?: Node;
  indirection?: Node[];
}
export interface A_ArrayExpr {
  elements?: Node[];
  location?: number;
}
export interface ResTarget {
  name?: string;
  indirection?: Node[];
  val?: Node;
  location?: number;
}
export interface MultiAssignRef {
  source?: Node;
  colno?: number;
  ncolumns?: number;
}
export interface SortBy {
  node?: Node;
  sortby_dir?: SortByDir;
  sortby_nulls?: SortByNulls;
  useOp?: Node[];
  location?: number;
}
export interface WindowDef {
  name?: string;
  refname?: string;
  partitionClause?: Node[];
  orderClause?: Node[];
  frameOptions?: number;
  startOffset?: Node;
  endOffset?: Node;
  location?: number;
}
export interface RangeSubselect {
  lateral?: boolean;
  subquery?: Node;
  alias?: Alias;
}
export interface RangeFunction {
  lateral?: boolean;
  ordinality?: boolean;
  is_rowsfrom?: boolean;
  functions?: Node[];
  alias?: Alias;
  coldeflist?: Node[];
}
export interface RangeTableFunc {
  lateral?: boolean;
  docexpr?: Node;
  rowexpr?: Node;
  namespaces?: Node[];
  columns?: Node[];
  alias?: Alias;
  location?: number;
}
export interface RangeTableFuncCol {
  colname?: string;
  typeName?: TypeName;
  for_ordinality?: boolean;
  is_not_null?: boolean;
  colexpr?: Node;
  coldefexpr?: Node;
  location?: number;
}
export interface RangeTableSample {
  relation?: Node;
  method?: Node[];
  args?: Node[];
  repeatable?: Node;
  location?: number;
}
export interface ColumnDef {
  colname?: string;
  typeName?: TypeName;
  compression?: string;
  inhcount?: number;
  is_local?: boolean;
  is_not_null?: boolean;
  is_from_type?: boolean;
  storage?: string;
  storage_name?: string;
  raw_default?: Node;
  cooked_default?: Node;
  identity?: string;
  identitySequence?: RangeVar;
  generated?: string;
  collClause?: CollateClause;
  collOid?: number;
  constraints?: Node[];
  fdwoptions?: Node[];
  location?: number;
}
export interface TableLikeClause {
  relation?: RangeVar;
  options?: number;
  relationOid?: number;
}
export interface IndexElem {
  name?: string;
  expr?: Node;
  indexcolname?: string;
  collation?: Node[];
  opclass?: Node[];
  opclassopts?: Node[];
  ordering?: SortByDir;
  nulls_ordering?: SortByNulls;
}
export interface DefElem {
  defnamespace?: string;
  defname?: string;
  arg?: Node;
  defaction?: DefElemAction;
  location?: number;
}
export interface LockingClause {
  lockedRels?: Node[];
  strength?: LockClauseStrength;
  waitPolicy?: LockWaitPolicy;
}
export interface XmlSerialize {
  xmloption?: XmlOptionType;
  expr?: Node;
  typeName?: TypeName;
  indent?: boolean;
  location?: number;
}
export interface PartitionElem {
  name?: string;
  expr?: Node;
  collation?: Node[];
  opclass?: Node[];
  location?: number;
}
export interface PartitionSpec {
  strategy?: PartitionStrategy;
  partParams?: Node[];
  location?: number;
}
export interface PartitionBoundSpec {
  strategy?: string;
  is_default?: boolean;
  modulus?: number;
  remainder?: number;
  listdatums?: Node[];
  lowerdatums?: Node[];
  upperdatums?: Node[];
  location?: number;
}
export interface PartitionRangeDatum {
  kind?: PartitionRangeDatumKind;
  value?: Node;
  location?: number;
}
export interface PartitionCmd {
  name?: RangeVar;
  bound?: PartitionBoundSpec;
  concurrent?: boolean;
}
export interface RangeTblEntry {
  rtekind?: RTEKind;
  relid?: number;
  relkind?: string;
  rellockmode?: number;
  tablesample?: TableSampleClause;
  perminfoindex?: number;
  subquery?: Query;
  security_barrier?: boolean;
  jointype?: JoinType;
  joinmergedcols?: number;
  joinaliasvars?: Node[];
  joinleftcols?: Node[];
  joinrightcols?: Node[];
  join_using_alias?: Alias;
  functions?: Node[];
  funcordinality?: boolean;
  tablefunc?: TableFunc;
  values_lists?: Node[];
  ctename?: string;
  ctelevelsup?: number;
  self_reference?: boolean;
  coltypes?: Node[];
  coltypmods?: Node[];
  colcollations?: Node[];
  enrname?: string;
  enrtuples?: number;
  alias?: Alias;
  eref?: Alias;
  lateral?: boolean;
  inh?: boolean;
  inFromCl?: boolean;
  securityQuals?: Node[];
}
export interface RTEPermissionInfo {
  relid?: number;
  inh?: boolean;
  requiredPerms?: bigint;
  checkAsUser?: number;
  selectedCols?: bigint[];
  insertedCols?: bigint[];
  updatedCols?: bigint[];
}
export interface RangeTblFunction {
  funcexpr?: Node;
  funccolcount?: number;
  funccolnames?: Node[];
  funccoltypes?: Node[];
  funccoltypmods?: Node[];
  funccolcollations?: Node[];
  funcparams?: bigint[];
}
export interface TableSampleClause {
  tsmhandler?: number;
  args?: Node[];
  repeatable?: Node;
}
export interface WithCheckOption {
  kind?: WCOKind;
  relname?: string;
  polname?: string;
  qual?: Node;
  cascaded?: boolean;
}
export interface SortGroupClause {
  tleSortGroupRef?: number;
  eqop?: number;
  sortop?: number;
  nulls_first?: boolean;
  hashable?: boolean;
}
export interface GroupingSet {
  kind?: GroupingSetKind;
  content?: Node[];
  location?: number;
}
export interface WindowClause {
  name?: string;
  refname?: string;
  partitionClause?: Node[];
  orderClause?: Node[];
  frameOptions?: number;
  startOffset?: Node;
  endOffset?: Node;
  runCondition?: Node[];
  startInRangeFunc?: number;
  endInRangeFunc?: number;
  inRangeColl?: number;
  inRangeAsc?: boolean;
  inRangeNullsFirst?: boolean;
  winref?: number;
  copiedOrder?: boolean;
}
export interface RowMarkClause {
  rti?: number;
  strength?: LockClauseStrength;
  waitPolicy?: LockWaitPolicy;
  pushedDown?: boolean;
}
export interface WithClause {
  ctes?: Node[];
  recursive?: boolean;
  location?: number;
}
export interface InferClause {
  indexElems?: Node[];
  whereClause?: Node;
  conname?: string;
  location?: number;
}
export interface OnConflictClause {
  action?: OnConflictAction;
  infer?: InferClause;
  targetList?: Node[];
  whereClause?: Node;
  location?: number;
}
export interface CTESearchClause {
  search_col_list?: Node[];
  search_breadth_first?: boolean;
  search_seq_column?: string;
  location?: number;
}
export interface CTECycleClause {
  cycle_col_list?: Node[];
  cycle_mark_column?: string;
  cycle_mark_value?: Node;
  cycle_mark_default?: Node;
  cycle_path_column?: string;
  location?: number;
  cycle_mark_type?: number;
  cycle_mark_typmod?: number;
  cycle_mark_collation?: number;
  cycle_mark_neop?: number;
}
export interface CommonTableExpr {
  ctename?: string;
  aliascolnames?: Node[];
  ctematerialized?: CTEMaterialize;
  ctequery?: Node;
  search_clause?: CTESearchClause;
  cycle_clause?: CTECycleClause;
  location?: number;
  cterecursive?: boolean;
  cterefcount?: number;
  ctecolnames?: Node[];
  ctecoltypes?: Node[];
  ctecoltypmods?: Node[];
  ctecolcollations?: Node[];
}
export interface MergeWhenClause {
  matched?: boolean;
  commandType?: CmdType;
  override?: OverridingKind;
  condition?: Node;
  targetList?: Node[];
  values?: Node[];
}
export interface MergeAction {
  matched?: boolean;
  commandType?: CmdType;
  override?: OverridingKind;
  qual?: Node;
  targetList?: Node[];
  updateColnos?: Node[];
}
export interface TriggerTransition {
  name?: string;
  isNew?: boolean;
  isTable?: boolean;
}
export interface JsonOutput {
  typeName?: TypeName;
  returning?: JsonReturning;
}
export interface JsonKeyValue {
  key?: Node;
  value?: JsonValueExpr;
}
export interface JsonObjectConstructor {
  exprs?: Node[];
  output?: JsonOutput;
  absent_on_null?: boolean;
  unique?: boolean;
  location?: number;
}
export interface JsonArrayConstructor {
  exprs?: Node[];
  output?: JsonOutput;
  absent_on_null?: boolean;
  location?: number;
}
export interface JsonArrayQueryConstructor {
  query?: Node;
  output?: JsonOutput;
  format?: JsonFormat;
  absent_on_null?: boolean;
  location?: number;
}
export interface JsonAggConstructor {
  output?: JsonOutput;
  agg_filter?: Node;
  agg_order?: Node[];
  over?: WindowDef;
  location?: number;
}
export interface JsonObjectAgg {
  constructor?: JsonAggConstructor;
  arg?: JsonKeyValue;
  absent_on_null?: boolean;
  unique?: boolean;
}
export interface JsonArrayAgg {
  constructor?: JsonAggConstructor;
  arg?: JsonValueExpr;
  absent_on_null?: boolean;
}
export interface RawStmt {
  stmt?: Node;
  stmt_location?: number;
  stmt_len?: number;
}
export interface InsertStmt {
  relation?: RangeVar;
  cols?: Node[];
  selectStmt?: Node;
  onConflictClause?: OnConflictClause;
  returningList?: Node[];
  withClause?: WithClause;
  override?: OverridingKind;
}
export interface DeleteStmt {
  relation?: RangeVar;
  usingClause?: Node[];
  whereClause?: Node;
  returningList?: Node[];
  withClause?: WithClause;
}
export interface UpdateStmt {
  relation?: RangeVar;
  targetList?: Node[];
  whereClause?: Node;
  fromClause?: Node[];
  returningList?: Node[];
  withClause?: WithClause;
}
export interface MergeStmt {
  relation?: RangeVar;
  sourceRelation?: Node;
  joinCondition?: Node;
  mergeWhenClauses?: Node[];
  withClause?: WithClause;
}
export interface SelectStmt {
  distinctClause?: Node[];
  intoClause?: IntoClause;
  targetList?: Node[];
  fromClause?: Node[];
  whereClause?: Node;
  groupClause?: Node[];
  groupDistinct?: boolean;
  havingClause?: Node;
  windowClause?: Node[];
  valuesLists?: Node[];
  sortClause?: Node[];
  limitOffset?: Node;
  limitCount?: Node;
  limitOption?: LimitOption;
  lockingClause?: Node[];
  withClause?: WithClause;
  op?: SetOperation;
  all?: boolean;
  larg?: SelectStmt;
  rarg?: SelectStmt;
}
export interface SetOperationStmt {
  op?: SetOperation;
  all?: boolean;
  larg?: Node;
  rarg?: Node;
  colTypes?: Node[];
  colTypmods?: Node[];
  colCollations?: Node[];
  groupClauses?: Node[];
}
export interface ReturnStmt {
  returnval?: Node;
}
export interface PLAssignStmt {
  name?: string;
  indirection?: Node[];
  nnames?: number;
  val?: SelectStmt;
  location?: number;
}
export interface CreateSchemaStmt {
  schemaname?: string;
  authrole?: RoleSpec;
  schemaElts?: Node[];
  if_not_exists?: boolean;
}
export interface AlterTableStmt {
  relation?: RangeVar;
  cmds?: Node[];
  objtype?: ObjectType;
  missing_ok?: boolean;
}
export interface ReplicaIdentityStmt {
  identity_type?: string;
  name?: string;
}
export interface AlterTableCmd {
  subtype?: AlterTableType;
  name?: string;
  num?: number;
  newowner?: RoleSpec;
  def?: Node;
  behavior?: DropBehavior;
  missing_ok?: boolean;
  recurse?: boolean;
}
export interface AlterCollationStmt {
  collname?: Node[];
}
export interface AlterDomainStmt {
  subtype?: string;
  typeName?: Node[];
  name?: string;
  def?: Node;
  behavior?: DropBehavior;
  missing_ok?: boolean;
}
export interface GrantStmt {
  is_grant?: boolean;
  targtype?: GrantTargetType;
  objtype?: ObjectType;
  objects?: Node[];
  privileges?: Node[];
  grantees?: Node[];
  grant_option?: boolean;
  grantor?: RoleSpec;
  behavior?: DropBehavior;
}
export interface ObjectWithArgs {
  objname?: Node[];
  objargs?: Node[];
  objfuncargs?: Node[];
  args_unspecified?: boolean;
}
export interface AccessPriv {
  priv_name?: string;
  cols?: Node[];
}
export interface GrantRoleStmt {
  granted_roles?: Node[];
  grantee_roles?: Node[];
  is_grant?: boolean;
  opt?: Node[];
  grantor?: RoleSpec;
  behavior?: DropBehavior;
}
export interface AlterDefaultPrivilegesStmt {
  options?: Node[];
  action?: GrantStmt;
}
export interface CopyStmt {
  relation?: RangeVar;
  query?: Node;
  attlist?: Node[];
  is_from?: boolean;
  is_program?: boolean;
  filename?: string;
  options?: Node[];
  whereClause?: Node;
}
export interface VariableSetStmt {
  kind?: VariableSetKind;
  name?: string;
  args?: Node[];
  is_local?: boolean;
}
export interface VariableShowStmt {
  name?: string;
}
export interface CreateStmt {
  relation?: RangeVar;
  tableElts?: Node[];
  inhRelations?: Node[];
  partbound?: PartitionBoundSpec;
  partspec?: PartitionSpec;
  ofTypename?: TypeName;
  constraints?: Node[];
  options?: Node[];
  oncommit?: OnCommitAction;
  tablespacename?: string;
  accessMethod?: string;
  if_not_exists?: boolean;
}
export interface Constraint {
  contype?: ConstrType;
  conname?: string;
  deferrable?: boolean;
  initdeferred?: boolean;
  location?: number;
  is_no_inherit?: boolean;
  raw_expr?: Node;
  cooked_expr?: string;
  generated_when?: string;
  nulls_not_distinct?: boolean;
  keys?: Node[];
  including?: Node[];
  exclusions?: Node[];
  options?: Node[];
  indexname?: string;
  indexspace?: string;
  reset_default_tblspc?: boolean;
  access_method?: string;
  where_clause?: Node;
  pktable?: RangeVar;
  fk_attrs?: Node[];
  pk_attrs?: Node[];
  fk_matchtype?: string;
  fk_upd_action?: string;
  fk_del_action?: string;
  fk_del_set_cols?: Node[];
  old_conpfeqop?: Node[];
  old_pktable_oid?: number;
  skip_validation?: boolean;
  initially_valid?: boolean;
}
export interface CreateTableSpaceStmt {
  tablespacename?: string;
  owner?: RoleSpec;
  location?: string;
  options?: Node[];
}
export interface DropTableSpaceStmt {
  tablespacename?: string;
  missing_ok?: boolean;
}
export interface AlterTableSpaceOptionsStmt {
  tablespacename?: string;
  options?: Node[];
  isReset?: boolean;
}
export interface AlterTableMoveAllStmt {
  orig_tablespacename?: string;
  objtype?: ObjectType;
  roles?: Node[];
  new_tablespacename?: string;
  nowait?: boolean;
}
export interface CreateExtensionStmt {
  extname?: string;
  if_not_exists?: boolean;
  options?: Node[];
}
export interface AlterExtensionStmt {
  extname?: string;
  options?: Node[];
}
export interface AlterExtensionContentsStmt {
  extname?: string;
  action?: number;
  objtype?: ObjectType;
  object?: Node;
}
export interface CreateFdwStmt {
  fdwname?: string;
  func_options?: Node[];
  options?: Node[];
}
export interface AlterFdwStmt {
  fdwname?: string;
  func_options?: Node[];
  options?: Node[];
}
export interface CreateForeignServerStmt {
  servername?: string;
  servertype?: string;
  version?: string;
  fdwname?: string;
  if_not_exists?: boolean;
  options?: Node[];
}
export interface AlterForeignServerStmt {
  servername?: string;
  version?: string;
  options?: Node[];
  has_version?: boolean;
}
export interface CreateForeignTableStmt {
  base?: CreateStmt;
  servername?: string;
  options?: Node[];
}
export interface CreateUserMappingStmt {
  user?: RoleSpec;
  servername?: string;
  if_not_exists?: boolean;
  options?: Node[];
}
export interface AlterUserMappingStmt {
  user?: RoleSpec;
  servername?: string;
  options?: Node[];
}
export interface DropUserMappingStmt {
  user?: RoleSpec;
  servername?: string;
  missing_ok?: boolean;
}
export interface ImportForeignSchemaStmt {
  server_name?: string;
  remote_schema?: string;
  local_schema?: string;
  list_type?: ImportForeignSchemaType;
  table_list?: Node[];
  options?: Node[];
}
export interface CreatePolicyStmt {
  policy_name?: string;
  table?: RangeVar;
  cmd_name?: string;
  permissive?: boolean;
  roles?: Node[];
  qual?: Node;
  with_check?: Node;
}
export interface AlterPolicyStmt {
  policy_name?: string;
  table?: RangeVar;
  roles?: Node[];
  qual?: Node;
  with_check?: Node;
}
export interface CreateAmStmt {
  amname?: string;
  handler_name?: Node[];
  amtype?: string;
}
export interface CreateTrigStmt {
  replace?: boolean;
  isconstraint?: boolean;
  trigname?: string;
  relation?: RangeVar;
  funcname?: Node[];
  args?: Node[];
  row?: boolean;
  timing?: number;
  events?: number;
  columns?: Node[];
  whenClause?: Node;
  transitionRels?: Node[];
  deferrable?: boolean;
  initdeferred?: boolean;
  constrrel?: RangeVar;
}
export interface CreateEventTrigStmt {
  trigname?: string;
  eventname?: string;
  whenclause?: Node[];
  funcname?: Node[];
}
export interface AlterEventTrigStmt {
  trigname?: string;
  tgenabled?: string;
}
export interface CreatePLangStmt {
  replace?: boolean;
  plname?: string;
  plhandler?: Node[];
  plinline?: Node[];
  plvalidator?: Node[];
  pltrusted?: boolean;
}
export interface CreateRoleStmt {
  stmt_type?: RoleStmtType;
  role?: string;
  options?: Node[];
}
export interface AlterRoleStmt {
  role?: RoleSpec;
  options?: Node[];
  action?: number;
}
export interface AlterRoleSetStmt {
  role?: RoleSpec;
  database?: string;
  setstmt?: VariableSetStmt;
}
export interface DropRoleStmt {
  roles?: Node[];
  missing_ok?: boolean;
}
export interface CreateSeqStmt {
  sequence?: RangeVar;
  options?: Node[];
  ownerId?: number;
  for_identity?: boolean;
  if_not_exists?: boolean;
}
export interface AlterSeqStmt {
  sequence?: RangeVar;
  options?: Node[];
  for_identity?: boolean;
  missing_ok?: boolean;
}
export interface DefineStmt {
  kind?: ObjectType;
  oldstyle?: boolean;
  defnames?: Node[];
  args?: Node[];
  definition?: Node[];
  if_not_exists?: boolean;
  replace?: boolean;
}
export interface CreateDomainStmt {
  domainname?: Node[];
  typeName?: TypeName;
  collClause?: CollateClause;
  constraints?: Node[];
}
export interface CreateOpClassStmt {
  opclassname?: Node[];
  opfamilyname?: Node[];
  amname?: string;
  datatype?: TypeName;
  items?: Node[];
  isDefault?: boolean;
}
export interface CreateOpClassItem {
  itemtype?: number;
  name?: ObjectWithArgs;
  number?: number;
  order_family?: Node[];
  class_args?: Node[];
  storedtype?: TypeName;
}
export interface CreateOpFamilyStmt {
  opfamilyname?: Node[];
  amname?: string;
}
export interface AlterOpFamilyStmt {
  opfamilyname?: Node[];
  amname?: string;
  isDrop?: boolean;
  items?: Node[];
}
export interface DropStmt {
  objects?: Node[];
  removeType?: ObjectType;
  behavior?: DropBehavior;
  missing_ok?: boolean;
  concurrent?: boolean;
}
export interface TruncateStmt {
  relations?: Node[];
  restart_seqs?: boolean;
  behavior?: DropBehavior;
}
export interface CommentStmt {
  objtype?: ObjectType;
  object?: Node;
  comment?: string;
}
export interface SecLabelStmt {
  objtype?: ObjectType;
  object?: Node;
  provider?: string;
  label?: string;
}
export interface DeclareCursorStmt {
  portalname?: string;
  options?: number;
  query?: Node;
}
export interface ClosePortalStmt {
  portalname?: string;
}
export interface FetchStmt {
  direction?: FetchDirection;
  howMany?: bigint;
  portalname?: string;
  ismove?: boolean;
}
export interface IndexStmt {
  idxname?: string;
  relation?: RangeVar;
  accessMethod?: string;
  tableSpace?: string;
  indexParams?: Node[];
  indexIncludingParams?: Node[];
  options?: Node[];
  whereClause?: Node;
  excludeOpNames?: Node[];
  idxcomment?: string;
  indexOid?: number;
  oldNumber?: number;
  oldCreateSubid?: number;
  oldFirstRelfilelocatorSubid?: number;
  unique?: boolean;
  nulls_not_distinct?: boolean;
  primary?: boolean;
  isconstraint?: boolean;
  deferrable?: boolean;
  initdeferred?: boolean;
  transformed?: boolean;
  concurrent?: boolean;
  if_not_exists?: boolean;
  reset_default_tblspc?: boolean;
}
export interface CreateStatsStmt {
  defnames?: Node[];
  stat_types?: Node[];
  exprs?: Node[];
  relations?: Node[];
  stxcomment?: string;
  transformed?: boolean;
  if_not_exists?: boolean;
}
export interface StatsElem {
  name?: string;
  expr?: Node;
}
export interface AlterStatsStmt {
  defnames?: Node[];
  stxstattarget?: number;
  missing_ok?: boolean;
}
export interface CreateFunctionStmt {
  is_procedure?: boolean;
  replace?: boolean;
  funcname?: Node[];
  parameters?: Node[];
  returnType?: TypeName;
  options?: Node[];
  sql_body?: Node;
}
export interface FunctionParameter {
  name?: string;
  argType?: TypeName;
  mode?: FunctionParameterMode;
  defexpr?: Node;
}
export interface AlterFunctionStmt {
  objtype?: ObjectType;
  func?: ObjectWithArgs;
  actions?: Node[];
}
export interface DoStmt {
  args?: Node[];
}
export interface InlineCodeBlock {
  source_text?: string;
  langOid?: number;
  langIsTrusted?: boolean;
  atomic?: boolean;
}
export interface CallStmt {
  funccall?: FuncCall;
  funcexpr?: FuncExpr;
  outargs?: Node[];
}
export interface CallContext {
  atomic?: boolean;
}
export interface RenameStmt {
  renameType?: ObjectType;
  relationType?: ObjectType;
  relation?: RangeVar;
  object?: Node;
  subname?: string;
  newname?: string;
  behavior?: DropBehavior;
  missing_ok?: boolean;
}
export interface AlterObjectDependsStmt {
  objectType?: ObjectType;
  relation?: RangeVar;
  object?: Node;
  extname?: String;
  remove?: boolean;
}
export interface AlterObjectSchemaStmt {
  objectType?: ObjectType;
  relation?: RangeVar;
  object?: Node;
  newschema?: string;
  missing_ok?: boolean;
}
export interface AlterOwnerStmt {
  objectType?: ObjectType;
  relation?: RangeVar;
  object?: Node;
  newowner?: RoleSpec;
}
export interface AlterOperatorStmt {
  opername?: ObjectWithArgs;
  options?: Node[];
}
export interface AlterTypeStmt {
  typeName?: Node[];
  options?: Node[];
}
export interface RuleStmt {
  relation?: RangeVar;
  rulename?: string;
  whereClause?: Node;
  event?: CmdType;
  instead?: boolean;
  actions?: Node[];
  replace?: boolean;
}
export interface NotifyStmt {
  conditionname?: string;
  payload?: string;
}
export interface ListenStmt {
  conditionname?: string;
}
export interface UnlistenStmt {
  conditionname?: string;
}
export interface TransactionStmt {
  kind?: TransactionStmtKind;
  options?: Node[];
  savepoint_name?: string;
  gid?: string;
  chain?: boolean;
}
export interface CompositeTypeStmt {
  typevar?: RangeVar;
  coldeflist?: Node[];
}
export interface CreateEnumStmt {
  typeName?: Node[];
  vals?: Node[];
}
export interface CreateRangeStmt {
  typeName?: Node[];
  params?: Node[];
}
export interface AlterEnumStmt {
  typeName?: Node[];
  oldVal?: string;
  newVal?: string;
  newValNeighbor?: string;
  newValIsAfter?: boolean;
  skipIfNewValExists?: boolean;
}
export interface ViewStmt {
  view?: RangeVar;
  aliases?: Node[];
  query?: Node;
  replace?: boolean;
  options?: Node[];
  withCheckOption?: ViewCheckOption;
}
export interface LoadStmt {
  filename?: string;
}
export interface CreatedbStmt {
  dbname?: string;
  options?: Node[];
}
export interface AlterDatabaseStmt {
  dbname?: string;
  options?: Node[];
}
export interface AlterDatabaseRefreshCollStmt {
  dbname?: string;
}
export interface AlterDatabaseSetStmt {
  dbname?: string;
  setstmt?: VariableSetStmt;
}
export interface DropdbStmt {
  dbname?: string;
  missing_ok?: boolean;
  options?: Node[];
}
export interface AlterSystemStmt {
  setstmt?: VariableSetStmt;
}
export interface ClusterStmt {
  relation?: RangeVar;
  indexname?: string;
  params?: Node[];
}
export interface VacuumStmt {
  options?: Node[];
  rels?: Node[];
  is_vacuumcmd?: boolean;
}
export interface VacuumRelation {
  relation?: RangeVar;
  oid?: number;
  va_cols?: Node[];
}
export interface ExplainStmt {
  query?: Node;
  options?: Node[];
}
export interface CreateTableAsStmt {
  query?: Node;
  into?: IntoClause;
  objtype?: ObjectType;
  is_select_into?: boolean;
  if_not_exists?: boolean;
}
export interface RefreshMatViewStmt {
  concurrent?: boolean;
  skipData?: boolean;
  relation?: RangeVar;
}
export interface CheckPointStmt {}
export interface DiscardStmt {
  target?: DiscardMode;
}
export interface LockStmt {
  relations?: Node[];
  mode?: number;
  nowait?: boolean;
}
export interface ConstraintsSetStmt {
  constraints?: Node[];
  deferred?: boolean;
}
export interface ReindexStmt {
  kind?: ReindexObjectType;
  relation?: RangeVar;
  name?: string;
  params?: Node[];
}
export interface CreateConversionStmt {
  conversion_name?: Node[];
  for_encoding_name?: string;
  to_encoding_name?: string;
  func_name?: Node[];
  def?: boolean;
}
export interface CreateCastStmt {
  sourcetype?: TypeName;
  targettype?: TypeName;
  func?: ObjectWithArgs;
  context?: CoercionContext;
  inout?: boolean;
}
export interface CreateTransformStmt {
  replace?: boolean;
  type_name?: TypeName;
  lang?: string;
  fromsql?: ObjectWithArgs;
  tosql?: ObjectWithArgs;
}
export interface PrepareStmt {
  name?: string;
  argtypes?: Node[];
  query?: Node;
}
export interface ExecuteStmt {
  name?: string;
  params?: Node[];
}
export interface DeallocateStmt {
  name?: string;
}
export interface DropOwnedStmt {
  roles?: Node[];
  behavior?: DropBehavior;
}
export interface ReassignOwnedStmt {
  roles?: Node[];
  newrole?: RoleSpec;
}
export interface AlterTSDictionaryStmt {
  dictname?: Node[];
  options?: Node[];
}
export interface AlterTSConfigurationStmt {
  kind?: AlterTSConfigType;
  cfgname?: Node[];
  tokentype?: Node[];
  dicts?: Node[];
  override?: boolean;
  replace?: boolean;
  missing_ok?: boolean;
}
export interface PublicationTable {
  relation?: RangeVar;
  whereClause?: Node;
  columns?: Node[];
}
export interface PublicationObjSpec {
  pubobjtype?: PublicationObjSpecType;
  name?: string;
  pubtable?: PublicationTable;
  location?: number;
}
export interface CreatePublicationStmt {
  pubname?: string;
  options?: Node[];
  pubobjects?: Node[];
  for_all_tables?: boolean;
}
export interface AlterPublicationStmt {
  pubname?: string;
  options?: Node[];
  pubobjects?: Node[];
  for_all_tables?: boolean;
  action?: AlterPublicationAction;
}
export interface CreateSubscriptionStmt {
  subname?: string;
  conninfo?: string;
  publication?: Node[];
  options?: Node[];
}
export interface AlterSubscriptionStmt {
  kind?: AlterSubscriptionType;
  subname?: string;
  conninfo?: string;
  publication?: Node[];
  options?: Node[];
}
export interface DropSubscriptionStmt {
  subname?: string;
  missing_ok?: boolean;
  behavior?: DropBehavior;
}
export interface ScanToken {
  ScanToken: {
    start?: number;
    end?: number;
    token?: Token;
    keywordKind?: KeywordKind;
  };
}",
    "file": "wrapped.ts",
  },
]
`;

exports[`runtime-schema typescript format enabled 1`] = `
[
  {
    "code": "/**
* This file was automatically generated by pg-proto-parser@latest.
* DO NOT MODIFY IT BY HAND. Instead, modify the source proto file,
* and run the pg-proto-parser generate command to regenerate this file.
*/
// Generated by pg-proto-parser
export interface FieldSpec {
  name: string;
  type: string;
  isNode: boolean;
  isArray: boolean;
  optional: boolean;
}
export interface NodeSpec {
  name: string;
  wrapped: boolean;
  fields: FieldSpec[];
}
export const runtimeSchema: NodeSpec[] = [
  {
    name: 'A_ArrayExpr',
    wrapped: true,
    fields: [
      {
        name: 'elements',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'A_Const',
    wrapped: true,
    fields: [
      {
        name: 'boolval',
        type: 'Boolean',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'bsval',
        type: 'BitString',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'fval',
        type: 'Float',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'isnull',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'ival',
        type: 'Integer',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'sval',
        type: 'String',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'A_Expr',
    wrapped: true,
    fields: [
      {
        name: 'kind',
        type: 'A_Expr_Kind',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'lexpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'name',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'rexpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'A_Indices',
    wrapped: true,
    fields: [
      {
        name: 'is_slice',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'lidx',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'uidx',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'A_Indirection',
    wrapped: true,
    fields: [
      {
        name: 'arg',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'indirection',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'A_Star',
    wrapped: true,
    fields: [

    ]
  },
  {
    name: 'AccessPriv',
    wrapped: true,
    fields: [
      {
        name: 'cols',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'priv_name',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'Aggref',
    wrapped: true,
    fields: [
      {
        name: 'aggargtypes',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'aggcollid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'aggdirectargs',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'aggdistinct',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'aggfilter',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'aggfnoid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'aggkind',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'agglevelsup',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'aggno',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'aggorder',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'aggsplit',
        type: 'AggSplit',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'aggstar',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'aggtransno',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'aggtype',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'aggvariadic',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'args',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'inputcollid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'Alias',
    wrapped: true,
    fields: [
      {
        name: 'aliasname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'colnames',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'AlterCollationStmt',
    wrapped: true,
    fields: [
      {
        name: 'collname',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'AlterDatabaseRefreshCollStmt',
    wrapped: true,
    fields: [
      {
        name: 'dbname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'AlterDatabaseSetStmt',
    wrapped: true,
    fields: [
      {
        name: 'dbname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'setstmt',
        type: 'VariableSetStmt',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'AlterDatabaseStmt',
    wrapped: true,
    fields: [
      {
        name: 'dbname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'AlterDefaultPrivilegesStmt',
    wrapped: true,
    fields: [
      {
        name: 'action',
        type: 'GrantStmt',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'AlterDomainStmt',
    wrapped: true,
    fields: [
      {
        name: 'behavior',
        type: 'DropBehavior',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'def',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'missing_ok',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'name',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'subtype',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'typeName',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'AlterEnumStmt',
    wrapped: true,
    fields: [
      {
        name: 'newVal',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'newValIsAfter',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'newValNeighbor',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'oldVal',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'skipIfNewValExists',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'typeName',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'AlterEventTrigStmt',
    wrapped: true,
    fields: [
      {
        name: 'tgenabled',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'trigname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'AlterExtensionContentsStmt',
    wrapped: true,
    fields: [
      {
        name: 'action',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'extname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'object',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'objtype',
        type: 'ObjectType',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'AlterExtensionStmt',
    wrapped: true,
    fields: [
      {
        name: 'extname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'AlterFdwStmt',
    wrapped: true,
    fields: [
      {
        name: 'fdwname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'func_options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'AlterForeignServerStmt',
    wrapped: true,
    fields: [
      {
        name: 'has_version',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'servername',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'version',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'AlterFunctionStmt',
    wrapped: true,
    fields: [
      {
        name: 'actions',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'func',
        type: 'ObjectWithArgs',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'objtype',
        type: 'ObjectType',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'AlternativeSubPlan',
    wrapped: true,
    fields: [
      {
        name: 'subplans',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'AlterObjectDependsStmt',
    wrapped: true,
    fields: [
      {
        name: 'extname',
        type: 'String',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'object',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'objectType',
        type: 'ObjectType',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'relation',
        type: 'RangeVar',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'remove',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'AlterObjectSchemaStmt',
    wrapped: true,
    fields: [
      {
        name: 'missing_ok',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'newschema',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'object',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'objectType',
        type: 'ObjectType',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'relation',
        type: 'RangeVar',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'AlterOperatorStmt',
    wrapped: true,
    fields: [
      {
        name: 'opername',
        type: 'ObjectWithArgs',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'AlterOpFamilyStmt',
    wrapped: true,
    fields: [
      {
        name: 'amname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'isDrop',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'items',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'opfamilyname',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'AlterOwnerStmt',
    wrapped: true,
    fields: [
      {
        name: 'newowner',
        type: 'RoleSpec',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'object',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'objectType',
        type: 'ObjectType',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'relation',
        type: 'RangeVar',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'AlterPolicyStmt',
    wrapped: true,
    fields: [
      {
        name: 'policy_name',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'qual',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'roles',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'table',
        type: 'RangeVar',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'with_check',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'AlterPublicationStmt',
    wrapped: true,
    fields: [
      {
        name: 'action',
        type: 'AlterPublicationAction',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'for_all_tables',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'pubname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'pubobjects',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'AlterRoleSetStmt',
    wrapped: true,
    fields: [
      {
        name: 'database',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'role',
        type: 'RoleSpec',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'setstmt',
        type: 'VariableSetStmt',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'AlterRoleStmt',
    wrapped: true,
    fields: [
      {
        name: 'action',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'role',
        type: 'RoleSpec',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'AlterSeqStmt',
    wrapped: true,
    fields: [
      {
        name: 'for_identity',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'missing_ok',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'sequence',
        type: 'RangeVar',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'AlterStatsStmt',
    wrapped: true,
    fields: [
      {
        name: 'defnames',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'missing_ok',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'stxstattarget',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'AlterSubscriptionStmt',
    wrapped: true,
    fields: [
      {
        name: 'conninfo',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'kind',
        type: 'AlterSubscriptionType',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'publication',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'subname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'AlterSystemStmt',
    wrapped: true,
    fields: [
      {
        name: 'setstmt',
        type: 'VariableSetStmt',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'AlterTableCmd',
    wrapped: true,
    fields: [
      {
        name: 'behavior',
        type: 'DropBehavior',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'def',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'missing_ok',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'name',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'newowner',
        type: 'RoleSpec',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'num',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'recurse',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'subtype',
        type: 'AlterTableType',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'AlterTableMoveAllStmt',
    wrapped: true,
    fields: [
      {
        name: 'new_tablespacename',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'nowait',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'objtype',
        type: 'ObjectType',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'orig_tablespacename',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'roles',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'AlterTableSpaceOptionsStmt',
    wrapped: true,
    fields: [
      {
        name: 'isReset',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'tablespacename',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'AlterTableStmt',
    wrapped: true,
    fields: [
      {
        name: 'cmds',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'missing_ok',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'objtype',
        type: 'ObjectType',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'relation',
        type: 'RangeVar',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'AlterTSConfigurationStmt',
    wrapped: true,
    fields: [
      {
        name: 'cfgname',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'dicts',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'kind',
        type: 'AlterTSConfigType',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'missing_ok',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'override',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'replace',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'tokentype',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'AlterTSDictionaryStmt',
    wrapped: true,
    fields: [
      {
        name: 'dictname',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'AlterTypeStmt',
    wrapped: true,
    fields: [
      {
        name: 'options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'typeName',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'AlterUserMappingStmt',
    wrapped: true,
    fields: [
      {
        name: 'options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'servername',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'user',
        type: 'RoleSpec',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'ArrayCoerceExpr',
    wrapped: true,
    fields: [
      {
        name: 'arg',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'coerceformat',
        type: 'CoercionForm',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'elemexpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'resultcollid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'resulttype',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'resulttypmod',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'ArrayExpr',
    wrapped: true,
    fields: [
      {
        name: 'array_collid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'array_typeid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'element_typeid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'elements',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'multidims',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'BitString',
    wrapped: true,
    fields: [
      {
        name: 'bsval',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'Boolean',
    wrapped: true,
    fields: [
      {
        name: 'boolval',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'BooleanTest',
    wrapped: true,
    fields: [
      {
        name: 'arg',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'booltesttype',
        type: 'BoolTestType',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'BoolExpr',
    wrapped: true,
    fields: [
      {
        name: 'args',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'boolop',
        type: 'BoolExprType',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CallContext',
    wrapped: true,
    fields: [
      {
        name: 'atomic',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CallStmt',
    wrapped: true,
    fields: [
      {
        name: 'funccall',
        type: 'FuncCall',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'funcexpr',
        type: 'FuncExpr',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'outargs',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'CaseExpr',
    wrapped: true,
    fields: [
      {
        name: 'arg',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'args',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'casecollid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'casetype',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'defresult',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CaseTestExpr',
    wrapped: true,
    fields: [
      {
        name: 'collation',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'typeId',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'typeMod',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CaseWhen',
    wrapped: true,
    fields: [
      {
        name: 'expr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'result',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CheckPointStmt',
    wrapped: true,
    fields: [

    ]
  },
  {
    name: 'ClosePortalStmt',
    wrapped: true,
    fields: [
      {
        name: 'portalname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'ClusterStmt',
    wrapped: true,
    fields: [
      {
        name: 'indexname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'params',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'relation',
        type: 'RangeVar',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CoalesceExpr',
    wrapped: true,
    fields: [
      {
        name: 'args',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'coalescecollid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'coalescetype',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CoerceToDomain',
    wrapped: true,
    fields: [
      {
        name: 'arg',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'coercionformat',
        type: 'CoercionForm',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'resultcollid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'resulttype',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'resulttypmod',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CoerceToDomainValue',
    wrapped: true,
    fields: [
      {
        name: 'collation',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'typeId',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'typeMod',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CoerceViaIO',
    wrapped: true,
    fields: [
      {
        name: 'arg',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'coerceformat',
        type: 'CoercionForm',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'resultcollid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'resulttype',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CollateClause',
    wrapped: true,
    fields: [
      {
        name: 'arg',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'collname',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CollateExpr',
    wrapped: true,
    fields: [
      {
        name: 'arg',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'collOid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'ColumnDef',
    wrapped: true,
    fields: [
      {
        name: 'collClause',
        type: 'CollateClause',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'collOid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'colname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'compression',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'constraints',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'cooked_default',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'fdwoptions',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'generated',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'identity',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'identitySequence',
        type: 'RangeVar',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'inhcount',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'is_from_type',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'is_local',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'is_not_null',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'raw_default',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'storage',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'storage_name',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'typeName',
        type: 'TypeName',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'ColumnRef',
    wrapped: true,
    fields: [
      {
        name: 'fields',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CommentStmt',
    wrapped: true,
    fields: [
      {
        name: 'comment',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'object',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'objtype',
        type: 'ObjectType',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CommonTableExpr',
    wrapped: true,
    fields: [
      {
        name: 'aliascolnames',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'ctecolcollations',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'ctecolnames',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'ctecoltypes',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'ctecoltypmods',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'ctematerialized',
        type: 'CTEMaterialize',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'ctename',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'ctequery',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'cterecursive',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'cterefcount',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'cycle_clause',
        type: 'CTECycleClause',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'search_clause',
        type: 'CTESearchClause',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CompositeTypeStmt',
    wrapped: true,
    fields: [
      {
        name: 'coldeflist',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'typevar',
        type: 'RangeVar',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'Constraint',
    wrapped: true,
    fields: [
      {
        name: 'access_method',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'conname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'contype',
        type: 'ConstrType',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'cooked_expr',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'deferrable',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'exclusions',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'fk_attrs',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'fk_del_action',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'fk_del_set_cols',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'fk_matchtype',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'fk_upd_action',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'generated_when',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'including',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'indexname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'indexspace',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'initdeferred',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'initially_valid',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'is_no_inherit',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'keys',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'nulls_not_distinct',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'old_conpfeqop',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'old_pktable_oid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'pk_attrs',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'pktable',
        type: 'RangeVar',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'raw_expr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'reset_default_tblspc',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'skip_validation',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'where_clause',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'ConstraintsSetStmt',
    wrapped: true,
    fields: [
      {
        name: 'constraints',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'deferred',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'ConvertRowtypeExpr',
    wrapped: true,
    fields: [
      {
        name: 'arg',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'convertformat',
        type: 'CoercionForm',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'resulttype',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CopyStmt',
    wrapped: true,
    fields: [
      {
        name: 'attlist',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'filename',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'is_from',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'is_program',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'query',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'relation',
        type: 'RangeVar',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'whereClause',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CreateAmStmt',
    wrapped: true,
    fields: [
      {
        name: 'amname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'amtype',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'handler_name',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'CreateCastStmt',
    wrapped: true,
    fields: [
      {
        name: 'context',
        type: 'CoercionContext',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'func',
        type: 'ObjectWithArgs',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'inout',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'sourcetype',
        type: 'TypeName',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'targettype',
        type: 'TypeName',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CreateConversionStmt',
    wrapped: true,
    fields: [
      {
        name: 'conversion_name',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'def',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'for_encoding_name',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'func_name',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'to_encoding_name',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CreatedbStmt',
    wrapped: true,
    fields: [
      {
        name: 'dbname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'CreateDomainStmt',
    wrapped: true,
    fields: [
      {
        name: 'collClause',
        type: 'CollateClause',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'constraints',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'domainname',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'typeName',
        type: 'TypeName',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CreateEnumStmt',
    wrapped: true,
    fields: [
      {
        name: 'typeName',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'vals',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'CreateEventTrigStmt',
    wrapped: true,
    fields: [
      {
        name: 'eventname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'funcname',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'trigname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'whenclause',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'CreateExtensionStmt',
    wrapped: true,
    fields: [
      {
        name: 'extname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'if_not_exists',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'CreateFdwStmt',
    wrapped: true,
    fields: [
      {
        name: 'fdwname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'func_options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'CreateForeignServerStmt',
    wrapped: true,
    fields: [
      {
        name: 'fdwname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'if_not_exists',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'servername',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'servertype',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'version',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CreateForeignTableStmt',
    wrapped: true,
    fields: [
      {
        name: 'base',
        type: 'CreateStmt',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'servername',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CreateFunctionStmt',
    wrapped: true,
    fields: [
      {
        name: 'funcname',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'is_procedure',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'parameters',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'replace',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'returnType',
        type: 'TypeName',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'sql_body',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CreateOpClassItem',
    wrapped: true,
    fields: [
      {
        name: 'class_args',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'itemtype',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'name',
        type: 'ObjectWithArgs',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'number',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'order_family',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'storedtype',
        type: 'TypeName',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CreateOpClassStmt',
    wrapped: true,
    fields: [
      {
        name: 'amname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'datatype',
        type: 'TypeName',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'isDefault',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'items',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'opclassname',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'opfamilyname',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'CreateOpFamilyStmt',
    wrapped: true,
    fields: [
      {
        name: 'amname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'opfamilyname',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'CreatePLangStmt',
    wrapped: true,
    fields: [
      {
        name: 'plhandler',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'plinline',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'plname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'pltrusted',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'plvalidator',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'replace',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CreatePolicyStmt',
    wrapped: true,
    fields: [
      {
        name: 'cmd_name',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'permissive',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'policy_name',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'qual',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'roles',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'table',
        type: 'RangeVar',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'with_check',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CreatePublicationStmt',
    wrapped: true,
    fields: [
      {
        name: 'for_all_tables',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'pubname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'pubobjects',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'CreateRangeStmt',
    wrapped: true,
    fields: [
      {
        name: 'params',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'typeName',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'CreateRoleStmt',
    wrapped: true,
    fields: [
      {
        name: 'options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'role',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'stmt_type',
        type: 'RoleStmtType',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CreateSchemaStmt',
    wrapped: true,
    fields: [
      {
        name: 'authrole',
        type: 'RoleSpec',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'if_not_exists',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'schemaElts',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'schemaname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CreateSeqStmt',
    wrapped: true,
    fields: [
      {
        name: 'for_identity',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'if_not_exists',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'ownerId',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'sequence',
        type: 'RangeVar',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CreateStatsStmt',
    wrapped: true,
    fields: [
      {
        name: 'defnames',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'exprs',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'if_not_exists',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'relations',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'stat_types',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'stxcomment',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'transformed',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CreateStmt',
    wrapped: true,
    fields: [
      {
        name: 'accessMethod',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'constraints',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'if_not_exists',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'inhRelations',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'ofTypename',
        type: 'TypeName',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'oncommit',
        type: 'OnCommitAction',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'partbound',
        type: 'PartitionBoundSpec',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'partspec',
        type: 'PartitionSpec',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'relation',
        type: 'RangeVar',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'tableElts',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'tablespacename',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CreateSubscriptionStmt',
    wrapped: true,
    fields: [
      {
        name: 'conninfo',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'publication',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'subname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CreateTableAsStmt',
    wrapped: true,
    fields: [
      {
        name: 'if_not_exists',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'into',
        type: 'IntoClause',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'is_select_into',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'objtype',
        type: 'ObjectType',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'query',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CreateTableSpaceStmt',
    wrapped: true,
    fields: [
      {
        name: 'location',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'owner',
        type: 'RoleSpec',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'tablespacename',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CreateTransformStmt',
    wrapped: true,
    fields: [
      {
        name: 'fromsql',
        type: 'ObjectWithArgs',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'lang',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'replace',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'tosql',
        type: 'ObjectWithArgs',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'type_name',
        type: 'TypeName',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CreateTrigStmt',
    wrapped: true,
    fields: [
      {
        name: 'args',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'columns',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'constrrel',
        type: 'RangeVar',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'deferrable',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'events',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'funcname',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'initdeferred',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'isconstraint',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'relation',
        type: 'RangeVar',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'replace',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'row',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'timing',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'transitionRels',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'trigname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'whenClause',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CreateUserMappingStmt',
    wrapped: true,
    fields: [
      {
        name: 'if_not_exists',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'servername',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'user',
        type: 'RoleSpec',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CTECycleClause',
    wrapped: true,
    fields: [
      {
        name: 'cycle_col_list',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'cycle_mark_collation',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'cycle_mark_column',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'cycle_mark_default',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'cycle_mark_neop',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'cycle_mark_type',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'cycle_mark_typmod',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'cycle_mark_value',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'cycle_path_column',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CTESearchClause',
    wrapped: true,
    fields: [
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'search_breadth_first',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'search_col_list',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'search_seq_column',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'CurrentOfExpr',
    wrapped: true,
    fields: [
      {
        name: 'cursor_name',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'cursor_param',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'cvarno',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'DeallocateStmt',
    wrapped: true,
    fields: [
      {
        name: 'name',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'DeclareCursorStmt',
    wrapped: true,
    fields: [
      {
        name: 'options',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'portalname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'query',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'DefElem',
    wrapped: true,
    fields: [
      {
        name: 'arg',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'defaction',
        type: 'DefElemAction',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'defname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'defnamespace',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'DefineStmt',
    wrapped: true,
    fields: [
      {
        name: 'args',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'definition',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'defnames',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'if_not_exists',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'kind',
        type: 'ObjectType',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'oldstyle',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'replace',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'DeleteStmt',
    wrapped: true,
    fields: [
      {
        name: 'relation',
        type: 'RangeVar',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'returningList',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'usingClause',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'whereClause',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'withClause',
        type: 'WithClause',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'DiscardStmt',
    wrapped: true,
    fields: [
      {
        name: 'target',
        type: 'DiscardMode',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'DistinctExpr',
    wrapped: true,
    fields: [
      {
        name: 'args',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'inputcollid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'opcollid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'opno',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'opresulttype',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'opretset',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'DoStmt',
    wrapped: true,
    fields: [
      {
        name: 'args',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'DropdbStmt',
    wrapped: true,
    fields: [
      {
        name: 'dbname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'missing_ok',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'DropOwnedStmt',
    wrapped: true,
    fields: [
      {
        name: 'behavior',
        type: 'DropBehavior',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'roles',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'DropRoleStmt',
    wrapped: true,
    fields: [
      {
        name: 'missing_ok',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'roles',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'DropStmt',
    wrapped: true,
    fields: [
      {
        name: 'behavior',
        type: 'DropBehavior',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'concurrent',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'missing_ok',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'objects',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'removeType',
        type: 'ObjectType',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'DropSubscriptionStmt',
    wrapped: true,
    fields: [
      {
        name: 'behavior',
        type: 'DropBehavior',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'missing_ok',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'subname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'DropTableSpaceStmt',
    wrapped: true,
    fields: [
      {
        name: 'missing_ok',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'tablespacename',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'DropUserMappingStmt',
    wrapped: true,
    fields: [
      {
        name: 'missing_ok',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'servername',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'user',
        type: 'RoleSpec',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'ExecuteStmt',
    wrapped: true,
    fields: [
      {
        name: 'name',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'params',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'ExplainStmt',
    wrapped: true,
    fields: [
      {
        name: 'options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'query',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'FetchStmt',
    wrapped: true,
    fields: [
      {
        name: 'direction',
        type: 'FetchDirection',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'howMany',
        type: 'int64',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'ismove',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'portalname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'FieldSelect',
    wrapped: true,
    fields: [
      {
        name: 'arg',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'fieldnum',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'resultcollid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'resulttype',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'resulttypmod',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'FieldStore',
    wrapped: true,
    fields: [
      {
        name: 'arg',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'fieldnums',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'newvals',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'resulttype',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'Float',
    wrapped: true,
    fields: [
      {
        name: 'fval',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'FromExpr',
    wrapped: true,
    fields: [
      {
        name: 'fromlist',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'quals',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'FuncCall',
    wrapped: true,
    fields: [
      {
        name: 'agg_distinct',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'agg_filter',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'agg_order',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'agg_star',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'agg_within_group',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'args',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'func_variadic',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'funcformat',
        type: 'CoercionForm',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'funcname',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'over',
        type: 'WindowDef',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'FuncExpr',
    wrapped: true,
    fields: [
      {
        name: 'args',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'funccollid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'funcformat',
        type: 'CoercionForm',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'funcid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'funcresulttype',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'funcretset',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'funcvariadic',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'inputcollid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'FunctionParameter',
    wrapped: true,
    fields: [
      {
        name: 'argType',
        type: 'TypeName',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'defexpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'mode',
        type: 'FunctionParameterMode',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'name',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'GrantRoleStmt',
    wrapped: true,
    fields: [
      {
        name: 'behavior',
        type: 'DropBehavior',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'granted_roles',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'grantee_roles',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'grantor',
        type: 'RoleSpec',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'is_grant',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'opt',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'GrantStmt',
    wrapped: true,
    fields: [
      {
        name: 'behavior',
        type: 'DropBehavior',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'grant_option',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'grantees',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'grantor',
        type: 'RoleSpec',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'is_grant',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'objects',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'objtype',
        type: 'ObjectType',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'privileges',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'targtype',
        type: 'GrantTargetType',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'GroupingFunc',
    wrapped: true,
    fields: [
      {
        name: 'agglevelsup',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'args',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'refs',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'GroupingSet',
    wrapped: true,
    fields: [
      {
        name: 'content',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'kind',
        type: 'GroupingSetKind',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'ImportForeignSchemaStmt',
    wrapped: true,
    fields: [
      {
        name: 'list_type',
        type: 'ImportForeignSchemaType',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'local_schema',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'remote_schema',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'server_name',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'table_list',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'IndexElem',
    wrapped: true,
    fields: [
      {
        name: 'collation',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'expr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'indexcolname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'name',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'nulls_ordering',
        type: 'SortByNulls',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'opclass',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'opclassopts',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'ordering',
        type: 'SortByDir',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'IndexStmt',
    wrapped: true,
    fields: [
      {
        name: 'accessMethod',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'concurrent',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'deferrable',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'excludeOpNames',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'idxcomment',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'idxname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'if_not_exists',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'indexIncludingParams',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'indexOid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'indexParams',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'initdeferred',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'isconstraint',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'nulls_not_distinct',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'oldCreateSubid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'oldFirstRelfilelocatorSubid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'oldNumber',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'primary',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'relation',
        type: 'RangeVar',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'reset_default_tblspc',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'tableSpace',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'transformed',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'unique',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'whereClause',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'InferClause',
    wrapped: true,
    fields: [
      {
        name: 'conname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'indexElems',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'whereClause',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'InferenceElem',
    wrapped: true,
    fields: [
      {
        name: 'expr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'infercollid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'inferopclass',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'InlineCodeBlock',
    wrapped: true,
    fields: [
      {
        name: 'atomic',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'langIsTrusted',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'langOid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'source_text',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'InsertStmt',
    wrapped: true,
    fields: [
      {
        name: 'cols',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'onConflictClause',
        type: 'OnConflictClause',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'override',
        type: 'OverridingKind',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'relation',
        type: 'RangeVar',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'returningList',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'selectStmt',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'withClause',
        type: 'WithClause',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'Integer',
    wrapped: true,
    fields: [
      {
        name: 'ival',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'IntList',
    wrapped: true,
    fields: [
      {
        name: 'items',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'IntoClause',
    wrapped: true,
    fields: [
      {
        name: 'accessMethod',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'colNames',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'onCommit',
        type: 'OnCommitAction',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'rel',
        type: 'RangeVar',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'skipData',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'tableSpaceName',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'viewQuery',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'JoinExpr',
    wrapped: true,
    fields: [
      {
        name: 'alias',
        type: 'Alias',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'isNatural',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'join_using_alias',
        type: 'Alias',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'jointype',
        type: 'JoinType',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'larg',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'quals',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'rarg',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'rtindex',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'usingClause',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'JsonAggConstructor',
    wrapped: true,
    fields: [
      {
        name: 'agg_filter',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'agg_order',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'output',
        type: 'JsonOutput',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'over',
        type: 'WindowDef',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'JsonArrayAgg',
    wrapped: true,
    fields: [
      {
        name: 'absent_on_null',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'arg',
        type: 'JsonValueExpr',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'constructor',
        type: 'JsonAggConstructor',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'JsonArrayConstructor',
    wrapped: true,
    fields: [
      {
        name: 'absent_on_null',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'exprs',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'output',
        type: 'JsonOutput',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'JsonArrayQueryConstructor',
    wrapped: true,
    fields: [
      {
        name: 'absent_on_null',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'format',
        type: 'JsonFormat',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'output',
        type: 'JsonOutput',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'query',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'JsonConstructorExpr',
    wrapped: true,
    fields: [
      {
        name: 'absent_on_null',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'args',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'coercion',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'func',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'returning',
        type: 'JsonReturning',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'type',
        type: 'JsonConstructorType',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'unique',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'JsonFormat',
    wrapped: true,
    fields: [
      {
        name: 'encoding',
        type: 'JsonEncoding',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'format_type',
        type: 'JsonFormatType',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'JsonIsPredicate',
    wrapped: true,
    fields: [
      {
        name: 'expr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'format',
        type: 'JsonFormat',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'item_type',
        type: 'JsonValueType',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'unique_keys',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'JsonKeyValue',
    wrapped: true,
    fields: [
      {
        name: 'key',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'value',
        type: 'JsonValueExpr',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'JsonObjectAgg',
    wrapped: true,
    fields: [
      {
        name: 'absent_on_null',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'arg',
        type: 'JsonKeyValue',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'constructor',
        type: 'JsonAggConstructor',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'unique',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'JsonObjectConstructor',
    wrapped: true,
    fields: [
      {
        name: 'absent_on_null',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'exprs',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'output',
        type: 'JsonOutput',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'unique',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'JsonOutput',
    wrapped: true,
    fields: [
      {
        name: 'returning',
        type: 'JsonReturning',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'typeName',
        type: 'TypeName',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'JsonReturning',
    wrapped: true,
    fields: [
      {
        name: 'format',
        type: 'JsonFormat',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'typid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'typmod',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'JsonValueExpr',
    wrapped: true,
    fields: [
      {
        name: 'format',
        type: 'JsonFormat',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'formatted_expr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'raw_expr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'List',
    wrapped: true,
    fields: [
      {
        name: 'items',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'ListenStmt',
    wrapped: true,
    fields: [
      {
        name: 'conditionname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'LoadStmt',
    wrapped: true,
    fields: [
      {
        name: 'filename',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'LockingClause',
    wrapped: true,
    fields: [
      {
        name: 'lockedRels',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'strength',
        type: 'LockClauseStrength',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'waitPolicy',
        type: 'LockWaitPolicy',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'LockStmt',
    wrapped: true,
    fields: [
      {
        name: 'mode',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'nowait',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'relations',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'MergeAction',
    wrapped: true,
    fields: [
      {
        name: 'commandType',
        type: 'CmdType',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'matched',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'override',
        type: 'OverridingKind',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'qual',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'targetList',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'updateColnos',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'MergeStmt',
    wrapped: true,
    fields: [
      {
        name: 'joinCondition',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'mergeWhenClauses',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'relation',
        type: 'RangeVar',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'sourceRelation',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'withClause',
        type: 'WithClause',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'MergeWhenClause',
    wrapped: true,
    fields: [
      {
        name: 'commandType',
        type: 'CmdType',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'condition',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'matched',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'override',
        type: 'OverridingKind',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'targetList',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'values',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'MinMaxExpr',
    wrapped: true,
    fields: [
      {
        name: 'args',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'inputcollid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'minmaxcollid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'minmaxtype',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'op',
        type: 'MinMaxOp',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'MultiAssignRef',
    wrapped: true,
    fields: [
      {
        name: 'colno',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'ncolumns',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'source',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'NamedArgExpr',
    wrapped: true,
    fields: [
      {
        name: 'arg',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'argnumber',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'name',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'NextValueExpr',
    wrapped: true,
    fields: [
      {
        name: 'seqid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'typeId',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'NotifyStmt',
    wrapped: true,
    fields: [
      {
        name: 'conditionname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'payload',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'NullIfExpr',
    wrapped: true,
    fields: [
      {
        name: 'args',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'inputcollid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'opcollid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'opno',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'opresulttype',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'opretset',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'NullTest',
    wrapped: true,
    fields: [
      {
        name: 'arg',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'argisrow',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'nulltesttype',
        type: 'NullTestType',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'ObjectWithArgs',
    wrapped: true,
    fields: [
      {
        name: 'args_unspecified',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'objargs',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'objfuncargs',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'objname',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'OidList',
    wrapped: true,
    fields: [
      {
        name: 'items',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'OnConflictClause',
    wrapped: true,
    fields: [
      {
        name: 'action',
        type: 'OnConflictAction',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'infer',
        type: 'InferClause',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'targetList',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'whereClause',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'OnConflictExpr',
    wrapped: true,
    fields: [
      {
        name: 'action',
        type: 'OnConflictAction',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'arbiterElems',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'arbiterWhere',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'constraint',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'exclRelIndex',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'exclRelTlist',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'onConflictSet',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'onConflictWhere',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'OpExpr',
    wrapped: true,
    fields: [
      {
        name: 'args',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'inputcollid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'opcollid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'opno',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'opresulttype',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'opretset',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'Param',
    wrapped: true,
    fields: [
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'paramcollid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'paramid',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'paramkind',
        type: 'ParamKind',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'paramtype',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'paramtypmod',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'ParamRef',
    wrapped: true,
    fields: [
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'number',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'ParseResult',
    wrapped: false,
    fields: [
      {
        name: 'stmts',
        type: 'RawStmt',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'version',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'PartitionBoundSpec',
    wrapped: true,
    fields: [
      {
        name: 'is_default',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'listdatums',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'lowerdatums',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'modulus',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'remainder',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'strategy',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'upperdatums',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'PartitionCmd',
    wrapped: true,
    fields: [
      {
        name: 'bound',
        type: 'PartitionBoundSpec',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'concurrent',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'name',
        type: 'RangeVar',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'PartitionElem',
    wrapped: true,
    fields: [
      {
        name: 'collation',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'expr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'name',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'opclass',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'PartitionRangeDatum',
    wrapped: true,
    fields: [
      {
        name: 'kind',
        type: 'PartitionRangeDatumKind',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'value',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'PartitionSpec',
    wrapped: true,
    fields: [
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'partParams',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'strategy',
        type: 'PartitionStrategy',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'PLAssignStmt',
    wrapped: true,
    fields: [
      {
        name: 'indirection',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'name',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'nnames',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'val',
        type: 'SelectStmt',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'PrepareStmt',
    wrapped: true,
    fields: [
      {
        name: 'argtypes',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'name',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'query',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'PublicationObjSpec',
    wrapped: true,
    fields: [
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'name',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'pubobjtype',
        type: 'PublicationObjSpecType',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'pubtable',
        type: 'PublicationTable',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'PublicationTable',
    wrapped: true,
    fields: [
      {
        name: 'columns',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'relation',
        type: 'RangeVar',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'whereClause',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'Query',
    wrapped: true,
    fields: [
      {
        name: 'canSetTag',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'commandType',
        type: 'CmdType',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'constraintDeps',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'cteList',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'distinctClause',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'groupClause',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'groupDistinct',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'groupingSets',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'hasAggs',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'hasDistinctOn',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'hasForUpdate',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'hasModifyingCTE',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'hasRecursive',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'hasRowSecurity',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'hasSubLinks',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'hasTargetSRFs',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'hasWindowFuncs',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'havingQual',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'isReturn',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'jointree',
        type: 'FromExpr',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'limitCount',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'limitOffset',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'limitOption',
        type: 'LimitOption',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'mergeActionList',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'mergeUseOuterJoin',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'onConflict',
        type: 'OnConflictExpr',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'override',
        type: 'OverridingKind',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'querySource',
        type: 'QuerySource',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'resultRelation',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'returningList',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'rowMarks',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'rtable',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'rteperminfos',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'setOperations',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'sortClause',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'stmt_len',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'stmt_location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'targetList',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'utilityStmt',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'windowClause',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'withCheckOptions',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'RangeFunction',
    wrapped: true,
    fields: [
      {
        name: 'alias',
        type: 'Alias',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'coldeflist',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'functions',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'is_rowsfrom',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'lateral',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'ordinality',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'RangeSubselect',
    wrapped: true,
    fields: [
      {
        name: 'alias',
        type: 'Alias',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'lateral',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'subquery',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'RangeTableFunc',
    wrapped: true,
    fields: [
      {
        name: 'alias',
        type: 'Alias',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'columns',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'docexpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'lateral',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'namespaces',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'rowexpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'RangeTableFuncCol',
    wrapped: true,
    fields: [
      {
        name: 'coldefexpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'colexpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'colname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'for_ordinality',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'is_not_null',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'typeName',
        type: 'TypeName',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'RangeTableSample',
    wrapped: true,
    fields: [
      {
        name: 'args',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'method',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'relation',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'repeatable',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'RangeTblEntry',
    wrapped: true,
    fields: [
      {
        name: 'alias',
        type: 'Alias',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'colcollations',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'coltypes',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'coltypmods',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'ctelevelsup',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'ctename',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'enrname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'enrtuples',
        type: 'double',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'eref',
        type: 'Alias',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'funcordinality',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'functions',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'inFromCl',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'inh',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'join_using_alias',
        type: 'Alias',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'joinaliasvars',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'joinleftcols',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'joinmergedcols',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'joinrightcols',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'jointype',
        type: 'JoinType',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'lateral',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'perminfoindex',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'relid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'relkind',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'rellockmode',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'rtekind',
        type: 'RTEKind',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'security_barrier',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'securityQuals',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'self_reference',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'subquery',
        type: 'Query',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'tablefunc',
        type: 'TableFunc',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'tablesample',
        type: 'TableSampleClause',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'values_lists',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'RangeTblFunction',
    wrapped: true,
    fields: [
      {
        name: 'funccolcollations',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'funccolcount',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'funccolnames',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'funccoltypes',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'funccoltypmods',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'funcexpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'funcparams',
        type: 'uint64',
        isNode: false,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'RangeTblRef',
    wrapped: true,
    fields: [
      {
        name: 'rtindex',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'RangeVar',
    wrapped: true,
    fields: [
      {
        name: 'alias',
        type: 'Alias',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'catalogname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'inh',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'relname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'relpersistence',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'schemaname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'RawStmt',
    wrapped: true,
    fields: [
      {
        name: 'stmt',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'stmt_len',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'stmt_location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'ReassignOwnedStmt',
    wrapped: true,
    fields: [
      {
        name: 'newrole',
        type: 'RoleSpec',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'roles',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'RefreshMatViewStmt',
    wrapped: true,
    fields: [
      {
        name: 'concurrent',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'relation',
        type: 'RangeVar',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'skipData',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'ReindexStmt',
    wrapped: true,
    fields: [
      {
        name: 'kind',
        type: 'ReindexObjectType',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'name',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'params',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'relation',
        type: 'RangeVar',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'RelabelType',
    wrapped: true,
    fields: [
      {
        name: 'arg',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'relabelformat',
        type: 'CoercionForm',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'resultcollid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'resulttype',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'resulttypmod',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'RenameStmt',
    wrapped: true,
    fields: [
      {
        name: 'behavior',
        type: 'DropBehavior',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'missing_ok',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'newname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'object',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'relation',
        type: 'RangeVar',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'relationType',
        type: 'ObjectType',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'renameType',
        type: 'ObjectType',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'subname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'ReplicaIdentityStmt',
    wrapped: true,
    fields: [
      {
        name: 'identity_type',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'name',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'ResTarget',
    wrapped: true,
    fields: [
      {
        name: 'indirection',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'name',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'val',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'ReturnStmt',
    wrapped: true,
    fields: [
      {
        name: 'returnval',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'RoleSpec',
    wrapped: true,
    fields: [
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'rolename',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'roletype',
        type: 'RoleSpecType',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'RowCompareExpr',
    wrapped: true,
    fields: [
      {
        name: 'inputcollids',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'largs',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'opfamilies',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'opnos',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'rargs',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'rctype',
        type: 'RowCompareType',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'RowExpr',
    wrapped: true,
    fields: [
      {
        name: 'args',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'colnames',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'row_format',
        type: 'CoercionForm',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'row_typeid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'RowMarkClause',
    wrapped: true,
    fields: [
      {
        name: 'pushedDown',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'rti',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'strength',
        type: 'LockClauseStrength',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'waitPolicy',
        type: 'LockWaitPolicy',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'RTEPermissionInfo',
    wrapped: true,
    fields: [
      {
        name: 'checkAsUser',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'inh',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'insertedCols',
        type: 'uint64',
        isNode: false,
        isArray: true,
        optional: true
      },
      {
        name: 'relid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'requiredPerms',
        type: 'uint64',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'selectedCols',
        type: 'uint64',
        isNode: false,
        isArray: true,
        optional: true
      },
      {
        name: 'updatedCols',
        type: 'uint64',
        isNode: false,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'RuleStmt',
    wrapped: true,
    fields: [
      {
        name: 'actions',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'event',
        type: 'CmdType',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'instead',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'relation',
        type: 'RangeVar',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'replace',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'rulename',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'whereClause',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'ScalarArrayOpExpr',
    wrapped: true,
    fields: [
      {
        name: 'args',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'inputcollid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'opno',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'useOr',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'ScanResult',
    wrapped: false,
    fields: [
      {
        name: 'tokens',
        type: 'ScanToken',
        isNode: false,
        isArray: true,
        optional: true
      },
      {
        name: 'version',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'ScanToken',
    wrapped: false,
    fields: [
      {
        name: 'end',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'keywordKind',
        type: 'KeywordKind',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'start',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'token',
        type: 'Token',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'SecLabelStmt',
    wrapped: true,
    fields: [
      {
        name: 'label',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'object',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'objtype',
        type: 'ObjectType',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'provider',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'SelectStmt',
    wrapped: true,
    fields: [
      {
        name: 'all',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'distinctClause',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'fromClause',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'groupClause',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'groupDistinct',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'havingClause',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'intoClause',
        type: 'IntoClause',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'larg',
        type: 'SelectStmt',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'limitCount',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'limitOffset',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'limitOption',
        type: 'LimitOption',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'lockingClause',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'op',
        type: 'SetOperation',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'rarg',
        type: 'SelectStmt',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'sortClause',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'targetList',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'valuesLists',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'whereClause',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'windowClause',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'withClause',
        type: 'WithClause',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'SetOperationStmt',
    wrapped: true,
    fields: [
      {
        name: 'all',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'colCollations',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'colTypes',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'colTypmods',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'groupClauses',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'larg',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'op',
        type: 'SetOperation',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'rarg',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'SetToDefault',
    wrapped: true,
    fields: [
      {
        name: 'collation',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'typeId',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'typeMod',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'SortBy',
    wrapped: true,
    fields: [
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'node',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'sortby_dir',
        type: 'SortByDir',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'sortby_nulls',
        type: 'SortByNulls',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'useOp',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'SortGroupClause',
    wrapped: true,
    fields: [
      {
        name: 'eqop',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'hashable',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'nulls_first',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'sortop',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'tleSortGroupRef',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'SQLValueFunction',
    wrapped: true,
    fields: [
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'op',
        type: 'SQLValueFunctionOp',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'type',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'typmod',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'StatsElem',
    wrapped: true,
    fields: [
      {
        name: 'expr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'name',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'String',
    wrapped: true,
    fields: [
      {
        name: 'sval',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'SubLink',
    wrapped: true,
    fields: [
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'operName',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'subLinkId',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'subLinkType',
        type: 'SubLinkType',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'subselect',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'testexpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'SubPlan',
    wrapped: true,
    fields: [
      {
        name: 'args',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'firstColCollation',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'firstColType',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'firstColTypmod',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'parallel_safe',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'paramIds',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'parParam',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'per_call_cost',
        type: 'double',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'plan_id',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'plan_name',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'setParam',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'startup_cost',
        type: 'double',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'subLinkType',
        type: 'SubLinkType',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'testexpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'unknownEqFalse',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'useHashTable',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'SubscriptingRef',
    wrapped: true,
    fields: [
      {
        name: 'refassgnexpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'refcollid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'refcontainertype',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'refelemtype',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'refexpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'reflowerindexpr',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'refrestype',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'reftypmod',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'refupperindexpr',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'TableFunc',
    wrapped: true,
    fields: [
      {
        name: 'colcollations',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'coldefexprs',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'colexprs',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'colnames',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'coltypes',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'coltypmods',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'docexpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'notnulls',
        type: 'uint64',
        isNode: false,
        isArray: true,
        optional: true
      },
      {
        name: 'ns_names',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'ns_uris',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'ordinalitycol',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'rowexpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'TableLikeClause',
    wrapped: true,
    fields: [
      {
        name: 'options',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'relation',
        type: 'RangeVar',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'relationOid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'TableSampleClause',
    wrapped: true,
    fields: [
      {
        name: 'args',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'repeatable',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'tsmhandler',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'TargetEntry',
    wrapped: true,
    fields: [
      {
        name: 'expr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'resjunk',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'resname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'resno',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'resorigcol',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'resorigtbl',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'ressortgroupref',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'TransactionStmt',
    wrapped: true,
    fields: [
      {
        name: 'chain',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'gid',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'kind',
        type: 'TransactionStmtKind',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'savepoint_name',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'TriggerTransition',
    wrapped: true,
    fields: [
      {
        name: 'isNew',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'isTable',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'name',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'TruncateStmt',
    wrapped: true,
    fields: [
      {
        name: 'behavior',
        type: 'DropBehavior',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'relations',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'restart_seqs',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'TypeCast',
    wrapped: true,
    fields: [
      {
        name: 'arg',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'typeName',
        type: 'TypeName',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'TypeName',
    wrapped: true,
    fields: [
      {
        name: 'arrayBounds',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'names',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'pct_type',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'setof',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'typemod',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'typeOid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'typmods',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'UnlistenStmt',
    wrapped: true,
    fields: [
      {
        name: 'conditionname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'UpdateStmt',
    wrapped: true,
    fields: [
      {
        name: 'fromClause',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'relation',
        type: 'RangeVar',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'returningList',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'targetList',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'whereClause',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'withClause',
        type: 'WithClause',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'VacuumRelation',
    wrapped: true,
    fields: [
      {
        name: 'oid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'relation',
        type: 'RangeVar',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'va_cols',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'VacuumStmt',
    wrapped: true,
    fields: [
      {
        name: 'is_vacuumcmd',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'rels',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      }
    ]
  },
  {
    name: 'Var',
    wrapped: true,
    fields: [
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'varattno',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'varcollid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'varlevelsup',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'varno',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'varnullingrels',
        type: 'uint64',
        isNode: false,
        isArray: true,
        optional: true
      },
      {
        name: 'vartype',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'vartypmod',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'VariableSetStmt',
    wrapped: true,
    fields: [
      {
        name: 'args',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'is_local',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'kind',
        type: 'VariableSetKind',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'name',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'VariableShowStmt',
    wrapped: true,
    fields: [
      {
        name: 'name',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'ViewStmt',
    wrapped: true,
    fields: [
      {
        name: 'aliases',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'options',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'query',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'replace',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'view',
        type: 'RangeVar',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'withCheckOption',
        type: 'ViewCheckOption',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'WindowClause',
    wrapped: true,
    fields: [
      {
        name: 'copiedOrder',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'endInRangeFunc',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'endOffset',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'frameOptions',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'inRangeAsc',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'inRangeColl',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'inRangeNullsFirst',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'name',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'orderClause',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'partitionClause',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'refname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'runCondition',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'startInRangeFunc',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'startOffset',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'winref',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'WindowDef',
    wrapped: true,
    fields: [
      {
        name: 'endOffset',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'frameOptions',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'name',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'orderClause',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'partitionClause',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'refname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'startOffset',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'WindowFunc',
    wrapped: true,
    fields: [
      {
        name: 'aggfilter',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'args',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'inputcollid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'winagg',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'wincollid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'winfnoid',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'winref',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'winstar',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'wintype',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'WithCheckOption',
    wrapped: true,
    fields: [
      {
        name: 'cascaded',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'kind',
        type: 'WCOKind',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'polname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'qual',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'relname',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'WithClause',
    wrapped: true,
    fields: [
      {
        name: 'ctes',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'recursive',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'XmlExpr',
    wrapped: true,
    fields: [
      {
        name: 'arg_names',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'args',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'indent',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'name',
        type: 'string',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'named_args',
        type: 'Node',
        isNode: true,
        isArray: true,
        optional: true
      },
      {
        name: 'op',
        type: 'XmlExprOp',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'type',
        type: 'uint32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'typmod',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xmloption',
        type: 'XmlOptionType',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'xpr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      }
    ]
  },
  {
    name: 'XmlSerialize',
    wrapped: true,
    fields: [
      {
        name: 'expr',
        type: 'Node',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'indent',
        type: 'bool',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'location',
        type: 'int32',
        isNode: false,
        isArray: false,
        optional: true
      },
      {
        name: 'typeName',
        type: 'TypeName',
        isNode: true,
        isArray: false,
        optional: true
      },
      {
        name: 'xmloption',
        type: 'XmlOptionType',
        isNode: false,
        isArray: false,
        optional: true
      }
    ]
  }
];",
    "file": "runtime-schema.ts",
  },
]
`;
