// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`utils astHelpers enabled 1`] = `
[
  {
    "code": "/**
* This file was automatically generated by pg-proto-parser@latest.
* DO NOT MODIFY IT BY HAND. Instead, modify the source proto file,
* and run the pg-proto-parser generate command to regenerate this file.
*/
import _o from "nested-obj";
import { ParseResult, ScanResult, Integer, Float, Boolean, String, BitString, List, OidList, IntList, A_Const, Alias, RangeVar, TableFunc, IntoClause, Var, Param, Aggref, GroupingFunc, WindowFunc, SubscriptingRef, FuncExpr, NamedArgExpr, OpExpr, DistinctExpr, NullIfExpr, ScalarArrayOpExpr, BoolExpr, SubLink, SubPlan, AlternativeSubPlan, FieldSelect, FieldStore, RelabelType, CoerceViaIO, ArrayCoerceExpr, ConvertRowtypeExpr, CollateExpr, CaseExpr, CaseWhen, CaseTestExpr, ArrayExpr, RowExpr, RowCompareExpr, CoalesceExpr, MinMaxExpr, SQLValueFunction, XmlExpr, JsonFormat, JsonReturning, JsonValueExpr, JsonConstructorExpr, JsonIsPredicate, NullTest, BooleanTest, CoerceToDomain, CoerceToDomainValue, SetToDefault, CurrentOfExpr, NextValueExpr, InferenceElem, TargetEntry, RangeTblRef, JoinExpr, FromExpr, OnConflictExpr, Query, TypeName, ColumnRef, ParamRef, A_Expr, TypeCast, CollateClause, RoleSpec, FuncCall, A_Star, A_Indices, A_Indirection, A_ArrayExpr, ResTarget, MultiAssignRef, SortBy, WindowDef, RangeSubselect, RangeFunction, RangeTableFunc, RangeTableFuncCol, RangeTableSample, ColumnDef, TableLikeClause, IndexElem, DefElem, LockingClause, XmlSerialize, PartitionElem, PartitionSpec, PartitionBoundSpec, PartitionRangeDatum, PartitionCmd, RangeTblEntry, RTEPermissionInfo, RangeTblFunction, TableSampleClause, WithCheckOption, SortGroupClause, GroupingSet, WindowClause, RowMarkClause, WithClause, InferClause, OnConflictClause, CTESearchClause, CTECycleClause, CommonTableExpr, MergeWhenClause, MergeAction, TriggerTransition, JsonOutput, JsonKeyValue, JsonObjectConstructor, JsonArrayConstructor, JsonArrayQueryConstructor, JsonAggConstructor, JsonObjectAgg, JsonArrayAgg, RawStmt, InsertStmt, DeleteStmt, UpdateStmt, MergeStmt, SelectStmt, SetOperationStmt, ReturnStmt, PLAssignStmt, CreateSchemaStmt, AlterTableStmt, ReplicaIdentityStmt, AlterTableCmd, AlterCollationStmt, AlterDomainStmt, GrantStmt, ObjectWithArgs, AccessPriv, GrantRoleStmt, AlterDefaultPrivilegesStmt, CopyStmt, VariableSetStmt, VariableShowStmt, CreateStmt, Constraint, CreateTableSpaceStmt, DropTableSpaceStmt, AlterTableSpaceOptionsStmt, AlterTableMoveAllStmt, CreateExtensionStmt, AlterExtensionStmt, AlterExtensionContentsStmt, CreateFdwStmt, AlterFdwStmt, CreateForeignServerStmt, AlterForeignServerStmt, CreateForeignTableStmt, CreateUserMappingStmt, AlterUserMappingStmt, DropUserMappingStmt, ImportForeignSchemaStmt, CreatePolicyStmt, AlterPolicyStmt, CreateAmStmt, CreateTrigStmt, CreateEventTrigStmt, AlterEventTrigStmt, CreatePLangStmt, CreateRoleStmt, AlterRoleStmt, AlterRoleSetStmt, DropRoleStmt, CreateSeqStmt, AlterSeqStmt, DefineStmt, CreateDomainStmt, CreateOpClassStmt, CreateOpClassItem, CreateOpFamilyStmt, AlterOpFamilyStmt, DropStmt, TruncateStmt, CommentStmt, SecLabelStmt, DeclareCursorStmt, ClosePortalStmt, FetchStmt, IndexStmt, CreateStatsStmt, StatsElem, AlterStatsStmt, CreateFunctionStmt, FunctionParameter, AlterFunctionStmt, DoStmt, InlineCodeBlock, CallStmt, CallContext, RenameStmt, AlterObjectDependsStmt, AlterObjectSchemaStmt, AlterOwnerStmt, AlterOperatorStmt, AlterTypeStmt, RuleStmt, NotifyStmt, ListenStmt, UnlistenStmt, TransactionStmt, CompositeTypeStmt, CreateEnumStmt, CreateRangeStmt, AlterEnumStmt, ViewStmt, LoadStmt, CreatedbStmt, AlterDatabaseStmt, AlterDatabaseRefreshCollStmt, AlterDatabaseSetStmt, DropdbStmt, AlterSystemStmt, ClusterStmt, VacuumStmt, VacuumRelation, ExplainStmt, CreateTableAsStmt, RefreshMatViewStmt, CheckPointStmt, DiscardStmt, LockStmt, ConstraintsSetStmt, ReindexStmt, CreateConversionStmt, CreateCastStmt, CreateTransformStmt, PrepareStmt, ExecuteStmt, DeallocateStmt, DropOwnedStmt, ReassignOwnedStmt, AlterTSDictionaryStmt, AlterTSConfigurationStmt, PublicationTable, PublicationObjSpec, CreatePublicationStmt, AlterPublicationStmt, CreateSubscriptionStmt, AlterSubscriptionStmt, DropSubscriptionStmt, ScanToken } from "./wrapped";
export default {
  parseResult(_p?: ParseResult): ParseResult {
    const _j = ({} as ParseResult);
    _o.set(_j, "version", _p?.version);
    _o.set(_j, "stmts", _p?.stmts);
    return _j;
  },
  scanResult(_p?: ScanResult): ScanResult {
    const _j = ({} as ScanResult);
    _o.set(_j, "version", _p?.version);
    _o.set(_j, "tokens", _p?.tokens);
    return _j;
  },
  integer(_p?: Integer): Integer {
    const _j = ({} as Integer);
    _o.set(_j, "ival", _p?.ival);
    return _j;
  },
  float(_p?: Float): Float {
    const _j = ({} as Float);
    _o.set(_j, "fval", _p?.fval);
    return _j;
  },
  boolean(_p?: Boolean): Boolean {
    const _j = ({} as Boolean);
    _o.set(_j, "boolval", _p?.boolval);
    return _j;
  },
  string(_p?: String): String {
    const _j = ({} as String);
    _o.set(_j, "sval", _p?.sval);
    return _j;
  },
  bitString(_p?: BitString): BitString {
    const _j = ({} as BitString);
    _o.set(_j, "bsval", _p?.bsval);
    return _j;
  },
  list(_p?: List): List {
    const _j = ({} as List);
    _o.set(_j, "items", _p?.items);
    return _j;
  },
  oidList(_p?: OidList): OidList {
    const _j = ({} as OidList);
    _o.set(_j, "items", _p?.items);
    return _j;
  },
  intList(_p?: IntList): IntList {
    const _j = ({} as IntList);
    _o.set(_j, "items", _p?.items);
    return _j;
  },
  aConst(_p?: A_Const): A_Const {
    const _j = ({} as A_Const);
    _o.set(_j, "ival", _p?.ival);
    _o.set(_j, "fval", _p?.fval);
    _o.set(_j, "boolval", _p?.boolval);
    _o.set(_j, "sval", _p?.sval);
    _o.set(_j, "bsval", _p?.bsval);
    _o.set(_j, "isnull", _p?.isnull);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  alias(_p?: Alias): Alias {
    const _j = ({} as Alias);
    _o.set(_j, "aliasname", _p?.aliasname);
    _o.set(_j, "colnames", _p?.colnames);
    return _j;
  },
  rangeVar(_p?: RangeVar): RangeVar {
    const _j = ({} as RangeVar);
    _o.set(_j, "catalogname", _p?.catalogname);
    _o.set(_j, "schemaname", _p?.schemaname);
    _o.set(_j, "relname", _p?.relname);
    _o.set(_j, "inh", _p?.inh);
    _o.set(_j, "relpersistence", _p?.relpersistence);
    _o.set(_j, "alias", _p?.alias);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  tableFunc(_p?: TableFunc): TableFunc {
    const _j = ({} as TableFunc);
    _o.set(_j, "ns_uris", _p?.ns_uris);
    _o.set(_j, "ns_names", _p?.ns_names);
    _o.set(_j, "docexpr", _p?.docexpr);
    _o.set(_j, "rowexpr", _p?.rowexpr);
    _o.set(_j, "colnames", _p?.colnames);
    _o.set(_j, "coltypes", _p?.coltypes);
    _o.set(_j, "coltypmods", _p?.coltypmods);
    _o.set(_j, "colcollations", _p?.colcollations);
    _o.set(_j, "colexprs", _p?.colexprs);
    _o.set(_j, "coldefexprs", _p?.coldefexprs);
    _o.set(_j, "notnulls", _p?.notnulls);
    _o.set(_j, "ordinalitycol", _p?.ordinalitycol);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  intoClause(_p?: IntoClause): IntoClause {
    const _j = ({} as IntoClause);
    _o.set(_j, "rel", _p?.rel);
    _o.set(_j, "colNames", _p?.colNames);
    _o.set(_j, "accessMethod", _p?.accessMethod);
    _o.set(_j, "options", _p?.options);
    _o.set(_j, "onCommit", _p?.onCommit);
    _o.set(_j, "tableSpaceName", _p?.tableSpaceName);
    _o.set(_j, "viewQuery", _p?.viewQuery);
    _o.set(_j, "skipData", _p?.skipData);
    return _j;
  },
  var(_p?: Var): Var {
    const _j = ({} as Var);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "varno", _p?.varno);
    _o.set(_j, "varattno", _p?.varattno);
    _o.set(_j, "vartype", _p?.vartype);
    _o.set(_j, "vartypmod", _p?.vartypmod);
    _o.set(_j, "varcollid", _p?.varcollid);
    _o.set(_j, "varnullingrels", _p?.varnullingrels);
    _o.set(_j, "varlevelsup", _p?.varlevelsup);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  param(_p?: Param): Param {
    const _j = ({} as Param);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "paramkind", _p?.paramkind);
    _o.set(_j, "paramid", _p?.paramid);
    _o.set(_j, "paramtype", _p?.paramtype);
    _o.set(_j, "paramtypmod", _p?.paramtypmod);
    _o.set(_j, "paramcollid", _p?.paramcollid);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  aggref(_p?: Aggref): Aggref {
    const _j = ({} as Aggref);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "aggfnoid", _p?.aggfnoid);
    _o.set(_j, "aggtype", _p?.aggtype);
    _o.set(_j, "aggcollid", _p?.aggcollid);
    _o.set(_j, "inputcollid", _p?.inputcollid);
    _o.set(_j, "aggargtypes", _p?.aggargtypes);
    _o.set(_j, "aggdirectargs", _p?.aggdirectargs);
    _o.set(_j, "args", _p?.args);
    _o.set(_j, "aggorder", _p?.aggorder);
    _o.set(_j, "aggdistinct", _p?.aggdistinct);
    _o.set(_j, "aggfilter", _p?.aggfilter);
    _o.set(_j, "aggstar", _p?.aggstar);
    _o.set(_j, "aggvariadic", _p?.aggvariadic);
    _o.set(_j, "aggkind", _p?.aggkind);
    _o.set(_j, "agglevelsup", _p?.agglevelsup);
    _o.set(_j, "aggsplit", _p?.aggsplit);
    _o.set(_j, "aggno", _p?.aggno);
    _o.set(_j, "aggtransno", _p?.aggtransno);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  groupingFunc(_p?: GroupingFunc): GroupingFunc {
    const _j = ({} as GroupingFunc);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "args", _p?.args);
    _o.set(_j, "refs", _p?.refs);
    _o.set(_j, "agglevelsup", _p?.agglevelsup);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  windowFunc(_p?: WindowFunc): WindowFunc {
    const _j = ({} as WindowFunc);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "winfnoid", _p?.winfnoid);
    _o.set(_j, "wintype", _p?.wintype);
    _o.set(_j, "wincollid", _p?.wincollid);
    _o.set(_j, "inputcollid", _p?.inputcollid);
    _o.set(_j, "args", _p?.args);
    _o.set(_j, "aggfilter", _p?.aggfilter);
    _o.set(_j, "winref", _p?.winref);
    _o.set(_j, "winstar", _p?.winstar);
    _o.set(_j, "winagg", _p?.winagg);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  subscriptingRef(_p?: SubscriptingRef): SubscriptingRef {
    const _j = ({} as SubscriptingRef);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "refcontainertype", _p?.refcontainertype);
    _o.set(_j, "refelemtype", _p?.refelemtype);
    _o.set(_j, "refrestype", _p?.refrestype);
    _o.set(_j, "reftypmod", _p?.reftypmod);
    _o.set(_j, "refcollid", _p?.refcollid);
    _o.set(_j, "refupperindexpr", _p?.refupperindexpr);
    _o.set(_j, "reflowerindexpr", _p?.reflowerindexpr);
    _o.set(_j, "refexpr", _p?.refexpr);
    _o.set(_j, "refassgnexpr", _p?.refassgnexpr);
    return _j;
  },
  funcExpr(_p?: FuncExpr): FuncExpr {
    const _j = ({} as FuncExpr);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "funcid", _p?.funcid);
    _o.set(_j, "funcresulttype", _p?.funcresulttype);
    _o.set(_j, "funcretset", _p?.funcretset);
    _o.set(_j, "funcvariadic", _p?.funcvariadic);
    _o.set(_j, "funcformat", _p?.funcformat);
    _o.set(_j, "funccollid", _p?.funccollid);
    _o.set(_j, "inputcollid", _p?.inputcollid);
    _o.set(_j, "args", _p?.args);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  namedArgExpr(_p?: NamedArgExpr): NamedArgExpr {
    const _j = ({} as NamedArgExpr);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "arg", _p?.arg);
    _o.set(_j, "name", _p?.name);
    _o.set(_j, "argnumber", _p?.argnumber);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  opExpr(_p?: OpExpr): OpExpr {
    const _j = ({} as OpExpr);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "opno", _p?.opno);
    _o.set(_j, "opresulttype", _p?.opresulttype);
    _o.set(_j, "opretset", _p?.opretset);
    _o.set(_j, "opcollid", _p?.opcollid);
    _o.set(_j, "inputcollid", _p?.inputcollid);
    _o.set(_j, "args", _p?.args);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  distinctExpr(_p?: DistinctExpr): DistinctExpr {
    const _j = ({} as DistinctExpr);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "opno", _p?.opno);
    _o.set(_j, "opresulttype", _p?.opresulttype);
    _o.set(_j, "opretset", _p?.opretset);
    _o.set(_j, "opcollid", _p?.opcollid);
    _o.set(_j, "inputcollid", _p?.inputcollid);
    _o.set(_j, "args", _p?.args);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  nullIfExpr(_p?: NullIfExpr): NullIfExpr {
    const _j = ({} as NullIfExpr);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "opno", _p?.opno);
    _o.set(_j, "opresulttype", _p?.opresulttype);
    _o.set(_j, "opretset", _p?.opretset);
    _o.set(_j, "opcollid", _p?.opcollid);
    _o.set(_j, "inputcollid", _p?.inputcollid);
    _o.set(_j, "args", _p?.args);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  scalarArrayOpExpr(_p?: ScalarArrayOpExpr): ScalarArrayOpExpr {
    const _j = ({} as ScalarArrayOpExpr);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "opno", _p?.opno);
    _o.set(_j, "useOr", _p?.useOr);
    _o.set(_j, "inputcollid", _p?.inputcollid);
    _o.set(_j, "args", _p?.args);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  boolExpr(_p?: BoolExpr): BoolExpr {
    const _j = ({} as BoolExpr);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "boolop", _p?.boolop);
    _o.set(_j, "args", _p?.args);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  subLink(_p?: SubLink): SubLink {
    const _j = ({} as SubLink);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "subLinkType", _p?.subLinkType);
    _o.set(_j, "subLinkId", _p?.subLinkId);
    _o.set(_j, "testexpr", _p?.testexpr);
    _o.set(_j, "operName", _p?.operName);
    _o.set(_j, "subselect", _p?.subselect);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  subPlan(_p?: SubPlan): SubPlan {
    const _j = ({} as SubPlan);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "subLinkType", _p?.subLinkType);
    _o.set(_j, "testexpr", _p?.testexpr);
    _o.set(_j, "paramIds", _p?.paramIds);
    _o.set(_j, "plan_id", _p?.plan_id);
    _o.set(_j, "plan_name", _p?.plan_name);
    _o.set(_j, "firstColType", _p?.firstColType);
    _o.set(_j, "firstColTypmod", _p?.firstColTypmod);
    _o.set(_j, "firstColCollation", _p?.firstColCollation);
    _o.set(_j, "useHashTable", _p?.useHashTable);
    _o.set(_j, "unknownEqFalse", _p?.unknownEqFalse);
    _o.set(_j, "parallel_safe", _p?.parallel_safe);
    _o.set(_j, "setParam", _p?.setParam);
    _o.set(_j, "parParam", _p?.parParam);
    _o.set(_j, "args", _p?.args);
    _o.set(_j, "startup_cost", _p?.startup_cost);
    _o.set(_j, "per_call_cost", _p?.per_call_cost);
    return _j;
  },
  alternativeSubPlan(_p?: AlternativeSubPlan): AlternativeSubPlan {
    const _j = ({} as AlternativeSubPlan);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "subplans", _p?.subplans);
    return _j;
  },
  fieldSelect(_p?: FieldSelect): FieldSelect {
    const _j = ({} as FieldSelect);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "arg", _p?.arg);
    _o.set(_j, "fieldnum", _p?.fieldnum);
    _o.set(_j, "resulttype", _p?.resulttype);
    _o.set(_j, "resulttypmod", _p?.resulttypmod);
    _o.set(_j, "resultcollid", _p?.resultcollid);
    return _j;
  },
  fieldStore(_p?: FieldStore): FieldStore {
    const _j = ({} as FieldStore);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "arg", _p?.arg);
    _o.set(_j, "newvals", _p?.newvals);
    _o.set(_j, "fieldnums", _p?.fieldnums);
    _o.set(_j, "resulttype", _p?.resulttype);
    return _j;
  },
  relabelType(_p?: RelabelType): RelabelType {
    const _j = ({} as RelabelType);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "arg", _p?.arg);
    _o.set(_j, "resulttype", _p?.resulttype);
    _o.set(_j, "resulttypmod", _p?.resulttypmod);
    _o.set(_j, "resultcollid", _p?.resultcollid);
    _o.set(_j, "relabelformat", _p?.relabelformat);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  coerceViaio(_p?: CoerceViaIO): CoerceViaIO {
    const _j = ({} as CoerceViaIO);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "arg", _p?.arg);
    _o.set(_j, "resulttype", _p?.resulttype);
    _o.set(_j, "resultcollid", _p?.resultcollid);
    _o.set(_j, "coerceformat", _p?.coerceformat);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  arrayCoerceExpr(_p?: ArrayCoerceExpr): ArrayCoerceExpr {
    const _j = ({} as ArrayCoerceExpr);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "arg", _p?.arg);
    _o.set(_j, "elemexpr", _p?.elemexpr);
    _o.set(_j, "resulttype", _p?.resulttype);
    _o.set(_j, "resulttypmod", _p?.resulttypmod);
    _o.set(_j, "resultcollid", _p?.resultcollid);
    _o.set(_j, "coerceformat", _p?.coerceformat);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  convertRowtypeExpr(_p?: ConvertRowtypeExpr): ConvertRowtypeExpr {
    const _j = ({} as ConvertRowtypeExpr);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "arg", _p?.arg);
    _o.set(_j, "resulttype", _p?.resulttype);
    _o.set(_j, "convertformat", _p?.convertformat);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  collateExpr(_p?: CollateExpr): CollateExpr {
    const _j = ({} as CollateExpr);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "arg", _p?.arg);
    _o.set(_j, "collOid", _p?.collOid);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  caseExpr(_p?: CaseExpr): CaseExpr {
    const _j = ({} as CaseExpr);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "casetype", _p?.casetype);
    _o.set(_j, "casecollid", _p?.casecollid);
    _o.set(_j, "arg", _p?.arg);
    _o.set(_j, "args", _p?.args);
    _o.set(_j, "defresult", _p?.defresult);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  caseWhen(_p?: CaseWhen): CaseWhen {
    const _j = ({} as CaseWhen);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "expr", _p?.expr);
    _o.set(_j, "result", _p?.result);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  caseTestExpr(_p?: CaseTestExpr): CaseTestExpr {
    const _j = ({} as CaseTestExpr);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "typeId", _p?.typeId);
    _o.set(_j, "typeMod", _p?.typeMod);
    _o.set(_j, "collation", _p?.collation);
    return _j;
  },
  arrayExpr(_p?: ArrayExpr): ArrayExpr {
    const _j = ({} as ArrayExpr);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "array_typeid", _p?.array_typeid);
    _o.set(_j, "array_collid", _p?.array_collid);
    _o.set(_j, "element_typeid", _p?.element_typeid);
    _o.set(_j, "elements", _p?.elements);
    _o.set(_j, "multidims", _p?.multidims);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  rowExpr(_p?: RowExpr): RowExpr {
    const _j = ({} as RowExpr);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "args", _p?.args);
    _o.set(_j, "row_typeid", _p?.row_typeid);
    _o.set(_j, "row_format", _p?.row_format);
    _o.set(_j, "colnames", _p?.colnames);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  rowCompareExpr(_p?: RowCompareExpr): RowCompareExpr {
    const _j = ({} as RowCompareExpr);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "rctype", _p?.rctype);
    _o.set(_j, "opnos", _p?.opnos);
    _o.set(_j, "opfamilies", _p?.opfamilies);
    _o.set(_j, "inputcollids", _p?.inputcollids);
    _o.set(_j, "largs", _p?.largs);
    _o.set(_j, "rargs", _p?.rargs);
    return _j;
  },
  coalesceExpr(_p?: CoalesceExpr): CoalesceExpr {
    const _j = ({} as CoalesceExpr);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "coalescetype", _p?.coalescetype);
    _o.set(_j, "coalescecollid", _p?.coalescecollid);
    _o.set(_j, "args", _p?.args);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  minMaxExpr(_p?: MinMaxExpr): MinMaxExpr {
    const _j = ({} as MinMaxExpr);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "minmaxtype", _p?.minmaxtype);
    _o.set(_j, "minmaxcollid", _p?.minmaxcollid);
    _o.set(_j, "inputcollid", _p?.inputcollid);
    _o.set(_j, "op", _p?.op);
    _o.set(_j, "args", _p?.args);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  sqlValueFunction(_p?: SQLValueFunction): SQLValueFunction {
    const _j = ({} as SQLValueFunction);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "op", _p?.op);
    _o.set(_j, "type", _p?.type);
    _o.set(_j, "typmod", _p?.typmod);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  xmlExpr(_p?: XmlExpr): XmlExpr {
    const _j = ({} as XmlExpr);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "op", _p?.op);
    _o.set(_j, "name", _p?.name);
    _o.set(_j, "named_args", _p?.named_args);
    _o.set(_j, "arg_names", _p?.arg_names);
    _o.set(_j, "args", _p?.args);
    _o.set(_j, "xmloption", _p?.xmloption);
    _o.set(_j, "indent", _p?.indent);
    _o.set(_j, "type", _p?.type);
    _o.set(_j, "typmod", _p?.typmod);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  jsonFormat(_p?: JsonFormat): JsonFormat {
    const _j = ({} as JsonFormat);
    _o.set(_j, "format_type", _p?.format_type);
    _o.set(_j, "encoding", _p?.encoding);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  jsonReturning(_p?: JsonReturning): JsonReturning {
    const _j = ({} as JsonReturning);
    _o.set(_j, "format", _p?.format);
    _o.set(_j, "typid", _p?.typid);
    _o.set(_j, "typmod", _p?.typmod);
    return _j;
  },
  jsonValueExpr(_p?: JsonValueExpr): JsonValueExpr {
    const _j = ({} as JsonValueExpr);
    _o.set(_j, "raw_expr", _p?.raw_expr);
    _o.set(_j, "formatted_expr", _p?.formatted_expr);
    _o.set(_j, "format", _p?.format);
    return _j;
  },
  jsonConstructorExpr(_p?: JsonConstructorExpr): JsonConstructorExpr {
    const _j = ({} as JsonConstructorExpr);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "type", _p?.type);
    _o.set(_j, "args", _p?.args);
    _o.set(_j, "func", _p?.func);
    _o.set(_j, "coercion", _p?.coercion);
    _o.set(_j, "returning", _p?.returning);
    _o.set(_j, "absent_on_null", _p?.absent_on_null);
    _o.set(_j, "unique", _p?.unique);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  jsonIsPredicate(_p?: JsonIsPredicate): JsonIsPredicate {
    const _j = ({} as JsonIsPredicate);
    _o.set(_j, "expr", _p?.expr);
    _o.set(_j, "format", _p?.format);
    _o.set(_j, "item_type", _p?.item_type);
    _o.set(_j, "unique_keys", _p?.unique_keys);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  nullTest(_p?: NullTest): NullTest {
    const _j = ({} as NullTest);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "arg", _p?.arg);
    _o.set(_j, "nulltesttype", _p?.nulltesttype);
    _o.set(_j, "argisrow", _p?.argisrow);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  booleanTest(_p?: BooleanTest): BooleanTest {
    const _j = ({} as BooleanTest);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "arg", _p?.arg);
    _o.set(_j, "booltesttype", _p?.booltesttype);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  coerceToDomain(_p?: CoerceToDomain): CoerceToDomain {
    const _j = ({} as CoerceToDomain);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "arg", _p?.arg);
    _o.set(_j, "resulttype", _p?.resulttype);
    _o.set(_j, "resulttypmod", _p?.resulttypmod);
    _o.set(_j, "resultcollid", _p?.resultcollid);
    _o.set(_j, "coercionformat", _p?.coercionformat);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  coerceToDomainValue(_p?: CoerceToDomainValue): CoerceToDomainValue {
    const _j = ({} as CoerceToDomainValue);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "typeId", _p?.typeId);
    _o.set(_j, "typeMod", _p?.typeMod);
    _o.set(_j, "collation", _p?.collation);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  setToDefault(_p?: SetToDefault): SetToDefault {
    const _j = ({} as SetToDefault);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "typeId", _p?.typeId);
    _o.set(_j, "typeMod", _p?.typeMod);
    _o.set(_j, "collation", _p?.collation);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  currentOfExpr(_p?: CurrentOfExpr): CurrentOfExpr {
    const _j = ({} as CurrentOfExpr);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "cvarno", _p?.cvarno);
    _o.set(_j, "cursor_name", _p?.cursor_name);
    _o.set(_j, "cursor_param", _p?.cursor_param);
    return _j;
  },
  nextValueExpr(_p?: NextValueExpr): NextValueExpr {
    const _j = ({} as NextValueExpr);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "seqid", _p?.seqid);
    _o.set(_j, "typeId", _p?.typeId);
    return _j;
  },
  inferenceElem(_p?: InferenceElem): InferenceElem {
    const _j = ({} as InferenceElem);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "expr", _p?.expr);
    _o.set(_j, "infercollid", _p?.infercollid);
    _o.set(_j, "inferopclass", _p?.inferopclass);
    return _j;
  },
  targetEntry(_p?: TargetEntry): TargetEntry {
    const _j = ({} as TargetEntry);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "expr", _p?.expr);
    _o.set(_j, "resno", _p?.resno);
    _o.set(_j, "resname", _p?.resname);
    _o.set(_j, "ressortgroupref", _p?.ressortgroupref);
    _o.set(_j, "resorigtbl", _p?.resorigtbl);
    _o.set(_j, "resorigcol", _p?.resorigcol);
    _o.set(_j, "resjunk", _p?.resjunk);
    return _j;
  },
  rangeTblRef(_p?: RangeTblRef): RangeTblRef {
    const _j = ({} as RangeTblRef);
    _o.set(_j, "rtindex", _p?.rtindex);
    return _j;
  },
  joinExpr(_p?: JoinExpr): JoinExpr {
    const _j = ({} as JoinExpr);
    _o.set(_j, "jointype", _p?.jointype);
    _o.set(_j, "isNatural", _p?.isNatural);
    _o.set(_j, "larg", _p?.larg);
    _o.set(_j, "rarg", _p?.rarg);
    _o.set(_j, "usingClause", _p?.usingClause);
    _o.set(_j, "join_using_alias", _p?.join_using_alias);
    _o.set(_j, "quals", _p?.quals);
    _o.set(_j, "alias", _p?.alias);
    _o.set(_j, "rtindex", _p?.rtindex);
    return _j;
  },
  fromExpr(_p?: FromExpr): FromExpr {
    const _j = ({} as FromExpr);
    _o.set(_j, "fromlist", _p?.fromlist);
    _o.set(_j, "quals", _p?.quals);
    return _j;
  },
  onConflictExpr(_p?: OnConflictExpr): OnConflictExpr {
    const _j = ({} as OnConflictExpr);
    _o.set(_j, "action", _p?.action);
    _o.set(_j, "arbiterElems", _p?.arbiterElems);
    _o.set(_j, "arbiterWhere", _p?.arbiterWhere);
    _o.set(_j, "constraint", _p?.constraint);
    _o.set(_j, "onConflictSet", _p?.onConflictSet);
    _o.set(_j, "onConflictWhere", _p?.onConflictWhere);
    _o.set(_j, "exclRelIndex", _p?.exclRelIndex);
    _o.set(_j, "exclRelTlist", _p?.exclRelTlist);
    return _j;
  },
  query(_p?: Query): Query {
    const _j = ({} as Query);
    _o.set(_j, "commandType", _p?.commandType);
    _o.set(_j, "querySource", _p?.querySource);
    _o.set(_j, "canSetTag", _p?.canSetTag);
    _o.set(_j, "utilityStmt", _p?.utilityStmt);
    _o.set(_j, "resultRelation", _p?.resultRelation);
    _o.set(_j, "hasAggs", _p?.hasAggs);
    _o.set(_j, "hasWindowFuncs", _p?.hasWindowFuncs);
    _o.set(_j, "hasTargetSRFs", _p?.hasTargetSRFs);
    _o.set(_j, "hasSubLinks", _p?.hasSubLinks);
    _o.set(_j, "hasDistinctOn", _p?.hasDistinctOn);
    _o.set(_j, "hasRecursive", _p?.hasRecursive);
    _o.set(_j, "hasModifyingCTE", _p?.hasModifyingCTE);
    _o.set(_j, "hasForUpdate", _p?.hasForUpdate);
    _o.set(_j, "hasRowSecurity", _p?.hasRowSecurity);
    _o.set(_j, "isReturn", _p?.isReturn);
    _o.set(_j, "cteList", _p?.cteList);
    _o.set(_j, "rtable", _p?.rtable);
    _o.set(_j, "rteperminfos", _p?.rteperminfos);
    _o.set(_j, "jointree", _p?.jointree);
    _o.set(_j, "mergeActionList", _p?.mergeActionList);
    _o.set(_j, "mergeUseOuterJoin", _p?.mergeUseOuterJoin);
    _o.set(_j, "targetList", _p?.targetList);
    _o.set(_j, "override", _p?.override);
    _o.set(_j, "onConflict", _p?.onConflict);
    _o.set(_j, "returningList", _p?.returningList);
    _o.set(_j, "groupClause", _p?.groupClause);
    _o.set(_j, "groupDistinct", _p?.groupDistinct);
    _o.set(_j, "groupingSets", _p?.groupingSets);
    _o.set(_j, "havingQual", _p?.havingQual);
    _o.set(_j, "windowClause", _p?.windowClause);
    _o.set(_j, "distinctClause", _p?.distinctClause);
    _o.set(_j, "sortClause", _p?.sortClause);
    _o.set(_j, "limitOffset", _p?.limitOffset);
    _o.set(_j, "limitCount", _p?.limitCount);
    _o.set(_j, "limitOption", _p?.limitOption);
    _o.set(_j, "rowMarks", _p?.rowMarks);
    _o.set(_j, "setOperations", _p?.setOperations);
    _o.set(_j, "constraintDeps", _p?.constraintDeps);
    _o.set(_j, "withCheckOptions", _p?.withCheckOptions);
    _o.set(_j, "stmt_location", _p?.stmt_location);
    _o.set(_j, "stmt_len", _p?.stmt_len);
    return _j;
  },
  typeName(_p?: TypeName): TypeName {
    const _j = ({} as TypeName);
    _o.set(_j, "names", _p?.names);
    _o.set(_j, "typeOid", _p?.typeOid);
    _o.set(_j, "setof", _p?.setof);
    _o.set(_j, "pct_type", _p?.pct_type);
    _o.set(_j, "typmods", _p?.typmods);
    _o.set(_j, "typemod", _p?.typemod);
    _o.set(_j, "arrayBounds", _p?.arrayBounds);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  columnRef(_p?: ColumnRef): ColumnRef {
    const _j = ({} as ColumnRef);
    _o.set(_j, "fields", _p?.fields);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  paramRef(_p?: ParamRef): ParamRef {
    const _j = ({} as ParamRef);
    _o.set(_j, "number", _p?.number);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  aExpr(_p?: A_Expr): A_Expr {
    const _j = ({} as A_Expr);
    _o.set(_j, "kind", _p?.kind);
    _o.set(_j, "name", _p?.name);
    _o.set(_j, "lexpr", _p?.lexpr);
    _o.set(_j, "rexpr", _p?.rexpr);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  typeCast(_p?: TypeCast): TypeCast {
    const _j = ({} as TypeCast);
    _o.set(_j, "arg", _p?.arg);
    _o.set(_j, "typeName", _p?.typeName);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  collateClause(_p?: CollateClause): CollateClause {
    const _j = ({} as CollateClause);
    _o.set(_j, "arg", _p?.arg);
    _o.set(_j, "collname", _p?.collname);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  roleSpec(_p?: RoleSpec): RoleSpec {
    const _j = ({} as RoleSpec);
    _o.set(_j, "roletype", _p?.roletype);
    _o.set(_j, "rolename", _p?.rolename);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  funcCall(_p?: FuncCall): FuncCall {
    const _j = ({} as FuncCall);
    _o.set(_j, "funcname", _p?.funcname);
    _o.set(_j, "args", _p?.args);
    _o.set(_j, "agg_order", _p?.agg_order);
    _o.set(_j, "agg_filter", _p?.agg_filter);
    _o.set(_j, "over", _p?.over);
    _o.set(_j, "agg_within_group", _p?.agg_within_group);
    _o.set(_j, "agg_star", _p?.agg_star);
    _o.set(_j, "agg_distinct", _p?.agg_distinct);
    _o.set(_j, "func_variadic", _p?.func_variadic);
    _o.set(_j, "funcformat", _p?.funcformat);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  aStar(_p?: A_Star): A_Star {
    const _j = ({} as A_Star);
    return _j;
  },
  aIndices(_p?: A_Indices): A_Indices {
    const _j = ({} as A_Indices);
    _o.set(_j, "is_slice", _p?.is_slice);
    _o.set(_j, "lidx", _p?.lidx);
    _o.set(_j, "uidx", _p?.uidx);
    return _j;
  },
  aIndirection(_p?: A_Indirection): A_Indirection {
    const _j = ({} as A_Indirection);
    _o.set(_j, "arg", _p?.arg);
    _o.set(_j, "indirection", _p?.indirection);
    return _j;
  },
  aArrayExpr(_p?: A_ArrayExpr): A_ArrayExpr {
    const _j = ({} as A_ArrayExpr);
    _o.set(_j, "elements", _p?.elements);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  resTarget(_p?: ResTarget): ResTarget {
    const _j = ({} as ResTarget);
    _o.set(_j, "name", _p?.name);
    _o.set(_j, "indirection", _p?.indirection);
    _o.set(_j, "val", _p?.val);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  multiAssignRef(_p?: MultiAssignRef): MultiAssignRef {
    const _j = ({} as MultiAssignRef);
    _o.set(_j, "source", _p?.source);
    _o.set(_j, "colno", _p?.colno);
    _o.set(_j, "ncolumns", _p?.ncolumns);
    return _j;
  },
  sortBy(_p?: SortBy): SortBy {
    const _j = ({} as SortBy);
    _o.set(_j, "node", _p?.node);
    _o.set(_j, "sortby_dir", _p?.sortby_dir);
    _o.set(_j, "sortby_nulls", _p?.sortby_nulls);
    _o.set(_j, "useOp", _p?.useOp);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  windowDef(_p?: WindowDef): WindowDef {
    const _j = ({} as WindowDef);
    _o.set(_j, "name", _p?.name);
    _o.set(_j, "refname", _p?.refname);
    _o.set(_j, "partitionClause", _p?.partitionClause);
    _o.set(_j, "orderClause", _p?.orderClause);
    _o.set(_j, "frameOptions", _p?.frameOptions);
    _o.set(_j, "startOffset", _p?.startOffset);
    _o.set(_j, "endOffset", _p?.endOffset);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  rangeSubselect(_p?: RangeSubselect): RangeSubselect {
    const _j = ({} as RangeSubselect);
    _o.set(_j, "lateral", _p?.lateral);
    _o.set(_j, "subquery", _p?.subquery);
    _o.set(_j, "alias", _p?.alias);
    return _j;
  },
  rangeFunction(_p?: RangeFunction): RangeFunction {
    const _j = ({} as RangeFunction);
    _o.set(_j, "lateral", _p?.lateral);
    _o.set(_j, "ordinality", _p?.ordinality);
    _o.set(_j, "is_rowsfrom", _p?.is_rowsfrom);
    _o.set(_j, "functions", _p?.functions);
    _o.set(_j, "alias", _p?.alias);
    _o.set(_j, "coldeflist", _p?.coldeflist);
    return _j;
  },
  rangeTableFunc(_p?: RangeTableFunc): RangeTableFunc {
    const _j = ({} as RangeTableFunc);
    _o.set(_j, "lateral", _p?.lateral);
    _o.set(_j, "docexpr", _p?.docexpr);
    _o.set(_j, "rowexpr", _p?.rowexpr);
    _o.set(_j, "namespaces", _p?.namespaces);
    _o.set(_j, "columns", _p?.columns);
    _o.set(_j, "alias", _p?.alias);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  rangeTableFuncCol(_p?: RangeTableFuncCol): RangeTableFuncCol {
    const _j = ({} as RangeTableFuncCol);
    _o.set(_j, "colname", _p?.colname);
    _o.set(_j, "typeName", _p?.typeName);
    _o.set(_j, "for_ordinality", _p?.for_ordinality);
    _o.set(_j, "is_not_null", _p?.is_not_null);
    _o.set(_j, "colexpr", _p?.colexpr);
    _o.set(_j, "coldefexpr", _p?.coldefexpr);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  rangeTableSample(_p?: RangeTableSample): RangeTableSample {
    const _j = ({} as RangeTableSample);
    _o.set(_j, "relation", _p?.relation);
    _o.set(_j, "method", _p?.method);
    _o.set(_j, "args", _p?.args);
    _o.set(_j, "repeatable", _p?.repeatable);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  columnDef(_p?: ColumnDef): ColumnDef {
    const _j = ({} as ColumnDef);
    _o.set(_j, "colname", _p?.colname);
    _o.set(_j, "typeName", _p?.typeName);
    _o.set(_j, "compression", _p?.compression);
    _o.set(_j, "inhcount", _p?.inhcount);
    _o.set(_j, "is_local", _p?.is_local);
    _o.set(_j, "is_not_null", _p?.is_not_null);
    _o.set(_j, "is_from_type", _p?.is_from_type);
    _o.set(_j, "storage", _p?.storage);
    _o.set(_j, "storage_name", _p?.storage_name);
    _o.set(_j, "raw_default", _p?.raw_default);
    _o.set(_j, "cooked_default", _p?.cooked_default);
    _o.set(_j, "identity", _p?.identity);
    _o.set(_j, "identitySequence", _p?.identitySequence);
    _o.set(_j, "generated", _p?.generated);
    _o.set(_j, "collClause", _p?.collClause);
    _o.set(_j, "collOid", _p?.collOid);
    _o.set(_j, "constraints", _p?.constraints);
    _o.set(_j, "fdwoptions", _p?.fdwoptions);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  tableLikeClause(_p?: TableLikeClause): TableLikeClause {
    const _j = ({} as TableLikeClause);
    _o.set(_j, "relation", _p?.relation);
    _o.set(_j, "options", _p?.options);
    _o.set(_j, "relationOid", _p?.relationOid);
    return _j;
  },
  indexElem(_p?: IndexElem): IndexElem {
    const _j = ({} as IndexElem);
    _o.set(_j, "name", _p?.name);
    _o.set(_j, "expr", _p?.expr);
    _o.set(_j, "indexcolname", _p?.indexcolname);
    _o.set(_j, "collation", _p?.collation);
    _o.set(_j, "opclass", _p?.opclass);
    _o.set(_j, "opclassopts", _p?.opclassopts);
    _o.set(_j, "ordering", _p?.ordering);
    _o.set(_j, "nulls_ordering", _p?.nulls_ordering);
    return _j;
  },
  defElem(_p?: DefElem): DefElem {
    const _j = ({} as DefElem);
    _o.set(_j, "defnamespace", _p?.defnamespace);
    _o.set(_j, "defname", _p?.defname);
    _o.set(_j, "arg", _p?.arg);
    _o.set(_j, "defaction", _p?.defaction);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  lockingClause(_p?: LockingClause): LockingClause {
    const _j = ({} as LockingClause);
    _o.set(_j, "lockedRels", _p?.lockedRels);
    _o.set(_j, "strength", _p?.strength);
    _o.set(_j, "waitPolicy", _p?.waitPolicy);
    return _j;
  },
  xmlSerialize(_p?: XmlSerialize): XmlSerialize {
    const _j = ({} as XmlSerialize);
    _o.set(_j, "xmloption", _p?.xmloption);
    _o.set(_j, "expr", _p?.expr);
    _o.set(_j, "typeName", _p?.typeName);
    _o.set(_j, "indent", _p?.indent);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  partitionElem(_p?: PartitionElem): PartitionElem {
    const _j = ({} as PartitionElem);
    _o.set(_j, "name", _p?.name);
    _o.set(_j, "expr", _p?.expr);
    _o.set(_j, "collation", _p?.collation);
    _o.set(_j, "opclass", _p?.opclass);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  partitionSpec(_p?: PartitionSpec): PartitionSpec {
    const _j = ({} as PartitionSpec);
    _o.set(_j, "strategy", _p?.strategy);
    _o.set(_j, "partParams", _p?.partParams);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  partitionBoundSpec(_p?: PartitionBoundSpec): PartitionBoundSpec {
    const _j = ({} as PartitionBoundSpec);
    _o.set(_j, "strategy", _p?.strategy);
    _o.set(_j, "is_default", _p?.is_default);
    _o.set(_j, "modulus", _p?.modulus);
    _o.set(_j, "remainder", _p?.remainder);
    _o.set(_j, "listdatums", _p?.listdatums);
    _o.set(_j, "lowerdatums", _p?.lowerdatums);
    _o.set(_j, "upperdatums", _p?.upperdatums);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  partitionRangeDatum(_p?: PartitionRangeDatum): PartitionRangeDatum {
    const _j = ({} as PartitionRangeDatum);
    _o.set(_j, "kind", _p?.kind);
    _o.set(_j, "value", _p?.value);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  partitionCmd(_p?: PartitionCmd): PartitionCmd {
    const _j = ({} as PartitionCmd);
    _o.set(_j, "name", _p?.name);
    _o.set(_j, "bound", _p?.bound);
    _o.set(_j, "concurrent", _p?.concurrent);
    return _j;
  },
  rangeTblEntry(_p?: RangeTblEntry): RangeTblEntry {
    const _j = ({} as RangeTblEntry);
    _o.set(_j, "rtekind", _p?.rtekind);
    _o.set(_j, "relid", _p?.relid);
    _o.set(_j, "relkind", _p?.relkind);
    _o.set(_j, "rellockmode", _p?.rellockmode);
    _o.set(_j, "tablesample", _p?.tablesample);
    _o.set(_j, "perminfoindex", _p?.perminfoindex);
    _o.set(_j, "subquery", _p?.subquery);
    _o.set(_j, "security_barrier", _p?.security_barrier);
    _o.set(_j, "jointype", _p?.jointype);
    _o.set(_j, "joinmergedcols", _p?.joinmergedcols);
    _o.set(_j, "joinaliasvars", _p?.joinaliasvars);
    _o.set(_j, "joinleftcols", _p?.joinleftcols);
    _o.set(_j, "joinrightcols", _p?.joinrightcols);
    _o.set(_j, "join_using_alias", _p?.join_using_alias);
    _o.set(_j, "functions", _p?.functions);
    _o.set(_j, "funcordinality", _p?.funcordinality);
    _o.set(_j, "tablefunc", _p?.tablefunc);
    _o.set(_j, "values_lists", _p?.values_lists);
    _o.set(_j, "ctename", _p?.ctename);
    _o.set(_j, "ctelevelsup", _p?.ctelevelsup);
    _o.set(_j, "self_reference", _p?.self_reference);
    _o.set(_j, "coltypes", _p?.coltypes);
    _o.set(_j, "coltypmods", _p?.coltypmods);
    _o.set(_j, "colcollations", _p?.colcollations);
    _o.set(_j, "enrname", _p?.enrname);
    _o.set(_j, "enrtuples", _p?.enrtuples);
    _o.set(_j, "alias", _p?.alias);
    _o.set(_j, "eref", _p?.eref);
    _o.set(_j, "lateral", _p?.lateral);
    _o.set(_j, "inh", _p?.inh);
    _o.set(_j, "inFromCl", _p?.inFromCl);
    _o.set(_j, "securityQuals", _p?.securityQuals);
    return _j;
  },
  rtePermissionInfo(_p?: RTEPermissionInfo): RTEPermissionInfo {
    const _j = ({} as RTEPermissionInfo);
    _o.set(_j, "relid", _p?.relid);
    _o.set(_j, "inh", _p?.inh);
    _o.set(_j, "requiredPerms", _p?.requiredPerms);
    _o.set(_j, "checkAsUser", _p?.checkAsUser);
    _o.set(_j, "selectedCols", _p?.selectedCols);
    _o.set(_j, "insertedCols", _p?.insertedCols);
    _o.set(_j, "updatedCols", _p?.updatedCols);
    return _j;
  },
  rangeTblFunction(_p?: RangeTblFunction): RangeTblFunction {
    const _j = ({} as RangeTblFunction);
    _o.set(_j, "funcexpr", _p?.funcexpr);
    _o.set(_j, "funccolcount", _p?.funccolcount);
    _o.set(_j, "funccolnames", _p?.funccolnames);
    _o.set(_j, "funccoltypes", _p?.funccoltypes);
    _o.set(_j, "funccoltypmods", _p?.funccoltypmods);
    _o.set(_j, "funccolcollations", _p?.funccolcollations);
    _o.set(_j, "funcparams", _p?.funcparams);
    return _j;
  },
  tableSampleClause(_p?: TableSampleClause): TableSampleClause {
    const _j = ({} as TableSampleClause);
    _o.set(_j, "tsmhandler", _p?.tsmhandler);
    _o.set(_j, "args", _p?.args);
    _o.set(_j, "repeatable", _p?.repeatable);
    return _j;
  },
  withCheckOption(_p?: WithCheckOption): WithCheckOption {
    const _j = ({} as WithCheckOption);
    _o.set(_j, "kind", _p?.kind);
    _o.set(_j, "relname", _p?.relname);
    _o.set(_j, "polname", _p?.polname);
    _o.set(_j, "qual", _p?.qual);
    _o.set(_j, "cascaded", _p?.cascaded);
    return _j;
  },
  sortGroupClause(_p?: SortGroupClause): SortGroupClause {
    const _j = ({} as SortGroupClause);
    _o.set(_j, "tleSortGroupRef", _p?.tleSortGroupRef);
    _o.set(_j, "eqop", _p?.eqop);
    _o.set(_j, "sortop", _p?.sortop);
    _o.set(_j, "nulls_first", _p?.nulls_first);
    _o.set(_j, "hashable", _p?.hashable);
    return _j;
  },
  groupingSet(_p?: GroupingSet): GroupingSet {
    const _j = ({} as GroupingSet);
    _o.set(_j, "kind", _p?.kind);
    _o.set(_j, "content", _p?.content);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  windowClause(_p?: WindowClause): WindowClause {
    const _j = ({} as WindowClause);
    _o.set(_j, "name", _p?.name);
    _o.set(_j, "refname", _p?.refname);
    _o.set(_j, "partitionClause", _p?.partitionClause);
    _o.set(_j, "orderClause", _p?.orderClause);
    _o.set(_j, "frameOptions", _p?.frameOptions);
    _o.set(_j, "startOffset", _p?.startOffset);
    _o.set(_j, "endOffset", _p?.endOffset);
    _o.set(_j, "runCondition", _p?.runCondition);
    _o.set(_j, "startInRangeFunc", _p?.startInRangeFunc);
    _o.set(_j, "endInRangeFunc", _p?.endInRangeFunc);
    _o.set(_j, "inRangeColl", _p?.inRangeColl);
    _o.set(_j, "inRangeAsc", _p?.inRangeAsc);
    _o.set(_j, "inRangeNullsFirst", _p?.inRangeNullsFirst);
    _o.set(_j, "winref", _p?.winref);
    _o.set(_j, "copiedOrder", _p?.copiedOrder);
    return _j;
  },
  rowMarkClause(_p?: RowMarkClause): RowMarkClause {
    const _j = ({} as RowMarkClause);
    _o.set(_j, "rti", _p?.rti);
    _o.set(_j, "strength", _p?.strength);
    _o.set(_j, "waitPolicy", _p?.waitPolicy);
    _o.set(_j, "pushedDown", _p?.pushedDown);
    return _j;
  },
  withClause(_p?: WithClause): WithClause {
    const _j = ({} as WithClause);
    _o.set(_j, "ctes", _p?.ctes);
    _o.set(_j, "recursive", _p?.recursive);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  inferClause(_p?: InferClause): InferClause {
    const _j = ({} as InferClause);
    _o.set(_j, "indexElems", _p?.indexElems);
    _o.set(_j, "whereClause", _p?.whereClause);
    _o.set(_j, "conname", _p?.conname);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  onConflictClause(_p?: OnConflictClause): OnConflictClause {
    const _j = ({} as OnConflictClause);
    _o.set(_j, "action", _p?.action);
    _o.set(_j, "infer", _p?.infer);
    _o.set(_j, "targetList", _p?.targetList);
    _o.set(_j, "whereClause", _p?.whereClause);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  cteSearchClause(_p?: CTESearchClause): CTESearchClause {
    const _j = ({} as CTESearchClause);
    _o.set(_j, "search_col_list", _p?.search_col_list);
    _o.set(_j, "search_breadth_first", _p?.search_breadth_first);
    _o.set(_j, "search_seq_column", _p?.search_seq_column);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  cteCycleClause(_p?: CTECycleClause): CTECycleClause {
    const _j = ({} as CTECycleClause);
    _o.set(_j, "cycle_col_list", _p?.cycle_col_list);
    _o.set(_j, "cycle_mark_column", _p?.cycle_mark_column);
    _o.set(_j, "cycle_mark_value", _p?.cycle_mark_value);
    _o.set(_j, "cycle_mark_default", _p?.cycle_mark_default);
    _o.set(_j, "cycle_path_column", _p?.cycle_path_column);
    _o.set(_j, "location", _p?.location);
    _o.set(_j, "cycle_mark_type", _p?.cycle_mark_type);
    _o.set(_j, "cycle_mark_typmod", _p?.cycle_mark_typmod);
    _o.set(_j, "cycle_mark_collation", _p?.cycle_mark_collation);
    _o.set(_j, "cycle_mark_neop", _p?.cycle_mark_neop);
    return _j;
  },
  commonTableExpr(_p?: CommonTableExpr): CommonTableExpr {
    const _j = ({} as CommonTableExpr);
    _o.set(_j, "ctename", _p?.ctename);
    _o.set(_j, "aliascolnames", _p?.aliascolnames);
    _o.set(_j, "ctematerialized", _p?.ctematerialized);
    _o.set(_j, "ctequery", _p?.ctequery);
    _o.set(_j, "search_clause", _p?.search_clause);
    _o.set(_j, "cycle_clause", _p?.cycle_clause);
    _o.set(_j, "location", _p?.location);
    _o.set(_j, "cterecursive", _p?.cterecursive);
    _o.set(_j, "cterefcount", _p?.cterefcount);
    _o.set(_j, "ctecolnames", _p?.ctecolnames);
    _o.set(_j, "ctecoltypes", _p?.ctecoltypes);
    _o.set(_j, "ctecoltypmods", _p?.ctecoltypmods);
    _o.set(_j, "ctecolcollations", _p?.ctecolcollations);
    return _j;
  },
  mergeWhenClause(_p?: MergeWhenClause): MergeWhenClause {
    const _j = ({} as MergeWhenClause);
    _o.set(_j, "matched", _p?.matched);
    _o.set(_j, "commandType", _p?.commandType);
    _o.set(_j, "override", _p?.override);
    _o.set(_j, "condition", _p?.condition);
    _o.set(_j, "targetList", _p?.targetList);
    _o.set(_j, "values", _p?.values);
    return _j;
  },
  mergeAction(_p?: MergeAction): MergeAction {
    const _j = ({} as MergeAction);
    _o.set(_j, "matched", _p?.matched);
    _o.set(_j, "commandType", _p?.commandType);
    _o.set(_j, "override", _p?.override);
    _o.set(_j, "qual", _p?.qual);
    _o.set(_j, "targetList", _p?.targetList);
    _o.set(_j, "updateColnos", _p?.updateColnos);
    return _j;
  },
  triggerTransition(_p?: TriggerTransition): TriggerTransition {
    const _j = ({} as TriggerTransition);
    _o.set(_j, "name", _p?.name);
    _o.set(_j, "isNew", _p?.isNew);
    _o.set(_j, "isTable", _p?.isTable);
    return _j;
  },
  jsonOutput(_p?: JsonOutput): JsonOutput {
    const _j = ({} as JsonOutput);
    _o.set(_j, "typeName", _p?.typeName);
    _o.set(_j, "returning", _p?.returning);
    return _j;
  },
  jsonKeyValue(_p?: JsonKeyValue): JsonKeyValue {
    const _j = ({} as JsonKeyValue);
    _o.set(_j, "key", _p?.key);
    _o.set(_j, "value", _p?.value);
    return _j;
  },
  jsonObjectConstructor(_p?: JsonObjectConstructor): JsonObjectConstructor {
    const _j = ({} as JsonObjectConstructor);
    _o.set(_j, "exprs", _p?.exprs);
    _o.set(_j, "output", _p?.output);
    _o.set(_j, "absent_on_null", _p?.absent_on_null);
    _o.set(_j, "unique", _p?.unique);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  jsonArrayConstructor(_p?: JsonArrayConstructor): JsonArrayConstructor {
    const _j = ({} as JsonArrayConstructor);
    _o.set(_j, "exprs", _p?.exprs);
    _o.set(_j, "output", _p?.output);
    _o.set(_j, "absent_on_null", _p?.absent_on_null);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  jsonArrayQueryConstructor(_p?: JsonArrayQueryConstructor): JsonArrayQueryConstructor {
    const _j = ({} as JsonArrayQueryConstructor);
    _o.set(_j, "query", _p?.query);
    _o.set(_j, "output", _p?.output);
    _o.set(_j, "format", _p?.format);
    _o.set(_j, "absent_on_null", _p?.absent_on_null);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  jsonAggConstructor(_p?: JsonAggConstructor): JsonAggConstructor {
    const _j = ({} as JsonAggConstructor);
    _o.set(_j, "output", _p?.output);
    _o.set(_j, "agg_filter", _p?.agg_filter);
    _o.set(_j, "agg_order", _p?.agg_order);
    _o.set(_j, "over", _p?.over);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  jsonObjectAgg(_p?: JsonObjectAgg): JsonObjectAgg {
    const _j = ({} as JsonObjectAgg);
    _o.set(_j, "constructor", _p?.constructor);
    _o.set(_j, "arg", _p?.arg);
    _o.set(_j, "absent_on_null", _p?.absent_on_null);
    _o.set(_j, "unique", _p?.unique);
    return _j;
  },
  jsonArrayAgg(_p?: JsonArrayAgg): JsonArrayAgg {
    const _j = ({} as JsonArrayAgg);
    _o.set(_j, "constructor", _p?.constructor);
    _o.set(_j, "arg", _p?.arg);
    _o.set(_j, "absent_on_null", _p?.absent_on_null);
    return _j;
  },
  rawStmt(_p?: RawStmt): RawStmt {
    const _j = ({} as RawStmt);
    _o.set(_j, "stmt", _p?.stmt);
    _o.set(_j, "stmt_location", _p?.stmt_location);
    _o.set(_j, "stmt_len", _p?.stmt_len);
    return _j;
  },
  insertStmt(_p?: InsertStmt): InsertStmt {
    const _j = ({} as InsertStmt);
    _o.set(_j, "relation", _p?.relation);
    _o.set(_j, "cols", _p?.cols);
    _o.set(_j, "selectStmt", _p?.selectStmt);
    _o.set(_j, "onConflictClause", _p?.onConflictClause);
    _o.set(_j, "returningList", _p?.returningList);
    _o.set(_j, "withClause", _p?.withClause);
    _o.set(_j, "override", _p?.override);
    return _j;
  },
  deleteStmt(_p?: DeleteStmt): DeleteStmt {
    const _j = ({} as DeleteStmt);
    _o.set(_j, "relation", _p?.relation);
    _o.set(_j, "usingClause", _p?.usingClause);
    _o.set(_j, "whereClause", _p?.whereClause);
    _o.set(_j, "returningList", _p?.returningList);
    _o.set(_j, "withClause", _p?.withClause);
    return _j;
  },
  updateStmt(_p?: UpdateStmt): UpdateStmt {
    const _j = ({} as UpdateStmt);
    _o.set(_j, "relation", _p?.relation);
    _o.set(_j, "targetList", _p?.targetList);
    _o.set(_j, "whereClause", _p?.whereClause);
    _o.set(_j, "fromClause", _p?.fromClause);
    _o.set(_j, "returningList", _p?.returningList);
    _o.set(_j, "withClause", _p?.withClause);
    return _j;
  },
  mergeStmt(_p?: MergeStmt): MergeStmt {
    const _j = ({} as MergeStmt);
    _o.set(_j, "relation", _p?.relation);
    _o.set(_j, "sourceRelation", _p?.sourceRelation);
    _o.set(_j, "joinCondition", _p?.joinCondition);
    _o.set(_j, "mergeWhenClauses", _p?.mergeWhenClauses);
    _o.set(_j, "withClause", _p?.withClause);
    return _j;
  },
  selectStmt(_p?: SelectStmt): SelectStmt {
    const _j = ({} as SelectStmt);
    _o.set(_j, "distinctClause", _p?.distinctClause);
    _o.set(_j, "intoClause", _p?.intoClause);
    _o.set(_j, "targetList", _p?.targetList);
    _o.set(_j, "fromClause", _p?.fromClause);
    _o.set(_j, "whereClause", _p?.whereClause);
    _o.set(_j, "groupClause", _p?.groupClause);
    _o.set(_j, "groupDistinct", _p?.groupDistinct);
    _o.set(_j, "havingClause", _p?.havingClause);
    _o.set(_j, "windowClause", _p?.windowClause);
    _o.set(_j, "valuesLists", _p?.valuesLists);
    _o.set(_j, "sortClause", _p?.sortClause);
    _o.set(_j, "limitOffset", _p?.limitOffset);
    _o.set(_j, "limitCount", _p?.limitCount);
    _o.set(_j, "limitOption", _p?.limitOption);
    _o.set(_j, "lockingClause", _p?.lockingClause);
    _o.set(_j, "withClause", _p?.withClause);
    _o.set(_j, "op", _p?.op);
    _o.set(_j, "all", _p?.all);
    _o.set(_j, "larg", _p?.larg);
    _o.set(_j, "rarg", _p?.rarg);
    return _j;
  },
  setOperationStmt(_p?: SetOperationStmt): SetOperationStmt {
    const _j = ({} as SetOperationStmt);
    _o.set(_j, "op", _p?.op);
    _o.set(_j, "all", _p?.all);
    _o.set(_j, "larg", _p?.larg);
    _o.set(_j, "rarg", _p?.rarg);
    _o.set(_j, "colTypes", _p?.colTypes);
    _o.set(_j, "colTypmods", _p?.colTypmods);
    _o.set(_j, "colCollations", _p?.colCollations);
    _o.set(_j, "groupClauses", _p?.groupClauses);
    return _j;
  },
  returnStmt(_p?: ReturnStmt): ReturnStmt {
    const _j = ({} as ReturnStmt);
    _o.set(_j, "returnval", _p?.returnval);
    return _j;
  },
  plAssignStmt(_p?: PLAssignStmt): PLAssignStmt {
    const _j = ({} as PLAssignStmt);
    _o.set(_j, "name", _p?.name);
    _o.set(_j, "indirection", _p?.indirection);
    _o.set(_j, "nnames", _p?.nnames);
    _o.set(_j, "val", _p?.val);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  createSchemaStmt(_p?: CreateSchemaStmt): CreateSchemaStmt {
    const _j = ({} as CreateSchemaStmt);
    _o.set(_j, "schemaname", _p?.schemaname);
    _o.set(_j, "authrole", _p?.authrole);
    _o.set(_j, "schemaElts", _p?.schemaElts);
    _o.set(_j, "if_not_exists", _p?.if_not_exists);
    return _j;
  },
  alterTableStmt(_p?: AlterTableStmt): AlterTableStmt {
    const _j = ({} as AlterTableStmt);
    _o.set(_j, "relation", _p?.relation);
    _o.set(_j, "cmds", _p?.cmds);
    _o.set(_j, "objtype", _p?.objtype);
    _o.set(_j, "missing_ok", _p?.missing_ok);
    return _j;
  },
  replicaIdentityStmt(_p?: ReplicaIdentityStmt): ReplicaIdentityStmt {
    const _j = ({} as ReplicaIdentityStmt);
    _o.set(_j, "identity_type", _p?.identity_type);
    _o.set(_j, "name", _p?.name);
    return _j;
  },
  alterTableCmd(_p?: AlterTableCmd): AlterTableCmd {
    const _j = ({} as AlterTableCmd);
    _o.set(_j, "subtype", _p?.subtype);
    _o.set(_j, "name", _p?.name);
    _o.set(_j, "num", _p?.num);
    _o.set(_j, "newowner", _p?.newowner);
    _o.set(_j, "def", _p?.def);
    _o.set(_j, "behavior", _p?.behavior);
    _o.set(_j, "missing_ok", _p?.missing_ok);
    _o.set(_j, "recurse", _p?.recurse);
    return _j;
  },
  alterCollationStmt(_p?: AlterCollationStmt): AlterCollationStmt {
    const _j = ({} as AlterCollationStmt);
    _o.set(_j, "collname", _p?.collname);
    return _j;
  },
  alterDomainStmt(_p?: AlterDomainStmt): AlterDomainStmt {
    const _j = ({} as AlterDomainStmt);
    _o.set(_j, "subtype", _p?.subtype);
    _o.set(_j, "typeName", _p?.typeName);
    _o.set(_j, "name", _p?.name);
    _o.set(_j, "def", _p?.def);
    _o.set(_j, "behavior", _p?.behavior);
    _o.set(_j, "missing_ok", _p?.missing_ok);
    return _j;
  },
  grantStmt(_p?: GrantStmt): GrantStmt {
    const _j = ({} as GrantStmt);
    _o.set(_j, "is_grant", _p?.is_grant);
    _o.set(_j, "targtype", _p?.targtype);
    _o.set(_j, "objtype", _p?.objtype);
    _o.set(_j, "objects", _p?.objects);
    _o.set(_j, "privileges", _p?.privileges);
    _o.set(_j, "grantees", _p?.grantees);
    _o.set(_j, "grant_option", _p?.grant_option);
    _o.set(_j, "grantor", _p?.grantor);
    _o.set(_j, "behavior", _p?.behavior);
    return _j;
  },
  objectWithArgs(_p?: ObjectWithArgs): ObjectWithArgs {
    const _j = ({} as ObjectWithArgs);
    _o.set(_j, "objname", _p?.objname);
    _o.set(_j, "objargs", _p?.objargs);
    _o.set(_j, "objfuncargs", _p?.objfuncargs);
    _o.set(_j, "args_unspecified", _p?.args_unspecified);
    return _j;
  },
  accessPriv(_p?: AccessPriv): AccessPriv {
    const _j = ({} as AccessPriv);
    _o.set(_j, "priv_name", _p?.priv_name);
    _o.set(_j, "cols", _p?.cols);
    return _j;
  },
  grantRoleStmt(_p?: GrantRoleStmt): GrantRoleStmt {
    const _j = ({} as GrantRoleStmt);
    _o.set(_j, "granted_roles", _p?.granted_roles);
    _o.set(_j, "grantee_roles", _p?.grantee_roles);
    _o.set(_j, "is_grant", _p?.is_grant);
    _o.set(_j, "opt", _p?.opt);
    _o.set(_j, "grantor", _p?.grantor);
    _o.set(_j, "behavior", _p?.behavior);
    return _j;
  },
  alterDefaultPrivilegesStmt(_p?: AlterDefaultPrivilegesStmt): AlterDefaultPrivilegesStmt {
    const _j = ({} as AlterDefaultPrivilegesStmt);
    _o.set(_j, "options", _p?.options);
    _o.set(_j, "action", _p?.action);
    return _j;
  },
  copyStmt(_p?: CopyStmt): CopyStmt {
    const _j = ({} as CopyStmt);
    _o.set(_j, "relation", _p?.relation);
    _o.set(_j, "query", _p?.query);
    _o.set(_j, "attlist", _p?.attlist);
    _o.set(_j, "is_from", _p?.is_from);
    _o.set(_j, "is_program", _p?.is_program);
    _o.set(_j, "filename", _p?.filename);
    _o.set(_j, "options", _p?.options);
    _o.set(_j, "whereClause", _p?.whereClause);
    return _j;
  },
  variableSetStmt(_p?: VariableSetStmt): VariableSetStmt {
    const _j = ({} as VariableSetStmt);
    _o.set(_j, "kind", _p?.kind);
    _o.set(_j, "name", _p?.name);
    _o.set(_j, "args", _p?.args);
    _o.set(_j, "is_local", _p?.is_local);
    return _j;
  },
  variableShowStmt(_p?: VariableShowStmt): VariableShowStmt {
    const _j = ({} as VariableShowStmt);
    _o.set(_j, "name", _p?.name);
    return _j;
  },
  createStmt(_p?: CreateStmt): CreateStmt {
    const _j = ({} as CreateStmt);
    _o.set(_j, "relation", _p?.relation);
    _o.set(_j, "tableElts", _p?.tableElts);
    _o.set(_j, "inhRelations", _p?.inhRelations);
    _o.set(_j, "partbound", _p?.partbound);
    _o.set(_j, "partspec", _p?.partspec);
    _o.set(_j, "ofTypename", _p?.ofTypename);
    _o.set(_j, "constraints", _p?.constraints);
    _o.set(_j, "options", _p?.options);
    _o.set(_j, "oncommit", _p?.oncommit);
    _o.set(_j, "tablespacename", _p?.tablespacename);
    _o.set(_j, "accessMethod", _p?.accessMethod);
    _o.set(_j, "if_not_exists", _p?.if_not_exists);
    return _j;
  },
  constraint(_p?: Constraint): Constraint {
    const _j = ({} as Constraint);
    _o.set(_j, "contype", _p?.contype);
    _o.set(_j, "conname", _p?.conname);
    _o.set(_j, "deferrable", _p?.deferrable);
    _o.set(_j, "initdeferred", _p?.initdeferred);
    _o.set(_j, "location", _p?.location);
    _o.set(_j, "is_no_inherit", _p?.is_no_inherit);
    _o.set(_j, "raw_expr", _p?.raw_expr);
    _o.set(_j, "cooked_expr", _p?.cooked_expr);
    _o.set(_j, "generated_when", _p?.generated_when);
    _o.set(_j, "nulls_not_distinct", _p?.nulls_not_distinct);
    _o.set(_j, "keys", _p?.keys);
    _o.set(_j, "including", _p?.including);
    _o.set(_j, "exclusions", _p?.exclusions);
    _o.set(_j, "options", _p?.options);
    _o.set(_j, "indexname", _p?.indexname);
    _o.set(_j, "indexspace", _p?.indexspace);
    _o.set(_j, "reset_default_tblspc", _p?.reset_default_tblspc);
    _o.set(_j, "access_method", _p?.access_method);
    _o.set(_j, "where_clause", _p?.where_clause);
    _o.set(_j, "pktable", _p?.pktable);
    _o.set(_j, "fk_attrs", _p?.fk_attrs);
    _o.set(_j, "pk_attrs", _p?.pk_attrs);
    _o.set(_j, "fk_matchtype", _p?.fk_matchtype);
    _o.set(_j, "fk_upd_action", _p?.fk_upd_action);
    _o.set(_j, "fk_del_action", _p?.fk_del_action);
    _o.set(_j, "fk_del_set_cols", _p?.fk_del_set_cols);
    _o.set(_j, "old_conpfeqop", _p?.old_conpfeqop);
    _o.set(_j, "old_pktable_oid", _p?.old_pktable_oid);
    _o.set(_j, "skip_validation", _p?.skip_validation);
    _o.set(_j, "initially_valid", _p?.initially_valid);
    return _j;
  },
  createTableSpaceStmt(_p?: CreateTableSpaceStmt): CreateTableSpaceStmt {
    const _j = ({} as CreateTableSpaceStmt);
    _o.set(_j, "tablespacename", _p?.tablespacename);
    _o.set(_j, "owner", _p?.owner);
    _o.set(_j, "location", _p?.location);
    _o.set(_j, "options", _p?.options);
    return _j;
  },
  dropTableSpaceStmt(_p?: DropTableSpaceStmt): DropTableSpaceStmt {
    const _j = ({} as DropTableSpaceStmt);
    _o.set(_j, "tablespacename", _p?.tablespacename);
    _o.set(_j, "missing_ok", _p?.missing_ok);
    return _j;
  },
  alterTableSpaceOptionsStmt(_p?: AlterTableSpaceOptionsStmt): AlterTableSpaceOptionsStmt {
    const _j = ({} as AlterTableSpaceOptionsStmt);
    _o.set(_j, "tablespacename", _p?.tablespacename);
    _o.set(_j, "options", _p?.options);
    _o.set(_j, "isReset", _p?.isReset);
    return _j;
  },
  alterTableMoveAllStmt(_p?: AlterTableMoveAllStmt): AlterTableMoveAllStmt {
    const _j = ({} as AlterTableMoveAllStmt);
    _o.set(_j, "orig_tablespacename", _p?.orig_tablespacename);
    _o.set(_j, "objtype", _p?.objtype);
    _o.set(_j, "roles", _p?.roles);
    _o.set(_j, "new_tablespacename", _p?.new_tablespacename);
    _o.set(_j, "nowait", _p?.nowait);
    return _j;
  },
  createExtensionStmt(_p?: CreateExtensionStmt): CreateExtensionStmt {
    const _j = ({} as CreateExtensionStmt);
    _o.set(_j, "extname", _p?.extname);
    _o.set(_j, "if_not_exists", _p?.if_not_exists);
    _o.set(_j, "options", _p?.options);
    return _j;
  },
  alterExtensionStmt(_p?: AlterExtensionStmt): AlterExtensionStmt {
    const _j = ({} as AlterExtensionStmt);
    _o.set(_j, "extname", _p?.extname);
    _o.set(_j, "options", _p?.options);
    return _j;
  },
  alterExtensionContentsStmt(_p?: AlterExtensionContentsStmt): AlterExtensionContentsStmt {
    const _j = ({} as AlterExtensionContentsStmt);
    _o.set(_j, "extname", _p?.extname);
    _o.set(_j, "action", _p?.action);
    _o.set(_j, "objtype", _p?.objtype);
    _o.set(_j, "object", _p?.object);
    return _j;
  },
  createFdwStmt(_p?: CreateFdwStmt): CreateFdwStmt {
    const _j = ({} as CreateFdwStmt);
    _o.set(_j, "fdwname", _p?.fdwname);
    _o.set(_j, "func_options", _p?.func_options);
    _o.set(_j, "options", _p?.options);
    return _j;
  },
  alterFdwStmt(_p?: AlterFdwStmt): AlterFdwStmt {
    const _j = ({} as AlterFdwStmt);
    _o.set(_j, "fdwname", _p?.fdwname);
    _o.set(_j, "func_options", _p?.func_options);
    _o.set(_j, "options", _p?.options);
    return _j;
  },
  createForeignServerStmt(_p?: CreateForeignServerStmt): CreateForeignServerStmt {
    const _j = ({} as CreateForeignServerStmt);
    _o.set(_j, "servername", _p?.servername);
    _o.set(_j, "servertype", _p?.servertype);
    _o.set(_j, "version", _p?.version);
    _o.set(_j, "fdwname", _p?.fdwname);
    _o.set(_j, "if_not_exists", _p?.if_not_exists);
    _o.set(_j, "options", _p?.options);
    return _j;
  },
  alterForeignServerStmt(_p?: AlterForeignServerStmt): AlterForeignServerStmt {
    const _j = ({} as AlterForeignServerStmt);
    _o.set(_j, "servername", _p?.servername);
    _o.set(_j, "version", _p?.version);
    _o.set(_j, "options", _p?.options);
    _o.set(_j, "has_version", _p?.has_version);
    return _j;
  },
  createForeignTableStmt(_p?: CreateForeignTableStmt): CreateForeignTableStmt {
    const _j = ({} as CreateForeignTableStmt);
    _o.set(_j, "base", _p?.base);
    _o.set(_j, "servername", _p?.servername);
    _o.set(_j, "options", _p?.options);
    return _j;
  },
  createUserMappingStmt(_p?: CreateUserMappingStmt): CreateUserMappingStmt {
    const _j = ({} as CreateUserMappingStmt);
    _o.set(_j, "user", _p?.user);
    _o.set(_j, "servername", _p?.servername);
    _o.set(_j, "if_not_exists", _p?.if_not_exists);
    _o.set(_j, "options", _p?.options);
    return _j;
  },
  alterUserMappingStmt(_p?: AlterUserMappingStmt): AlterUserMappingStmt {
    const _j = ({} as AlterUserMappingStmt);
    _o.set(_j, "user", _p?.user);
    _o.set(_j, "servername", _p?.servername);
    _o.set(_j, "options", _p?.options);
    return _j;
  },
  dropUserMappingStmt(_p?: DropUserMappingStmt): DropUserMappingStmt {
    const _j = ({} as DropUserMappingStmt);
    _o.set(_j, "user", _p?.user);
    _o.set(_j, "servername", _p?.servername);
    _o.set(_j, "missing_ok", _p?.missing_ok);
    return _j;
  },
  importForeignSchemaStmt(_p?: ImportForeignSchemaStmt): ImportForeignSchemaStmt {
    const _j = ({} as ImportForeignSchemaStmt);
    _o.set(_j, "server_name", _p?.server_name);
    _o.set(_j, "remote_schema", _p?.remote_schema);
    _o.set(_j, "local_schema", _p?.local_schema);
    _o.set(_j, "list_type", _p?.list_type);
    _o.set(_j, "table_list", _p?.table_list);
    _o.set(_j, "options", _p?.options);
    return _j;
  },
  createPolicyStmt(_p?: CreatePolicyStmt): CreatePolicyStmt {
    const _j = ({} as CreatePolicyStmt);
    _o.set(_j, "policy_name", _p?.policy_name);
    _o.set(_j, "table", _p?.table);
    _o.set(_j, "cmd_name", _p?.cmd_name);
    _o.set(_j, "permissive", _p?.permissive);
    _o.set(_j, "roles", _p?.roles);
    _o.set(_j, "qual", _p?.qual);
    _o.set(_j, "with_check", _p?.with_check);
    return _j;
  },
  alterPolicyStmt(_p?: AlterPolicyStmt): AlterPolicyStmt {
    const _j = ({} as AlterPolicyStmt);
    _o.set(_j, "policy_name", _p?.policy_name);
    _o.set(_j, "table", _p?.table);
    _o.set(_j, "roles", _p?.roles);
    _o.set(_j, "qual", _p?.qual);
    _o.set(_j, "with_check", _p?.with_check);
    return _j;
  },
  createAmStmt(_p?: CreateAmStmt): CreateAmStmt {
    const _j = ({} as CreateAmStmt);
    _o.set(_j, "amname", _p?.amname);
    _o.set(_j, "handler_name", _p?.handler_name);
    _o.set(_j, "amtype", _p?.amtype);
    return _j;
  },
  createTrigStmt(_p?: CreateTrigStmt): CreateTrigStmt {
    const _j = ({} as CreateTrigStmt);
    _o.set(_j, "replace", _p?.replace);
    _o.set(_j, "isconstraint", _p?.isconstraint);
    _o.set(_j, "trigname", _p?.trigname);
    _o.set(_j, "relation", _p?.relation);
    _o.set(_j, "funcname", _p?.funcname);
    _o.set(_j, "args", _p?.args);
    _o.set(_j, "row", _p?.row);
    _o.set(_j, "timing", _p?.timing);
    _o.set(_j, "events", _p?.events);
    _o.set(_j, "columns", _p?.columns);
    _o.set(_j, "whenClause", _p?.whenClause);
    _o.set(_j, "transitionRels", _p?.transitionRels);
    _o.set(_j, "deferrable", _p?.deferrable);
    _o.set(_j, "initdeferred", _p?.initdeferred);
    _o.set(_j, "constrrel", _p?.constrrel);
    return _j;
  },
  createEventTrigStmt(_p?: CreateEventTrigStmt): CreateEventTrigStmt {
    const _j = ({} as CreateEventTrigStmt);
    _o.set(_j, "trigname", _p?.trigname);
    _o.set(_j, "eventname", _p?.eventname);
    _o.set(_j, "whenclause", _p?.whenclause);
    _o.set(_j, "funcname", _p?.funcname);
    return _j;
  },
  alterEventTrigStmt(_p?: AlterEventTrigStmt): AlterEventTrigStmt {
    const _j = ({} as AlterEventTrigStmt);
    _o.set(_j, "trigname", _p?.trigname);
    _o.set(_j, "tgenabled", _p?.tgenabled);
    return _j;
  },
  createpLangStmt(_p?: CreatePLangStmt): CreatePLangStmt {
    const _j = ({} as CreatePLangStmt);
    _o.set(_j, "replace", _p?.replace);
    _o.set(_j, "plname", _p?.plname);
    _o.set(_j, "plhandler", _p?.plhandler);
    _o.set(_j, "plinline", _p?.plinline);
    _o.set(_j, "plvalidator", _p?.plvalidator);
    _o.set(_j, "pltrusted", _p?.pltrusted);
    return _j;
  },
  createRoleStmt(_p?: CreateRoleStmt): CreateRoleStmt {
    const _j = ({} as CreateRoleStmt);
    _o.set(_j, "stmt_type", _p?.stmt_type);
    _o.set(_j, "role", _p?.role);
    _o.set(_j, "options", _p?.options);
    return _j;
  },
  alterRoleStmt(_p?: AlterRoleStmt): AlterRoleStmt {
    const _j = ({} as AlterRoleStmt);
    _o.set(_j, "role", _p?.role);
    _o.set(_j, "options", _p?.options);
    _o.set(_j, "action", _p?.action);
    return _j;
  },
  alterRoleSetStmt(_p?: AlterRoleSetStmt): AlterRoleSetStmt {
    const _j = ({} as AlterRoleSetStmt);
    _o.set(_j, "role", _p?.role);
    _o.set(_j, "database", _p?.database);
    _o.set(_j, "setstmt", _p?.setstmt);
    return _j;
  },
  dropRoleStmt(_p?: DropRoleStmt): DropRoleStmt {
    const _j = ({} as DropRoleStmt);
    _o.set(_j, "roles", _p?.roles);
    _o.set(_j, "missing_ok", _p?.missing_ok);
    return _j;
  },
  createSeqStmt(_p?: CreateSeqStmt): CreateSeqStmt {
    const _j = ({} as CreateSeqStmt);
    _o.set(_j, "sequence", _p?.sequence);
    _o.set(_j, "options", _p?.options);
    _o.set(_j, "ownerId", _p?.ownerId);
    _o.set(_j, "for_identity", _p?.for_identity);
    _o.set(_j, "if_not_exists", _p?.if_not_exists);
    return _j;
  },
  alterSeqStmt(_p?: AlterSeqStmt): AlterSeqStmt {
    const _j = ({} as AlterSeqStmt);
    _o.set(_j, "sequence", _p?.sequence);
    _o.set(_j, "options", _p?.options);
    _o.set(_j, "for_identity", _p?.for_identity);
    _o.set(_j, "missing_ok", _p?.missing_ok);
    return _j;
  },
  defineStmt(_p?: DefineStmt): DefineStmt {
    const _j = ({} as DefineStmt);
    _o.set(_j, "kind", _p?.kind);
    _o.set(_j, "oldstyle", _p?.oldstyle);
    _o.set(_j, "defnames", _p?.defnames);
    _o.set(_j, "args", _p?.args);
    _o.set(_j, "definition", _p?.definition);
    _o.set(_j, "if_not_exists", _p?.if_not_exists);
    _o.set(_j, "replace", _p?.replace);
    return _j;
  },
  createDomainStmt(_p?: CreateDomainStmt): CreateDomainStmt {
    const _j = ({} as CreateDomainStmt);
    _o.set(_j, "domainname", _p?.domainname);
    _o.set(_j, "typeName", _p?.typeName);
    _o.set(_j, "collClause", _p?.collClause);
    _o.set(_j, "constraints", _p?.constraints);
    return _j;
  },
  createOpClassStmt(_p?: CreateOpClassStmt): CreateOpClassStmt {
    const _j = ({} as CreateOpClassStmt);
    _o.set(_j, "opclassname", _p?.opclassname);
    _o.set(_j, "opfamilyname", _p?.opfamilyname);
    _o.set(_j, "amname", _p?.amname);
    _o.set(_j, "datatype", _p?.datatype);
    _o.set(_j, "items", _p?.items);
    _o.set(_j, "isDefault", _p?.isDefault);
    return _j;
  },
  createOpClassItem(_p?: CreateOpClassItem): CreateOpClassItem {
    const _j = ({} as CreateOpClassItem);
    _o.set(_j, "itemtype", _p?.itemtype);
    _o.set(_j, "name", _p?.name);
    _o.set(_j, "number", _p?.number);
    _o.set(_j, "order_family", _p?.order_family);
    _o.set(_j, "class_args", _p?.class_args);
    _o.set(_j, "storedtype", _p?.storedtype);
    return _j;
  },
  createOpFamilyStmt(_p?: CreateOpFamilyStmt): CreateOpFamilyStmt {
    const _j = ({} as CreateOpFamilyStmt);
    _o.set(_j, "opfamilyname", _p?.opfamilyname);
    _o.set(_j, "amname", _p?.amname);
    return _j;
  },
  alterOpFamilyStmt(_p?: AlterOpFamilyStmt): AlterOpFamilyStmt {
    const _j = ({} as AlterOpFamilyStmt);
    _o.set(_j, "opfamilyname", _p?.opfamilyname);
    _o.set(_j, "amname", _p?.amname);
    _o.set(_j, "isDrop", _p?.isDrop);
    _o.set(_j, "items", _p?.items);
    return _j;
  },
  dropStmt(_p?: DropStmt): DropStmt {
    const _j = ({} as DropStmt);
    _o.set(_j, "objects", _p?.objects);
    _o.set(_j, "removeType", _p?.removeType);
    _o.set(_j, "behavior", _p?.behavior);
    _o.set(_j, "missing_ok", _p?.missing_ok);
    _o.set(_j, "concurrent", _p?.concurrent);
    return _j;
  },
  truncateStmt(_p?: TruncateStmt): TruncateStmt {
    const _j = ({} as TruncateStmt);
    _o.set(_j, "relations", _p?.relations);
    _o.set(_j, "restart_seqs", _p?.restart_seqs);
    _o.set(_j, "behavior", _p?.behavior);
    return _j;
  },
  commentStmt(_p?: CommentStmt): CommentStmt {
    const _j = ({} as CommentStmt);
    _o.set(_j, "objtype", _p?.objtype);
    _o.set(_j, "object", _p?.object);
    _o.set(_j, "comment", _p?.comment);
    return _j;
  },
  secLabelStmt(_p?: SecLabelStmt): SecLabelStmt {
    const _j = ({} as SecLabelStmt);
    _o.set(_j, "objtype", _p?.objtype);
    _o.set(_j, "object", _p?.object);
    _o.set(_j, "provider", _p?.provider);
    _o.set(_j, "label", _p?.label);
    return _j;
  },
  declareCursorStmt(_p?: DeclareCursorStmt): DeclareCursorStmt {
    const _j = ({} as DeclareCursorStmt);
    _o.set(_j, "portalname", _p?.portalname);
    _o.set(_j, "options", _p?.options);
    _o.set(_j, "query", _p?.query);
    return _j;
  },
  closePortalStmt(_p?: ClosePortalStmt): ClosePortalStmt {
    const _j = ({} as ClosePortalStmt);
    _o.set(_j, "portalname", _p?.portalname);
    return _j;
  },
  fetchStmt(_p?: FetchStmt): FetchStmt {
    const _j = ({} as FetchStmt);
    _o.set(_j, "direction", _p?.direction);
    _o.set(_j, "howMany", _p?.howMany);
    _o.set(_j, "portalname", _p?.portalname);
    _o.set(_j, "ismove", _p?.ismove);
    return _j;
  },
  indexStmt(_p?: IndexStmt): IndexStmt {
    const _j = ({} as IndexStmt);
    _o.set(_j, "idxname", _p?.idxname);
    _o.set(_j, "relation", _p?.relation);
    _o.set(_j, "accessMethod", _p?.accessMethod);
    _o.set(_j, "tableSpace", _p?.tableSpace);
    _o.set(_j, "indexParams", _p?.indexParams);
    _o.set(_j, "indexIncludingParams", _p?.indexIncludingParams);
    _o.set(_j, "options", _p?.options);
    _o.set(_j, "whereClause", _p?.whereClause);
    _o.set(_j, "excludeOpNames", _p?.excludeOpNames);
    _o.set(_j, "idxcomment", _p?.idxcomment);
    _o.set(_j, "indexOid", _p?.indexOid);
    _o.set(_j, "oldNumber", _p?.oldNumber);
    _o.set(_j, "oldCreateSubid", _p?.oldCreateSubid);
    _o.set(_j, "oldFirstRelfilelocatorSubid", _p?.oldFirstRelfilelocatorSubid);
    _o.set(_j, "unique", _p?.unique);
    _o.set(_j, "nulls_not_distinct", _p?.nulls_not_distinct);
    _o.set(_j, "primary", _p?.primary);
    _o.set(_j, "isconstraint", _p?.isconstraint);
    _o.set(_j, "deferrable", _p?.deferrable);
    _o.set(_j, "initdeferred", _p?.initdeferred);
    _o.set(_j, "transformed", _p?.transformed);
    _o.set(_j, "concurrent", _p?.concurrent);
    _o.set(_j, "if_not_exists", _p?.if_not_exists);
    _o.set(_j, "reset_default_tblspc", _p?.reset_default_tblspc);
    return _j;
  },
  createStatsStmt(_p?: CreateStatsStmt): CreateStatsStmt {
    const _j = ({} as CreateStatsStmt);
    _o.set(_j, "defnames", _p?.defnames);
    _o.set(_j, "stat_types", _p?.stat_types);
    _o.set(_j, "exprs", _p?.exprs);
    _o.set(_j, "relations", _p?.relations);
    _o.set(_j, "stxcomment", _p?.stxcomment);
    _o.set(_j, "transformed", _p?.transformed);
    _o.set(_j, "if_not_exists", _p?.if_not_exists);
    return _j;
  },
  statsElem(_p?: StatsElem): StatsElem {
    const _j = ({} as StatsElem);
    _o.set(_j, "name", _p?.name);
    _o.set(_j, "expr", _p?.expr);
    return _j;
  },
  alterStatsStmt(_p?: AlterStatsStmt): AlterStatsStmt {
    const _j = ({} as AlterStatsStmt);
    _o.set(_j, "defnames", _p?.defnames);
    _o.set(_j, "stxstattarget", _p?.stxstattarget);
    _o.set(_j, "missing_ok", _p?.missing_ok);
    return _j;
  },
  createFunctionStmt(_p?: CreateFunctionStmt): CreateFunctionStmt {
    const _j = ({} as CreateFunctionStmt);
    _o.set(_j, "is_procedure", _p?.is_procedure);
    _o.set(_j, "replace", _p?.replace);
    _o.set(_j, "funcname", _p?.funcname);
    _o.set(_j, "parameters", _p?.parameters);
    _o.set(_j, "returnType", _p?.returnType);
    _o.set(_j, "options", _p?.options);
    _o.set(_j, "sql_body", _p?.sql_body);
    return _j;
  },
  functionParameter(_p?: FunctionParameter): FunctionParameter {
    const _j = ({} as FunctionParameter);
    _o.set(_j, "name", _p?.name);
    _o.set(_j, "argType", _p?.argType);
    _o.set(_j, "mode", _p?.mode);
    _o.set(_j, "defexpr", _p?.defexpr);
    return _j;
  },
  alterFunctionStmt(_p?: AlterFunctionStmt): AlterFunctionStmt {
    const _j = ({} as AlterFunctionStmt);
    _o.set(_j, "objtype", _p?.objtype);
    _o.set(_j, "func", _p?.func);
    _o.set(_j, "actions", _p?.actions);
    return _j;
  },
  doStmt(_p?: DoStmt): DoStmt {
    const _j = ({} as DoStmt);
    _o.set(_j, "args", _p?.args);
    return _j;
  },
  inlineCodeBlock(_p?: InlineCodeBlock): InlineCodeBlock {
    const _j = ({} as InlineCodeBlock);
    _o.set(_j, "source_text", _p?.source_text);
    _o.set(_j, "langOid", _p?.langOid);
    _o.set(_j, "langIsTrusted", _p?.langIsTrusted);
    _o.set(_j, "atomic", _p?.atomic);
    return _j;
  },
  callStmt(_p?: CallStmt): CallStmt {
    const _j = ({} as CallStmt);
    _o.set(_j, "funccall", _p?.funccall);
    _o.set(_j, "funcexpr", _p?.funcexpr);
    _o.set(_j, "outargs", _p?.outargs);
    return _j;
  },
  callContext(_p?: CallContext): CallContext {
    const _j = ({} as CallContext);
    _o.set(_j, "atomic", _p?.atomic);
    return _j;
  },
  renameStmt(_p?: RenameStmt): RenameStmt {
    const _j = ({} as RenameStmt);
    _o.set(_j, "renameType", _p?.renameType);
    _o.set(_j, "relationType", _p?.relationType);
    _o.set(_j, "relation", _p?.relation);
    _o.set(_j, "object", _p?.object);
    _o.set(_j, "subname", _p?.subname);
    _o.set(_j, "newname", _p?.newname);
    _o.set(_j, "behavior", _p?.behavior);
    _o.set(_j, "missing_ok", _p?.missing_ok);
    return _j;
  },
  alterObjectDependsStmt(_p?: AlterObjectDependsStmt): AlterObjectDependsStmt {
    const _j = ({} as AlterObjectDependsStmt);
    _o.set(_j, "objectType", _p?.objectType);
    _o.set(_j, "relation", _p?.relation);
    _o.set(_j, "object", _p?.object);
    _o.set(_j, "extname", _p?.extname);
    _o.set(_j, "remove", _p?.remove);
    return _j;
  },
  alterObjectSchemaStmt(_p?: AlterObjectSchemaStmt): AlterObjectSchemaStmt {
    const _j = ({} as AlterObjectSchemaStmt);
    _o.set(_j, "objectType", _p?.objectType);
    _o.set(_j, "relation", _p?.relation);
    _o.set(_j, "object", _p?.object);
    _o.set(_j, "newschema", _p?.newschema);
    _o.set(_j, "missing_ok", _p?.missing_ok);
    return _j;
  },
  alterOwnerStmt(_p?: AlterOwnerStmt): AlterOwnerStmt {
    const _j = ({} as AlterOwnerStmt);
    _o.set(_j, "objectType", _p?.objectType);
    _o.set(_j, "relation", _p?.relation);
    _o.set(_j, "object", _p?.object);
    _o.set(_j, "newowner", _p?.newowner);
    return _j;
  },
  alterOperatorStmt(_p?: AlterOperatorStmt): AlterOperatorStmt {
    const _j = ({} as AlterOperatorStmt);
    _o.set(_j, "opername", _p?.opername);
    _o.set(_j, "options", _p?.options);
    return _j;
  },
  alterTypeStmt(_p?: AlterTypeStmt): AlterTypeStmt {
    const _j = ({} as AlterTypeStmt);
    _o.set(_j, "typeName", _p?.typeName);
    _o.set(_j, "options", _p?.options);
    return _j;
  },
  ruleStmt(_p?: RuleStmt): RuleStmt {
    const _j = ({} as RuleStmt);
    _o.set(_j, "relation", _p?.relation);
    _o.set(_j, "rulename", _p?.rulename);
    _o.set(_j, "whereClause", _p?.whereClause);
    _o.set(_j, "event", _p?.event);
    _o.set(_j, "instead", _p?.instead);
    _o.set(_j, "actions", _p?.actions);
    _o.set(_j, "replace", _p?.replace);
    return _j;
  },
  notifyStmt(_p?: NotifyStmt): NotifyStmt {
    const _j = ({} as NotifyStmt);
    _o.set(_j, "conditionname", _p?.conditionname);
    _o.set(_j, "payload", _p?.payload);
    return _j;
  },
  listenStmt(_p?: ListenStmt): ListenStmt {
    const _j = ({} as ListenStmt);
    _o.set(_j, "conditionname", _p?.conditionname);
    return _j;
  },
  unlistenStmt(_p?: UnlistenStmt): UnlistenStmt {
    const _j = ({} as UnlistenStmt);
    _o.set(_j, "conditionname", _p?.conditionname);
    return _j;
  },
  transactionStmt(_p?: TransactionStmt): TransactionStmt {
    const _j = ({} as TransactionStmt);
    _o.set(_j, "kind", _p?.kind);
    _o.set(_j, "options", _p?.options);
    _o.set(_j, "savepoint_name", _p?.savepoint_name);
    _o.set(_j, "gid", _p?.gid);
    _o.set(_j, "chain", _p?.chain);
    return _j;
  },
  compositeTypeStmt(_p?: CompositeTypeStmt): CompositeTypeStmt {
    const _j = ({} as CompositeTypeStmt);
    _o.set(_j, "typevar", _p?.typevar);
    _o.set(_j, "coldeflist", _p?.coldeflist);
    return _j;
  },
  createEnumStmt(_p?: CreateEnumStmt): CreateEnumStmt {
    const _j = ({} as CreateEnumStmt);
    _o.set(_j, "typeName", _p?.typeName);
    _o.set(_j, "vals", _p?.vals);
    return _j;
  },
  createRangeStmt(_p?: CreateRangeStmt): CreateRangeStmt {
    const _j = ({} as CreateRangeStmt);
    _o.set(_j, "typeName", _p?.typeName);
    _o.set(_j, "params", _p?.params);
    return _j;
  },
  alterEnumStmt(_p?: AlterEnumStmt): AlterEnumStmt {
    const _j = ({} as AlterEnumStmt);
    _o.set(_j, "typeName", _p?.typeName);
    _o.set(_j, "oldVal", _p?.oldVal);
    _o.set(_j, "newVal", _p?.newVal);
    _o.set(_j, "newValNeighbor", _p?.newValNeighbor);
    _o.set(_j, "newValIsAfter", _p?.newValIsAfter);
    _o.set(_j, "skipIfNewValExists", _p?.skipIfNewValExists);
    return _j;
  },
  viewStmt(_p?: ViewStmt): ViewStmt {
    const _j = ({} as ViewStmt);
    _o.set(_j, "view", _p?.view);
    _o.set(_j, "aliases", _p?.aliases);
    _o.set(_j, "query", _p?.query);
    _o.set(_j, "replace", _p?.replace);
    _o.set(_j, "options", _p?.options);
    _o.set(_j, "withCheckOption", _p?.withCheckOption);
    return _j;
  },
  loadStmt(_p?: LoadStmt): LoadStmt {
    const _j = ({} as LoadStmt);
    _o.set(_j, "filename", _p?.filename);
    return _j;
  },
  createdbStmt(_p?: CreatedbStmt): CreatedbStmt {
    const _j = ({} as CreatedbStmt);
    _o.set(_j, "dbname", _p?.dbname);
    _o.set(_j, "options", _p?.options);
    return _j;
  },
  alterDatabaseStmt(_p?: AlterDatabaseStmt): AlterDatabaseStmt {
    const _j = ({} as AlterDatabaseStmt);
    _o.set(_j, "dbname", _p?.dbname);
    _o.set(_j, "options", _p?.options);
    return _j;
  },
  alterDatabaseRefreshCollStmt(_p?: AlterDatabaseRefreshCollStmt): AlterDatabaseRefreshCollStmt {
    const _j = ({} as AlterDatabaseRefreshCollStmt);
    _o.set(_j, "dbname", _p?.dbname);
    return _j;
  },
  alterDatabaseSetStmt(_p?: AlterDatabaseSetStmt): AlterDatabaseSetStmt {
    const _j = ({} as AlterDatabaseSetStmt);
    _o.set(_j, "dbname", _p?.dbname);
    _o.set(_j, "setstmt", _p?.setstmt);
    return _j;
  },
  dropdbStmt(_p?: DropdbStmt): DropdbStmt {
    const _j = ({} as DropdbStmt);
    _o.set(_j, "dbname", _p?.dbname);
    _o.set(_j, "missing_ok", _p?.missing_ok);
    _o.set(_j, "options", _p?.options);
    return _j;
  },
  alterSystemStmt(_p?: AlterSystemStmt): AlterSystemStmt {
    const _j = ({} as AlterSystemStmt);
    _o.set(_j, "setstmt", _p?.setstmt);
    return _j;
  },
  clusterStmt(_p?: ClusterStmt): ClusterStmt {
    const _j = ({} as ClusterStmt);
    _o.set(_j, "relation", _p?.relation);
    _o.set(_j, "indexname", _p?.indexname);
    _o.set(_j, "params", _p?.params);
    return _j;
  },
  vacuumStmt(_p?: VacuumStmt): VacuumStmt {
    const _j = ({} as VacuumStmt);
    _o.set(_j, "options", _p?.options);
    _o.set(_j, "rels", _p?.rels);
    _o.set(_j, "is_vacuumcmd", _p?.is_vacuumcmd);
    return _j;
  },
  vacuumRelation(_p?: VacuumRelation): VacuumRelation {
    const _j = ({} as VacuumRelation);
    _o.set(_j, "relation", _p?.relation);
    _o.set(_j, "oid", _p?.oid);
    _o.set(_j, "va_cols", _p?.va_cols);
    return _j;
  },
  explainStmt(_p?: ExplainStmt): ExplainStmt {
    const _j = ({} as ExplainStmt);
    _o.set(_j, "query", _p?.query);
    _o.set(_j, "options", _p?.options);
    return _j;
  },
  createTableAsStmt(_p?: CreateTableAsStmt): CreateTableAsStmt {
    const _j = ({} as CreateTableAsStmt);
    _o.set(_j, "query", _p?.query);
    _o.set(_j, "into", _p?.into);
    _o.set(_j, "objtype", _p?.objtype);
    _o.set(_j, "is_select_into", _p?.is_select_into);
    _o.set(_j, "if_not_exists", _p?.if_not_exists);
    return _j;
  },
  refreshMatViewStmt(_p?: RefreshMatViewStmt): RefreshMatViewStmt {
    const _j = ({} as RefreshMatViewStmt);
    _o.set(_j, "concurrent", _p?.concurrent);
    _o.set(_j, "skipData", _p?.skipData);
    _o.set(_j, "relation", _p?.relation);
    return _j;
  },
  checkPointStmt(_p?: CheckPointStmt): CheckPointStmt {
    const _j = ({} as CheckPointStmt);
    return _j;
  },
  discardStmt(_p?: DiscardStmt): DiscardStmt {
    const _j = ({} as DiscardStmt);
    _o.set(_j, "target", _p?.target);
    return _j;
  },
  lockStmt(_p?: LockStmt): LockStmt {
    const _j = ({} as LockStmt);
    _o.set(_j, "relations", _p?.relations);
    _o.set(_j, "mode", _p?.mode);
    _o.set(_j, "nowait", _p?.nowait);
    return _j;
  },
  constraintsSetStmt(_p?: ConstraintsSetStmt): ConstraintsSetStmt {
    const _j = ({} as ConstraintsSetStmt);
    _o.set(_j, "constraints", _p?.constraints);
    _o.set(_j, "deferred", _p?.deferred);
    return _j;
  },
  reindexStmt(_p?: ReindexStmt): ReindexStmt {
    const _j = ({} as ReindexStmt);
    _o.set(_j, "kind", _p?.kind);
    _o.set(_j, "relation", _p?.relation);
    _o.set(_j, "name", _p?.name);
    _o.set(_j, "params", _p?.params);
    return _j;
  },
  createConversionStmt(_p?: CreateConversionStmt): CreateConversionStmt {
    const _j = ({} as CreateConversionStmt);
    _o.set(_j, "conversion_name", _p?.conversion_name);
    _o.set(_j, "for_encoding_name", _p?.for_encoding_name);
    _o.set(_j, "to_encoding_name", _p?.to_encoding_name);
    _o.set(_j, "func_name", _p?.func_name);
    _o.set(_j, "def", _p?.def);
    return _j;
  },
  createCastStmt(_p?: CreateCastStmt): CreateCastStmt {
    const _j = ({} as CreateCastStmt);
    _o.set(_j, "sourcetype", _p?.sourcetype);
    _o.set(_j, "targettype", _p?.targettype);
    _o.set(_j, "func", _p?.func);
    _o.set(_j, "context", _p?.context);
    _o.set(_j, "inout", _p?.inout);
    return _j;
  },
  createTransformStmt(_p?: CreateTransformStmt): CreateTransformStmt {
    const _j = ({} as CreateTransformStmt);
    _o.set(_j, "replace", _p?.replace);
    _o.set(_j, "type_name", _p?.type_name);
    _o.set(_j, "lang", _p?.lang);
    _o.set(_j, "fromsql", _p?.fromsql);
    _o.set(_j, "tosql", _p?.tosql);
    return _j;
  },
  prepareStmt(_p?: PrepareStmt): PrepareStmt {
    const _j = ({} as PrepareStmt);
    _o.set(_j, "name", _p?.name);
    _o.set(_j, "argtypes", _p?.argtypes);
    _o.set(_j, "query", _p?.query);
    return _j;
  },
  executeStmt(_p?: ExecuteStmt): ExecuteStmt {
    const _j = ({} as ExecuteStmt);
    _o.set(_j, "name", _p?.name);
    _o.set(_j, "params", _p?.params);
    return _j;
  },
  deallocateStmt(_p?: DeallocateStmt): DeallocateStmt {
    const _j = ({} as DeallocateStmt);
    _o.set(_j, "name", _p?.name);
    return _j;
  },
  dropOwnedStmt(_p?: DropOwnedStmt): DropOwnedStmt {
    const _j = ({} as DropOwnedStmt);
    _o.set(_j, "roles", _p?.roles);
    _o.set(_j, "behavior", _p?.behavior);
    return _j;
  },
  reassignOwnedStmt(_p?: ReassignOwnedStmt): ReassignOwnedStmt {
    const _j = ({} as ReassignOwnedStmt);
    _o.set(_j, "roles", _p?.roles);
    _o.set(_j, "newrole", _p?.newrole);
    return _j;
  },
  altertsDictionaryStmt(_p?: AlterTSDictionaryStmt): AlterTSDictionaryStmt {
    const _j = ({} as AlterTSDictionaryStmt);
    _o.set(_j, "dictname", _p?.dictname);
    _o.set(_j, "options", _p?.options);
    return _j;
  },
  altertsConfigurationStmt(_p?: AlterTSConfigurationStmt): AlterTSConfigurationStmt {
    const _j = ({} as AlterTSConfigurationStmt);
    _o.set(_j, "kind", _p?.kind);
    _o.set(_j, "cfgname", _p?.cfgname);
    _o.set(_j, "tokentype", _p?.tokentype);
    _o.set(_j, "dicts", _p?.dicts);
    _o.set(_j, "override", _p?.override);
    _o.set(_j, "replace", _p?.replace);
    _o.set(_j, "missing_ok", _p?.missing_ok);
    return _j;
  },
  publicationTable(_p?: PublicationTable): PublicationTable {
    const _j = ({} as PublicationTable);
    _o.set(_j, "relation", _p?.relation);
    _o.set(_j, "whereClause", _p?.whereClause);
    _o.set(_j, "columns", _p?.columns);
    return _j;
  },
  publicationObjSpec(_p?: PublicationObjSpec): PublicationObjSpec {
    const _j = ({} as PublicationObjSpec);
    _o.set(_j, "pubobjtype", _p?.pubobjtype);
    _o.set(_j, "name", _p?.name);
    _o.set(_j, "pubtable", _p?.pubtable);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  createPublicationStmt(_p?: CreatePublicationStmt): CreatePublicationStmt {
    const _j = ({} as CreatePublicationStmt);
    _o.set(_j, "pubname", _p?.pubname);
    _o.set(_j, "options", _p?.options);
    _o.set(_j, "pubobjects", _p?.pubobjects);
    _o.set(_j, "for_all_tables", _p?.for_all_tables);
    return _j;
  },
  alterPublicationStmt(_p?: AlterPublicationStmt): AlterPublicationStmt {
    const _j = ({} as AlterPublicationStmt);
    _o.set(_j, "pubname", _p?.pubname);
    _o.set(_j, "options", _p?.options);
    _o.set(_j, "pubobjects", _p?.pubobjects);
    _o.set(_j, "for_all_tables", _p?.for_all_tables);
    _o.set(_j, "action", _p?.action);
    return _j;
  },
  createSubscriptionStmt(_p?: CreateSubscriptionStmt): CreateSubscriptionStmt {
    const _j = ({} as CreateSubscriptionStmt);
    _o.set(_j, "subname", _p?.subname);
    _o.set(_j, "conninfo", _p?.conninfo);
    _o.set(_j, "publication", _p?.publication);
    _o.set(_j, "options", _p?.options);
    return _j;
  },
  alterSubscriptionStmt(_p?: AlterSubscriptionStmt): AlterSubscriptionStmt {
    const _j = ({} as AlterSubscriptionStmt);
    _o.set(_j, "kind", _p?.kind);
    _o.set(_j, "subname", _p?.subname);
    _o.set(_j, "conninfo", _p?.conninfo);
    _o.set(_j, "publication", _p?.publication);
    _o.set(_j, "options", _p?.options);
    return _j;
  },
  dropSubscriptionStmt(_p?: DropSubscriptionStmt): DropSubscriptionStmt {
    const _j = ({} as DropSubscriptionStmt);
    _o.set(_j, "subname", _p?.subname);
    _o.set(_j, "missing_ok", _p?.missing_ok);
    _o.set(_j, "behavior", _p?.behavior);
    return _j;
  },
  scanToken(_p?: ScanToken): ScanToken {
    const _j = ({} as ScanToken);
    _o.set(_j, "start", _p?.start);
    _o.set(_j, "end", _p?.end);
    _o.set(_j, "token", _p?.token);
    _o.set(_j, "keywordKind", _p?.keywordKind);
    return _j;
  }
};",
    "file": "asts.ts",
  },
  {
    "code": "/**
* This file was automatically generated by pg-proto-parser@latest.
* DO NOT MODIFY IT BY HAND. Instead, modify the source proto file,
* and run the pg-proto-parser generate command to regenerate this file.
*/
export type EnumType = "OverridingKind" | "QuerySource" | "SortByDir" | "SortByNulls" | "SetQuantifier" | "A_Expr_Kind" | "RoleSpecType" | "TableLikeOption" | "DefElemAction" | "PartitionStrategy" | "PartitionRangeDatumKind" | "RTEKind" | "WCOKind" | "GroupingSetKind" | "CTEMaterialize" | "SetOperation" | "ObjectType" | "DropBehavior" | "AlterTableType" | "GrantTargetType" | "VariableSetKind" | "ConstrType" | "ImportForeignSchemaType" | "RoleStmtType" | "FetchDirection" | "FunctionParameterMode" | "TransactionStmtKind" | "ViewCheckOption" | "DiscardMode" | "ReindexObjectType" | "AlterTSConfigType" | "PublicationObjSpecType" | "AlterPublicationAction" | "AlterSubscriptionType" | "OnCommitAction" | "ParamKind" | "CoercionContext" | "CoercionForm" | "BoolExprType" | "SubLinkType" | "RowCompareType" | "MinMaxOp" | "SQLValueFunctionOp" | "XmlExprOp" | "XmlOptionType" | "JsonEncoding" | "JsonFormatType" | "JsonConstructorType" | "JsonValueType" | "NullTestType" | "BoolTestType" | "CmdType" | "JoinType" | "AggStrategy" | "AggSplit" | "SetOpCmd" | "SetOpStrategy" | "OnConflictAction" | "LimitOption" | "LockClauseStrength" | "LockWaitPolicy" | "LockTupleMode" | "KeywordKind" | "Token";
export const getEnumValue = (enumType: EnumType, key: string | number) => {
  switch (enumType) {
    case "OverridingKind":
      {
        switch (key) {
          case "OVERRIDING_NOT_SET":
            return 0;
          case "OVERRIDING_USER_VALUE":
            return 1;
          case "OVERRIDING_SYSTEM_VALUE":
            return 2;
          case 0:
            return "OVERRIDING_NOT_SET";
          case 1:
            return "OVERRIDING_USER_VALUE";
          case 2:
            return "OVERRIDING_SYSTEM_VALUE";
          default:
            throw new Error("Key not recognized in enum OverridingKind");
        }
      }
    case "QuerySource":
      {
        switch (key) {
          case "QSRC_ORIGINAL":
            return 0;
          case "QSRC_PARSER":
            return 1;
          case "QSRC_INSTEAD_RULE":
            return 2;
          case "QSRC_QUAL_INSTEAD_RULE":
            return 3;
          case "QSRC_NON_INSTEAD_RULE":
            return 4;
          case 0:
            return "QSRC_ORIGINAL";
          case 1:
            return "QSRC_PARSER";
          case 2:
            return "QSRC_INSTEAD_RULE";
          case 3:
            return "QSRC_QUAL_INSTEAD_RULE";
          case 4:
            return "QSRC_NON_INSTEAD_RULE";
          default:
            throw new Error("Key not recognized in enum QuerySource");
        }
      }
    case "SortByDir":
      {
        switch (key) {
          case "SORTBY_DEFAULT":
            return 0;
          case "SORTBY_ASC":
            return 1;
          case "SORTBY_DESC":
            return 2;
          case "SORTBY_USING":
            return 3;
          case 0:
            return "SORTBY_DEFAULT";
          case 1:
            return "SORTBY_ASC";
          case 2:
            return "SORTBY_DESC";
          case 3:
            return "SORTBY_USING";
          default:
            throw new Error("Key not recognized in enum SortByDir");
        }
      }
    case "SortByNulls":
      {
        switch (key) {
          case "SORTBY_NULLS_DEFAULT":
            return 0;
          case "SORTBY_NULLS_FIRST":
            return 1;
          case "SORTBY_NULLS_LAST":
            return 2;
          case 0:
            return "SORTBY_NULLS_DEFAULT";
          case 1:
            return "SORTBY_NULLS_FIRST";
          case 2:
            return "SORTBY_NULLS_LAST";
          default:
            throw new Error("Key not recognized in enum SortByNulls");
        }
      }
    case "SetQuantifier":
      {
        switch (key) {
          case "SET_QUANTIFIER_DEFAULT":
            return 0;
          case "SET_QUANTIFIER_ALL":
            return 1;
          case "SET_QUANTIFIER_DISTINCT":
            return 2;
          case 0:
            return "SET_QUANTIFIER_DEFAULT";
          case 1:
            return "SET_QUANTIFIER_ALL";
          case 2:
            return "SET_QUANTIFIER_DISTINCT";
          default:
            throw new Error("Key not recognized in enum SetQuantifier");
        }
      }
    case "A_Expr_Kind":
      {
        switch (key) {
          case "AEXPR_OP":
            return 0;
          case "AEXPR_OP_ANY":
            return 1;
          case "AEXPR_OP_ALL":
            return 2;
          case "AEXPR_DISTINCT":
            return 3;
          case "AEXPR_NOT_DISTINCT":
            return 4;
          case "AEXPR_NULLIF":
            return 5;
          case "AEXPR_IN":
            return 6;
          case "AEXPR_LIKE":
            return 7;
          case "AEXPR_ILIKE":
            return 8;
          case "AEXPR_SIMILAR":
            return 9;
          case "AEXPR_BETWEEN":
            return 10;
          case "AEXPR_NOT_BETWEEN":
            return 11;
          case "AEXPR_BETWEEN_SYM":
            return 12;
          case "AEXPR_NOT_BETWEEN_SYM":
            return 13;
          case 0:
            return "AEXPR_OP";
          case 1:
            return "AEXPR_OP_ANY";
          case 2:
            return "AEXPR_OP_ALL";
          case 3:
            return "AEXPR_DISTINCT";
          case 4:
            return "AEXPR_NOT_DISTINCT";
          case 5:
            return "AEXPR_NULLIF";
          case 6:
            return "AEXPR_IN";
          case 7:
            return "AEXPR_LIKE";
          case 8:
            return "AEXPR_ILIKE";
          case 9:
            return "AEXPR_SIMILAR";
          case 10:
            return "AEXPR_BETWEEN";
          case 11:
            return "AEXPR_NOT_BETWEEN";
          case 12:
            return "AEXPR_BETWEEN_SYM";
          case 13:
            return "AEXPR_NOT_BETWEEN_SYM";
          default:
            throw new Error("Key not recognized in enum A_Expr_Kind");
        }
      }
    case "RoleSpecType":
      {
        switch (key) {
          case "ROLESPEC_CSTRING":
            return 0;
          case "ROLESPEC_CURRENT_ROLE":
            return 1;
          case "ROLESPEC_CURRENT_USER":
            return 2;
          case "ROLESPEC_SESSION_USER":
            return 3;
          case "ROLESPEC_PUBLIC":
            return 4;
          case 0:
            return "ROLESPEC_CSTRING";
          case 1:
            return "ROLESPEC_CURRENT_ROLE";
          case 2:
            return "ROLESPEC_CURRENT_USER";
          case 3:
            return "ROLESPEC_SESSION_USER";
          case 4:
            return "ROLESPEC_PUBLIC";
          default:
            throw new Error("Key not recognized in enum RoleSpecType");
        }
      }
    case "TableLikeOption":
      {
        switch (key) {
          case "CREATE_TABLE_LIKE_COMMENTS":
            return 0;
          case "CREATE_TABLE_LIKE_COMPRESSION":
            return 1;
          case "CREATE_TABLE_LIKE_CONSTRAINTS":
            return 2;
          case "CREATE_TABLE_LIKE_DEFAULTS":
            return 3;
          case "CREATE_TABLE_LIKE_GENERATED":
            return 4;
          case "CREATE_TABLE_LIKE_IDENTITY":
            return 5;
          case "CREATE_TABLE_LIKE_INDEXES":
            return 6;
          case "CREATE_TABLE_LIKE_STATISTICS":
            return 7;
          case "CREATE_TABLE_LIKE_STORAGE":
            return 8;
          case "CREATE_TABLE_LIKE_ALL":
            return 9;
          case 0:
            return "CREATE_TABLE_LIKE_COMMENTS";
          case 1:
            return "CREATE_TABLE_LIKE_COMPRESSION";
          case 2:
            return "CREATE_TABLE_LIKE_CONSTRAINTS";
          case 3:
            return "CREATE_TABLE_LIKE_DEFAULTS";
          case 4:
            return "CREATE_TABLE_LIKE_GENERATED";
          case 5:
            return "CREATE_TABLE_LIKE_IDENTITY";
          case 6:
            return "CREATE_TABLE_LIKE_INDEXES";
          case 7:
            return "CREATE_TABLE_LIKE_STATISTICS";
          case 8:
            return "CREATE_TABLE_LIKE_STORAGE";
          case 9:
            return "CREATE_TABLE_LIKE_ALL";
          default:
            throw new Error("Key not recognized in enum TableLikeOption");
        }
      }
    case "DefElemAction":
      {
        switch (key) {
          case "DEFELEM_UNSPEC":
            return 0;
          case "DEFELEM_SET":
            return 1;
          case "DEFELEM_ADD":
            return 2;
          case "DEFELEM_DROP":
            return 3;
          case 0:
            return "DEFELEM_UNSPEC";
          case 1:
            return "DEFELEM_SET";
          case 2:
            return "DEFELEM_ADD";
          case 3:
            return "DEFELEM_DROP";
          default:
            throw new Error("Key not recognized in enum DefElemAction");
        }
      }
    case "PartitionStrategy":
      {
        switch (key) {
          case "PARTITION_STRATEGY_LIST":
            return 0;
          case "PARTITION_STRATEGY_RANGE":
            return 1;
          case "PARTITION_STRATEGY_HASH":
            return 2;
          case 0:
            return "PARTITION_STRATEGY_LIST";
          case 1:
            return "PARTITION_STRATEGY_RANGE";
          case 2:
            return "PARTITION_STRATEGY_HASH";
          default:
            throw new Error("Key not recognized in enum PartitionStrategy");
        }
      }
    case "PartitionRangeDatumKind":
      {
        switch (key) {
          case "PARTITION_RANGE_DATUM_MINVALUE":
            return 0;
          case "PARTITION_RANGE_DATUM_VALUE":
            return 1;
          case "PARTITION_RANGE_DATUM_MAXVALUE":
            return 2;
          case 0:
            return "PARTITION_RANGE_DATUM_MINVALUE";
          case 1:
            return "PARTITION_RANGE_DATUM_VALUE";
          case 2:
            return "PARTITION_RANGE_DATUM_MAXVALUE";
          default:
            throw new Error("Key not recognized in enum PartitionRangeDatumKind");
        }
      }
    case "RTEKind":
      {
        switch (key) {
          case "RTE_RELATION":
            return 0;
          case "RTE_SUBQUERY":
            return 1;
          case "RTE_JOIN":
            return 2;
          case "RTE_FUNCTION":
            return 3;
          case "RTE_TABLEFUNC":
            return 4;
          case "RTE_VALUES":
            return 5;
          case "RTE_CTE":
            return 6;
          case "RTE_NAMEDTUPLESTORE":
            return 7;
          case "RTE_RESULT":
            return 8;
          case 0:
            return "RTE_RELATION";
          case 1:
            return "RTE_SUBQUERY";
          case 2:
            return "RTE_JOIN";
          case 3:
            return "RTE_FUNCTION";
          case 4:
            return "RTE_TABLEFUNC";
          case 5:
            return "RTE_VALUES";
          case 6:
            return "RTE_CTE";
          case 7:
            return "RTE_NAMEDTUPLESTORE";
          case 8:
            return "RTE_RESULT";
          default:
            throw new Error("Key not recognized in enum RTEKind");
        }
      }
    case "WCOKind":
      {
        switch (key) {
          case "WCO_VIEW_CHECK":
            return 0;
          case "WCO_RLS_INSERT_CHECK":
            return 1;
          case "WCO_RLS_UPDATE_CHECK":
            return 2;
          case "WCO_RLS_CONFLICT_CHECK":
            return 3;
          case "WCO_RLS_MERGE_UPDATE_CHECK":
            return 4;
          case "WCO_RLS_MERGE_DELETE_CHECK":
            return 5;
          case 0:
            return "WCO_VIEW_CHECK";
          case 1:
            return "WCO_RLS_INSERT_CHECK";
          case 2:
            return "WCO_RLS_UPDATE_CHECK";
          case 3:
            return "WCO_RLS_CONFLICT_CHECK";
          case 4:
            return "WCO_RLS_MERGE_UPDATE_CHECK";
          case 5:
            return "WCO_RLS_MERGE_DELETE_CHECK";
          default:
            throw new Error("Key not recognized in enum WCOKind");
        }
      }
    case "GroupingSetKind":
      {
        switch (key) {
          case "GROUPING_SET_EMPTY":
            return 0;
          case "GROUPING_SET_SIMPLE":
            return 1;
          case "GROUPING_SET_ROLLUP":
            return 2;
          case "GROUPING_SET_CUBE":
            return 3;
          case "GROUPING_SET_SETS":
            return 4;
          case 0:
            return "GROUPING_SET_EMPTY";
          case 1:
            return "GROUPING_SET_SIMPLE";
          case 2:
            return "GROUPING_SET_ROLLUP";
          case 3:
            return "GROUPING_SET_CUBE";
          case 4:
            return "GROUPING_SET_SETS";
          default:
            throw new Error("Key not recognized in enum GroupingSetKind");
        }
      }
    case "CTEMaterialize":
      {
        switch (key) {
          case "CTEMaterializeDefault":
            return 0;
          case "CTEMaterializeAlways":
            return 1;
          case "CTEMaterializeNever":
            return 2;
          case 0:
            return "CTEMaterializeDefault";
          case 1:
            return "CTEMaterializeAlways";
          case 2:
            return "CTEMaterializeNever";
          default:
            throw new Error("Key not recognized in enum CTEMaterialize");
        }
      }
    case "SetOperation":
      {
        switch (key) {
          case "SETOP_NONE":
            return 0;
          case "SETOP_UNION":
            return 1;
          case "SETOP_INTERSECT":
            return 2;
          case "SETOP_EXCEPT":
            return 3;
          case 0:
            return "SETOP_NONE";
          case 1:
            return "SETOP_UNION";
          case 2:
            return "SETOP_INTERSECT";
          case 3:
            return "SETOP_EXCEPT";
          default:
            throw new Error("Key not recognized in enum SetOperation");
        }
      }
    case "ObjectType":
      {
        switch (key) {
          case "OBJECT_ACCESS_METHOD":
            return 0;
          case "OBJECT_AGGREGATE":
            return 1;
          case "OBJECT_AMOP":
            return 2;
          case "OBJECT_AMPROC":
            return 3;
          case "OBJECT_ATTRIBUTE":
            return 4;
          case "OBJECT_CAST":
            return 5;
          case "OBJECT_COLUMN":
            return 6;
          case "OBJECT_COLLATION":
            return 7;
          case "OBJECT_CONVERSION":
            return 8;
          case "OBJECT_DATABASE":
            return 9;
          case "OBJECT_DEFAULT":
            return 10;
          case "OBJECT_DEFACL":
            return 11;
          case "OBJECT_DOMAIN":
            return 12;
          case "OBJECT_DOMCONSTRAINT":
            return 13;
          case "OBJECT_EVENT_TRIGGER":
            return 14;
          case "OBJECT_EXTENSION":
            return 15;
          case "OBJECT_FDW":
            return 16;
          case "OBJECT_FOREIGN_SERVER":
            return 17;
          case "OBJECT_FOREIGN_TABLE":
            return 18;
          case "OBJECT_FUNCTION":
            return 19;
          case "OBJECT_INDEX":
            return 20;
          case "OBJECT_LANGUAGE":
            return 21;
          case "OBJECT_LARGEOBJECT":
            return 22;
          case "OBJECT_MATVIEW":
            return 23;
          case "OBJECT_OPCLASS":
            return 24;
          case "OBJECT_OPERATOR":
            return 25;
          case "OBJECT_OPFAMILY":
            return 26;
          case "OBJECT_PARAMETER_ACL":
            return 27;
          case "OBJECT_POLICY":
            return 28;
          case "OBJECT_PROCEDURE":
            return 29;
          case "OBJECT_PUBLICATION":
            return 30;
          case "OBJECT_PUBLICATION_NAMESPACE":
            return 31;
          case "OBJECT_PUBLICATION_REL":
            return 32;
          case "OBJECT_ROLE":
            return 33;
          case "OBJECT_ROUTINE":
            return 34;
          case "OBJECT_RULE":
            return 35;
          case "OBJECT_SCHEMA":
            return 36;
          case "OBJECT_SEQUENCE":
            return 37;
          case "OBJECT_SUBSCRIPTION":
            return 38;
          case "OBJECT_STATISTIC_EXT":
            return 39;
          case "OBJECT_TABCONSTRAINT":
            return 40;
          case "OBJECT_TABLE":
            return 41;
          case "OBJECT_TABLESPACE":
            return 42;
          case "OBJECT_TRANSFORM":
            return 43;
          case "OBJECT_TRIGGER":
            return 44;
          case "OBJECT_TSCONFIGURATION":
            return 45;
          case "OBJECT_TSDICTIONARY":
            return 46;
          case "OBJECT_TSPARSER":
            return 47;
          case "OBJECT_TSTEMPLATE":
            return 48;
          case "OBJECT_TYPE":
            return 49;
          case "OBJECT_USER_MAPPING":
            return 50;
          case "OBJECT_VIEW":
            return 51;
          case 0:
            return "OBJECT_ACCESS_METHOD";
          case 1:
            return "OBJECT_AGGREGATE";
          case 2:
            return "OBJECT_AMOP";
          case 3:
            return "OBJECT_AMPROC";
          case 4:
            return "OBJECT_ATTRIBUTE";
          case 5:
            return "OBJECT_CAST";
          case 6:
            return "OBJECT_COLUMN";
          case 7:
            return "OBJECT_COLLATION";
          case 8:
            return "OBJECT_CONVERSION";
          case 9:
            return "OBJECT_DATABASE";
          case 10:
            return "OBJECT_DEFAULT";
          case 11:
            return "OBJECT_DEFACL";
          case 12:
            return "OBJECT_DOMAIN";
          case 13:
            return "OBJECT_DOMCONSTRAINT";
          case 14:
            return "OBJECT_EVENT_TRIGGER";
          case 15:
            return "OBJECT_EXTENSION";
          case 16:
            return "OBJECT_FDW";
          case 17:
            return "OBJECT_FOREIGN_SERVER";
          case 18:
            return "OBJECT_FOREIGN_TABLE";
          case 19:
            return "OBJECT_FUNCTION";
          case 20:
            return "OBJECT_INDEX";
          case 21:
            return "OBJECT_LANGUAGE";
          case 22:
            return "OBJECT_LARGEOBJECT";
          case 23:
            return "OBJECT_MATVIEW";
          case 24:
            return "OBJECT_OPCLASS";
          case 25:
            return "OBJECT_OPERATOR";
          case 26:
            return "OBJECT_OPFAMILY";
          case 27:
            return "OBJECT_PARAMETER_ACL";
          case 28:
            return "OBJECT_POLICY";
          case 29:
            return "OBJECT_PROCEDURE";
          case 30:
            return "OBJECT_PUBLICATION";
          case 31:
            return "OBJECT_PUBLICATION_NAMESPACE";
          case 32:
            return "OBJECT_PUBLICATION_REL";
          case 33:
            return "OBJECT_ROLE";
          case 34:
            return "OBJECT_ROUTINE";
          case 35:
            return "OBJECT_RULE";
          case 36:
            return "OBJECT_SCHEMA";
          case 37:
            return "OBJECT_SEQUENCE";
          case 38:
            return "OBJECT_SUBSCRIPTION";
          case 39:
            return "OBJECT_STATISTIC_EXT";
          case 40:
            return "OBJECT_TABCONSTRAINT";
          case 41:
            return "OBJECT_TABLE";
          case 42:
            return "OBJECT_TABLESPACE";
          case 43:
            return "OBJECT_TRANSFORM";
          case 44:
            return "OBJECT_TRIGGER";
          case 45:
            return "OBJECT_TSCONFIGURATION";
          case 46:
            return "OBJECT_TSDICTIONARY";
          case 47:
            return "OBJECT_TSPARSER";
          case 48:
            return "OBJECT_TSTEMPLATE";
          case 49:
            return "OBJECT_TYPE";
          case 50:
            return "OBJECT_USER_MAPPING";
          case 51:
            return "OBJECT_VIEW";
          default:
            throw new Error("Key not recognized in enum ObjectType");
        }
      }
    case "DropBehavior":
      {
        switch (key) {
          case "DROP_RESTRICT":
            return 0;
          case "DROP_CASCADE":
            return 1;
          case 0:
            return "DROP_RESTRICT";
          case 1:
            return "DROP_CASCADE";
          default:
            throw new Error("Key not recognized in enum DropBehavior");
        }
      }
    case "AlterTableType":
      {
        switch (key) {
          case "AT_AddColumn":
            return 0;
          case "AT_AddColumnToView":
            return 1;
          case "AT_ColumnDefault":
            return 2;
          case "AT_CookedColumnDefault":
            return 3;
          case "AT_DropNotNull":
            return 4;
          case "AT_SetNotNull":
            return 5;
          case "AT_DropExpression":
            return 6;
          case "AT_CheckNotNull":
            return 7;
          case "AT_SetStatistics":
            return 8;
          case "AT_SetOptions":
            return 9;
          case "AT_ResetOptions":
            return 10;
          case "AT_SetStorage":
            return 11;
          case "AT_SetCompression":
            return 12;
          case "AT_DropColumn":
            return 13;
          case "AT_AddIndex":
            return 14;
          case "AT_ReAddIndex":
            return 15;
          case "AT_AddConstraint":
            return 16;
          case "AT_ReAddConstraint":
            return 17;
          case "AT_ReAddDomainConstraint":
            return 18;
          case "AT_AlterConstraint":
            return 19;
          case "AT_ValidateConstraint":
            return 20;
          case "AT_AddIndexConstraint":
            return 21;
          case "AT_DropConstraint":
            return 22;
          case "AT_ReAddComment":
            return 23;
          case "AT_AlterColumnType":
            return 24;
          case "AT_AlterColumnGenericOptions":
            return 25;
          case "AT_ChangeOwner":
            return 26;
          case "AT_ClusterOn":
            return 27;
          case "AT_DropCluster":
            return 28;
          case "AT_SetLogged":
            return 29;
          case "AT_SetUnLogged":
            return 30;
          case "AT_DropOids":
            return 31;
          case "AT_SetAccessMethod":
            return 32;
          case "AT_SetTableSpace":
            return 33;
          case "AT_SetRelOptions":
            return 34;
          case "AT_ResetRelOptions":
            return 35;
          case "AT_ReplaceRelOptions":
            return 36;
          case "AT_EnableTrig":
            return 37;
          case "AT_EnableAlwaysTrig":
            return 38;
          case "AT_EnableReplicaTrig":
            return 39;
          case "AT_DisableTrig":
            return 40;
          case "AT_EnableTrigAll":
            return 41;
          case "AT_DisableTrigAll":
            return 42;
          case "AT_EnableTrigUser":
            return 43;
          case "AT_DisableTrigUser":
            return 44;
          case "AT_EnableRule":
            return 45;
          case "AT_EnableAlwaysRule":
            return 46;
          case "AT_EnableReplicaRule":
            return 47;
          case "AT_DisableRule":
            return 48;
          case "AT_AddInherit":
            return 49;
          case "AT_DropInherit":
            return 50;
          case "AT_AddOf":
            return 51;
          case "AT_DropOf":
            return 52;
          case "AT_ReplicaIdentity":
            return 53;
          case "AT_EnableRowSecurity":
            return 54;
          case "AT_DisableRowSecurity":
            return 55;
          case "AT_ForceRowSecurity":
            return 56;
          case "AT_NoForceRowSecurity":
            return 57;
          case "AT_GenericOptions":
            return 58;
          case "AT_AttachPartition":
            return 59;
          case "AT_DetachPartition":
            return 60;
          case "AT_DetachPartitionFinalize":
            return 61;
          case "AT_AddIdentity":
            return 62;
          case "AT_SetIdentity":
            return 63;
          case "AT_DropIdentity":
            return 64;
          case "AT_ReAddStatistics":
            return 65;
          case 0:
            return "AT_AddColumn";
          case 1:
            return "AT_AddColumnToView";
          case 2:
            return "AT_ColumnDefault";
          case 3:
            return "AT_CookedColumnDefault";
          case 4:
            return "AT_DropNotNull";
          case 5:
            return "AT_SetNotNull";
          case 6:
            return "AT_DropExpression";
          case 7:
            return "AT_CheckNotNull";
          case 8:
            return "AT_SetStatistics";
          case 9:
            return "AT_SetOptions";
          case 10:
            return "AT_ResetOptions";
          case 11:
            return "AT_SetStorage";
          case 12:
            return "AT_SetCompression";
          case 13:
            return "AT_DropColumn";
          case 14:
            return "AT_AddIndex";
          case 15:
            return "AT_ReAddIndex";
          case 16:
            return "AT_AddConstraint";
          case 17:
            return "AT_ReAddConstraint";
          case 18:
            return "AT_ReAddDomainConstraint";
          case 19:
            return "AT_AlterConstraint";
          case 20:
            return "AT_ValidateConstraint";
          case 21:
            return "AT_AddIndexConstraint";
          case 22:
            return "AT_DropConstraint";
          case 23:
            return "AT_ReAddComment";
          case 24:
            return "AT_AlterColumnType";
          case 25:
            return "AT_AlterColumnGenericOptions";
          case 26:
            return "AT_ChangeOwner";
          case 27:
            return "AT_ClusterOn";
          case 28:
            return "AT_DropCluster";
          case 29:
            return "AT_SetLogged";
          case 30:
            return "AT_SetUnLogged";
          case 31:
            return "AT_DropOids";
          case 32:
            return "AT_SetAccessMethod";
          case 33:
            return "AT_SetTableSpace";
          case 34:
            return "AT_SetRelOptions";
          case 35:
            return "AT_ResetRelOptions";
          case 36:
            return "AT_ReplaceRelOptions";
          case 37:
            return "AT_EnableTrig";
          case 38:
            return "AT_EnableAlwaysTrig";
          case 39:
            return "AT_EnableReplicaTrig";
          case 40:
            return "AT_DisableTrig";
          case 41:
            return "AT_EnableTrigAll";
          case 42:
            return "AT_DisableTrigAll";
          case 43:
            return "AT_EnableTrigUser";
          case 44:
            return "AT_DisableTrigUser";
          case 45:
            return "AT_EnableRule";
          case 46:
            return "AT_EnableAlwaysRule";
          case 47:
            return "AT_EnableReplicaRule";
          case 48:
            return "AT_DisableRule";
          case 49:
            return "AT_AddInherit";
          case 50:
            return "AT_DropInherit";
          case 51:
            return "AT_AddOf";
          case 52:
            return "AT_DropOf";
          case 53:
            return "AT_ReplicaIdentity";
          case 54:
            return "AT_EnableRowSecurity";
          case 55:
            return "AT_DisableRowSecurity";
          case 56:
            return "AT_ForceRowSecurity";
          case 57:
            return "AT_NoForceRowSecurity";
          case 58:
            return "AT_GenericOptions";
          case 59:
            return "AT_AttachPartition";
          case 60:
            return "AT_DetachPartition";
          case 61:
            return "AT_DetachPartitionFinalize";
          case 62:
            return "AT_AddIdentity";
          case 63:
            return "AT_SetIdentity";
          case 64:
            return "AT_DropIdentity";
          case 65:
            return "AT_ReAddStatistics";
          default:
            throw new Error("Key not recognized in enum AlterTableType");
        }
      }
    case "GrantTargetType":
      {
        switch (key) {
          case "ACL_TARGET_OBJECT":
            return 0;
          case "ACL_TARGET_ALL_IN_SCHEMA":
            return 1;
          case "ACL_TARGET_DEFAULTS":
            return 2;
          case 0:
            return "ACL_TARGET_OBJECT";
          case 1:
            return "ACL_TARGET_ALL_IN_SCHEMA";
          case 2:
            return "ACL_TARGET_DEFAULTS";
          default:
            throw new Error("Key not recognized in enum GrantTargetType");
        }
      }
    case "VariableSetKind":
      {
        switch (key) {
          case "VAR_SET_VALUE":
            return 0;
          case "VAR_SET_DEFAULT":
            return 1;
          case "VAR_SET_CURRENT":
            return 2;
          case "VAR_SET_MULTI":
            return 3;
          case "VAR_RESET":
            return 4;
          case "VAR_RESET_ALL":
            return 5;
          case 0:
            return "VAR_SET_VALUE";
          case 1:
            return "VAR_SET_DEFAULT";
          case 2:
            return "VAR_SET_CURRENT";
          case 3:
            return "VAR_SET_MULTI";
          case 4:
            return "VAR_RESET";
          case 5:
            return "VAR_RESET_ALL";
          default:
            throw new Error("Key not recognized in enum VariableSetKind");
        }
      }
    case "ConstrType":
      {
        switch (key) {
          case "CONSTR_NULL":
            return 0;
          case "CONSTR_NOTNULL":
            return 1;
          case "CONSTR_DEFAULT":
            return 2;
          case "CONSTR_IDENTITY":
            return 3;
          case "CONSTR_GENERATED":
            return 4;
          case "CONSTR_CHECK":
            return 5;
          case "CONSTR_PRIMARY":
            return 6;
          case "CONSTR_UNIQUE":
            return 7;
          case "CONSTR_EXCLUSION":
            return 8;
          case "CONSTR_FOREIGN":
            return 9;
          case "CONSTR_ATTR_DEFERRABLE":
            return 10;
          case "CONSTR_ATTR_NOT_DEFERRABLE":
            return 11;
          case "CONSTR_ATTR_DEFERRED":
            return 12;
          case "CONSTR_ATTR_IMMEDIATE":
            return 13;
          case 0:
            return "CONSTR_NULL";
          case 1:
            return "CONSTR_NOTNULL";
          case 2:
            return "CONSTR_DEFAULT";
          case 3:
            return "CONSTR_IDENTITY";
          case 4:
            return "CONSTR_GENERATED";
          case 5:
            return "CONSTR_CHECK";
          case 6:
            return "CONSTR_PRIMARY";
          case 7:
            return "CONSTR_UNIQUE";
          case 8:
            return "CONSTR_EXCLUSION";
          case 9:
            return "CONSTR_FOREIGN";
          case 10:
            return "CONSTR_ATTR_DEFERRABLE";
          case 11:
            return "CONSTR_ATTR_NOT_DEFERRABLE";
          case 12:
            return "CONSTR_ATTR_DEFERRED";
          case 13:
            return "CONSTR_ATTR_IMMEDIATE";
          default:
            throw new Error("Key not recognized in enum ConstrType");
        }
      }
    case "ImportForeignSchemaType":
      {
        switch (key) {
          case "FDW_IMPORT_SCHEMA_ALL":
            return 0;
          case "FDW_IMPORT_SCHEMA_LIMIT_TO":
            return 1;
          case "FDW_IMPORT_SCHEMA_EXCEPT":
            return 2;
          case 0:
            return "FDW_IMPORT_SCHEMA_ALL";
          case 1:
            return "FDW_IMPORT_SCHEMA_LIMIT_TO";
          case 2:
            return "FDW_IMPORT_SCHEMA_EXCEPT";
          default:
            throw new Error("Key not recognized in enum ImportForeignSchemaType");
        }
      }
    case "RoleStmtType":
      {
        switch (key) {
          case "ROLESTMT_ROLE":
            return 0;
          case "ROLESTMT_USER":
            return 1;
          case "ROLESTMT_GROUP":
            return 2;
          case 0:
            return "ROLESTMT_ROLE";
          case 1:
            return "ROLESTMT_USER";
          case 2:
            return "ROLESTMT_GROUP";
          default:
            throw new Error("Key not recognized in enum RoleStmtType");
        }
      }
    case "FetchDirection":
      {
        switch (key) {
          case "FETCH_FORWARD":
            return 0;
          case "FETCH_BACKWARD":
            return 1;
          case "FETCH_ABSOLUTE":
            return 2;
          case "FETCH_RELATIVE":
            return 3;
          case 0:
            return "FETCH_FORWARD";
          case 1:
            return "FETCH_BACKWARD";
          case 2:
            return "FETCH_ABSOLUTE";
          case 3:
            return "FETCH_RELATIVE";
          default:
            throw new Error("Key not recognized in enum FetchDirection");
        }
      }
    case "FunctionParameterMode":
      {
        switch (key) {
          case "FUNC_PARAM_IN":
            return 0;
          case "FUNC_PARAM_OUT":
            return 1;
          case "FUNC_PARAM_INOUT":
            return 2;
          case "FUNC_PARAM_VARIADIC":
            return 3;
          case "FUNC_PARAM_TABLE":
            return 4;
          case "FUNC_PARAM_DEFAULT":
            return 5;
          case 0:
            return "FUNC_PARAM_IN";
          case 1:
            return "FUNC_PARAM_OUT";
          case 2:
            return "FUNC_PARAM_INOUT";
          case 3:
            return "FUNC_PARAM_VARIADIC";
          case 4:
            return "FUNC_PARAM_TABLE";
          case 5:
            return "FUNC_PARAM_DEFAULT";
          default:
            throw new Error("Key not recognized in enum FunctionParameterMode");
        }
      }
    case "TransactionStmtKind":
      {
        switch (key) {
          case "TRANS_STMT_BEGIN":
            return 0;
          case "TRANS_STMT_START":
            return 1;
          case "TRANS_STMT_COMMIT":
            return 2;
          case "TRANS_STMT_ROLLBACK":
            return 3;
          case "TRANS_STMT_SAVEPOINT":
            return 4;
          case "TRANS_STMT_RELEASE":
            return 5;
          case "TRANS_STMT_ROLLBACK_TO":
            return 6;
          case "TRANS_STMT_PREPARE":
            return 7;
          case "TRANS_STMT_COMMIT_PREPARED":
            return 8;
          case "TRANS_STMT_ROLLBACK_PREPARED":
            return 9;
          case 0:
            return "TRANS_STMT_BEGIN";
          case 1:
            return "TRANS_STMT_START";
          case 2:
            return "TRANS_STMT_COMMIT";
          case 3:
            return "TRANS_STMT_ROLLBACK";
          case 4:
            return "TRANS_STMT_SAVEPOINT";
          case 5:
            return "TRANS_STMT_RELEASE";
          case 6:
            return "TRANS_STMT_ROLLBACK_TO";
          case 7:
            return "TRANS_STMT_PREPARE";
          case 8:
            return "TRANS_STMT_COMMIT_PREPARED";
          case 9:
            return "TRANS_STMT_ROLLBACK_PREPARED";
          default:
            throw new Error("Key not recognized in enum TransactionStmtKind");
        }
      }
    case "ViewCheckOption":
      {
        switch (key) {
          case "NO_CHECK_OPTION":
            return 0;
          case "LOCAL_CHECK_OPTION":
            return 1;
          case "CASCADED_CHECK_OPTION":
            return 2;
          case 0:
            return "NO_CHECK_OPTION";
          case 1:
            return "LOCAL_CHECK_OPTION";
          case 2:
            return "CASCADED_CHECK_OPTION";
          default:
            throw new Error("Key not recognized in enum ViewCheckOption");
        }
      }
    case "DiscardMode":
      {
        switch (key) {
          case "DISCARD_ALL":
            return 0;
          case "DISCARD_PLANS":
            return 1;
          case "DISCARD_SEQUENCES":
            return 2;
          case "DISCARD_TEMP":
            return 3;
          case 0:
            return "DISCARD_ALL";
          case 1:
            return "DISCARD_PLANS";
          case 2:
            return "DISCARD_SEQUENCES";
          case 3:
            return "DISCARD_TEMP";
          default:
            throw new Error("Key not recognized in enum DiscardMode");
        }
      }
    case "ReindexObjectType":
      {
        switch (key) {
          case "REINDEX_OBJECT_INDEX":
            return 0;
          case "REINDEX_OBJECT_TABLE":
            return 1;
          case "REINDEX_OBJECT_SCHEMA":
            return 2;
          case "REINDEX_OBJECT_SYSTEM":
            return 3;
          case "REINDEX_OBJECT_DATABASE":
            return 4;
          case 0:
            return "REINDEX_OBJECT_INDEX";
          case 1:
            return "REINDEX_OBJECT_TABLE";
          case 2:
            return "REINDEX_OBJECT_SCHEMA";
          case 3:
            return "REINDEX_OBJECT_SYSTEM";
          case 4:
            return "REINDEX_OBJECT_DATABASE";
          default:
            throw new Error("Key not recognized in enum ReindexObjectType");
        }
      }
    case "AlterTSConfigType":
      {
        switch (key) {
          case "ALTER_TSCONFIG_ADD_MAPPING":
            return 0;
          case "ALTER_TSCONFIG_ALTER_MAPPING_FOR_TOKEN":
            return 1;
          case "ALTER_TSCONFIG_REPLACE_DICT":
            return 2;
          case "ALTER_TSCONFIG_REPLACE_DICT_FOR_TOKEN":
            return 3;
          case "ALTER_TSCONFIG_DROP_MAPPING":
            return 4;
          case 0:
            return "ALTER_TSCONFIG_ADD_MAPPING";
          case 1:
            return "ALTER_TSCONFIG_ALTER_MAPPING_FOR_TOKEN";
          case 2:
            return "ALTER_TSCONFIG_REPLACE_DICT";
          case 3:
            return "ALTER_TSCONFIG_REPLACE_DICT_FOR_TOKEN";
          case 4:
            return "ALTER_TSCONFIG_DROP_MAPPING";
          default:
            throw new Error("Key not recognized in enum AlterTSConfigType");
        }
      }
    case "PublicationObjSpecType":
      {
        switch (key) {
          case "PUBLICATIONOBJ_TABLE":
            return 0;
          case "PUBLICATIONOBJ_TABLES_IN_SCHEMA":
            return 1;
          case "PUBLICATIONOBJ_TABLES_IN_CUR_SCHEMA":
            return 2;
          case "PUBLICATIONOBJ_CONTINUATION":
            return 3;
          case 0:
            return "PUBLICATIONOBJ_TABLE";
          case 1:
            return "PUBLICATIONOBJ_TABLES_IN_SCHEMA";
          case 2:
            return "PUBLICATIONOBJ_TABLES_IN_CUR_SCHEMA";
          case 3:
            return "PUBLICATIONOBJ_CONTINUATION";
          default:
            throw new Error("Key not recognized in enum PublicationObjSpecType");
        }
      }
    case "AlterPublicationAction":
      {
        switch (key) {
          case "AP_AddObjects":
            return 0;
          case "AP_DropObjects":
            return 1;
          case "AP_SetObjects":
            return 2;
          case 0:
            return "AP_AddObjects";
          case 1:
            return "AP_DropObjects";
          case 2:
            return "AP_SetObjects";
          default:
            throw new Error("Key not recognized in enum AlterPublicationAction");
        }
      }
    case "AlterSubscriptionType":
      {
        switch (key) {
          case "ALTER_SUBSCRIPTION_OPTIONS":
            return 0;
          case "ALTER_SUBSCRIPTION_CONNECTION":
            return 1;
          case "ALTER_SUBSCRIPTION_SET_PUBLICATION":
            return 2;
          case "ALTER_SUBSCRIPTION_ADD_PUBLICATION":
            return 3;
          case "ALTER_SUBSCRIPTION_DROP_PUBLICATION":
            return 4;
          case "ALTER_SUBSCRIPTION_REFRESH":
            return 5;
          case "ALTER_SUBSCRIPTION_ENABLED":
            return 6;
          case "ALTER_SUBSCRIPTION_SKIP":
            return 7;
          case 0:
            return "ALTER_SUBSCRIPTION_OPTIONS";
          case 1:
            return "ALTER_SUBSCRIPTION_CONNECTION";
          case 2:
            return "ALTER_SUBSCRIPTION_SET_PUBLICATION";
          case 3:
            return "ALTER_SUBSCRIPTION_ADD_PUBLICATION";
          case 4:
            return "ALTER_SUBSCRIPTION_DROP_PUBLICATION";
          case 5:
            return "ALTER_SUBSCRIPTION_REFRESH";
          case 6:
            return "ALTER_SUBSCRIPTION_ENABLED";
          case 7:
            return "ALTER_SUBSCRIPTION_SKIP";
          default:
            throw new Error("Key not recognized in enum AlterSubscriptionType");
        }
      }
    case "OnCommitAction":
      {
        switch (key) {
          case "ONCOMMIT_NOOP":
            return 0;
          case "ONCOMMIT_PRESERVE_ROWS":
            return 1;
          case "ONCOMMIT_DELETE_ROWS":
            return 2;
          case "ONCOMMIT_DROP":
            return 3;
          case 0:
            return "ONCOMMIT_NOOP";
          case 1:
            return "ONCOMMIT_PRESERVE_ROWS";
          case 2:
            return "ONCOMMIT_DELETE_ROWS";
          case 3:
            return "ONCOMMIT_DROP";
          default:
            throw new Error("Key not recognized in enum OnCommitAction");
        }
      }
    case "ParamKind":
      {
        switch (key) {
          case "PARAM_EXTERN":
            return 0;
          case "PARAM_EXEC":
            return 1;
          case "PARAM_SUBLINK":
            return 2;
          case "PARAM_MULTIEXPR":
            return 3;
          case 0:
            return "PARAM_EXTERN";
          case 1:
            return "PARAM_EXEC";
          case 2:
            return "PARAM_SUBLINK";
          case 3:
            return "PARAM_MULTIEXPR";
          default:
            throw new Error("Key not recognized in enum ParamKind");
        }
      }
    case "CoercionContext":
      {
        switch (key) {
          case "COERCION_IMPLICIT":
            return 0;
          case "COERCION_ASSIGNMENT":
            return 1;
          case "COERCION_PLPGSQL":
            return 2;
          case "COERCION_EXPLICIT":
            return 3;
          case 0:
            return "COERCION_IMPLICIT";
          case 1:
            return "COERCION_ASSIGNMENT";
          case 2:
            return "COERCION_PLPGSQL";
          case 3:
            return "COERCION_EXPLICIT";
          default:
            throw new Error("Key not recognized in enum CoercionContext");
        }
      }
    case "CoercionForm":
      {
        switch (key) {
          case "COERCE_EXPLICIT_CALL":
            return 0;
          case "COERCE_EXPLICIT_CAST":
            return 1;
          case "COERCE_IMPLICIT_CAST":
            return 2;
          case "COERCE_SQL_SYNTAX":
            return 3;
          case 0:
            return "COERCE_EXPLICIT_CALL";
          case 1:
            return "COERCE_EXPLICIT_CAST";
          case 2:
            return "COERCE_IMPLICIT_CAST";
          case 3:
            return "COERCE_SQL_SYNTAX";
          default:
            throw new Error("Key not recognized in enum CoercionForm");
        }
      }
    case "BoolExprType":
      {
        switch (key) {
          case "AND_EXPR":
            return 0;
          case "OR_EXPR":
            return 1;
          case "NOT_EXPR":
            return 2;
          case 0:
            return "AND_EXPR";
          case 1:
            return "OR_EXPR";
          case 2:
            return "NOT_EXPR";
          default:
            throw new Error("Key not recognized in enum BoolExprType");
        }
      }
    case "SubLinkType":
      {
        switch (key) {
          case "EXISTS_SUBLINK":
            return 0;
          case "ALL_SUBLINK":
            return 1;
          case "ANY_SUBLINK":
            return 2;
          case "ROWCOMPARE_SUBLINK":
            return 3;
          case "EXPR_SUBLINK":
            return 4;
          case "MULTIEXPR_SUBLINK":
            return 5;
          case "ARRAY_SUBLINK":
            return 6;
          case "CTE_SUBLINK":
            return 7;
          case 0:
            return "EXISTS_SUBLINK";
          case 1:
            return "ALL_SUBLINK";
          case 2:
            return "ANY_SUBLINK";
          case 3:
            return "ROWCOMPARE_SUBLINK";
          case 4:
            return "EXPR_SUBLINK";
          case 5:
            return "MULTIEXPR_SUBLINK";
          case 6:
            return "ARRAY_SUBLINK";
          case 7:
            return "CTE_SUBLINK";
          default:
            throw new Error("Key not recognized in enum SubLinkType");
        }
      }
    case "RowCompareType":
      {
        switch (key) {
          case "ROWCOMPARE_LT":
            return 0;
          case "ROWCOMPARE_LE":
            return 1;
          case "ROWCOMPARE_EQ":
            return 2;
          case "ROWCOMPARE_GE":
            return 3;
          case "ROWCOMPARE_GT":
            return 4;
          case "ROWCOMPARE_NE":
            return 5;
          case 0:
            return "ROWCOMPARE_LT";
          case 1:
            return "ROWCOMPARE_LE";
          case 2:
            return "ROWCOMPARE_EQ";
          case 3:
            return "ROWCOMPARE_GE";
          case 4:
            return "ROWCOMPARE_GT";
          case 5:
            return "ROWCOMPARE_NE";
          default:
            throw new Error("Key not recognized in enum RowCompareType");
        }
      }
    case "MinMaxOp":
      {
        switch (key) {
          case "IS_GREATEST":
            return 0;
          case "IS_LEAST":
            return 1;
          case 0:
            return "IS_GREATEST";
          case 1:
            return "IS_LEAST";
          default:
            throw new Error("Key not recognized in enum MinMaxOp");
        }
      }
    case "SQLValueFunctionOp":
      {
        switch (key) {
          case "SVFOP_CURRENT_DATE":
            return 0;
          case "SVFOP_CURRENT_TIME":
            return 1;
          case "SVFOP_CURRENT_TIME_N":
            return 2;
          case "SVFOP_CURRENT_TIMESTAMP":
            return 3;
          case "SVFOP_CURRENT_TIMESTAMP_N":
            return 4;
          case "SVFOP_LOCALTIME":
            return 5;
          case "SVFOP_LOCALTIME_N":
            return 6;
          case "SVFOP_LOCALTIMESTAMP":
            return 7;
          case "SVFOP_LOCALTIMESTAMP_N":
            return 8;
          case "SVFOP_CURRENT_ROLE":
            return 9;
          case "SVFOP_CURRENT_USER":
            return 10;
          case "SVFOP_USER":
            return 11;
          case "SVFOP_SESSION_USER":
            return 12;
          case "SVFOP_CURRENT_CATALOG":
            return 13;
          case "SVFOP_CURRENT_SCHEMA":
            return 14;
          case 0:
            return "SVFOP_CURRENT_DATE";
          case 1:
            return "SVFOP_CURRENT_TIME";
          case 2:
            return "SVFOP_CURRENT_TIME_N";
          case 3:
            return "SVFOP_CURRENT_TIMESTAMP";
          case 4:
            return "SVFOP_CURRENT_TIMESTAMP_N";
          case 5:
            return "SVFOP_LOCALTIME";
          case 6:
            return "SVFOP_LOCALTIME_N";
          case 7:
            return "SVFOP_LOCALTIMESTAMP";
          case 8:
            return "SVFOP_LOCALTIMESTAMP_N";
          case 9:
            return "SVFOP_CURRENT_ROLE";
          case 10:
            return "SVFOP_CURRENT_USER";
          case 11:
            return "SVFOP_USER";
          case 12:
            return "SVFOP_SESSION_USER";
          case 13:
            return "SVFOP_CURRENT_CATALOG";
          case 14:
            return "SVFOP_CURRENT_SCHEMA";
          default:
            throw new Error("Key not recognized in enum SQLValueFunctionOp");
        }
      }
    case "XmlExprOp":
      {
        switch (key) {
          case "IS_XMLCONCAT":
            return 0;
          case "IS_XMLELEMENT":
            return 1;
          case "IS_XMLFOREST":
            return 2;
          case "IS_XMLPARSE":
            return 3;
          case "IS_XMLPI":
            return 4;
          case "IS_XMLROOT":
            return 5;
          case "IS_XMLSERIALIZE":
            return 6;
          case "IS_DOCUMENT":
            return 7;
          case 0:
            return "IS_XMLCONCAT";
          case 1:
            return "IS_XMLELEMENT";
          case 2:
            return "IS_XMLFOREST";
          case 3:
            return "IS_XMLPARSE";
          case 4:
            return "IS_XMLPI";
          case 5:
            return "IS_XMLROOT";
          case 6:
            return "IS_XMLSERIALIZE";
          case 7:
            return "IS_DOCUMENT";
          default:
            throw new Error("Key not recognized in enum XmlExprOp");
        }
      }
    case "XmlOptionType":
      {
        switch (key) {
          case "XMLOPTION_DOCUMENT":
            return 0;
          case "XMLOPTION_CONTENT":
            return 1;
          case 0:
            return "XMLOPTION_DOCUMENT";
          case 1:
            return "XMLOPTION_CONTENT";
          default:
            throw new Error("Key not recognized in enum XmlOptionType");
        }
      }
    case "JsonEncoding":
      {
        switch (key) {
          case "JS_ENC_DEFAULT":
            return 0;
          case "JS_ENC_UTF8":
            return 1;
          case "JS_ENC_UTF16":
            return 2;
          case "JS_ENC_UTF32":
            return 3;
          case 0:
            return "JS_ENC_DEFAULT";
          case 1:
            return "JS_ENC_UTF8";
          case 2:
            return "JS_ENC_UTF16";
          case 3:
            return "JS_ENC_UTF32";
          default:
            throw new Error("Key not recognized in enum JsonEncoding");
        }
      }
    case "JsonFormatType":
      {
        switch (key) {
          case "JS_FORMAT_DEFAULT":
            return 0;
          case "JS_FORMAT_JSON":
            return 1;
          case "JS_FORMAT_JSONB":
            return 2;
          case 0:
            return "JS_FORMAT_DEFAULT";
          case 1:
            return "JS_FORMAT_JSON";
          case 2:
            return "JS_FORMAT_JSONB";
          default:
            throw new Error("Key not recognized in enum JsonFormatType");
        }
      }
    case "JsonConstructorType":
      {
        switch (key) {
          case "JSCTOR_JSON_OBJECT":
            return 0;
          case "JSCTOR_JSON_ARRAY":
            return 1;
          case "JSCTOR_JSON_OBJECTAGG":
            return 2;
          case "JSCTOR_JSON_ARRAYAGG":
            return 3;
          case 0:
            return "JSCTOR_JSON_OBJECT";
          case 1:
            return "JSCTOR_JSON_ARRAY";
          case 2:
            return "JSCTOR_JSON_OBJECTAGG";
          case 3:
            return "JSCTOR_JSON_ARRAYAGG";
          default:
            throw new Error("Key not recognized in enum JsonConstructorType");
        }
      }
    case "JsonValueType":
      {
        switch (key) {
          case "JS_TYPE_ANY":
            return 0;
          case "JS_TYPE_OBJECT":
            return 1;
          case "JS_TYPE_ARRAY":
            return 2;
          case "JS_TYPE_SCALAR":
            return 3;
          case 0:
            return "JS_TYPE_ANY";
          case 1:
            return "JS_TYPE_OBJECT";
          case 2:
            return "JS_TYPE_ARRAY";
          case 3:
            return "JS_TYPE_SCALAR";
          default:
            throw new Error("Key not recognized in enum JsonValueType");
        }
      }
    case "NullTestType":
      {
        switch (key) {
          case "IS_NULL":
            return 0;
          case "IS_NOT_NULL":
            return 1;
          case 0:
            return "IS_NULL";
          case 1:
            return "IS_NOT_NULL";
          default:
            throw new Error("Key not recognized in enum NullTestType");
        }
      }
    case "BoolTestType":
      {
        switch (key) {
          case "IS_TRUE":
            return 0;
          case "IS_NOT_TRUE":
            return 1;
          case "IS_FALSE":
            return 2;
          case "IS_NOT_FALSE":
            return 3;
          case "IS_UNKNOWN":
            return 4;
          case "IS_NOT_UNKNOWN":
            return 5;
          case 0:
            return "IS_TRUE";
          case 1:
            return "IS_NOT_TRUE";
          case 2:
            return "IS_FALSE";
          case 3:
            return "IS_NOT_FALSE";
          case 4:
            return "IS_UNKNOWN";
          case 5:
            return "IS_NOT_UNKNOWN";
          default:
            throw new Error("Key not recognized in enum BoolTestType");
        }
      }
    case "CmdType":
      {
        switch (key) {
          case "CMD_UNKNOWN":
            return 0;
          case "CMD_SELECT":
            return 1;
          case "CMD_UPDATE":
            return 2;
          case "CMD_INSERT":
            return 3;
          case "CMD_DELETE":
            return 4;
          case "CMD_MERGE":
            return 5;
          case "CMD_UTILITY":
            return 6;
          case "CMD_NOTHING":
            return 7;
          case 0:
            return "CMD_UNKNOWN";
          case 1:
            return "CMD_SELECT";
          case 2:
            return "CMD_UPDATE";
          case 3:
            return "CMD_INSERT";
          case 4:
            return "CMD_DELETE";
          case 5:
            return "CMD_MERGE";
          case 6:
            return "CMD_UTILITY";
          case 7:
            return "CMD_NOTHING";
          default:
            throw new Error("Key not recognized in enum CmdType");
        }
      }
    case "JoinType":
      {
        switch (key) {
          case "JOIN_INNER":
            return 0;
          case "JOIN_LEFT":
            return 1;
          case "JOIN_FULL":
            return 2;
          case "JOIN_RIGHT":
            return 3;
          case "JOIN_SEMI":
            return 4;
          case "JOIN_ANTI":
            return 5;
          case "JOIN_RIGHT_ANTI":
            return 6;
          case "JOIN_UNIQUE_OUTER":
            return 7;
          case "JOIN_UNIQUE_INNER":
            return 8;
          case 0:
            return "JOIN_INNER";
          case 1:
            return "JOIN_LEFT";
          case 2:
            return "JOIN_FULL";
          case 3:
            return "JOIN_RIGHT";
          case 4:
            return "JOIN_SEMI";
          case 5:
            return "JOIN_ANTI";
          case 6:
            return "JOIN_RIGHT_ANTI";
          case 7:
            return "JOIN_UNIQUE_OUTER";
          case 8:
            return "JOIN_UNIQUE_INNER";
          default:
            throw new Error("Key not recognized in enum JoinType");
        }
      }
    case "AggStrategy":
      {
        switch (key) {
          case "AGG_PLAIN":
            return 0;
          case "AGG_SORTED":
            return 1;
          case "AGG_HASHED":
            return 2;
          case "AGG_MIXED":
            return 3;
          case 0:
            return "AGG_PLAIN";
          case 1:
            return "AGG_SORTED";
          case 2:
            return "AGG_HASHED";
          case 3:
            return "AGG_MIXED";
          default:
            throw new Error("Key not recognized in enum AggStrategy");
        }
      }
    case "AggSplit":
      {
        switch (key) {
          case "AGGSPLIT_SIMPLE":
            return 0;
          case "AGGSPLIT_INITIAL_SERIAL":
            return 1;
          case "AGGSPLIT_FINAL_DESERIAL":
            return 2;
          case 0:
            return "AGGSPLIT_SIMPLE";
          case 1:
            return "AGGSPLIT_INITIAL_SERIAL";
          case 2:
            return "AGGSPLIT_FINAL_DESERIAL";
          default:
            throw new Error("Key not recognized in enum AggSplit");
        }
      }
    case "SetOpCmd":
      {
        switch (key) {
          case "SETOPCMD_INTERSECT":
            return 0;
          case "SETOPCMD_INTERSECT_ALL":
            return 1;
          case "SETOPCMD_EXCEPT":
            return 2;
          case "SETOPCMD_EXCEPT_ALL":
            return 3;
          case 0:
            return "SETOPCMD_INTERSECT";
          case 1:
            return "SETOPCMD_INTERSECT_ALL";
          case 2:
            return "SETOPCMD_EXCEPT";
          case 3:
            return "SETOPCMD_EXCEPT_ALL";
          default:
            throw new Error("Key not recognized in enum SetOpCmd");
        }
      }
    case "SetOpStrategy":
      {
        switch (key) {
          case "SETOP_SORTED":
            return 0;
          case "SETOP_HASHED":
            return 1;
          case 0:
            return "SETOP_SORTED";
          case 1:
            return "SETOP_HASHED";
          default:
            throw new Error("Key not recognized in enum SetOpStrategy");
        }
      }
    case "OnConflictAction":
      {
        switch (key) {
          case "ONCONFLICT_NONE":
            return 0;
          case "ONCONFLICT_NOTHING":
            return 1;
          case "ONCONFLICT_UPDATE":
            return 2;
          case 0:
            return "ONCONFLICT_NONE";
          case 1:
            return "ONCONFLICT_NOTHING";
          case 2:
            return "ONCONFLICT_UPDATE";
          default:
            throw new Error("Key not recognized in enum OnConflictAction");
        }
      }
    case "LimitOption":
      {
        switch (key) {
          case "LIMIT_OPTION_DEFAULT":
            return 0;
          case "LIMIT_OPTION_COUNT":
            return 1;
          case "LIMIT_OPTION_WITH_TIES":
            return 2;
          case 0:
            return "LIMIT_OPTION_DEFAULT";
          case 1:
            return "LIMIT_OPTION_COUNT";
          case 2:
            return "LIMIT_OPTION_WITH_TIES";
          default:
            throw new Error("Key not recognized in enum LimitOption");
        }
      }
    case "LockClauseStrength":
      {
        switch (key) {
          case "LCS_NONE":
            return 0;
          case "LCS_FORKEYSHARE":
            return 1;
          case "LCS_FORSHARE":
            return 2;
          case "LCS_FORNOKEYUPDATE":
            return 3;
          case "LCS_FORUPDATE":
            return 4;
          case 0:
            return "LCS_NONE";
          case 1:
            return "LCS_FORKEYSHARE";
          case 2:
            return "LCS_FORSHARE";
          case 3:
            return "LCS_FORNOKEYUPDATE";
          case 4:
            return "LCS_FORUPDATE";
          default:
            throw new Error("Key not recognized in enum LockClauseStrength");
        }
      }
    case "LockWaitPolicy":
      {
        switch (key) {
          case "LockWaitBlock":
            return 0;
          case "LockWaitSkip":
            return 1;
          case "LockWaitError":
            return 2;
          case 0:
            return "LockWaitBlock";
          case 1:
            return "LockWaitSkip";
          case 2:
            return "LockWaitError";
          default:
            throw new Error("Key not recognized in enum LockWaitPolicy");
        }
      }
    case "LockTupleMode":
      {
        switch (key) {
          case "LockTupleKeyShare":
            return 0;
          case "LockTupleShare":
            return 1;
          case "LockTupleNoKeyExclusive":
            return 2;
          case "LockTupleExclusive":
            return 3;
          case 0:
            return "LockTupleKeyShare";
          case 1:
            return "LockTupleShare";
          case 2:
            return "LockTupleNoKeyExclusive";
          case 3:
            return "LockTupleExclusive";
          default:
            throw new Error("Key not recognized in enum LockTupleMode");
        }
      }
    case "KeywordKind":
      {
        switch (key) {
          case "NO_KEYWORD":
            return 0;
          case "UNRESERVED_KEYWORD":
            return 1;
          case "COL_NAME_KEYWORD":
            return 2;
          case "TYPE_FUNC_NAME_KEYWORD":
            return 3;
          case "RESERVED_KEYWORD":
            return 4;
          case 0:
            return "NO_KEYWORD";
          case 1:
            return "UNRESERVED_KEYWORD";
          case 2:
            return "COL_NAME_KEYWORD";
          case 3:
            return "TYPE_FUNC_NAME_KEYWORD";
          case 4:
            return "RESERVED_KEYWORD";
          default:
            throw new Error("Key not recognized in enum KeywordKind");
        }
      }
    case "Token":
      {
        switch (key) {
          case "NUL":
            return 0;
          case "ASCII_36":
            return 36;
          case "ASCII_37":
            return 37;
          case "ASCII_40":
            return 40;
          case "ASCII_41":
            return 41;
          case "ASCII_42":
            return 42;
          case "ASCII_43":
            return 43;
          case "ASCII_44":
            return 44;
          case "ASCII_45":
            return 45;
          case "ASCII_46":
            return 46;
          case "ASCII_47":
            return 47;
          case "ASCII_58":
            return 58;
          case "ASCII_59":
            return 59;
          case "ASCII_60":
            return 60;
          case "ASCII_61":
            return 61;
          case "ASCII_62":
            return 62;
          case "ASCII_63":
            return 63;
          case "ASCII_91":
            return 91;
          case "ASCII_92":
            return 92;
          case "ASCII_93":
            return 93;
          case "ASCII_94":
            return 94;
          case "IDENT":
            return 258;
          case "UIDENT":
            return 259;
          case "FCONST":
            return 260;
          case "SCONST":
            return 261;
          case "USCONST":
            return 262;
          case "BCONST":
            return 263;
          case "XCONST":
            return 264;
          case "Op":
            return 265;
          case "ICONST":
            return 266;
          case "PARAM":
            return 267;
          case "TYPECAST":
            return 268;
          case "DOT_DOT":
            return 269;
          case "COLON_EQUALS":
            return 270;
          case "EQUALS_GREATER":
            return 271;
          case "LESS_EQUALS":
            return 272;
          case "GREATER_EQUALS":
            return 273;
          case "NOT_EQUALS":
            return 274;
          case "SQL_COMMENT":
            return 275;
          case "C_COMMENT":
            return 276;
          case "ABORT_P":
            return 277;
          case "ABSENT":
            return 278;
          case "ABSOLUTE_P":
            return 279;
          case "ACCESS":
            return 280;
          case "ACTION":
            return 281;
          case "ADD_P":
            return 282;
          case "ADMIN":
            return 283;
          case "AFTER":
            return 284;
          case "AGGREGATE":
            return 285;
          case "ALL":
            return 286;
          case "ALSO":
            return 287;
          case "ALTER":
            return 288;
          case "ALWAYS":
            return 289;
          case "ANALYSE":
            return 290;
          case "ANALYZE":
            return 291;
          case "AND":
            return 292;
          case "ANY":
            return 293;
          case "ARRAY":
            return 294;
          case "AS":
            return 295;
          case "ASC":
            return 296;
          case "ASENSITIVE":
            return 297;
          case "ASSERTION":
            return 298;
          case "ASSIGNMENT":
            return 299;
          case "ASYMMETRIC":
            return 300;
          case "ATOMIC":
            return 301;
          case "AT":
            return 302;
          case "ATTACH":
            return 303;
          case "ATTRIBUTE":
            return 304;
          case "AUTHORIZATION":
            return 305;
          case "BACKWARD":
            return 306;
          case "BEFORE":
            return 307;
          case "BEGIN_P":
            return 308;
          case "BETWEEN":
            return 309;
          case "BIGINT":
            return 310;
          case "BINARY":
            return 311;
          case "BIT":
            return 312;
          case "BOOLEAN_P":
            return 313;
          case "BOTH":
            return 314;
          case "BREADTH":
            return 315;
          case "BY":
            return 316;
          case "CACHE":
            return 317;
          case "CALL":
            return 318;
          case "CALLED":
            return 319;
          case "CASCADE":
            return 320;
          case "CASCADED":
            return 321;
          case "CASE":
            return 322;
          case "CAST":
            return 323;
          case "CATALOG_P":
            return 324;
          case "CHAIN":
            return 325;
          case "CHAR_P":
            return 326;
          case "CHARACTER":
            return 327;
          case "CHARACTERISTICS":
            return 328;
          case "CHECK":
            return 329;
          case "CHECKPOINT":
            return 330;
          case "CLASS":
            return 331;
          case "CLOSE":
            return 332;
          case "CLUSTER":
            return 333;
          case "COALESCE":
            return 334;
          case "COLLATE":
            return 335;
          case "COLLATION":
            return 336;
          case "COLUMN":
            return 337;
          case "COLUMNS":
            return 338;
          case "COMMENT":
            return 339;
          case "COMMENTS":
            return 340;
          case "COMMIT":
            return 341;
          case "COMMITTED":
            return 342;
          case "COMPRESSION":
            return 343;
          case "CONCURRENTLY":
            return 344;
          case "CONFIGURATION":
            return 345;
          case "CONFLICT":
            return 346;
          case "CONNECTION":
            return 347;
          case "CONSTRAINT":
            return 348;
          case "CONSTRAINTS":
            return 349;
          case "CONTENT_P":
            return 350;
          case "CONTINUE_P":
            return 351;
          case "CONVERSION_P":
            return 352;
          case "COPY":
            return 353;
          case "COST":
            return 354;
          case "CREATE":
            return 355;
          case "CROSS":
            return 356;
          case "CSV":
            return 357;
          case "CUBE":
            return 358;
          case "CURRENT_P":
            return 359;
          case "CURRENT_CATALOG":
            return 360;
          case "CURRENT_DATE":
            return 361;
          case "CURRENT_ROLE":
            return 362;
          case "CURRENT_SCHEMA":
            return 363;
          case "CURRENT_TIME":
            return 364;
          case "CURRENT_TIMESTAMP":
            return 365;
          case "CURRENT_USER":
            return 366;
          case "CURSOR":
            return 367;
          case "CYCLE":
            return 368;
          case "DATA_P":
            return 369;
          case "DATABASE":
            return 370;
          case "DAY_P":
            return 371;
          case "DEALLOCATE":
            return 372;
          case "DEC":
            return 373;
          case "DECIMAL_P":
            return 374;
          case "DECLARE":
            return 375;
          case "DEFAULT":
            return 376;
          case "DEFAULTS":
            return 377;
          case "DEFERRABLE":
            return 378;
          case "DEFERRED":
            return 379;
          case "DEFINER":
            return 380;
          case "DELETE_P":
            return 381;
          case "DELIMITER":
            return 382;
          case "DELIMITERS":
            return 383;
          case "DEPENDS":
            return 384;
          case "DEPTH":
            return 385;
          case "DESC":
            return 386;
          case "DETACH":
            return 387;
          case "DICTIONARY":
            return 388;
          case "DISABLE_P":
            return 389;
          case "DISCARD":
            return 390;
          case "DISTINCT":
            return 391;
          case "DO":
            return 392;
          case "DOCUMENT_P":
            return 393;
          case "DOMAIN_P":
            return 394;
          case "DOUBLE_P":
            return 395;
          case "DROP":
            return 396;
          case "EACH":
            return 397;
          case "ELSE":
            return 398;
          case "ENABLE_P":
            return 399;
          case "ENCODING":
            return 400;
          case "ENCRYPTED":
            return 401;
          case "END_P":
            return 402;
          case "ENUM_P":
            return 403;
          case "ESCAPE":
            return 404;
          case "EVENT":
            return 405;
          case "EXCEPT":
            return 406;
          case "EXCLUDE":
            return 407;
          case "EXCLUDING":
            return 408;
          case "EXCLUSIVE":
            return 409;
          case "EXECUTE":
            return 410;
          case "EXISTS":
            return 411;
          case "EXPLAIN":
            return 412;
          case "EXPRESSION":
            return 413;
          case "EXTENSION":
            return 414;
          case "EXTERNAL":
            return 415;
          case "EXTRACT":
            return 416;
          case "FALSE_P":
            return 417;
          case "FAMILY":
            return 418;
          case "FETCH":
            return 419;
          case "FILTER":
            return 420;
          case "FINALIZE":
            return 421;
          case "FIRST_P":
            return 422;
          case "FLOAT_P":
            return 423;
          case "FOLLOWING":
            return 424;
          case "FOR":
            return 425;
          case "FORCE":
            return 426;
          case "FOREIGN":
            return 427;
          case "FORMAT":
            return 428;
          case "FORWARD":
            return 429;
          case "FREEZE":
            return 430;
          case "FROM":
            return 431;
          case "FULL":
            return 432;
          case "FUNCTION":
            return 433;
          case "FUNCTIONS":
            return 434;
          case "GENERATED":
            return 435;
          case "GLOBAL":
            return 436;
          case "GRANT":
            return 437;
          case "GRANTED":
            return 438;
          case "GREATEST":
            return 439;
          case "GROUP_P":
            return 440;
          case "GROUPING":
            return 441;
          case "GROUPS":
            return 442;
          case "HANDLER":
            return 443;
          case "HAVING":
            return 444;
          case "HEADER_P":
            return 445;
          case "HOLD":
            return 446;
          case "HOUR_P":
            return 447;
          case "IDENTITY_P":
            return 448;
          case "IF_P":
            return 449;
          case "ILIKE":
            return 450;
          case "IMMEDIATE":
            return 451;
          case "IMMUTABLE":
            return 452;
          case "IMPLICIT_P":
            return 453;
          case "IMPORT_P":
            return 454;
          case "IN_P":
            return 455;
          case "INCLUDE":
            return 456;
          case "INCLUDING":
            return 457;
          case "INCREMENT":
            return 458;
          case "INDENT":
            return 459;
          case "INDEX":
            return 460;
          case "INDEXES":
            return 461;
          case "INHERIT":
            return 462;
          case "INHERITS":
            return 463;
          case "INITIALLY":
            return 464;
          case "INLINE_P":
            return 465;
          case "INNER_P":
            return 466;
          case "INOUT":
            return 467;
          case "INPUT_P":
            return 468;
          case "INSENSITIVE":
            return 469;
          case "INSERT":
            return 470;
          case "INSTEAD":
            return 471;
          case "INT_P":
            return 472;
          case "INTEGER":
            return 473;
          case "INTERSECT":
            return 474;
          case "INTERVAL":
            return 475;
          case "INTO":
            return 476;
          case "INVOKER":
            return 477;
          case "IS":
            return 478;
          case "ISNULL":
            return 479;
          case "ISOLATION":
            return 480;
          case "JOIN":
            return 481;
          case "JSON":
            return 482;
          case "JSON_ARRAY":
            return 483;
          case "JSON_ARRAYAGG":
            return 484;
          case "JSON_OBJECT":
            return 485;
          case "JSON_OBJECTAGG":
            return 486;
          case "KEY":
            return 487;
          case "KEYS":
            return 488;
          case "LABEL":
            return 489;
          case "LANGUAGE":
            return 490;
          case "LARGE_P":
            return 491;
          case "LAST_P":
            return 492;
          case "LATERAL_P":
            return 493;
          case "LEADING":
            return 494;
          case "LEAKPROOF":
            return 495;
          case "LEAST":
            return 496;
          case "LEFT":
            return 497;
          case "LEVEL":
            return 498;
          case "LIKE":
            return 499;
          case "LIMIT":
            return 500;
          case "LISTEN":
            return 501;
          case "LOAD":
            return 502;
          case "LOCAL":
            return 503;
          case "LOCALTIME":
            return 504;
          case "LOCALTIMESTAMP":
            return 505;
          case "LOCATION":
            return 506;
          case "LOCK_P":
            return 507;
          case "LOCKED":
            return 508;
          case "LOGGED":
            return 509;
          case "MAPPING":
            return 510;
          case "MATCH":
            return 511;
          case "MATCHED":
            return 512;
          case "MATERIALIZED":
            return 513;
          case "MAXVALUE":
            return 514;
          case "MERGE":
            return 515;
          case "METHOD":
            return 516;
          case "MINUTE_P":
            return 517;
          case "MINVALUE":
            return 518;
          case "MODE":
            return 519;
          case "MONTH_P":
            return 520;
          case "MOVE":
            return 521;
          case "NAME_P":
            return 522;
          case "NAMES":
            return 523;
          case "NATIONAL":
            return 524;
          case "NATURAL":
            return 525;
          case "NCHAR":
            return 526;
          case "NEW":
            return 527;
          case "NEXT":
            return 528;
          case "NFC":
            return 529;
          case "NFD":
            return 530;
          case "NFKC":
            return 531;
          case "NFKD":
            return 532;
          case "NO":
            return 533;
          case "NONE":
            return 534;
          case "NORMALIZE":
            return 535;
          case "NORMALIZED":
            return 536;
          case "NOT":
            return 537;
          case "NOTHING":
            return 538;
          case "NOTIFY":
            return 539;
          case "NOTNULL":
            return 540;
          case "NOWAIT":
            return 541;
          case "NULL_P":
            return 542;
          case "NULLIF":
            return 543;
          case "NULLS_P":
            return 544;
          case "NUMERIC":
            return 545;
          case "OBJECT_P":
            return 546;
          case "OF":
            return 547;
          case "OFF":
            return 548;
          case "OFFSET":
            return 549;
          case "OIDS":
            return 550;
          case "OLD":
            return 551;
          case "ON":
            return 552;
          case "ONLY":
            return 553;
          case "OPERATOR":
            return 554;
          case "OPTION":
            return 555;
          case "OPTIONS":
            return 556;
          case "OR":
            return 557;
          case "ORDER":
            return 558;
          case "ORDINALITY":
            return 559;
          case "OTHERS":
            return 560;
          case "OUT_P":
            return 561;
          case "OUTER_P":
            return 562;
          case "OVER":
            return 563;
          case "OVERLAPS":
            return 564;
          case "OVERLAY":
            return 565;
          case "OVERRIDING":
            return 566;
          case "OWNED":
            return 567;
          case "OWNER":
            return 568;
          case "PARALLEL":
            return 569;
          case "PARAMETER":
            return 570;
          case "PARSER":
            return 571;
          case "PARTIAL":
            return 572;
          case "PARTITION":
            return 573;
          case "PASSING":
            return 574;
          case "PASSWORD":
            return 575;
          case "PLACING":
            return 576;
          case "PLANS":
            return 577;
          case "POLICY":
            return 578;
          case "POSITION":
            return 579;
          case "PRECEDING":
            return 580;
          case "PRECISION":
            return 581;
          case "PRESERVE":
            return 582;
          case "PREPARE":
            return 583;
          case "PREPARED":
            return 584;
          case "PRIMARY":
            return 585;
          case "PRIOR":
            return 586;
          case "PRIVILEGES":
            return 587;
          case "PROCEDURAL":
            return 588;
          case "PROCEDURE":
            return 589;
          case "PROCEDURES":
            return 590;
          case "PROGRAM":
            return 591;
          case "PUBLICATION":
            return 592;
          case "QUOTE":
            return 593;
          case "RANGE":
            return 594;
          case "READ":
            return 595;
          case "REAL":
            return 596;
          case "REASSIGN":
            return 597;
          case "RECHECK":
            return 598;
          case "RECURSIVE":
            return 599;
          case "REF_P":
            return 600;
          case "REFERENCES":
            return 601;
          case "REFERENCING":
            return 602;
          case "REFRESH":
            return 603;
          case "REINDEX":
            return 604;
          case "RELATIVE_P":
            return 605;
          case "RELEASE":
            return 606;
          case "RENAME":
            return 607;
          case "REPEATABLE":
            return 608;
          case "REPLACE":
            return 609;
          case "REPLICA":
            return 610;
          case "RESET":
            return 611;
          case "RESTART":
            return 612;
          case "RESTRICT":
            return 613;
          case "RETURN":
            return 614;
          case "RETURNING":
            return 615;
          case "RETURNS":
            return 616;
          case "REVOKE":
            return 617;
          case "RIGHT":
            return 618;
          case "ROLE":
            return 619;
          case "ROLLBACK":
            return 620;
          case "ROLLUP":
            return 621;
          case "ROUTINE":
            return 622;
          case "ROUTINES":
            return 623;
          case "ROW":
            return 624;
          case "ROWS":
            return 625;
          case "RULE":
            return 626;
          case "SAVEPOINT":
            return 627;
          case "SCALAR":
            return 628;
          case "SCHEMA":
            return 629;
          case "SCHEMAS":
            return 630;
          case "SCROLL":
            return 631;
          case "SEARCH":
            return 632;
          case "SECOND_P":
            return 633;
          case "SECURITY":
            return 634;
          case "SELECT":
            return 635;
          case "SEQUENCE":
            return 636;
          case "SEQUENCES":
            return 637;
          case "SERIALIZABLE":
            return 638;
          case "SERVER":
            return 639;
          case "SESSION":
            return 640;
          case "SESSION_USER":
            return 641;
          case "SET":
            return 642;
          case "SETS":
            return 643;
          case "SETOF":
            return 644;
          case "SHARE":
            return 645;
          case "SHOW":
            return 646;
          case "SIMILAR":
            return 647;
          case "SIMPLE":
            return 648;
          case "SKIP":
            return 649;
          case "SMALLINT":
            return 650;
          case "SNAPSHOT":
            return 651;
          case "SOME":
            return 652;
          case "SQL_P":
            return 653;
          case "STABLE":
            return 654;
          case "STANDALONE_P":
            return 655;
          case "START":
            return 656;
          case "STATEMENT":
            return 657;
          case "STATISTICS":
            return 658;
          case "STDIN":
            return 659;
          case "STDOUT":
            return 660;
          case "STORAGE":
            return 661;
          case "STORED":
            return 662;
          case "STRICT_P":
            return 663;
          case "STRIP_P":
            return 664;
          case "SUBSCRIPTION":
            return 665;
          case "SUBSTRING":
            return 666;
          case "SUPPORT":
            return 667;
          case "SYMMETRIC":
            return 668;
          case "SYSID":
            return 669;
          case "SYSTEM_P":
            return 670;
          case "SYSTEM_USER":
            return 671;
          case "TABLE":
            return 672;
          case "TABLES":
            return 673;
          case "TABLESAMPLE":
            return 674;
          case "TABLESPACE":
            return 675;
          case "TEMP":
            return 676;
          case "TEMPLATE":
            return 677;
          case "TEMPORARY":
            return 678;
          case "TEXT_P":
            return 679;
          case "THEN":
            return 680;
          case "TIES":
            return 681;
          case "TIME":
            return 682;
          case "TIMESTAMP":
            return 683;
          case "TO":
            return 684;
          case "TRAILING":
            return 685;
          case "TRANSACTION":
            return 686;
          case "TRANSFORM":
            return 687;
          case "TREAT":
            return 688;
          case "TRIGGER":
            return 689;
          case "TRIM":
            return 690;
          case "TRUE_P":
            return 691;
          case "TRUNCATE":
            return 692;
          case "TRUSTED":
            return 693;
          case "TYPE_P":
            return 694;
          case "TYPES_P":
            return 695;
          case "UESCAPE":
            return 696;
          case "UNBOUNDED":
            return 697;
          case "UNCOMMITTED":
            return 698;
          case "UNENCRYPTED":
            return 699;
          case "UNION":
            return 700;
          case "UNIQUE":
            return 701;
          case "UNKNOWN":
            return 702;
          case "UNLISTEN":
            return 703;
          case "UNLOGGED":
            return 704;
          case "UNTIL":
            return 705;
          case "UPDATE":
            return 706;
          case "USER":
            return 707;
          case "USING":
            return 708;
          case "VACUUM":
            return 709;
          case "VALID":
            return 710;
          case "VALIDATE":
            return 711;
          case "VALIDATOR":
            return 712;
          case "VALUE_P":
            return 713;
          case "VALUES":
            return 714;
          case "VARCHAR":
            return 715;
          case "VARIADIC":
            return 716;
          case "VARYING":
            return 717;
          case "VERBOSE":
            return 718;
          case "VERSION_P":
            return 719;
          case "VIEW":
            return 720;
          case "VIEWS":
            return 721;
          case "VOLATILE":
            return 722;
          case "WHEN":
            return 723;
          case "WHERE":
            return 724;
          case "WHITESPACE_P":
            return 725;
          case "WINDOW":
            return 726;
          case "WITH":
            return 727;
          case "WITHIN":
            return 728;
          case "WITHOUT":
            return 729;
          case "WORK":
            return 730;
          case "WRAPPER":
            return 731;
          case "WRITE":
            return 732;
          case "XML_P":
            return 733;
          case "XMLATTRIBUTES":
            return 734;
          case "XMLCONCAT":
            return 735;
          case "XMLELEMENT":
            return 736;
          case "XMLEXISTS":
            return 737;
          case "XMLFOREST":
            return 738;
          case "XMLNAMESPACES":
            return 739;
          case "XMLPARSE":
            return 740;
          case "XMLPI":
            return 741;
          case "XMLROOT":
            return 742;
          case "XMLSERIALIZE":
            return 743;
          case "XMLTABLE":
            return 744;
          case "YEAR_P":
            return 745;
          case "YES_P":
            return 746;
          case "ZONE":
            return 747;
          case "FORMAT_LA":
            return 748;
          case "NOT_LA":
            return 749;
          case "NULLS_LA":
            return 750;
          case "WITH_LA":
            return 751;
          case "WITHOUT_LA":
            return 752;
          case "MODE_TYPE_NAME":
            return 753;
          case "MODE_PLPGSQL_EXPR":
            return 754;
          case "MODE_PLPGSQL_ASSIGN1":
            return 755;
          case "MODE_PLPGSQL_ASSIGN2":
            return 756;
          case "MODE_PLPGSQL_ASSIGN3":
            return 757;
          case "UMINUS":
            return 758;
          case 0:
            return "NUL";
          case 36:
            return "ASCII_36";
          case 37:
            return "ASCII_37";
          case 40:
            return "ASCII_40";
          case 41:
            return "ASCII_41";
          case 42:
            return "ASCII_42";
          case 43:
            return "ASCII_43";
          case 44:
            return "ASCII_44";
          case 45:
            return "ASCII_45";
          case 46:
            return "ASCII_46";
          case 47:
            return "ASCII_47";
          case 58:
            return "ASCII_58";
          case 59:
            return "ASCII_59";
          case 60:
            return "ASCII_60";
          case 61:
            return "ASCII_61";
          case 62:
            return "ASCII_62";
          case 63:
            return "ASCII_63";
          case 91:
            return "ASCII_91";
          case 92:
            return "ASCII_92";
          case 93:
            return "ASCII_93";
          case 94:
            return "ASCII_94";
          case 258:
            return "IDENT";
          case 259:
            return "UIDENT";
          case 260:
            return "FCONST";
          case 261:
            return "SCONST";
          case 262:
            return "USCONST";
          case 263:
            return "BCONST";
          case 264:
            return "XCONST";
          case 265:
            return "Op";
          case 266:
            return "ICONST";
          case 267:
            return "PARAM";
          case 268:
            return "TYPECAST";
          case 269:
            return "DOT_DOT";
          case 270:
            return "COLON_EQUALS";
          case 271:
            return "EQUALS_GREATER";
          case 272:
            return "LESS_EQUALS";
          case 273:
            return "GREATER_EQUALS";
          case 274:
            return "NOT_EQUALS";
          case 275:
            return "SQL_COMMENT";
          case 276:
            return "C_COMMENT";
          case 277:
            return "ABORT_P";
          case 278:
            return "ABSENT";
          case 279:
            return "ABSOLUTE_P";
          case 280:
            return "ACCESS";
          case 281:
            return "ACTION";
          case 282:
            return "ADD_P";
          case 283:
            return "ADMIN";
          case 284:
            return "AFTER";
          case 285:
            return "AGGREGATE";
          case 286:
            return "ALL";
          case 287:
            return "ALSO";
          case 288:
            return "ALTER";
          case 289:
            return "ALWAYS";
          case 290:
            return "ANALYSE";
          case 291:
            return "ANALYZE";
          case 292:
            return "AND";
          case 293:
            return "ANY";
          case 294:
            return "ARRAY";
          case 295:
            return "AS";
          case 296:
            return "ASC";
          case 297:
            return "ASENSITIVE";
          case 298:
            return "ASSERTION";
          case 299:
            return "ASSIGNMENT";
          case 300:
            return "ASYMMETRIC";
          case 301:
            return "ATOMIC";
          case 302:
            return "AT";
          case 303:
            return "ATTACH";
          case 304:
            return "ATTRIBUTE";
          case 305:
            return "AUTHORIZATION";
          case 306:
            return "BACKWARD";
          case 307:
            return "BEFORE";
          case 308:
            return "BEGIN_P";
          case 309:
            return "BETWEEN";
          case 310:
            return "BIGINT";
          case 311:
            return "BINARY";
          case 312:
            return "BIT";
          case 313:
            return "BOOLEAN_P";
          case 314:
            return "BOTH";
          case 315:
            return "BREADTH";
          case 316:
            return "BY";
          case 317:
            return "CACHE";
          case 318:
            return "CALL";
          case 319:
            return "CALLED";
          case 320:
            return "CASCADE";
          case 321:
            return "CASCADED";
          case 322:
            return "CASE";
          case 323:
            return "CAST";
          case 324:
            return "CATALOG_P";
          case 325:
            return "CHAIN";
          case 326:
            return "CHAR_P";
          case 327:
            return "CHARACTER";
          case 328:
            return "CHARACTERISTICS";
          case 329:
            return "CHECK";
          case 330:
            return "CHECKPOINT";
          case 331:
            return "CLASS";
          case 332:
            return "CLOSE";
          case 333:
            return "CLUSTER";
          case 334:
            return "COALESCE";
          case 335:
            return "COLLATE";
          case 336:
            return "COLLATION";
          case 337:
            return "COLUMN";
          case 338:
            return "COLUMNS";
          case 339:
            return "COMMENT";
          case 340:
            return "COMMENTS";
          case 341:
            return "COMMIT";
          case 342:
            return "COMMITTED";
          case 343:
            return "COMPRESSION";
          case 344:
            return "CONCURRENTLY";
          case 345:
            return "CONFIGURATION";
          case 346:
            return "CONFLICT";
          case 347:
            return "CONNECTION";
          case 348:
            return "CONSTRAINT";
          case 349:
            return "CONSTRAINTS";
          case 350:
            return "CONTENT_P";
          case 351:
            return "CONTINUE_P";
          case 352:
            return "CONVERSION_P";
          case 353:
            return "COPY";
          case 354:
            return "COST";
          case 355:
            return "CREATE";
          case 356:
            return "CROSS";
          case 357:
            return "CSV";
          case 358:
            return "CUBE";
          case 359:
            return "CURRENT_P";
          case 360:
            return "CURRENT_CATALOG";
          case 361:
            return "CURRENT_DATE";
          case 362:
            return "CURRENT_ROLE";
          case 363:
            return "CURRENT_SCHEMA";
          case 364:
            return "CURRENT_TIME";
          case 365:
            return "CURRENT_TIMESTAMP";
          case 366:
            return "CURRENT_USER";
          case 367:
            return "CURSOR";
          case 368:
            return "CYCLE";
          case 369:
            return "DATA_P";
          case 370:
            return "DATABASE";
          case 371:
            return "DAY_P";
          case 372:
            return "DEALLOCATE";
          case 373:
            return "DEC";
          case 374:
            return "DECIMAL_P";
          case 375:
            return "DECLARE";
          case 376:
            return "DEFAULT";
          case 377:
            return "DEFAULTS";
          case 378:
            return "DEFERRABLE";
          case 379:
            return "DEFERRED";
          case 380:
            return "DEFINER";
          case 381:
            return "DELETE_P";
          case 382:
            return "DELIMITER";
          case 383:
            return "DELIMITERS";
          case 384:
            return "DEPENDS";
          case 385:
            return "DEPTH";
          case 386:
            return "DESC";
          case 387:
            return "DETACH";
          case 388:
            return "DICTIONARY";
          case 389:
            return "DISABLE_P";
          case 390:
            return "DISCARD";
          case 391:
            return "DISTINCT";
          case 392:
            return "DO";
          case 393:
            return "DOCUMENT_P";
          case 394:
            return "DOMAIN_P";
          case 395:
            return "DOUBLE_P";
          case 396:
            return "DROP";
          case 397:
            return "EACH";
          case 398:
            return "ELSE";
          case 399:
            return "ENABLE_P";
          case 400:
            return "ENCODING";
          case 401:
            return "ENCRYPTED";
          case 402:
            return "END_P";
          case 403:
            return "ENUM_P";
          case 404:
            return "ESCAPE";
          case 405:
            return "EVENT";
          case 406:
            return "EXCEPT";
          case 407:
            return "EXCLUDE";
          case 408:
            return "EXCLUDING";
          case 409:
            return "EXCLUSIVE";
          case 410:
            return "EXECUTE";
          case 411:
            return "EXISTS";
          case 412:
            return "EXPLAIN";
          case 413:
            return "EXPRESSION";
          case 414:
            return "EXTENSION";
          case 415:
            return "EXTERNAL";
          case 416:
            return "EXTRACT";
          case 417:
            return "FALSE_P";
          case 418:
            return "FAMILY";
          case 419:
            return "FETCH";
          case 420:
            return "FILTER";
          case 421:
            return "FINALIZE";
          case 422:
            return "FIRST_P";
          case 423:
            return "FLOAT_P";
          case 424:
            return "FOLLOWING";
          case 425:
            return "FOR";
          case 426:
            return "FORCE";
          case 427:
            return "FOREIGN";
          case 428:
            return "FORMAT";
          case 429:
            return "FORWARD";
          case 430:
            return "FREEZE";
          case 431:
            return "FROM";
          case 432:
            return "FULL";
          case 433:
            return "FUNCTION";
          case 434:
            return "FUNCTIONS";
          case 435:
            return "GENERATED";
          case 436:
            return "GLOBAL";
          case 437:
            return "GRANT";
          case 438:
            return "GRANTED";
          case 439:
            return "GREATEST";
          case 440:
            return "GROUP_P";
          case 441:
            return "GROUPING";
          case 442:
            return "GROUPS";
          case 443:
            return "HANDLER";
          case 444:
            return "HAVING";
          case 445:
            return "HEADER_P";
          case 446:
            return "HOLD";
          case 447:
            return "HOUR_P";
          case 448:
            return "IDENTITY_P";
          case 449:
            return "IF_P";
          case 450:
            return "ILIKE";
          case 451:
            return "IMMEDIATE";
          case 452:
            return "IMMUTABLE";
          case 453:
            return "IMPLICIT_P";
          case 454:
            return "IMPORT_P";
          case 455:
            return "IN_P";
          case 456:
            return "INCLUDE";
          case 457:
            return "INCLUDING";
          case 458:
            return "INCREMENT";
          case 459:
            return "INDENT";
          case 460:
            return "INDEX";
          case 461:
            return "INDEXES";
          case 462:
            return "INHERIT";
          case 463:
            return "INHERITS";
          case 464:
            return "INITIALLY";
          case 465:
            return "INLINE_P";
          case 466:
            return "INNER_P";
          case 467:
            return "INOUT";
          case 468:
            return "INPUT_P";
          case 469:
            return "INSENSITIVE";
          case 470:
            return "INSERT";
          case 471:
            return "INSTEAD";
          case 472:
            return "INT_P";
          case 473:
            return "INTEGER";
          case 474:
            return "INTERSECT";
          case 475:
            return "INTERVAL";
          case 476:
            return "INTO";
          case 477:
            return "INVOKER";
          case 478:
            return "IS";
          case 479:
            return "ISNULL";
          case 480:
            return "ISOLATION";
          case 481:
            return "JOIN";
          case 482:
            return "JSON";
          case 483:
            return "JSON_ARRAY";
          case 484:
            return "JSON_ARRAYAGG";
          case 485:
            return "JSON_OBJECT";
          case 486:
            return "JSON_OBJECTAGG";
          case 487:
            return "KEY";
          case 488:
            return "KEYS";
          case 489:
            return "LABEL";
          case 490:
            return "LANGUAGE";
          case 491:
            return "LARGE_P";
          case 492:
            return "LAST_P";
          case 493:
            return "LATERAL_P";
          case 494:
            return "LEADING";
          case 495:
            return "LEAKPROOF";
          case 496:
            return "LEAST";
          case 497:
            return "LEFT";
          case 498:
            return "LEVEL";
          case 499:
            return "LIKE";
          case 500:
            return "LIMIT";
          case 501:
            return "LISTEN";
          case 502:
            return "LOAD";
          case 503:
            return "LOCAL";
          case 504:
            return "LOCALTIME";
          case 505:
            return "LOCALTIMESTAMP";
          case 506:
            return "LOCATION";
          case 507:
            return "LOCK_P";
          case 508:
            return "LOCKED";
          case 509:
            return "LOGGED";
          case 510:
            return "MAPPING";
          case 511:
            return "MATCH";
          case 512:
            return "MATCHED";
          case 513:
            return "MATERIALIZED";
          case 514:
            return "MAXVALUE";
          case 515:
            return "MERGE";
          case 516:
            return "METHOD";
          case 517:
            return "MINUTE_P";
          case 518:
            return "MINVALUE";
          case 519:
            return "MODE";
          case 520:
            return "MONTH_P";
          case 521:
            return "MOVE";
          case 522:
            return "NAME_P";
          case 523:
            return "NAMES";
          case 524:
            return "NATIONAL";
          case 525:
            return "NATURAL";
          case 526:
            return "NCHAR";
          case 527:
            return "NEW";
          case 528:
            return "NEXT";
          case 529:
            return "NFC";
          case 530:
            return "NFD";
          case 531:
            return "NFKC";
          case 532:
            return "NFKD";
          case 533:
            return "NO";
          case 534:
            return "NONE";
          case 535:
            return "NORMALIZE";
          case 536:
            return "NORMALIZED";
          case 537:
            return "NOT";
          case 538:
            return "NOTHING";
          case 539:
            return "NOTIFY";
          case 540:
            return "NOTNULL";
          case 541:
            return "NOWAIT";
          case 542:
            return "NULL_P";
          case 543:
            return "NULLIF";
          case 544:
            return "NULLS_P";
          case 545:
            return "NUMERIC";
          case 546:
            return "OBJECT_P";
          case 547:
            return "OF";
          case 548:
            return "OFF";
          case 549:
            return "OFFSET";
          case 550:
            return "OIDS";
          case 551:
            return "OLD";
          case 552:
            return "ON";
          case 553:
            return "ONLY";
          case 554:
            return "OPERATOR";
          case 555:
            return "OPTION";
          case 556:
            return "OPTIONS";
          case 557:
            return "OR";
          case 558:
            return "ORDER";
          case 559:
            return "ORDINALITY";
          case 560:
            return "OTHERS";
          case 561:
            return "OUT_P";
          case 562:
            return "OUTER_P";
          case 563:
            return "OVER";
          case 564:
            return "OVERLAPS";
          case 565:
            return "OVERLAY";
          case 566:
            return "OVERRIDING";
          case 567:
            return "OWNED";
          case 568:
            return "OWNER";
          case 569:
            return "PARALLEL";
          case 570:
            return "PARAMETER";
          case 571:
            return "PARSER";
          case 572:
            return "PARTIAL";
          case 573:
            return "PARTITION";
          case 574:
            return "PASSING";
          case 575:
            return "PASSWORD";
          case 576:
            return "PLACING";
          case 577:
            return "PLANS";
          case 578:
            return "POLICY";
          case 579:
            return "POSITION";
          case 580:
            return "PRECEDING";
          case 581:
            return "PRECISION";
          case 582:
            return "PRESERVE";
          case 583:
            return "PREPARE";
          case 584:
            return "PREPARED";
          case 585:
            return "PRIMARY";
          case 586:
            return "PRIOR";
          case 587:
            return "PRIVILEGES";
          case 588:
            return "PROCEDURAL";
          case 589:
            return "PROCEDURE";
          case 590:
            return "PROCEDURES";
          case 591:
            return "PROGRAM";
          case 592:
            return "PUBLICATION";
          case 593:
            return "QUOTE";
          case 594:
            return "RANGE";
          case 595:
            return "READ";
          case 596:
            return "REAL";
          case 597:
            return "REASSIGN";
          case 598:
            return "RECHECK";
          case 599:
            return "RECURSIVE";
          case 600:
            return "REF_P";
          case 601:
            return "REFERENCES";
          case 602:
            return "REFERENCING";
          case 603:
            return "REFRESH";
          case 604:
            return "REINDEX";
          case 605:
            return "RELATIVE_P";
          case 606:
            return "RELEASE";
          case 607:
            return "RENAME";
          case 608:
            return "REPEATABLE";
          case 609:
            return "REPLACE";
          case 610:
            return "REPLICA";
          case 611:
            return "RESET";
          case 612:
            return "RESTART";
          case 613:
            return "RESTRICT";
          case 614:
            return "RETURN";
          case 615:
            return "RETURNING";
          case 616:
            return "RETURNS";
          case 617:
            return "REVOKE";
          case 618:
            return "RIGHT";
          case 619:
            return "ROLE";
          case 620:
            return "ROLLBACK";
          case 621:
            return "ROLLUP";
          case 622:
            return "ROUTINE";
          case 623:
            return "ROUTINES";
          case 624:
            return "ROW";
          case 625:
            return "ROWS";
          case 626:
            return "RULE";
          case 627:
            return "SAVEPOINT";
          case 628:
            return "SCALAR";
          case 629:
            return "SCHEMA";
          case 630:
            return "SCHEMAS";
          case 631:
            return "SCROLL";
          case 632:
            return "SEARCH";
          case 633:
            return "SECOND_P";
          case 634:
            return "SECURITY";
          case 635:
            return "SELECT";
          case 636:
            return "SEQUENCE";
          case 637:
            return "SEQUENCES";
          case 638:
            return "SERIALIZABLE";
          case 639:
            return "SERVER";
          case 640:
            return "SESSION";
          case 641:
            return "SESSION_USER";
          case 642:
            return "SET";
          case 643:
            return "SETS";
          case 644:
            return "SETOF";
          case 645:
            return "SHARE";
          case 646:
            return "SHOW";
          case 647:
            return "SIMILAR";
          case 648:
            return "SIMPLE";
          case 649:
            return "SKIP";
          case 650:
            return "SMALLINT";
          case 651:
            return "SNAPSHOT";
          case 652:
            return "SOME";
          case 653:
            return "SQL_P";
          case 654:
            return "STABLE";
          case 655:
            return "STANDALONE_P";
          case 656:
            return "START";
          case 657:
            return "STATEMENT";
          case 658:
            return "STATISTICS";
          case 659:
            return "STDIN";
          case 660:
            return "STDOUT";
          case 661:
            return "STORAGE";
          case 662:
            return "STORED";
          case 663:
            return "STRICT_P";
          case 664:
            return "STRIP_P";
          case 665:
            return "SUBSCRIPTION";
          case 666:
            return "SUBSTRING";
          case 667:
            return "SUPPORT";
          case 668:
            return "SYMMETRIC";
          case 669:
            return "SYSID";
          case 670:
            return "SYSTEM_P";
          case 671:
            return "SYSTEM_USER";
          case 672:
            return "TABLE";
          case 673:
            return "TABLES";
          case 674:
            return "TABLESAMPLE";
          case 675:
            return "TABLESPACE";
          case 676:
            return "TEMP";
          case 677:
            return "TEMPLATE";
          case 678:
            return "TEMPORARY";
          case 679:
            return "TEXT_P";
          case 680:
            return "THEN";
          case 681:
            return "TIES";
          case 682:
            return "TIME";
          case 683:
            return "TIMESTAMP";
          case 684:
            return "TO";
          case 685:
            return "TRAILING";
          case 686:
            return "TRANSACTION";
          case 687:
            return "TRANSFORM";
          case 688:
            return "TREAT";
          case 689:
            return "TRIGGER";
          case 690:
            return "TRIM";
          case 691:
            return "TRUE_P";
          case 692:
            return "TRUNCATE";
          case 693:
            return "TRUSTED";
          case 694:
            return "TYPE_P";
          case 695:
            return "TYPES_P";
          case 696:
            return "UESCAPE";
          case 697:
            return "UNBOUNDED";
          case 698:
            return "UNCOMMITTED";
          case 699:
            return "UNENCRYPTED";
          case 700:
            return "UNION";
          case 701:
            return "UNIQUE";
          case 702:
            return "UNKNOWN";
          case 703:
            return "UNLISTEN";
          case 704:
            return "UNLOGGED";
          case 705:
            return "UNTIL";
          case 706:
            return "UPDATE";
          case 707:
            return "USER";
          case 708:
            return "USING";
          case 709:
            return "VACUUM";
          case 710:
            return "VALID";
          case 711:
            return "VALIDATE";
          case 712:
            return "VALIDATOR";
          case 713:
            return "VALUE_P";
          case 714:
            return "VALUES";
          case 715:
            return "VARCHAR";
          case 716:
            return "VARIADIC";
          case 717:
            return "VARYING";
          case 718:
            return "VERBOSE";
          case 719:
            return "VERSION_P";
          case 720:
            return "VIEW";
          case 721:
            return "VIEWS";
          case 722:
            return "VOLATILE";
          case 723:
            return "WHEN";
          case 724:
            return "WHERE";
          case 725:
            return "WHITESPACE_P";
          case 726:
            return "WINDOW";
          case 727:
            return "WITH";
          case 728:
            return "WITHIN";
          case 729:
            return "WITHOUT";
          case 730:
            return "WORK";
          case 731:
            return "WRAPPER";
          case 732:
            return "WRITE";
          case 733:
            return "XML_P";
          case 734:
            return "XMLATTRIBUTES";
          case 735:
            return "XMLCONCAT";
          case 736:
            return "XMLELEMENT";
          case 737:
            return "XMLEXISTS";
          case 738:
            return "XMLFOREST";
          case 739:
            return "XMLNAMESPACES";
          case 740:
            return "XMLPARSE";
          case 741:
            return "XMLPI";
          case 742:
            return "XMLROOT";
          case 743:
            return "XMLSERIALIZE";
          case 744:
            return "XMLTABLE";
          case 745:
            return "YEAR_P";
          case 746:
            return "YES_P";
          case 747:
            return "ZONE";
          case 748:
            return "FORMAT_LA";
          case 749:
            return "NOT_LA";
          case 750:
            return "NULLS_LA";
          case 751:
            return "WITH_LA";
          case 752:
            return "WITHOUT_LA";
          case 753:
            return "MODE_TYPE_NAME";
          case 754:
            return "MODE_PLPGSQL_EXPR";
          case 755:
            return "MODE_PLPGSQL_ASSIGN1";
          case 756:
            return "MODE_PLPGSQL_ASSIGN2";
          case 757:
            return "MODE_PLPGSQL_ASSIGN3";
          case 758:
            return "UMINUS";
          default:
            throw new Error("Key not recognized in enum Token");
        }
      }
    default:
      throw new Error("Enum type not recognized");
  }
};",
    "file": "utils.ts",
  },
]
`;

exports[`utils astHelpers with inlineNestedObj 1`] = `
[
  {
    "code": "/**
* This file was automatically generated by pg-proto-parser@latest.
* DO NOT MODIFY IT BY HAND. Instead, modify the source proto file,
* and run the pg-proto-parser generate command to regenerate this file.
*/
import _o from "./path-obj";
import { ParseResult, ScanResult, Integer, Float, Boolean, String, BitString, List, OidList, IntList, A_Const, Alias, RangeVar, TableFunc, IntoClause, Var, Param, Aggref, GroupingFunc, WindowFunc, SubscriptingRef, FuncExpr, NamedArgExpr, OpExpr, DistinctExpr, NullIfExpr, ScalarArrayOpExpr, BoolExpr, SubLink, SubPlan, AlternativeSubPlan, FieldSelect, FieldStore, RelabelType, CoerceViaIO, ArrayCoerceExpr, ConvertRowtypeExpr, CollateExpr, CaseExpr, CaseWhen, CaseTestExpr, ArrayExpr, RowExpr, RowCompareExpr, CoalesceExpr, MinMaxExpr, SQLValueFunction, XmlExpr, JsonFormat, JsonReturning, JsonValueExpr, JsonConstructorExpr, JsonIsPredicate, NullTest, BooleanTest, CoerceToDomain, CoerceToDomainValue, SetToDefault, CurrentOfExpr, NextValueExpr, InferenceElem, TargetEntry, RangeTblRef, JoinExpr, FromExpr, OnConflictExpr, Query, TypeName, ColumnRef, ParamRef, A_Expr, TypeCast, CollateClause, RoleSpec, FuncCall, A_Star, A_Indices, A_Indirection, A_ArrayExpr, ResTarget, MultiAssignRef, SortBy, WindowDef, RangeSubselect, RangeFunction, RangeTableFunc, RangeTableFuncCol, RangeTableSample, ColumnDef, TableLikeClause, IndexElem, DefElem, LockingClause, XmlSerialize, PartitionElem, PartitionSpec, PartitionBoundSpec, PartitionRangeDatum, PartitionCmd, RangeTblEntry, RTEPermissionInfo, RangeTblFunction, TableSampleClause, WithCheckOption, SortGroupClause, GroupingSet, WindowClause, RowMarkClause, WithClause, InferClause, OnConflictClause, CTESearchClause, CTECycleClause, CommonTableExpr, MergeWhenClause, MergeAction, TriggerTransition, JsonOutput, JsonKeyValue, JsonObjectConstructor, JsonArrayConstructor, JsonArrayQueryConstructor, JsonAggConstructor, JsonObjectAgg, JsonArrayAgg, RawStmt, InsertStmt, DeleteStmt, UpdateStmt, MergeStmt, SelectStmt, SetOperationStmt, ReturnStmt, PLAssignStmt, CreateSchemaStmt, AlterTableStmt, ReplicaIdentityStmt, AlterTableCmd, AlterCollationStmt, AlterDomainStmt, GrantStmt, ObjectWithArgs, AccessPriv, GrantRoleStmt, AlterDefaultPrivilegesStmt, CopyStmt, VariableSetStmt, VariableShowStmt, CreateStmt, Constraint, CreateTableSpaceStmt, DropTableSpaceStmt, AlterTableSpaceOptionsStmt, AlterTableMoveAllStmt, CreateExtensionStmt, AlterExtensionStmt, AlterExtensionContentsStmt, CreateFdwStmt, AlterFdwStmt, CreateForeignServerStmt, AlterForeignServerStmt, CreateForeignTableStmt, CreateUserMappingStmt, AlterUserMappingStmt, DropUserMappingStmt, ImportForeignSchemaStmt, CreatePolicyStmt, AlterPolicyStmt, CreateAmStmt, CreateTrigStmt, CreateEventTrigStmt, AlterEventTrigStmt, CreatePLangStmt, CreateRoleStmt, AlterRoleStmt, AlterRoleSetStmt, DropRoleStmt, CreateSeqStmt, AlterSeqStmt, DefineStmt, CreateDomainStmt, CreateOpClassStmt, CreateOpClassItem, CreateOpFamilyStmt, AlterOpFamilyStmt, DropStmt, TruncateStmt, CommentStmt, SecLabelStmt, DeclareCursorStmt, ClosePortalStmt, FetchStmt, IndexStmt, CreateStatsStmt, StatsElem, AlterStatsStmt, CreateFunctionStmt, FunctionParameter, AlterFunctionStmt, DoStmt, InlineCodeBlock, CallStmt, CallContext, RenameStmt, AlterObjectDependsStmt, AlterObjectSchemaStmt, AlterOwnerStmt, AlterOperatorStmt, AlterTypeStmt, RuleStmt, NotifyStmt, ListenStmt, UnlistenStmt, TransactionStmt, CompositeTypeStmt, CreateEnumStmt, CreateRangeStmt, AlterEnumStmt, ViewStmt, LoadStmt, CreatedbStmt, AlterDatabaseStmt, AlterDatabaseRefreshCollStmt, AlterDatabaseSetStmt, DropdbStmt, AlterSystemStmt, ClusterStmt, VacuumStmt, VacuumRelation, ExplainStmt, CreateTableAsStmt, RefreshMatViewStmt, CheckPointStmt, DiscardStmt, LockStmt, ConstraintsSetStmt, ReindexStmt, CreateConversionStmt, CreateCastStmt, CreateTransformStmt, PrepareStmt, ExecuteStmt, DeallocateStmt, DropOwnedStmt, ReassignOwnedStmt, AlterTSDictionaryStmt, AlterTSConfigurationStmt, PublicationTable, PublicationObjSpec, CreatePublicationStmt, AlterPublicationStmt, CreateSubscriptionStmt, AlterSubscriptionStmt, DropSubscriptionStmt, ScanToken } from "./wrapped";
export default {
  parseResult(_p?: ParseResult): ParseResult {
    const _j = ({} as ParseResult);
    _o.set(_j, "version", _p?.version);
    _o.set(_j, "stmts", _p?.stmts);
    return _j;
  },
  scanResult(_p?: ScanResult): ScanResult {
    const _j = ({} as ScanResult);
    _o.set(_j, "version", _p?.version);
    _o.set(_j, "tokens", _p?.tokens);
    return _j;
  },
  integer(_p?: Integer): Integer {
    const _j = ({} as Integer);
    _o.set(_j, "ival", _p?.ival);
    return _j;
  },
  float(_p?: Float): Float {
    const _j = ({} as Float);
    _o.set(_j, "fval", _p?.fval);
    return _j;
  },
  boolean(_p?: Boolean): Boolean {
    const _j = ({} as Boolean);
    _o.set(_j, "boolval", _p?.boolval);
    return _j;
  },
  string(_p?: String): String {
    const _j = ({} as String);
    _o.set(_j, "sval", _p?.sval);
    return _j;
  },
  bitString(_p?: BitString): BitString {
    const _j = ({} as BitString);
    _o.set(_j, "bsval", _p?.bsval);
    return _j;
  },
  list(_p?: List): List {
    const _j = ({} as List);
    _o.set(_j, "items", _p?.items);
    return _j;
  },
  oidList(_p?: OidList): OidList {
    const _j = ({} as OidList);
    _o.set(_j, "items", _p?.items);
    return _j;
  },
  intList(_p?: IntList): IntList {
    const _j = ({} as IntList);
    _o.set(_j, "items", _p?.items);
    return _j;
  },
  aConst(_p?: A_Const): A_Const {
    const _j = ({} as A_Const);
    _o.set(_j, "ival", _p?.ival);
    _o.set(_j, "fval", _p?.fval);
    _o.set(_j, "boolval", _p?.boolval);
    _o.set(_j, "sval", _p?.sval);
    _o.set(_j, "bsval", _p?.bsval);
    _o.set(_j, "isnull", _p?.isnull);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  alias(_p?: Alias): Alias {
    const _j = ({} as Alias);
    _o.set(_j, "aliasname", _p?.aliasname);
    _o.set(_j, "colnames", _p?.colnames);
    return _j;
  },
  rangeVar(_p?: RangeVar): RangeVar {
    const _j = ({} as RangeVar);
    _o.set(_j, "catalogname", _p?.catalogname);
    _o.set(_j, "schemaname", _p?.schemaname);
    _o.set(_j, "relname", _p?.relname);
    _o.set(_j, "inh", _p?.inh);
    _o.set(_j, "relpersistence", _p?.relpersistence);
    _o.set(_j, "alias", _p?.alias);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  tableFunc(_p?: TableFunc): TableFunc {
    const _j = ({} as TableFunc);
    _o.set(_j, "ns_uris", _p?.ns_uris);
    _o.set(_j, "ns_names", _p?.ns_names);
    _o.set(_j, "docexpr", _p?.docexpr);
    _o.set(_j, "rowexpr", _p?.rowexpr);
    _o.set(_j, "colnames", _p?.colnames);
    _o.set(_j, "coltypes", _p?.coltypes);
    _o.set(_j, "coltypmods", _p?.coltypmods);
    _o.set(_j, "colcollations", _p?.colcollations);
    _o.set(_j, "colexprs", _p?.colexprs);
    _o.set(_j, "coldefexprs", _p?.coldefexprs);
    _o.set(_j, "notnulls", _p?.notnulls);
    _o.set(_j, "ordinalitycol", _p?.ordinalitycol);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  intoClause(_p?: IntoClause): IntoClause {
    const _j = ({} as IntoClause);
    _o.set(_j, "rel", _p?.rel);
    _o.set(_j, "colNames", _p?.colNames);
    _o.set(_j, "accessMethod", _p?.accessMethod);
    _o.set(_j, "options", _p?.options);
    _o.set(_j, "onCommit", _p?.onCommit);
    _o.set(_j, "tableSpaceName", _p?.tableSpaceName);
    _o.set(_j, "viewQuery", _p?.viewQuery);
    _o.set(_j, "skipData", _p?.skipData);
    return _j;
  },
  var(_p?: Var): Var {
    const _j = ({} as Var);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "varno", _p?.varno);
    _o.set(_j, "varattno", _p?.varattno);
    _o.set(_j, "vartype", _p?.vartype);
    _o.set(_j, "vartypmod", _p?.vartypmod);
    _o.set(_j, "varcollid", _p?.varcollid);
    _o.set(_j, "varnullingrels", _p?.varnullingrels);
    _o.set(_j, "varlevelsup", _p?.varlevelsup);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  param(_p?: Param): Param {
    const _j = ({} as Param);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "paramkind", _p?.paramkind);
    _o.set(_j, "paramid", _p?.paramid);
    _o.set(_j, "paramtype", _p?.paramtype);
    _o.set(_j, "paramtypmod", _p?.paramtypmod);
    _o.set(_j, "paramcollid", _p?.paramcollid);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  aggref(_p?: Aggref): Aggref {
    const _j = ({} as Aggref);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "aggfnoid", _p?.aggfnoid);
    _o.set(_j, "aggtype", _p?.aggtype);
    _o.set(_j, "aggcollid", _p?.aggcollid);
    _o.set(_j, "inputcollid", _p?.inputcollid);
    _o.set(_j, "aggargtypes", _p?.aggargtypes);
    _o.set(_j, "aggdirectargs", _p?.aggdirectargs);
    _o.set(_j, "args", _p?.args);
    _o.set(_j, "aggorder", _p?.aggorder);
    _o.set(_j, "aggdistinct", _p?.aggdistinct);
    _o.set(_j, "aggfilter", _p?.aggfilter);
    _o.set(_j, "aggstar", _p?.aggstar);
    _o.set(_j, "aggvariadic", _p?.aggvariadic);
    _o.set(_j, "aggkind", _p?.aggkind);
    _o.set(_j, "agglevelsup", _p?.agglevelsup);
    _o.set(_j, "aggsplit", _p?.aggsplit);
    _o.set(_j, "aggno", _p?.aggno);
    _o.set(_j, "aggtransno", _p?.aggtransno);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  groupingFunc(_p?: GroupingFunc): GroupingFunc {
    const _j = ({} as GroupingFunc);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "args", _p?.args);
    _o.set(_j, "refs", _p?.refs);
    _o.set(_j, "agglevelsup", _p?.agglevelsup);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  windowFunc(_p?: WindowFunc): WindowFunc {
    const _j = ({} as WindowFunc);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "winfnoid", _p?.winfnoid);
    _o.set(_j, "wintype", _p?.wintype);
    _o.set(_j, "wincollid", _p?.wincollid);
    _o.set(_j, "inputcollid", _p?.inputcollid);
    _o.set(_j, "args", _p?.args);
    _o.set(_j, "aggfilter", _p?.aggfilter);
    _o.set(_j, "winref", _p?.winref);
    _o.set(_j, "winstar", _p?.winstar);
    _o.set(_j, "winagg", _p?.winagg);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  subscriptingRef(_p?: SubscriptingRef): SubscriptingRef {
    const _j = ({} as SubscriptingRef);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "refcontainertype", _p?.refcontainertype);
    _o.set(_j, "refelemtype", _p?.refelemtype);
    _o.set(_j, "refrestype", _p?.refrestype);
    _o.set(_j, "reftypmod", _p?.reftypmod);
    _o.set(_j, "refcollid", _p?.refcollid);
    _o.set(_j, "refupperindexpr", _p?.refupperindexpr);
    _o.set(_j, "reflowerindexpr", _p?.reflowerindexpr);
    _o.set(_j, "refexpr", _p?.refexpr);
    _o.set(_j, "refassgnexpr", _p?.refassgnexpr);
    return _j;
  },
  funcExpr(_p?: FuncExpr): FuncExpr {
    const _j = ({} as FuncExpr);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "funcid", _p?.funcid);
    _o.set(_j, "funcresulttype", _p?.funcresulttype);
    _o.set(_j, "funcretset", _p?.funcretset);
    _o.set(_j, "funcvariadic", _p?.funcvariadic);
    _o.set(_j, "funcformat", _p?.funcformat);
    _o.set(_j, "funccollid", _p?.funccollid);
    _o.set(_j, "inputcollid", _p?.inputcollid);
    _o.set(_j, "args", _p?.args);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  namedArgExpr(_p?: NamedArgExpr): NamedArgExpr {
    const _j = ({} as NamedArgExpr);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "arg", _p?.arg);
    _o.set(_j, "name", _p?.name);
    _o.set(_j, "argnumber", _p?.argnumber);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  opExpr(_p?: OpExpr): OpExpr {
    const _j = ({} as OpExpr);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "opno", _p?.opno);
    _o.set(_j, "opresulttype", _p?.opresulttype);
    _o.set(_j, "opretset", _p?.opretset);
    _o.set(_j, "opcollid", _p?.opcollid);
    _o.set(_j, "inputcollid", _p?.inputcollid);
    _o.set(_j, "args", _p?.args);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  distinctExpr(_p?: DistinctExpr): DistinctExpr {
    const _j = ({} as DistinctExpr);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "opno", _p?.opno);
    _o.set(_j, "opresulttype", _p?.opresulttype);
    _o.set(_j, "opretset", _p?.opretset);
    _o.set(_j, "opcollid", _p?.opcollid);
    _o.set(_j, "inputcollid", _p?.inputcollid);
    _o.set(_j, "args", _p?.args);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  nullIfExpr(_p?: NullIfExpr): NullIfExpr {
    const _j = ({} as NullIfExpr);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "opno", _p?.opno);
    _o.set(_j, "opresulttype", _p?.opresulttype);
    _o.set(_j, "opretset", _p?.opretset);
    _o.set(_j, "opcollid", _p?.opcollid);
    _o.set(_j, "inputcollid", _p?.inputcollid);
    _o.set(_j, "args", _p?.args);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  scalarArrayOpExpr(_p?: ScalarArrayOpExpr): ScalarArrayOpExpr {
    const _j = ({} as ScalarArrayOpExpr);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "opno", _p?.opno);
    _o.set(_j, "useOr", _p?.useOr);
    _o.set(_j, "inputcollid", _p?.inputcollid);
    _o.set(_j, "args", _p?.args);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  boolExpr(_p?: BoolExpr): BoolExpr {
    const _j = ({} as BoolExpr);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "boolop", _p?.boolop);
    _o.set(_j, "args", _p?.args);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  subLink(_p?: SubLink): SubLink {
    const _j = ({} as SubLink);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "subLinkType", _p?.subLinkType);
    _o.set(_j, "subLinkId", _p?.subLinkId);
    _o.set(_j, "testexpr", _p?.testexpr);
    _o.set(_j, "operName", _p?.operName);
    _o.set(_j, "subselect", _p?.subselect);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  subPlan(_p?: SubPlan): SubPlan {
    const _j = ({} as SubPlan);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "subLinkType", _p?.subLinkType);
    _o.set(_j, "testexpr", _p?.testexpr);
    _o.set(_j, "paramIds", _p?.paramIds);
    _o.set(_j, "plan_id", _p?.plan_id);
    _o.set(_j, "plan_name", _p?.plan_name);
    _o.set(_j, "firstColType", _p?.firstColType);
    _o.set(_j, "firstColTypmod", _p?.firstColTypmod);
    _o.set(_j, "firstColCollation", _p?.firstColCollation);
    _o.set(_j, "useHashTable", _p?.useHashTable);
    _o.set(_j, "unknownEqFalse", _p?.unknownEqFalse);
    _o.set(_j, "parallel_safe", _p?.parallel_safe);
    _o.set(_j, "setParam", _p?.setParam);
    _o.set(_j, "parParam", _p?.parParam);
    _o.set(_j, "args", _p?.args);
    _o.set(_j, "startup_cost", _p?.startup_cost);
    _o.set(_j, "per_call_cost", _p?.per_call_cost);
    return _j;
  },
  alternativeSubPlan(_p?: AlternativeSubPlan): AlternativeSubPlan {
    const _j = ({} as AlternativeSubPlan);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "subplans", _p?.subplans);
    return _j;
  },
  fieldSelect(_p?: FieldSelect): FieldSelect {
    const _j = ({} as FieldSelect);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "arg", _p?.arg);
    _o.set(_j, "fieldnum", _p?.fieldnum);
    _o.set(_j, "resulttype", _p?.resulttype);
    _o.set(_j, "resulttypmod", _p?.resulttypmod);
    _o.set(_j, "resultcollid", _p?.resultcollid);
    return _j;
  },
  fieldStore(_p?: FieldStore): FieldStore {
    const _j = ({} as FieldStore);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "arg", _p?.arg);
    _o.set(_j, "newvals", _p?.newvals);
    _o.set(_j, "fieldnums", _p?.fieldnums);
    _o.set(_j, "resulttype", _p?.resulttype);
    return _j;
  },
  relabelType(_p?: RelabelType): RelabelType {
    const _j = ({} as RelabelType);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "arg", _p?.arg);
    _o.set(_j, "resulttype", _p?.resulttype);
    _o.set(_j, "resulttypmod", _p?.resulttypmod);
    _o.set(_j, "resultcollid", _p?.resultcollid);
    _o.set(_j, "relabelformat", _p?.relabelformat);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  coerceViaio(_p?: CoerceViaIO): CoerceViaIO {
    const _j = ({} as CoerceViaIO);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "arg", _p?.arg);
    _o.set(_j, "resulttype", _p?.resulttype);
    _o.set(_j, "resultcollid", _p?.resultcollid);
    _o.set(_j, "coerceformat", _p?.coerceformat);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  arrayCoerceExpr(_p?: ArrayCoerceExpr): ArrayCoerceExpr {
    const _j = ({} as ArrayCoerceExpr);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "arg", _p?.arg);
    _o.set(_j, "elemexpr", _p?.elemexpr);
    _o.set(_j, "resulttype", _p?.resulttype);
    _o.set(_j, "resulttypmod", _p?.resulttypmod);
    _o.set(_j, "resultcollid", _p?.resultcollid);
    _o.set(_j, "coerceformat", _p?.coerceformat);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  convertRowtypeExpr(_p?: ConvertRowtypeExpr): ConvertRowtypeExpr {
    const _j = ({} as ConvertRowtypeExpr);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "arg", _p?.arg);
    _o.set(_j, "resulttype", _p?.resulttype);
    _o.set(_j, "convertformat", _p?.convertformat);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  collateExpr(_p?: CollateExpr): CollateExpr {
    const _j = ({} as CollateExpr);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "arg", _p?.arg);
    _o.set(_j, "collOid", _p?.collOid);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  caseExpr(_p?: CaseExpr): CaseExpr {
    const _j = ({} as CaseExpr);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "casetype", _p?.casetype);
    _o.set(_j, "casecollid", _p?.casecollid);
    _o.set(_j, "arg", _p?.arg);
    _o.set(_j, "args", _p?.args);
    _o.set(_j, "defresult", _p?.defresult);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  caseWhen(_p?: CaseWhen): CaseWhen {
    const _j = ({} as CaseWhen);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "expr", _p?.expr);
    _o.set(_j, "result", _p?.result);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  caseTestExpr(_p?: CaseTestExpr): CaseTestExpr {
    const _j = ({} as CaseTestExpr);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "typeId", _p?.typeId);
    _o.set(_j, "typeMod", _p?.typeMod);
    _o.set(_j, "collation", _p?.collation);
    return _j;
  },
  arrayExpr(_p?: ArrayExpr): ArrayExpr {
    const _j = ({} as ArrayExpr);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "array_typeid", _p?.array_typeid);
    _o.set(_j, "array_collid", _p?.array_collid);
    _o.set(_j, "element_typeid", _p?.element_typeid);
    _o.set(_j, "elements", _p?.elements);
    _o.set(_j, "multidims", _p?.multidims);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  rowExpr(_p?: RowExpr): RowExpr {
    const _j = ({} as RowExpr);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "args", _p?.args);
    _o.set(_j, "row_typeid", _p?.row_typeid);
    _o.set(_j, "row_format", _p?.row_format);
    _o.set(_j, "colnames", _p?.colnames);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  rowCompareExpr(_p?: RowCompareExpr): RowCompareExpr {
    const _j = ({} as RowCompareExpr);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "rctype", _p?.rctype);
    _o.set(_j, "opnos", _p?.opnos);
    _o.set(_j, "opfamilies", _p?.opfamilies);
    _o.set(_j, "inputcollids", _p?.inputcollids);
    _o.set(_j, "largs", _p?.largs);
    _o.set(_j, "rargs", _p?.rargs);
    return _j;
  },
  coalesceExpr(_p?: CoalesceExpr): CoalesceExpr {
    const _j = ({} as CoalesceExpr);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "coalescetype", _p?.coalescetype);
    _o.set(_j, "coalescecollid", _p?.coalescecollid);
    _o.set(_j, "args", _p?.args);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  minMaxExpr(_p?: MinMaxExpr): MinMaxExpr {
    const _j = ({} as MinMaxExpr);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "minmaxtype", _p?.minmaxtype);
    _o.set(_j, "minmaxcollid", _p?.minmaxcollid);
    _o.set(_j, "inputcollid", _p?.inputcollid);
    _o.set(_j, "op", _p?.op);
    _o.set(_j, "args", _p?.args);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  sqlValueFunction(_p?: SQLValueFunction): SQLValueFunction {
    const _j = ({} as SQLValueFunction);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "op", _p?.op);
    _o.set(_j, "type", _p?.type);
    _o.set(_j, "typmod", _p?.typmod);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  xmlExpr(_p?: XmlExpr): XmlExpr {
    const _j = ({} as XmlExpr);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "op", _p?.op);
    _o.set(_j, "name", _p?.name);
    _o.set(_j, "named_args", _p?.named_args);
    _o.set(_j, "arg_names", _p?.arg_names);
    _o.set(_j, "args", _p?.args);
    _o.set(_j, "xmloption", _p?.xmloption);
    _o.set(_j, "indent", _p?.indent);
    _o.set(_j, "type", _p?.type);
    _o.set(_j, "typmod", _p?.typmod);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  jsonFormat(_p?: JsonFormat): JsonFormat {
    const _j = ({} as JsonFormat);
    _o.set(_j, "format_type", _p?.format_type);
    _o.set(_j, "encoding", _p?.encoding);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  jsonReturning(_p?: JsonReturning): JsonReturning {
    const _j = ({} as JsonReturning);
    _o.set(_j, "format", _p?.format);
    _o.set(_j, "typid", _p?.typid);
    _o.set(_j, "typmod", _p?.typmod);
    return _j;
  },
  jsonValueExpr(_p?: JsonValueExpr): JsonValueExpr {
    const _j = ({} as JsonValueExpr);
    _o.set(_j, "raw_expr", _p?.raw_expr);
    _o.set(_j, "formatted_expr", _p?.formatted_expr);
    _o.set(_j, "format", _p?.format);
    return _j;
  },
  jsonConstructorExpr(_p?: JsonConstructorExpr): JsonConstructorExpr {
    const _j = ({} as JsonConstructorExpr);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "type", _p?.type);
    _o.set(_j, "args", _p?.args);
    _o.set(_j, "func", _p?.func);
    _o.set(_j, "coercion", _p?.coercion);
    _o.set(_j, "returning", _p?.returning);
    _o.set(_j, "absent_on_null", _p?.absent_on_null);
    _o.set(_j, "unique", _p?.unique);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  jsonIsPredicate(_p?: JsonIsPredicate): JsonIsPredicate {
    const _j = ({} as JsonIsPredicate);
    _o.set(_j, "expr", _p?.expr);
    _o.set(_j, "format", _p?.format);
    _o.set(_j, "item_type", _p?.item_type);
    _o.set(_j, "unique_keys", _p?.unique_keys);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  nullTest(_p?: NullTest): NullTest {
    const _j = ({} as NullTest);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "arg", _p?.arg);
    _o.set(_j, "nulltesttype", _p?.nulltesttype);
    _o.set(_j, "argisrow", _p?.argisrow);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  booleanTest(_p?: BooleanTest): BooleanTest {
    const _j = ({} as BooleanTest);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "arg", _p?.arg);
    _o.set(_j, "booltesttype", _p?.booltesttype);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  coerceToDomain(_p?: CoerceToDomain): CoerceToDomain {
    const _j = ({} as CoerceToDomain);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "arg", _p?.arg);
    _o.set(_j, "resulttype", _p?.resulttype);
    _o.set(_j, "resulttypmod", _p?.resulttypmod);
    _o.set(_j, "resultcollid", _p?.resultcollid);
    _o.set(_j, "coercionformat", _p?.coercionformat);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  coerceToDomainValue(_p?: CoerceToDomainValue): CoerceToDomainValue {
    const _j = ({} as CoerceToDomainValue);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "typeId", _p?.typeId);
    _o.set(_j, "typeMod", _p?.typeMod);
    _o.set(_j, "collation", _p?.collation);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  setToDefault(_p?: SetToDefault): SetToDefault {
    const _j = ({} as SetToDefault);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "typeId", _p?.typeId);
    _o.set(_j, "typeMod", _p?.typeMod);
    _o.set(_j, "collation", _p?.collation);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  currentOfExpr(_p?: CurrentOfExpr): CurrentOfExpr {
    const _j = ({} as CurrentOfExpr);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "cvarno", _p?.cvarno);
    _o.set(_j, "cursor_name", _p?.cursor_name);
    _o.set(_j, "cursor_param", _p?.cursor_param);
    return _j;
  },
  nextValueExpr(_p?: NextValueExpr): NextValueExpr {
    const _j = ({} as NextValueExpr);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "seqid", _p?.seqid);
    _o.set(_j, "typeId", _p?.typeId);
    return _j;
  },
  inferenceElem(_p?: InferenceElem): InferenceElem {
    const _j = ({} as InferenceElem);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "expr", _p?.expr);
    _o.set(_j, "infercollid", _p?.infercollid);
    _o.set(_j, "inferopclass", _p?.inferopclass);
    return _j;
  },
  targetEntry(_p?: TargetEntry): TargetEntry {
    const _j = ({} as TargetEntry);
    _o.set(_j, "xpr", _p?.xpr);
    _o.set(_j, "expr", _p?.expr);
    _o.set(_j, "resno", _p?.resno);
    _o.set(_j, "resname", _p?.resname);
    _o.set(_j, "ressortgroupref", _p?.ressortgroupref);
    _o.set(_j, "resorigtbl", _p?.resorigtbl);
    _o.set(_j, "resorigcol", _p?.resorigcol);
    _o.set(_j, "resjunk", _p?.resjunk);
    return _j;
  },
  rangeTblRef(_p?: RangeTblRef): RangeTblRef {
    const _j = ({} as RangeTblRef);
    _o.set(_j, "rtindex", _p?.rtindex);
    return _j;
  },
  joinExpr(_p?: JoinExpr): JoinExpr {
    const _j = ({} as JoinExpr);
    _o.set(_j, "jointype", _p?.jointype);
    _o.set(_j, "isNatural", _p?.isNatural);
    _o.set(_j, "larg", _p?.larg);
    _o.set(_j, "rarg", _p?.rarg);
    _o.set(_j, "usingClause", _p?.usingClause);
    _o.set(_j, "join_using_alias", _p?.join_using_alias);
    _o.set(_j, "quals", _p?.quals);
    _o.set(_j, "alias", _p?.alias);
    _o.set(_j, "rtindex", _p?.rtindex);
    return _j;
  },
  fromExpr(_p?: FromExpr): FromExpr {
    const _j = ({} as FromExpr);
    _o.set(_j, "fromlist", _p?.fromlist);
    _o.set(_j, "quals", _p?.quals);
    return _j;
  },
  onConflictExpr(_p?: OnConflictExpr): OnConflictExpr {
    const _j = ({} as OnConflictExpr);
    _o.set(_j, "action", _p?.action);
    _o.set(_j, "arbiterElems", _p?.arbiterElems);
    _o.set(_j, "arbiterWhere", _p?.arbiterWhere);
    _o.set(_j, "constraint", _p?.constraint);
    _o.set(_j, "onConflictSet", _p?.onConflictSet);
    _o.set(_j, "onConflictWhere", _p?.onConflictWhere);
    _o.set(_j, "exclRelIndex", _p?.exclRelIndex);
    _o.set(_j, "exclRelTlist", _p?.exclRelTlist);
    return _j;
  },
  query(_p?: Query): Query {
    const _j = ({} as Query);
    _o.set(_j, "commandType", _p?.commandType);
    _o.set(_j, "querySource", _p?.querySource);
    _o.set(_j, "canSetTag", _p?.canSetTag);
    _o.set(_j, "utilityStmt", _p?.utilityStmt);
    _o.set(_j, "resultRelation", _p?.resultRelation);
    _o.set(_j, "hasAggs", _p?.hasAggs);
    _o.set(_j, "hasWindowFuncs", _p?.hasWindowFuncs);
    _o.set(_j, "hasTargetSRFs", _p?.hasTargetSRFs);
    _o.set(_j, "hasSubLinks", _p?.hasSubLinks);
    _o.set(_j, "hasDistinctOn", _p?.hasDistinctOn);
    _o.set(_j, "hasRecursive", _p?.hasRecursive);
    _o.set(_j, "hasModifyingCTE", _p?.hasModifyingCTE);
    _o.set(_j, "hasForUpdate", _p?.hasForUpdate);
    _o.set(_j, "hasRowSecurity", _p?.hasRowSecurity);
    _o.set(_j, "isReturn", _p?.isReturn);
    _o.set(_j, "cteList", _p?.cteList);
    _o.set(_j, "rtable", _p?.rtable);
    _o.set(_j, "rteperminfos", _p?.rteperminfos);
    _o.set(_j, "jointree", _p?.jointree);
    _o.set(_j, "mergeActionList", _p?.mergeActionList);
    _o.set(_j, "mergeUseOuterJoin", _p?.mergeUseOuterJoin);
    _o.set(_j, "targetList", _p?.targetList);
    _o.set(_j, "override", _p?.override);
    _o.set(_j, "onConflict", _p?.onConflict);
    _o.set(_j, "returningList", _p?.returningList);
    _o.set(_j, "groupClause", _p?.groupClause);
    _o.set(_j, "groupDistinct", _p?.groupDistinct);
    _o.set(_j, "groupingSets", _p?.groupingSets);
    _o.set(_j, "havingQual", _p?.havingQual);
    _o.set(_j, "windowClause", _p?.windowClause);
    _o.set(_j, "distinctClause", _p?.distinctClause);
    _o.set(_j, "sortClause", _p?.sortClause);
    _o.set(_j, "limitOffset", _p?.limitOffset);
    _o.set(_j, "limitCount", _p?.limitCount);
    _o.set(_j, "limitOption", _p?.limitOption);
    _o.set(_j, "rowMarks", _p?.rowMarks);
    _o.set(_j, "setOperations", _p?.setOperations);
    _o.set(_j, "constraintDeps", _p?.constraintDeps);
    _o.set(_j, "withCheckOptions", _p?.withCheckOptions);
    _o.set(_j, "stmt_location", _p?.stmt_location);
    _o.set(_j, "stmt_len", _p?.stmt_len);
    return _j;
  },
  typeName(_p?: TypeName): TypeName {
    const _j = ({} as TypeName);
    _o.set(_j, "names", _p?.names);
    _o.set(_j, "typeOid", _p?.typeOid);
    _o.set(_j, "setof", _p?.setof);
    _o.set(_j, "pct_type", _p?.pct_type);
    _o.set(_j, "typmods", _p?.typmods);
    _o.set(_j, "typemod", _p?.typemod);
    _o.set(_j, "arrayBounds", _p?.arrayBounds);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  columnRef(_p?: ColumnRef): ColumnRef {
    const _j = ({} as ColumnRef);
    _o.set(_j, "fields", _p?.fields);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  paramRef(_p?: ParamRef): ParamRef {
    const _j = ({} as ParamRef);
    _o.set(_j, "number", _p?.number);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  aExpr(_p?: A_Expr): A_Expr {
    const _j = ({} as A_Expr);
    _o.set(_j, "kind", _p?.kind);
    _o.set(_j, "name", _p?.name);
    _o.set(_j, "lexpr", _p?.lexpr);
    _o.set(_j, "rexpr", _p?.rexpr);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  typeCast(_p?: TypeCast): TypeCast {
    const _j = ({} as TypeCast);
    _o.set(_j, "arg", _p?.arg);
    _o.set(_j, "typeName", _p?.typeName);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  collateClause(_p?: CollateClause): CollateClause {
    const _j = ({} as CollateClause);
    _o.set(_j, "arg", _p?.arg);
    _o.set(_j, "collname", _p?.collname);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  roleSpec(_p?: RoleSpec): RoleSpec {
    const _j = ({} as RoleSpec);
    _o.set(_j, "roletype", _p?.roletype);
    _o.set(_j, "rolename", _p?.rolename);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  funcCall(_p?: FuncCall): FuncCall {
    const _j = ({} as FuncCall);
    _o.set(_j, "funcname", _p?.funcname);
    _o.set(_j, "args", _p?.args);
    _o.set(_j, "agg_order", _p?.agg_order);
    _o.set(_j, "agg_filter", _p?.agg_filter);
    _o.set(_j, "over", _p?.over);
    _o.set(_j, "agg_within_group", _p?.agg_within_group);
    _o.set(_j, "agg_star", _p?.agg_star);
    _o.set(_j, "agg_distinct", _p?.agg_distinct);
    _o.set(_j, "func_variadic", _p?.func_variadic);
    _o.set(_j, "funcformat", _p?.funcformat);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  aStar(_p?: A_Star): A_Star {
    const _j = ({} as A_Star);
    return _j;
  },
  aIndices(_p?: A_Indices): A_Indices {
    const _j = ({} as A_Indices);
    _o.set(_j, "is_slice", _p?.is_slice);
    _o.set(_j, "lidx", _p?.lidx);
    _o.set(_j, "uidx", _p?.uidx);
    return _j;
  },
  aIndirection(_p?: A_Indirection): A_Indirection {
    const _j = ({} as A_Indirection);
    _o.set(_j, "arg", _p?.arg);
    _o.set(_j, "indirection", _p?.indirection);
    return _j;
  },
  aArrayExpr(_p?: A_ArrayExpr): A_ArrayExpr {
    const _j = ({} as A_ArrayExpr);
    _o.set(_j, "elements", _p?.elements);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  resTarget(_p?: ResTarget): ResTarget {
    const _j = ({} as ResTarget);
    _o.set(_j, "name", _p?.name);
    _o.set(_j, "indirection", _p?.indirection);
    _o.set(_j, "val", _p?.val);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  multiAssignRef(_p?: MultiAssignRef): MultiAssignRef {
    const _j = ({} as MultiAssignRef);
    _o.set(_j, "source", _p?.source);
    _o.set(_j, "colno", _p?.colno);
    _o.set(_j, "ncolumns", _p?.ncolumns);
    return _j;
  },
  sortBy(_p?: SortBy): SortBy {
    const _j = ({} as SortBy);
    _o.set(_j, "node", _p?.node);
    _o.set(_j, "sortby_dir", _p?.sortby_dir);
    _o.set(_j, "sortby_nulls", _p?.sortby_nulls);
    _o.set(_j, "useOp", _p?.useOp);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  windowDef(_p?: WindowDef): WindowDef {
    const _j = ({} as WindowDef);
    _o.set(_j, "name", _p?.name);
    _o.set(_j, "refname", _p?.refname);
    _o.set(_j, "partitionClause", _p?.partitionClause);
    _o.set(_j, "orderClause", _p?.orderClause);
    _o.set(_j, "frameOptions", _p?.frameOptions);
    _o.set(_j, "startOffset", _p?.startOffset);
    _o.set(_j, "endOffset", _p?.endOffset);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  rangeSubselect(_p?: RangeSubselect): RangeSubselect {
    const _j = ({} as RangeSubselect);
    _o.set(_j, "lateral", _p?.lateral);
    _o.set(_j, "subquery", _p?.subquery);
    _o.set(_j, "alias", _p?.alias);
    return _j;
  },
  rangeFunction(_p?: RangeFunction): RangeFunction {
    const _j = ({} as RangeFunction);
    _o.set(_j, "lateral", _p?.lateral);
    _o.set(_j, "ordinality", _p?.ordinality);
    _o.set(_j, "is_rowsfrom", _p?.is_rowsfrom);
    _o.set(_j, "functions", _p?.functions);
    _o.set(_j, "alias", _p?.alias);
    _o.set(_j, "coldeflist", _p?.coldeflist);
    return _j;
  },
  rangeTableFunc(_p?: RangeTableFunc): RangeTableFunc {
    const _j = ({} as RangeTableFunc);
    _o.set(_j, "lateral", _p?.lateral);
    _o.set(_j, "docexpr", _p?.docexpr);
    _o.set(_j, "rowexpr", _p?.rowexpr);
    _o.set(_j, "namespaces", _p?.namespaces);
    _o.set(_j, "columns", _p?.columns);
    _o.set(_j, "alias", _p?.alias);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  rangeTableFuncCol(_p?: RangeTableFuncCol): RangeTableFuncCol {
    const _j = ({} as RangeTableFuncCol);
    _o.set(_j, "colname", _p?.colname);
    _o.set(_j, "typeName", _p?.typeName);
    _o.set(_j, "for_ordinality", _p?.for_ordinality);
    _o.set(_j, "is_not_null", _p?.is_not_null);
    _o.set(_j, "colexpr", _p?.colexpr);
    _o.set(_j, "coldefexpr", _p?.coldefexpr);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  rangeTableSample(_p?: RangeTableSample): RangeTableSample {
    const _j = ({} as RangeTableSample);
    _o.set(_j, "relation", _p?.relation);
    _o.set(_j, "method", _p?.method);
    _o.set(_j, "args", _p?.args);
    _o.set(_j, "repeatable", _p?.repeatable);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  columnDef(_p?: ColumnDef): ColumnDef {
    const _j = ({} as ColumnDef);
    _o.set(_j, "colname", _p?.colname);
    _o.set(_j, "typeName", _p?.typeName);
    _o.set(_j, "compression", _p?.compression);
    _o.set(_j, "inhcount", _p?.inhcount);
    _o.set(_j, "is_local", _p?.is_local);
    _o.set(_j, "is_not_null", _p?.is_not_null);
    _o.set(_j, "is_from_type", _p?.is_from_type);
    _o.set(_j, "storage", _p?.storage);
    _o.set(_j, "storage_name", _p?.storage_name);
    _o.set(_j, "raw_default", _p?.raw_default);
    _o.set(_j, "cooked_default", _p?.cooked_default);
    _o.set(_j, "identity", _p?.identity);
    _o.set(_j, "identitySequence", _p?.identitySequence);
    _o.set(_j, "generated", _p?.generated);
    _o.set(_j, "collClause", _p?.collClause);
    _o.set(_j, "collOid", _p?.collOid);
    _o.set(_j, "constraints", _p?.constraints);
    _o.set(_j, "fdwoptions", _p?.fdwoptions);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  tableLikeClause(_p?: TableLikeClause): TableLikeClause {
    const _j = ({} as TableLikeClause);
    _o.set(_j, "relation", _p?.relation);
    _o.set(_j, "options", _p?.options);
    _o.set(_j, "relationOid", _p?.relationOid);
    return _j;
  },
  indexElem(_p?: IndexElem): IndexElem {
    const _j = ({} as IndexElem);
    _o.set(_j, "name", _p?.name);
    _o.set(_j, "expr", _p?.expr);
    _o.set(_j, "indexcolname", _p?.indexcolname);
    _o.set(_j, "collation", _p?.collation);
    _o.set(_j, "opclass", _p?.opclass);
    _o.set(_j, "opclassopts", _p?.opclassopts);
    _o.set(_j, "ordering", _p?.ordering);
    _o.set(_j, "nulls_ordering", _p?.nulls_ordering);
    return _j;
  },
  defElem(_p?: DefElem): DefElem {
    const _j = ({} as DefElem);
    _o.set(_j, "defnamespace", _p?.defnamespace);
    _o.set(_j, "defname", _p?.defname);
    _o.set(_j, "arg", _p?.arg);
    _o.set(_j, "defaction", _p?.defaction);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  lockingClause(_p?: LockingClause): LockingClause {
    const _j = ({} as LockingClause);
    _o.set(_j, "lockedRels", _p?.lockedRels);
    _o.set(_j, "strength", _p?.strength);
    _o.set(_j, "waitPolicy", _p?.waitPolicy);
    return _j;
  },
  xmlSerialize(_p?: XmlSerialize): XmlSerialize {
    const _j = ({} as XmlSerialize);
    _o.set(_j, "xmloption", _p?.xmloption);
    _o.set(_j, "expr", _p?.expr);
    _o.set(_j, "typeName", _p?.typeName);
    _o.set(_j, "indent", _p?.indent);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  partitionElem(_p?: PartitionElem): PartitionElem {
    const _j = ({} as PartitionElem);
    _o.set(_j, "name", _p?.name);
    _o.set(_j, "expr", _p?.expr);
    _o.set(_j, "collation", _p?.collation);
    _o.set(_j, "opclass", _p?.opclass);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  partitionSpec(_p?: PartitionSpec): PartitionSpec {
    const _j = ({} as PartitionSpec);
    _o.set(_j, "strategy", _p?.strategy);
    _o.set(_j, "partParams", _p?.partParams);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  partitionBoundSpec(_p?: PartitionBoundSpec): PartitionBoundSpec {
    const _j = ({} as PartitionBoundSpec);
    _o.set(_j, "strategy", _p?.strategy);
    _o.set(_j, "is_default", _p?.is_default);
    _o.set(_j, "modulus", _p?.modulus);
    _o.set(_j, "remainder", _p?.remainder);
    _o.set(_j, "listdatums", _p?.listdatums);
    _o.set(_j, "lowerdatums", _p?.lowerdatums);
    _o.set(_j, "upperdatums", _p?.upperdatums);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  partitionRangeDatum(_p?: PartitionRangeDatum): PartitionRangeDatum {
    const _j = ({} as PartitionRangeDatum);
    _o.set(_j, "kind", _p?.kind);
    _o.set(_j, "value", _p?.value);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  partitionCmd(_p?: PartitionCmd): PartitionCmd {
    const _j = ({} as PartitionCmd);
    _o.set(_j, "name", _p?.name);
    _o.set(_j, "bound", _p?.bound);
    _o.set(_j, "concurrent", _p?.concurrent);
    return _j;
  },
  rangeTblEntry(_p?: RangeTblEntry): RangeTblEntry {
    const _j = ({} as RangeTblEntry);
    _o.set(_j, "rtekind", _p?.rtekind);
    _o.set(_j, "relid", _p?.relid);
    _o.set(_j, "relkind", _p?.relkind);
    _o.set(_j, "rellockmode", _p?.rellockmode);
    _o.set(_j, "tablesample", _p?.tablesample);
    _o.set(_j, "perminfoindex", _p?.perminfoindex);
    _o.set(_j, "subquery", _p?.subquery);
    _o.set(_j, "security_barrier", _p?.security_barrier);
    _o.set(_j, "jointype", _p?.jointype);
    _o.set(_j, "joinmergedcols", _p?.joinmergedcols);
    _o.set(_j, "joinaliasvars", _p?.joinaliasvars);
    _o.set(_j, "joinleftcols", _p?.joinleftcols);
    _o.set(_j, "joinrightcols", _p?.joinrightcols);
    _o.set(_j, "join_using_alias", _p?.join_using_alias);
    _o.set(_j, "functions", _p?.functions);
    _o.set(_j, "funcordinality", _p?.funcordinality);
    _o.set(_j, "tablefunc", _p?.tablefunc);
    _o.set(_j, "values_lists", _p?.values_lists);
    _o.set(_j, "ctename", _p?.ctename);
    _o.set(_j, "ctelevelsup", _p?.ctelevelsup);
    _o.set(_j, "self_reference", _p?.self_reference);
    _o.set(_j, "coltypes", _p?.coltypes);
    _o.set(_j, "coltypmods", _p?.coltypmods);
    _o.set(_j, "colcollations", _p?.colcollations);
    _o.set(_j, "enrname", _p?.enrname);
    _o.set(_j, "enrtuples", _p?.enrtuples);
    _o.set(_j, "alias", _p?.alias);
    _o.set(_j, "eref", _p?.eref);
    _o.set(_j, "lateral", _p?.lateral);
    _o.set(_j, "inh", _p?.inh);
    _o.set(_j, "inFromCl", _p?.inFromCl);
    _o.set(_j, "securityQuals", _p?.securityQuals);
    return _j;
  },
  rtePermissionInfo(_p?: RTEPermissionInfo): RTEPermissionInfo {
    const _j = ({} as RTEPermissionInfo);
    _o.set(_j, "relid", _p?.relid);
    _o.set(_j, "inh", _p?.inh);
    _o.set(_j, "requiredPerms", _p?.requiredPerms);
    _o.set(_j, "checkAsUser", _p?.checkAsUser);
    _o.set(_j, "selectedCols", _p?.selectedCols);
    _o.set(_j, "insertedCols", _p?.insertedCols);
    _o.set(_j, "updatedCols", _p?.updatedCols);
    return _j;
  },
  rangeTblFunction(_p?: RangeTblFunction): RangeTblFunction {
    const _j = ({} as RangeTblFunction);
    _o.set(_j, "funcexpr", _p?.funcexpr);
    _o.set(_j, "funccolcount", _p?.funccolcount);
    _o.set(_j, "funccolnames", _p?.funccolnames);
    _o.set(_j, "funccoltypes", _p?.funccoltypes);
    _o.set(_j, "funccoltypmods", _p?.funccoltypmods);
    _o.set(_j, "funccolcollations", _p?.funccolcollations);
    _o.set(_j, "funcparams", _p?.funcparams);
    return _j;
  },
  tableSampleClause(_p?: TableSampleClause): TableSampleClause {
    const _j = ({} as TableSampleClause);
    _o.set(_j, "tsmhandler", _p?.tsmhandler);
    _o.set(_j, "args", _p?.args);
    _o.set(_j, "repeatable", _p?.repeatable);
    return _j;
  },
  withCheckOption(_p?: WithCheckOption): WithCheckOption {
    const _j = ({} as WithCheckOption);
    _o.set(_j, "kind", _p?.kind);
    _o.set(_j, "relname", _p?.relname);
    _o.set(_j, "polname", _p?.polname);
    _o.set(_j, "qual", _p?.qual);
    _o.set(_j, "cascaded", _p?.cascaded);
    return _j;
  },
  sortGroupClause(_p?: SortGroupClause): SortGroupClause {
    const _j = ({} as SortGroupClause);
    _o.set(_j, "tleSortGroupRef", _p?.tleSortGroupRef);
    _o.set(_j, "eqop", _p?.eqop);
    _o.set(_j, "sortop", _p?.sortop);
    _o.set(_j, "nulls_first", _p?.nulls_first);
    _o.set(_j, "hashable", _p?.hashable);
    return _j;
  },
  groupingSet(_p?: GroupingSet): GroupingSet {
    const _j = ({} as GroupingSet);
    _o.set(_j, "kind", _p?.kind);
    _o.set(_j, "content", _p?.content);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  windowClause(_p?: WindowClause): WindowClause {
    const _j = ({} as WindowClause);
    _o.set(_j, "name", _p?.name);
    _o.set(_j, "refname", _p?.refname);
    _o.set(_j, "partitionClause", _p?.partitionClause);
    _o.set(_j, "orderClause", _p?.orderClause);
    _o.set(_j, "frameOptions", _p?.frameOptions);
    _o.set(_j, "startOffset", _p?.startOffset);
    _o.set(_j, "endOffset", _p?.endOffset);
    _o.set(_j, "runCondition", _p?.runCondition);
    _o.set(_j, "startInRangeFunc", _p?.startInRangeFunc);
    _o.set(_j, "endInRangeFunc", _p?.endInRangeFunc);
    _o.set(_j, "inRangeColl", _p?.inRangeColl);
    _o.set(_j, "inRangeAsc", _p?.inRangeAsc);
    _o.set(_j, "inRangeNullsFirst", _p?.inRangeNullsFirst);
    _o.set(_j, "winref", _p?.winref);
    _o.set(_j, "copiedOrder", _p?.copiedOrder);
    return _j;
  },
  rowMarkClause(_p?: RowMarkClause): RowMarkClause {
    const _j = ({} as RowMarkClause);
    _o.set(_j, "rti", _p?.rti);
    _o.set(_j, "strength", _p?.strength);
    _o.set(_j, "waitPolicy", _p?.waitPolicy);
    _o.set(_j, "pushedDown", _p?.pushedDown);
    return _j;
  },
  withClause(_p?: WithClause): WithClause {
    const _j = ({} as WithClause);
    _o.set(_j, "ctes", _p?.ctes);
    _o.set(_j, "recursive", _p?.recursive);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  inferClause(_p?: InferClause): InferClause {
    const _j = ({} as InferClause);
    _o.set(_j, "indexElems", _p?.indexElems);
    _o.set(_j, "whereClause", _p?.whereClause);
    _o.set(_j, "conname", _p?.conname);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  onConflictClause(_p?: OnConflictClause): OnConflictClause {
    const _j = ({} as OnConflictClause);
    _o.set(_j, "action", _p?.action);
    _o.set(_j, "infer", _p?.infer);
    _o.set(_j, "targetList", _p?.targetList);
    _o.set(_j, "whereClause", _p?.whereClause);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  cteSearchClause(_p?: CTESearchClause): CTESearchClause {
    const _j = ({} as CTESearchClause);
    _o.set(_j, "search_col_list", _p?.search_col_list);
    _o.set(_j, "search_breadth_first", _p?.search_breadth_first);
    _o.set(_j, "search_seq_column", _p?.search_seq_column);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  cteCycleClause(_p?: CTECycleClause): CTECycleClause {
    const _j = ({} as CTECycleClause);
    _o.set(_j, "cycle_col_list", _p?.cycle_col_list);
    _o.set(_j, "cycle_mark_column", _p?.cycle_mark_column);
    _o.set(_j, "cycle_mark_value", _p?.cycle_mark_value);
    _o.set(_j, "cycle_mark_default", _p?.cycle_mark_default);
    _o.set(_j, "cycle_path_column", _p?.cycle_path_column);
    _o.set(_j, "location", _p?.location);
    _o.set(_j, "cycle_mark_type", _p?.cycle_mark_type);
    _o.set(_j, "cycle_mark_typmod", _p?.cycle_mark_typmod);
    _o.set(_j, "cycle_mark_collation", _p?.cycle_mark_collation);
    _o.set(_j, "cycle_mark_neop", _p?.cycle_mark_neop);
    return _j;
  },
  commonTableExpr(_p?: CommonTableExpr): CommonTableExpr {
    const _j = ({} as CommonTableExpr);
    _o.set(_j, "ctename", _p?.ctename);
    _o.set(_j, "aliascolnames", _p?.aliascolnames);
    _o.set(_j, "ctematerialized", _p?.ctematerialized);
    _o.set(_j, "ctequery", _p?.ctequery);
    _o.set(_j, "search_clause", _p?.search_clause);
    _o.set(_j, "cycle_clause", _p?.cycle_clause);
    _o.set(_j, "location", _p?.location);
    _o.set(_j, "cterecursive", _p?.cterecursive);
    _o.set(_j, "cterefcount", _p?.cterefcount);
    _o.set(_j, "ctecolnames", _p?.ctecolnames);
    _o.set(_j, "ctecoltypes", _p?.ctecoltypes);
    _o.set(_j, "ctecoltypmods", _p?.ctecoltypmods);
    _o.set(_j, "ctecolcollations", _p?.ctecolcollations);
    return _j;
  },
  mergeWhenClause(_p?: MergeWhenClause): MergeWhenClause {
    const _j = ({} as MergeWhenClause);
    _o.set(_j, "matched", _p?.matched);
    _o.set(_j, "commandType", _p?.commandType);
    _o.set(_j, "override", _p?.override);
    _o.set(_j, "condition", _p?.condition);
    _o.set(_j, "targetList", _p?.targetList);
    _o.set(_j, "values", _p?.values);
    return _j;
  },
  mergeAction(_p?: MergeAction): MergeAction {
    const _j = ({} as MergeAction);
    _o.set(_j, "matched", _p?.matched);
    _o.set(_j, "commandType", _p?.commandType);
    _o.set(_j, "override", _p?.override);
    _o.set(_j, "qual", _p?.qual);
    _o.set(_j, "targetList", _p?.targetList);
    _o.set(_j, "updateColnos", _p?.updateColnos);
    return _j;
  },
  triggerTransition(_p?: TriggerTransition): TriggerTransition {
    const _j = ({} as TriggerTransition);
    _o.set(_j, "name", _p?.name);
    _o.set(_j, "isNew", _p?.isNew);
    _o.set(_j, "isTable", _p?.isTable);
    return _j;
  },
  jsonOutput(_p?: JsonOutput): JsonOutput {
    const _j = ({} as JsonOutput);
    _o.set(_j, "typeName", _p?.typeName);
    _o.set(_j, "returning", _p?.returning);
    return _j;
  },
  jsonKeyValue(_p?: JsonKeyValue): JsonKeyValue {
    const _j = ({} as JsonKeyValue);
    _o.set(_j, "key", _p?.key);
    _o.set(_j, "value", _p?.value);
    return _j;
  },
  jsonObjectConstructor(_p?: JsonObjectConstructor): JsonObjectConstructor {
    const _j = ({} as JsonObjectConstructor);
    _o.set(_j, "exprs", _p?.exprs);
    _o.set(_j, "output", _p?.output);
    _o.set(_j, "absent_on_null", _p?.absent_on_null);
    _o.set(_j, "unique", _p?.unique);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  jsonArrayConstructor(_p?: JsonArrayConstructor): JsonArrayConstructor {
    const _j = ({} as JsonArrayConstructor);
    _o.set(_j, "exprs", _p?.exprs);
    _o.set(_j, "output", _p?.output);
    _o.set(_j, "absent_on_null", _p?.absent_on_null);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  jsonArrayQueryConstructor(_p?: JsonArrayQueryConstructor): JsonArrayQueryConstructor {
    const _j = ({} as JsonArrayQueryConstructor);
    _o.set(_j, "query", _p?.query);
    _o.set(_j, "output", _p?.output);
    _o.set(_j, "format", _p?.format);
    _o.set(_j, "absent_on_null", _p?.absent_on_null);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  jsonAggConstructor(_p?: JsonAggConstructor): JsonAggConstructor {
    const _j = ({} as JsonAggConstructor);
    _o.set(_j, "output", _p?.output);
    _o.set(_j, "agg_filter", _p?.agg_filter);
    _o.set(_j, "agg_order", _p?.agg_order);
    _o.set(_j, "over", _p?.over);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  jsonObjectAgg(_p?: JsonObjectAgg): JsonObjectAgg {
    const _j = ({} as JsonObjectAgg);
    _o.set(_j, "constructor", _p?.constructor);
    _o.set(_j, "arg", _p?.arg);
    _o.set(_j, "absent_on_null", _p?.absent_on_null);
    _o.set(_j, "unique", _p?.unique);
    return _j;
  },
  jsonArrayAgg(_p?: JsonArrayAgg): JsonArrayAgg {
    const _j = ({} as JsonArrayAgg);
    _o.set(_j, "constructor", _p?.constructor);
    _o.set(_j, "arg", _p?.arg);
    _o.set(_j, "absent_on_null", _p?.absent_on_null);
    return _j;
  },
  rawStmt(_p?: RawStmt): RawStmt {
    const _j = ({} as RawStmt);
    _o.set(_j, "stmt", _p?.stmt);
    _o.set(_j, "stmt_location", _p?.stmt_location);
    _o.set(_j, "stmt_len", _p?.stmt_len);
    return _j;
  },
  insertStmt(_p?: InsertStmt): InsertStmt {
    const _j = ({} as InsertStmt);
    _o.set(_j, "relation", _p?.relation);
    _o.set(_j, "cols", _p?.cols);
    _o.set(_j, "selectStmt", _p?.selectStmt);
    _o.set(_j, "onConflictClause", _p?.onConflictClause);
    _o.set(_j, "returningList", _p?.returningList);
    _o.set(_j, "withClause", _p?.withClause);
    _o.set(_j, "override", _p?.override);
    return _j;
  },
  deleteStmt(_p?: DeleteStmt): DeleteStmt {
    const _j = ({} as DeleteStmt);
    _o.set(_j, "relation", _p?.relation);
    _o.set(_j, "usingClause", _p?.usingClause);
    _o.set(_j, "whereClause", _p?.whereClause);
    _o.set(_j, "returningList", _p?.returningList);
    _o.set(_j, "withClause", _p?.withClause);
    return _j;
  },
  updateStmt(_p?: UpdateStmt): UpdateStmt {
    const _j = ({} as UpdateStmt);
    _o.set(_j, "relation", _p?.relation);
    _o.set(_j, "targetList", _p?.targetList);
    _o.set(_j, "whereClause", _p?.whereClause);
    _o.set(_j, "fromClause", _p?.fromClause);
    _o.set(_j, "returningList", _p?.returningList);
    _o.set(_j, "withClause", _p?.withClause);
    return _j;
  },
  mergeStmt(_p?: MergeStmt): MergeStmt {
    const _j = ({} as MergeStmt);
    _o.set(_j, "relation", _p?.relation);
    _o.set(_j, "sourceRelation", _p?.sourceRelation);
    _o.set(_j, "joinCondition", _p?.joinCondition);
    _o.set(_j, "mergeWhenClauses", _p?.mergeWhenClauses);
    _o.set(_j, "withClause", _p?.withClause);
    return _j;
  },
  selectStmt(_p?: SelectStmt): SelectStmt {
    const _j = ({} as SelectStmt);
    _o.set(_j, "distinctClause", _p?.distinctClause);
    _o.set(_j, "intoClause", _p?.intoClause);
    _o.set(_j, "targetList", _p?.targetList);
    _o.set(_j, "fromClause", _p?.fromClause);
    _o.set(_j, "whereClause", _p?.whereClause);
    _o.set(_j, "groupClause", _p?.groupClause);
    _o.set(_j, "groupDistinct", _p?.groupDistinct);
    _o.set(_j, "havingClause", _p?.havingClause);
    _o.set(_j, "windowClause", _p?.windowClause);
    _o.set(_j, "valuesLists", _p?.valuesLists);
    _o.set(_j, "sortClause", _p?.sortClause);
    _o.set(_j, "limitOffset", _p?.limitOffset);
    _o.set(_j, "limitCount", _p?.limitCount);
    _o.set(_j, "limitOption", _p?.limitOption);
    _o.set(_j, "lockingClause", _p?.lockingClause);
    _o.set(_j, "withClause", _p?.withClause);
    _o.set(_j, "op", _p?.op);
    _o.set(_j, "all", _p?.all);
    _o.set(_j, "larg", _p?.larg);
    _o.set(_j, "rarg", _p?.rarg);
    return _j;
  },
  setOperationStmt(_p?: SetOperationStmt): SetOperationStmt {
    const _j = ({} as SetOperationStmt);
    _o.set(_j, "op", _p?.op);
    _o.set(_j, "all", _p?.all);
    _o.set(_j, "larg", _p?.larg);
    _o.set(_j, "rarg", _p?.rarg);
    _o.set(_j, "colTypes", _p?.colTypes);
    _o.set(_j, "colTypmods", _p?.colTypmods);
    _o.set(_j, "colCollations", _p?.colCollations);
    _o.set(_j, "groupClauses", _p?.groupClauses);
    return _j;
  },
  returnStmt(_p?: ReturnStmt): ReturnStmt {
    const _j = ({} as ReturnStmt);
    _o.set(_j, "returnval", _p?.returnval);
    return _j;
  },
  plAssignStmt(_p?: PLAssignStmt): PLAssignStmt {
    const _j = ({} as PLAssignStmt);
    _o.set(_j, "name", _p?.name);
    _o.set(_j, "indirection", _p?.indirection);
    _o.set(_j, "nnames", _p?.nnames);
    _o.set(_j, "val", _p?.val);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  createSchemaStmt(_p?: CreateSchemaStmt): CreateSchemaStmt {
    const _j = ({} as CreateSchemaStmt);
    _o.set(_j, "schemaname", _p?.schemaname);
    _o.set(_j, "authrole", _p?.authrole);
    _o.set(_j, "schemaElts", _p?.schemaElts);
    _o.set(_j, "if_not_exists", _p?.if_not_exists);
    return _j;
  },
  alterTableStmt(_p?: AlterTableStmt): AlterTableStmt {
    const _j = ({} as AlterTableStmt);
    _o.set(_j, "relation", _p?.relation);
    _o.set(_j, "cmds", _p?.cmds);
    _o.set(_j, "objtype", _p?.objtype);
    _o.set(_j, "missing_ok", _p?.missing_ok);
    return _j;
  },
  replicaIdentityStmt(_p?: ReplicaIdentityStmt): ReplicaIdentityStmt {
    const _j = ({} as ReplicaIdentityStmt);
    _o.set(_j, "identity_type", _p?.identity_type);
    _o.set(_j, "name", _p?.name);
    return _j;
  },
  alterTableCmd(_p?: AlterTableCmd): AlterTableCmd {
    const _j = ({} as AlterTableCmd);
    _o.set(_j, "subtype", _p?.subtype);
    _o.set(_j, "name", _p?.name);
    _o.set(_j, "num", _p?.num);
    _o.set(_j, "newowner", _p?.newowner);
    _o.set(_j, "def", _p?.def);
    _o.set(_j, "behavior", _p?.behavior);
    _o.set(_j, "missing_ok", _p?.missing_ok);
    _o.set(_j, "recurse", _p?.recurse);
    return _j;
  },
  alterCollationStmt(_p?: AlterCollationStmt): AlterCollationStmt {
    const _j = ({} as AlterCollationStmt);
    _o.set(_j, "collname", _p?.collname);
    return _j;
  },
  alterDomainStmt(_p?: AlterDomainStmt): AlterDomainStmt {
    const _j = ({} as AlterDomainStmt);
    _o.set(_j, "subtype", _p?.subtype);
    _o.set(_j, "typeName", _p?.typeName);
    _o.set(_j, "name", _p?.name);
    _o.set(_j, "def", _p?.def);
    _o.set(_j, "behavior", _p?.behavior);
    _o.set(_j, "missing_ok", _p?.missing_ok);
    return _j;
  },
  grantStmt(_p?: GrantStmt): GrantStmt {
    const _j = ({} as GrantStmt);
    _o.set(_j, "is_grant", _p?.is_grant);
    _o.set(_j, "targtype", _p?.targtype);
    _o.set(_j, "objtype", _p?.objtype);
    _o.set(_j, "objects", _p?.objects);
    _o.set(_j, "privileges", _p?.privileges);
    _o.set(_j, "grantees", _p?.grantees);
    _o.set(_j, "grant_option", _p?.grant_option);
    _o.set(_j, "grantor", _p?.grantor);
    _o.set(_j, "behavior", _p?.behavior);
    return _j;
  },
  objectWithArgs(_p?: ObjectWithArgs): ObjectWithArgs {
    const _j = ({} as ObjectWithArgs);
    _o.set(_j, "objname", _p?.objname);
    _o.set(_j, "objargs", _p?.objargs);
    _o.set(_j, "objfuncargs", _p?.objfuncargs);
    _o.set(_j, "args_unspecified", _p?.args_unspecified);
    return _j;
  },
  accessPriv(_p?: AccessPriv): AccessPriv {
    const _j = ({} as AccessPriv);
    _o.set(_j, "priv_name", _p?.priv_name);
    _o.set(_j, "cols", _p?.cols);
    return _j;
  },
  grantRoleStmt(_p?: GrantRoleStmt): GrantRoleStmt {
    const _j = ({} as GrantRoleStmt);
    _o.set(_j, "granted_roles", _p?.granted_roles);
    _o.set(_j, "grantee_roles", _p?.grantee_roles);
    _o.set(_j, "is_grant", _p?.is_grant);
    _o.set(_j, "opt", _p?.opt);
    _o.set(_j, "grantor", _p?.grantor);
    _o.set(_j, "behavior", _p?.behavior);
    return _j;
  },
  alterDefaultPrivilegesStmt(_p?: AlterDefaultPrivilegesStmt): AlterDefaultPrivilegesStmt {
    const _j = ({} as AlterDefaultPrivilegesStmt);
    _o.set(_j, "options", _p?.options);
    _o.set(_j, "action", _p?.action);
    return _j;
  },
  copyStmt(_p?: CopyStmt): CopyStmt {
    const _j = ({} as CopyStmt);
    _o.set(_j, "relation", _p?.relation);
    _o.set(_j, "query", _p?.query);
    _o.set(_j, "attlist", _p?.attlist);
    _o.set(_j, "is_from", _p?.is_from);
    _o.set(_j, "is_program", _p?.is_program);
    _o.set(_j, "filename", _p?.filename);
    _o.set(_j, "options", _p?.options);
    _o.set(_j, "whereClause", _p?.whereClause);
    return _j;
  },
  variableSetStmt(_p?: VariableSetStmt): VariableSetStmt {
    const _j = ({} as VariableSetStmt);
    _o.set(_j, "kind", _p?.kind);
    _o.set(_j, "name", _p?.name);
    _o.set(_j, "args", _p?.args);
    _o.set(_j, "is_local", _p?.is_local);
    return _j;
  },
  variableShowStmt(_p?: VariableShowStmt): VariableShowStmt {
    const _j = ({} as VariableShowStmt);
    _o.set(_j, "name", _p?.name);
    return _j;
  },
  createStmt(_p?: CreateStmt): CreateStmt {
    const _j = ({} as CreateStmt);
    _o.set(_j, "relation", _p?.relation);
    _o.set(_j, "tableElts", _p?.tableElts);
    _o.set(_j, "inhRelations", _p?.inhRelations);
    _o.set(_j, "partbound", _p?.partbound);
    _o.set(_j, "partspec", _p?.partspec);
    _o.set(_j, "ofTypename", _p?.ofTypename);
    _o.set(_j, "constraints", _p?.constraints);
    _o.set(_j, "options", _p?.options);
    _o.set(_j, "oncommit", _p?.oncommit);
    _o.set(_j, "tablespacename", _p?.tablespacename);
    _o.set(_j, "accessMethod", _p?.accessMethod);
    _o.set(_j, "if_not_exists", _p?.if_not_exists);
    return _j;
  },
  constraint(_p?: Constraint): Constraint {
    const _j = ({} as Constraint);
    _o.set(_j, "contype", _p?.contype);
    _o.set(_j, "conname", _p?.conname);
    _o.set(_j, "deferrable", _p?.deferrable);
    _o.set(_j, "initdeferred", _p?.initdeferred);
    _o.set(_j, "location", _p?.location);
    _o.set(_j, "is_no_inherit", _p?.is_no_inherit);
    _o.set(_j, "raw_expr", _p?.raw_expr);
    _o.set(_j, "cooked_expr", _p?.cooked_expr);
    _o.set(_j, "generated_when", _p?.generated_when);
    _o.set(_j, "nulls_not_distinct", _p?.nulls_not_distinct);
    _o.set(_j, "keys", _p?.keys);
    _o.set(_j, "including", _p?.including);
    _o.set(_j, "exclusions", _p?.exclusions);
    _o.set(_j, "options", _p?.options);
    _o.set(_j, "indexname", _p?.indexname);
    _o.set(_j, "indexspace", _p?.indexspace);
    _o.set(_j, "reset_default_tblspc", _p?.reset_default_tblspc);
    _o.set(_j, "access_method", _p?.access_method);
    _o.set(_j, "where_clause", _p?.where_clause);
    _o.set(_j, "pktable", _p?.pktable);
    _o.set(_j, "fk_attrs", _p?.fk_attrs);
    _o.set(_j, "pk_attrs", _p?.pk_attrs);
    _o.set(_j, "fk_matchtype", _p?.fk_matchtype);
    _o.set(_j, "fk_upd_action", _p?.fk_upd_action);
    _o.set(_j, "fk_del_action", _p?.fk_del_action);
    _o.set(_j, "fk_del_set_cols", _p?.fk_del_set_cols);
    _o.set(_j, "old_conpfeqop", _p?.old_conpfeqop);
    _o.set(_j, "old_pktable_oid", _p?.old_pktable_oid);
    _o.set(_j, "skip_validation", _p?.skip_validation);
    _o.set(_j, "initially_valid", _p?.initially_valid);
    return _j;
  },
  createTableSpaceStmt(_p?: CreateTableSpaceStmt): CreateTableSpaceStmt {
    const _j = ({} as CreateTableSpaceStmt);
    _o.set(_j, "tablespacename", _p?.tablespacename);
    _o.set(_j, "owner", _p?.owner);
    _o.set(_j, "location", _p?.location);
    _o.set(_j, "options", _p?.options);
    return _j;
  },
  dropTableSpaceStmt(_p?: DropTableSpaceStmt): DropTableSpaceStmt {
    const _j = ({} as DropTableSpaceStmt);
    _o.set(_j, "tablespacename", _p?.tablespacename);
    _o.set(_j, "missing_ok", _p?.missing_ok);
    return _j;
  },
  alterTableSpaceOptionsStmt(_p?: AlterTableSpaceOptionsStmt): AlterTableSpaceOptionsStmt {
    const _j = ({} as AlterTableSpaceOptionsStmt);
    _o.set(_j, "tablespacename", _p?.tablespacename);
    _o.set(_j, "options", _p?.options);
    _o.set(_j, "isReset", _p?.isReset);
    return _j;
  },
  alterTableMoveAllStmt(_p?: AlterTableMoveAllStmt): AlterTableMoveAllStmt {
    const _j = ({} as AlterTableMoveAllStmt);
    _o.set(_j, "orig_tablespacename", _p?.orig_tablespacename);
    _o.set(_j, "objtype", _p?.objtype);
    _o.set(_j, "roles", _p?.roles);
    _o.set(_j, "new_tablespacename", _p?.new_tablespacename);
    _o.set(_j, "nowait", _p?.nowait);
    return _j;
  },
  createExtensionStmt(_p?: CreateExtensionStmt): CreateExtensionStmt {
    const _j = ({} as CreateExtensionStmt);
    _o.set(_j, "extname", _p?.extname);
    _o.set(_j, "if_not_exists", _p?.if_not_exists);
    _o.set(_j, "options", _p?.options);
    return _j;
  },
  alterExtensionStmt(_p?: AlterExtensionStmt): AlterExtensionStmt {
    const _j = ({} as AlterExtensionStmt);
    _o.set(_j, "extname", _p?.extname);
    _o.set(_j, "options", _p?.options);
    return _j;
  },
  alterExtensionContentsStmt(_p?: AlterExtensionContentsStmt): AlterExtensionContentsStmt {
    const _j = ({} as AlterExtensionContentsStmt);
    _o.set(_j, "extname", _p?.extname);
    _o.set(_j, "action", _p?.action);
    _o.set(_j, "objtype", _p?.objtype);
    _o.set(_j, "object", _p?.object);
    return _j;
  },
  createFdwStmt(_p?: CreateFdwStmt): CreateFdwStmt {
    const _j = ({} as CreateFdwStmt);
    _o.set(_j, "fdwname", _p?.fdwname);
    _o.set(_j, "func_options", _p?.func_options);
    _o.set(_j, "options", _p?.options);
    return _j;
  },
  alterFdwStmt(_p?: AlterFdwStmt): AlterFdwStmt {
    const _j = ({} as AlterFdwStmt);
    _o.set(_j, "fdwname", _p?.fdwname);
    _o.set(_j, "func_options", _p?.func_options);
    _o.set(_j, "options", _p?.options);
    return _j;
  },
  createForeignServerStmt(_p?: CreateForeignServerStmt): CreateForeignServerStmt {
    const _j = ({} as CreateForeignServerStmt);
    _o.set(_j, "servername", _p?.servername);
    _o.set(_j, "servertype", _p?.servertype);
    _o.set(_j, "version", _p?.version);
    _o.set(_j, "fdwname", _p?.fdwname);
    _o.set(_j, "if_not_exists", _p?.if_not_exists);
    _o.set(_j, "options", _p?.options);
    return _j;
  },
  alterForeignServerStmt(_p?: AlterForeignServerStmt): AlterForeignServerStmt {
    const _j = ({} as AlterForeignServerStmt);
    _o.set(_j, "servername", _p?.servername);
    _o.set(_j, "version", _p?.version);
    _o.set(_j, "options", _p?.options);
    _o.set(_j, "has_version", _p?.has_version);
    return _j;
  },
  createForeignTableStmt(_p?: CreateForeignTableStmt): CreateForeignTableStmt {
    const _j = ({} as CreateForeignTableStmt);
    _o.set(_j, "base", _p?.base);
    _o.set(_j, "servername", _p?.servername);
    _o.set(_j, "options", _p?.options);
    return _j;
  },
  createUserMappingStmt(_p?: CreateUserMappingStmt): CreateUserMappingStmt {
    const _j = ({} as CreateUserMappingStmt);
    _o.set(_j, "user", _p?.user);
    _o.set(_j, "servername", _p?.servername);
    _o.set(_j, "if_not_exists", _p?.if_not_exists);
    _o.set(_j, "options", _p?.options);
    return _j;
  },
  alterUserMappingStmt(_p?: AlterUserMappingStmt): AlterUserMappingStmt {
    const _j = ({} as AlterUserMappingStmt);
    _o.set(_j, "user", _p?.user);
    _o.set(_j, "servername", _p?.servername);
    _o.set(_j, "options", _p?.options);
    return _j;
  },
  dropUserMappingStmt(_p?: DropUserMappingStmt): DropUserMappingStmt {
    const _j = ({} as DropUserMappingStmt);
    _o.set(_j, "user", _p?.user);
    _o.set(_j, "servername", _p?.servername);
    _o.set(_j, "missing_ok", _p?.missing_ok);
    return _j;
  },
  importForeignSchemaStmt(_p?: ImportForeignSchemaStmt): ImportForeignSchemaStmt {
    const _j = ({} as ImportForeignSchemaStmt);
    _o.set(_j, "server_name", _p?.server_name);
    _o.set(_j, "remote_schema", _p?.remote_schema);
    _o.set(_j, "local_schema", _p?.local_schema);
    _o.set(_j, "list_type", _p?.list_type);
    _o.set(_j, "table_list", _p?.table_list);
    _o.set(_j, "options", _p?.options);
    return _j;
  },
  createPolicyStmt(_p?: CreatePolicyStmt): CreatePolicyStmt {
    const _j = ({} as CreatePolicyStmt);
    _o.set(_j, "policy_name", _p?.policy_name);
    _o.set(_j, "table", _p?.table);
    _o.set(_j, "cmd_name", _p?.cmd_name);
    _o.set(_j, "permissive", _p?.permissive);
    _o.set(_j, "roles", _p?.roles);
    _o.set(_j, "qual", _p?.qual);
    _o.set(_j, "with_check", _p?.with_check);
    return _j;
  },
  alterPolicyStmt(_p?: AlterPolicyStmt): AlterPolicyStmt {
    const _j = ({} as AlterPolicyStmt);
    _o.set(_j, "policy_name", _p?.policy_name);
    _o.set(_j, "table", _p?.table);
    _o.set(_j, "roles", _p?.roles);
    _o.set(_j, "qual", _p?.qual);
    _o.set(_j, "with_check", _p?.with_check);
    return _j;
  },
  createAmStmt(_p?: CreateAmStmt): CreateAmStmt {
    const _j = ({} as CreateAmStmt);
    _o.set(_j, "amname", _p?.amname);
    _o.set(_j, "handler_name", _p?.handler_name);
    _o.set(_j, "amtype", _p?.amtype);
    return _j;
  },
  createTrigStmt(_p?: CreateTrigStmt): CreateTrigStmt {
    const _j = ({} as CreateTrigStmt);
    _o.set(_j, "replace", _p?.replace);
    _o.set(_j, "isconstraint", _p?.isconstraint);
    _o.set(_j, "trigname", _p?.trigname);
    _o.set(_j, "relation", _p?.relation);
    _o.set(_j, "funcname", _p?.funcname);
    _o.set(_j, "args", _p?.args);
    _o.set(_j, "row", _p?.row);
    _o.set(_j, "timing", _p?.timing);
    _o.set(_j, "events", _p?.events);
    _o.set(_j, "columns", _p?.columns);
    _o.set(_j, "whenClause", _p?.whenClause);
    _o.set(_j, "transitionRels", _p?.transitionRels);
    _o.set(_j, "deferrable", _p?.deferrable);
    _o.set(_j, "initdeferred", _p?.initdeferred);
    _o.set(_j, "constrrel", _p?.constrrel);
    return _j;
  },
  createEventTrigStmt(_p?: CreateEventTrigStmt): CreateEventTrigStmt {
    const _j = ({} as CreateEventTrigStmt);
    _o.set(_j, "trigname", _p?.trigname);
    _o.set(_j, "eventname", _p?.eventname);
    _o.set(_j, "whenclause", _p?.whenclause);
    _o.set(_j, "funcname", _p?.funcname);
    return _j;
  },
  alterEventTrigStmt(_p?: AlterEventTrigStmt): AlterEventTrigStmt {
    const _j = ({} as AlterEventTrigStmt);
    _o.set(_j, "trigname", _p?.trigname);
    _o.set(_j, "tgenabled", _p?.tgenabled);
    return _j;
  },
  createpLangStmt(_p?: CreatePLangStmt): CreatePLangStmt {
    const _j = ({} as CreatePLangStmt);
    _o.set(_j, "replace", _p?.replace);
    _o.set(_j, "plname", _p?.plname);
    _o.set(_j, "plhandler", _p?.plhandler);
    _o.set(_j, "plinline", _p?.plinline);
    _o.set(_j, "plvalidator", _p?.plvalidator);
    _o.set(_j, "pltrusted", _p?.pltrusted);
    return _j;
  },
  createRoleStmt(_p?: CreateRoleStmt): CreateRoleStmt {
    const _j = ({} as CreateRoleStmt);
    _o.set(_j, "stmt_type", _p?.stmt_type);
    _o.set(_j, "role", _p?.role);
    _o.set(_j, "options", _p?.options);
    return _j;
  },
  alterRoleStmt(_p?: AlterRoleStmt): AlterRoleStmt {
    const _j = ({} as AlterRoleStmt);
    _o.set(_j, "role", _p?.role);
    _o.set(_j, "options", _p?.options);
    _o.set(_j, "action", _p?.action);
    return _j;
  },
  alterRoleSetStmt(_p?: AlterRoleSetStmt): AlterRoleSetStmt {
    const _j = ({} as AlterRoleSetStmt);
    _o.set(_j, "role", _p?.role);
    _o.set(_j, "database", _p?.database);
    _o.set(_j, "setstmt", _p?.setstmt);
    return _j;
  },
  dropRoleStmt(_p?: DropRoleStmt): DropRoleStmt {
    const _j = ({} as DropRoleStmt);
    _o.set(_j, "roles", _p?.roles);
    _o.set(_j, "missing_ok", _p?.missing_ok);
    return _j;
  },
  createSeqStmt(_p?: CreateSeqStmt): CreateSeqStmt {
    const _j = ({} as CreateSeqStmt);
    _o.set(_j, "sequence", _p?.sequence);
    _o.set(_j, "options", _p?.options);
    _o.set(_j, "ownerId", _p?.ownerId);
    _o.set(_j, "for_identity", _p?.for_identity);
    _o.set(_j, "if_not_exists", _p?.if_not_exists);
    return _j;
  },
  alterSeqStmt(_p?: AlterSeqStmt): AlterSeqStmt {
    const _j = ({} as AlterSeqStmt);
    _o.set(_j, "sequence", _p?.sequence);
    _o.set(_j, "options", _p?.options);
    _o.set(_j, "for_identity", _p?.for_identity);
    _o.set(_j, "missing_ok", _p?.missing_ok);
    return _j;
  },
  defineStmt(_p?: DefineStmt): DefineStmt {
    const _j = ({} as DefineStmt);
    _o.set(_j, "kind", _p?.kind);
    _o.set(_j, "oldstyle", _p?.oldstyle);
    _o.set(_j, "defnames", _p?.defnames);
    _o.set(_j, "args", _p?.args);
    _o.set(_j, "definition", _p?.definition);
    _o.set(_j, "if_not_exists", _p?.if_not_exists);
    _o.set(_j, "replace", _p?.replace);
    return _j;
  },
  createDomainStmt(_p?: CreateDomainStmt): CreateDomainStmt {
    const _j = ({} as CreateDomainStmt);
    _o.set(_j, "domainname", _p?.domainname);
    _o.set(_j, "typeName", _p?.typeName);
    _o.set(_j, "collClause", _p?.collClause);
    _o.set(_j, "constraints", _p?.constraints);
    return _j;
  },
  createOpClassStmt(_p?: CreateOpClassStmt): CreateOpClassStmt {
    const _j = ({} as CreateOpClassStmt);
    _o.set(_j, "opclassname", _p?.opclassname);
    _o.set(_j, "opfamilyname", _p?.opfamilyname);
    _o.set(_j, "amname", _p?.amname);
    _o.set(_j, "datatype", _p?.datatype);
    _o.set(_j, "items", _p?.items);
    _o.set(_j, "isDefault", _p?.isDefault);
    return _j;
  },
  createOpClassItem(_p?: CreateOpClassItem): CreateOpClassItem {
    const _j = ({} as CreateOpClassItem);
    _o.set(_j, "itemtype", _p?.itemtype);
    _o.set(_j, "name", _p?.name);
    _o.set(_j, "number", _p?.number);
    _o.set(_j, "order_family", _p?.order_family);
    _o.set(_j, "class_args", _p?.class_args);
    _o.set(_j, "storedtype", _p?.storedtype);
    return _j;
  },
  createOpFamilyStmt(_p?: CreateOpFamilyStmt): CreateOpFamilyStmt {
    const _j = ({} as CreateOpFamilyStmt);
    _o.set(_j, "opfamilyname", _p?.opfamilyname);
    _o.set(_j, "amname", _p?.amname);
    return _j;
  },
  alterOpFamilyStmt(_p?: AlterOpFamilyStmt): AlterOpFamilyStmt {
    const _j = ({} as AlterOpFamilyStmt);
    _o.set(_j, "opfamilyname", _p?.opfamilyname);
    _o.set(_j, "amname", _p?.amname);
    _o.set(_j, "isDrop", _p?.isDrop);
    _o.set(_j, "items", _p?.items);
    return _j;
  },
  dropStmt(_p?: DropStmt): DropStmt {
    const _j = ({} as DropStmt);
    _o.set(_j, "objects", _p?.objects);
    _o.set(_j, "removeType", _p?.removeType);
    _o.set(_j, "behavior", _p?.behavior);
    _o.set(_j, "missing_ok", _p?.missing_ok);
    _o.set(_j, "concurrent", _p?.concurrent);
    return _j;
  },
  truncateStmt(_p?: TruncateStmt): TruncateStmt {
    const _j = ({} as TruncateStmt);
    _o.set(_j, "relations", _p?.relations);
    _o.set(_j, "restart_seqs", _p?.restart_seqs);
    _o.set(_j, "behavior", _p?.behavior);
    return _j;
  },
  commentStmt(_p?: CommentStmt): CommentStmt {
    const _j = ({} as CommentStmt);
    _o.set(_j, "objtype", _p?.objtype);
    _o.set(_j, "object", _p?.object);
    _o.set(_j, "comment", _p?.comment);
    return _j;
  },
  secLabelStmt(_p?: SecLabelStmt): SecLabelStmt {
    const _j = ({} as SecLabelStmt);
    _o.set(_j, "objtype", _p?.objtype);
    _o.set(_j, "object", _p?.object);
    _o.set(_j, "provider", _p?.provider);
    _o.set(_j, "label", _p?.label);
    return _j;
  },
  declareCursorStmt(_p?: DeclareCursorStmt): DeclareCursorStmt {
    const _j = ({} as DeclareCursorStmt);
    _o.set(_j, "portalname", _p?.portalname);
    _o.set(_j, "options", _p?.options);
    _o.set(_j, "query", _p?.query);
    return _j;
  },
  closePortalStmt(_p?: ClosePortalStmt): ClosePortalStmt {
    const _j = ({} as ClosePortalStmt);
    _o.set(_j, "portalname", _p?.portalname);
    return _j;
  },
  fetchStmt(_p?: FetchStmt): FetchStmt {
    const _j = ({} as FetchStmt);
    _o.set(_j, "direction", _p?.direction);
    _o.set(_j, "howMany", _p?.howMany);
    _o.set(_j, "portalname", _p?.portalname);
    _o.set(_j, "ismove", _p?.ismove);
    return _j;
  },
  indexStmt(_p?: IndexStmt): IndexStmt {
    const _j = ({} as IndexStmt);
    _o.set(_j, "idxname", _p?.idxname);
    _o.set(_j, "relation", _p?.relation);
    _o.set(_j, "accessMethod", _p?.accessMethod);
    _o.set(_j, "tableSpace", _p?.tableSpace);
    _o.set(_j, "indexParams", _p?.indexParams);
    _o.set(_j, "indexIncludingParams", _p?.indexIncludingParams);
    _o.set(_j, "options", _p?.options);
    _o.set(_j, "whereClause", _p?.whereClause);
    _o.set(_j, "excludeOpNames", _p?.excludeOpNames);
    _o.set(_j, "idxcomment", _p?.idxcomment);
    _o.set(_j, "indexOid", _p?.indexOid);
    _o.set(_j, "oldNumber", _p?.oldNumber);
    _o.set(_j, "oldCreateSubid", _p?.oldCreateSubid);
    _o.set(_j, "oldFirstRelfilelocatorSubid", _p?.oldFirstRelfilelocatorSubid);
    _o.set(_j, "unique", _p?.unique);
    _o.set(_j, "nulls_not_distinct", _p?.nulls_not_distinct);
    _o.set(_j, "primary", _p?.primary);
    _o.set(_j, "isconstraint", _p?.isconstraint);
    _o.set(_j, "deferrable", _p?.deferrable);
    _o.set(_j, "initdeferred", _p?.initdeferred);
    _o.set(_j, "transformed", _p?.transformed);
    _o.set(_j, "concurrent", _p?.concurrent);
    _o.set(_j, "if_not_exists", _p?.if_not_exists);
    _o.set(_j, "reset_default_tblspc", _p?.reset_default_tblspc);
    return _j;
  },
  createStatsStmt(_p?: CreateStatsStmt): CreateStatsStmt {
    const _j = ({} as CreateStatsStmt);
    _o.set(_j, "defnames", _p?.defnames);
    _o.set(_j, "stat_types", _p?.stat_types);
    _o.set(_j, "exprs", _p?.exprs);
    _o.set(_j, "relations", _p?.relations);
    _o.set(_j, "stxcomment", _p?.stxcomment);
    _o.set(_j, "transformed", _p?.transformed);
    _o.set(_j, "if_not_exists", _p?.if_not_exists);
    return _j;
  },
  statsElem(_p?: StatsElem): StatsElem {
    const _j = ({} as StatsElem);
    _o.set(_j, "name", _p?.name);
    _o.set(_j, "expr", _p?.expr);
    return _j;
  },
  alterStatsStmt(_p?: AlterStatsStmt): AlterStatsStmt {
    const _j = ({} as AlterStatsStmt);
    _o.set(_j, "defnames", _p?.defnames);
    _o.set(_j, "stxstattarget", _p?.stxstattarget);
    _o.set(_j, "missing_ok", _p?.missing_ok);
    return _j;
  },
  createFunctionStmt(_p?: CreateFunctionStmt): CreateFunctionStmt {
    const _j = ({} as CreateFunctionStmt);
    _o.set(_j, "is_procedure", _p?.is_procedure);
    _o.set(_j, "replace", _p?.replace);
    _o.set(_j, "funcname", _p?.funcname);
    _o.set(_j, "parameters", _p?.parameters);
    _o.set(_j, "returnType", _p?.returnType);
    _o.set(_j, "options", _p?.options);
    _o.set(_j, "sql_body", _p?.sql_body);
    return _j;
  },
  functionParameter(_p?: FunctionParameter): FunctionParameter {
    const _j = ({} as FunctionParameter);
    _o.set(_j, "name", _p?.name);
    _o.set(_j, "argType", _p?.argType);
    _o.set(_j, "mode", _p?.mode);
    _o.set(_j, "defexpr", _p?.defexpr);
    return _j;
  },
  alterFunctionStmt(_p?: AlterFunctionStmt): AlterFunctionStmt {
    const _j = ({} as AlterFunctionStmt);
    _o.set(_j, "objtype", _p?.objtype);
    _o.set(_j, "func", _p?.func);
    _o.set(_j, "actions", _p?.actions);
    return _j;
  },
  doStmt(_p?: DoStmt): DoStmt {
    const _j = ({} as DoStmt);
    _o.set(_j, "args", _p?.args);
    return _j;
  },
  inlineCodeBlock(_p?: InlineCodeBlock): InlineCodeBlock {
    const _j = ({} as InlineCodeBlock);
    _o.set(_j, "source_text", _p?.source_text);
    _o.set(_j, "langOid", _p?.langOid);
    _o.set(_j, "langIsTrusted", _p?.langIsTrusted);
    _o.set(_j, "atomic", _p?.atomic);
    return _j;
  },
  callStmt(_p?: CallStmt): CallStmt {
    const _j = ({} as CallStmt);
    _o.set(_j, "funccall", _p?.funccall);
    _o.set(_j, "funcexpr", _p?.funcexpr);
    _o.set(_j, "outargs", _p?.outargs);
    return _j;
  },
  callContext(_p?: CallContext): CallContext {
    const _j = ({} as CallContext);
    _o.set(_j, "atomic", _p?.atomic);
    return _j;
  },
  renameStmt(_p?: RenameStmt): RenameStmt {
    const _j = ({} as RenameStmt);
    _o.set(_j, "renameType", _p?.renameType);
    _o.set(_j, "relationType", _p?.relationType);
    _o.set(_j, "relation", _p?.relation);
    _o.set(_j, "object", _p?.object);
    _o.set(_j, "subname", _p?.subname);
    _o.set(_j, "newname", _p?.newname);
    _o.set(_j, "behavior", _p?.behavior);
    _o.set(_j, "missing_ok", _p?.missing_ok);
    return _j;
  },
  alterObjectDependsStmt(_p?: AlterObjectDependsStmt): AlterObjectDependsStmt {
    const _j = ({} as AlterObjectDependsStmt);
    _o.set(_j, "objectType", _p?.objectType);
    _o.set(_j, "relation", _p?.relation);
    _o.set(_j, "object", _p?.object);
    _o.set(_j, "extname", _p?.extname);
    _o.set(_j, "remove", _p?.remove);
    return _j;
  },
  alterObjectSchemaStmt(_p?: AlterObjectSchemaStmt): AlterObjectSchemaStmt {
    const _j = ({} as AlterObjectSchemaStmt);
    _o.set(_j, "objectType", _p?.objectType);
    _o.set(_j, "relation", _p?.relation);
    _o.set(_j, "object", _p?.object);
    _o.set(_j, "newschema", _p?.newschema);
    _o.set(_j, "missing_ok", _p?.missing_ok);
    return _j;
  },
  alterOwnerStmt(_p?: AlterOwnerStmt): AlterOwnerStmt {
    const _j = ({} as AlterOwnerStmt);
    _o.set(_j, "objectType", _p?.objectType);
    _o.set(_j, "relation", _p?.relation);
    _o.set(_j, "object", _p?.object);
    _o.set(_j, "newowner", _p?.newowner);
    return _j;
  },
  alterOperatorStmt(_p?: AlterOperatorStmt): AlterOperatorStmt {
    const _j = ({} as AlterOperatorStmt);
    _o.set(_j, "opername", _p?.opername);
    _o.set(_j, "options", _p?.options);
    return _j;
  },
  alterTypeStmt(_p?: AlterTypeStmt): AlterTypeStmt {
    const _j = ({} as AlterTypeStmt);
    _o.set(_j, "typeName", _p?.typeName);
    _o.set(_j, "options", _p?.options);
    return _j;
  },
  ruleStmt(_p?: RuleStmt): RuleStmt {
    const _j = ({} as RuleStmt);
    _o.set(_j, "relation", _p?.relation);
    _o.set(_j, "rulename", _p?.rulename);
    _o.set(_j, "whereClause", _p?.whereClause);
    _o.set(_j, "event", _p?.event);
    _o.set(_j, "instead", _p?.instead);
    _o.set(_j, "actions", _p?.actions);
    _o.set(_j, "replace", _p?.replace);
    return _j;
  },
  notifyStmt(_p?: NotifyStmt): NotifyStmt {
    const _j = ({} as NotifyStmt);
    _o.set(_j, "conditionname", _p?.conditionname);
    _o.set(_j, "payload", _p?.payload);
    return _j;
  },
  listenStmt(_p?: ListenStmt): ListenStmt {
    const _j = ({} as ListenStmt);
    _o.set(_j, "conditionname", _p?.conditionname);
    return _j;
  },
  unlistenStmt(_p?: UnlistenStmt): UnlistenStmt {
    const _j = ({} as UnlistenStmt);
    _o.set(_j, "conditionname", _p?.conditionname);
    return _j;
  },
  transactionStmt(_p?: TransactionStmt): TransactionStmt {
    const _j = ({} as TransactionStmt);
    _o.set(_j, "kind", _p?.kind);
    _o.set(_j, "options", _p?.options);
    _o.set(_j, "savepoint_name", _p?.savepoint_name);
    _o.set(_j, "gid", _p?.gid);
    _o.set(_j, "chain", _p?.chain);
    return _j;
  },
  compositeTypeStmt(_p?: CompositeTypeStmt): CompositeTypeStmt {
    const _j = ({} as CompositeTypeStmt);
    _o.set(_j, "typevar", _p?.typevar);
    _o.set(_j, "coldeflist", _p?.coldeflist);
    return _j;
  },
  createEnumStmt(_p?: CreateEnumStmt): CreateEnumStmt {
    const _j = ({} as CreateEnumStmt);
    _o.set(_j, "typeName", _p?.typeName);
    _o.set(_j, "vals", _p?.vals);
    return _j;
  },
  createRangeStmt(_p?: CreateRangeStmt): CreateRangeStmt {
    const _j = ({} as CreateRangeStmt);
    _o.set(_j, "typeName", _p?.typeName);
    _o.set(_j, "params", _p?.params);
    return _j;
  },
  alterEnumStmt(_p?: AlterEnumStmt): AlterEnumStmt {
    const _j = ({} as AlterEnumStmt);
    _o.set(_j, "typeName", _p?.typeName);
    _o.set(_j, "oldVal", _p?.oldVal);
    _o.set(_j, "newVal", _p?.newVal);
    _o.set(_j, "newValNeighbor", _p?.newValNeighbor);
    _o.set(_j, "newValIsAfter", _p?.newValIsAfter);
    _o.set(_j, "skipIfNewValExists", _p?.skipIfNewValExists);
    return _j;
  },
  viewStmt(_p?: ViewStmt): ViewStmt {
    const _j = ({} as ViewStmt);
    _o.set(_j, "view", _p?.view);
    _o.set(_j, "aliases", _p?.aliases);
    _o.set(_j, "query", _p?.query);
    _o.set(_j, "replace", _p?.replace);
    _o.set(_j, "options", _p?.options);
    _o.set(_j, "withCheckOption", _p?.withCheckOption);
    return _j;
  },
  loadStmt(_p?: LoadStmt): LoadStmt {
    const _j = ({} as LoadStmt);
    _o.set(_j, "filename", _p?.filename);
    return _j;
  },
  createdbStmt(_p?: CreatedbStmt): CreatedbStmt {
    const _j = ({} as CreatedbStmt);
    _o.set(_j, "dbname", _p?.dbname);
    _o.set(_j, "options", _p?.options);
    return _j;
  },
  alterDatabaseStmt(_p?: AlterDatabaseStmt): AlterDatabaseStmt {
    const _j = ({} as AlterDatabaseStmt);
    _o.set(_j, "dbname", _p?.dbname);
    _o.set(_j, "options", _p?.options);
    return _j;
  },
  alterDatabaseRefreshCollStmt(_p?: AlterDatabaseRefreshCollStmt): AlterDatabaseRefreshCollStmt {
    const _j = ({} as AlterDatabaseRefreshCollStmt);
    _o.set(_j, "dbname", _p?.dbname);
    return _j;
  },
  alterDatabaseSetStmt(_p?: AlterDatabaseSetStmt): AlterDatabaseSetStmt {
    const _j = ({} as AlterDatabaseSetStmt);
    _o.set(_j, "dbname", _p?.dbname);
    _o.set(_j, "setstmt", _p?.setstmt);
    return _j;
  },
  dropdbStmt(_p?: DropdbStmt): DropdbStmt {
    const _j = ({} as DropdbStmt);
    _o.set(_j, "dbname", _p?.dbname);
    _o.set(_j, "missing_ok", _p?.missing_ok);
    _o.set(_j, "options", _p?.options);
    return _j;
  },
  alterSystemStmt(_p?: AlterSystemStmt): AlterSystemStmt {
    const _j = ({} as AlterSystemStmt);
    _o.set(_j, "setstmt", _p?.setstmt);
    return _j;
  },
  clusterStmt(_p?: ClusterStmt): ClusterStmt {
    const _j = ({} as ClusterStmt);
    _o.set(_j, "relation", _p?.relation);
    _o.set(_j, "indexname", _p?.indexname);
    _o.set(_j, "params", _p?.params);
    return _j;
  },
  vacuumStmt(_p?: VacuumStmt): VacuumStmt {
    const _j = ({} as VacuumStmt);
    _o.set(_j, "options", _p?.options);
    _o.set(_j, "rels", _p?.rels);
    _o.set(_j, "is_vacuumcmd", _p?.is_vacuumcmd);
    return _j;
  },
  vacuumRelation(_p?: VacuumRelation): VacuumRelation {
    const _j = ({} as VacuumRelation);
    _o.set(_j, "relation", _p?.relation);
    _o.set(_j, "oid", _p?.oid);
    _o.set(_j, "va_cols", _p?.va_cols);
    return _j;
  },
  explainStmt(_p?: ExplainStmt): ExplainStmt {
    const _j = ({} as ExplainStmt);
    _o.set(_j, "query", _p?.query);
    _o.set(_j, "options", _p?.options);
    return _j;
  },
  createTableAsStmt(_p?: CreateTableAsStmt): CreateTableAsStmt {
    const _j = ({} as CreateTableAsStmt);
    _o.set(_j, "query", _p?.query);
    _o.set(_j, "into", _p?.into);
    _o.set(_j, "objtype", _p?.objtype);
    _o.set(_j, "is_select_into", _p?.is_select_into);
    _o.set(_j, "if_not_exists", _p?.if_not_exists);
    return _j;
  },
  refreshMatViewStmt(_p?: RefreshMatViewStmt): RefreshMatViewStmt {
    const _j = ({} as RefreshMatViewStmt);
    _o.set(_j, "concurrent", _p?.concurrent);
    _o.set(_j, "skipData", _p?.skipData);
    _o.set(_j, "relation", _p?.relation);
    return _j;
  },
  checkPointStmt(_p?: CheckPointStmt): CheckPointStmt {
    const _j = ({} as CheckPointStmt);
    return _j;
  },
  discardStmt(_p?: DiscardStmt): DiscardStmt {
    const _j = ({} as DiscardStmt);
    _o.set(_j, "target", _p?.target);
    return _j;
  },
  lockStmt(_p?: LockStmt): LockStmt {
    const _j = ({} as LockStmt);
    _o.set(_j, "relations", _p?.relations);
    _o.set(_j, "mode", _p?.mode);
    _o.set(_j, "nowait", _p?.nowait);
    return _j;
  },
  constraintsSetStmt(_p?: ConstraintsSetStmt): ConstraintsSetStmt {
    const _j = ({} as ConstraintsSetStmt);
    _o.set(_j, "constraints", _p?.constraints);
    _o.set(_j, "deferred", _p?.deferred);
    return _j;
  },
  reindexStmt(_p?: ReindexStmt): ReindexStmt {
    const _j = ({} as ReindexStmt);
    _o.set(_j, "kind", _p?.kind);
    _o.set(_j, "relation", _p?.relation);
    _o.set(_j, "name", _p?.name);
    _o.set(_j, "params", _p?.params);
    return _j;
  },
  createConversionStmt(_p?: CreateConversionStmt): CreateConversionStmt {
    const _j = ({} as CreateConversionStmt);
    _o.set(_j, "conversion_name", _p?.conversion_name);
    _o.set(_j, "for_encoding_name", _p?.for_encoding_name);
    _o.set(_j, "to_encoding_name", _p?.to_encoding_name);
    _o.set(_j, "func_name", _p?.func_name);
    _o.set(_j, "def", _p?.def);
    return _j;
  },
  createCastStmt(_p?: CreateCastStmt): CreateCastStmt {
    const _j = ({} as CreateCastStmt);
    _o.set(_j, "sourcetype", _p?.sourcetype);
    _o.set(_j, "targettype", _p?.targettype);
    _o.set(_j, "func", _p?.func);
    _o.set(_j, "context", _p?.context);
    _o.set(_j, "inout", _p?.inout);
    return _j;
  },
  createTransformStmt(_p?: CreateTransformStmt): CreateTransformStmt {
    const _j = ({} as CreateTransformStmt);
    _o.set(_j, "replace", _p?.replace);
    _o.set(_j, "type_name", _p?.type_name);
    _o.set(_j, "lang", _p?.lang);
    _o.set(_j, "fromsql", _p?.fromsql);
    _o.set(_j, "tosql", _p?.tosql);
    return _j;
  },
  prepareStmt(_p?: PrepareStmt): PrepareStmt {
    const _j = ({} as PrepareStmt);
    _o.set(_j, "name", _p?.name);
    _o.set(_j, "argtypes", _p?.argtypes);
    _o.set(_j, "query", _p?.query);
    return _j;
  },
  executeStmt(_p?: ExecuteStmt): ExecuteStmt {
    const _j = ({} as ExecuteStmt);
    _o.set(_j, "name", _p?.name);
    _o.set(_j, "params", _p?.params);
    return _j;
  },
  deallocateStmt(_p?: DeallocateStmt): DeallocateStmt {
    const _j = ({} as DeallocateStmt);
    _o.set(_j, "name", _p?.name);
    return _j;
  },
  dropOwnedStmt(_p?: DropOwnedStmt): DropOwnedStmt {
    const _j = ({} as DropOwnedStmt);
    _o.set(_j, "roles", _p?.roles);
    _o.set(_j, "behavior", _p?.behavior);
    return _j;
  },
  reassignOwnedStmt(_p?: ReassignOwnedStmt): ReassignOwnedStmt {
    const _j = ({} as ReassignOwnedStmt);
    _o.set(_j, "roles", _p?.roles);
    _o.set(_j, "newrole", _p?.newrole);
    return _j;
  },
  altertsDictionaryStmt(_p?: AlterTSDictionaryStmt): AlterTSDictionaryStmt {
    const _j = ({} as AlterTSDictionaryStmt);
    _o.set(_j, "dictname", _p?.dictname);
    _o.set(_j, "options", _p?.options);
    return _j;
  },
  altertsConfigurationStmt(_p?: AlterTSConfigurationStmt): AlterTSConfigurationStmt {
    const _j = ({} as AlterTSConfigurationStmt);
    _o.set(_j, "kind", _p?.kind);
    _o.set(_j, "cfgname", _p?.cfgname);
    _o.set(_j, "tokentype", _p?.tokentype);
    _o.set(_j, "dicts", _p?.dicts);
    _o.set(_j, "override", _p?.override);
    _o.set(_j, "replace", _p?.replace);
    _o.set(_j, "missing_ok", _p?.missing_ok);
    return _j;
  },
  publicationTable(_p?: PublicationTable): PublicationTable {
    const _j = ({} as PublicationTable);
    _o.set(_j, "relation", _p?.relation);
    _o.set(_j, "whereClause", _p?.whereClause);
    _o.set(_j, "columns", _p?.columns);
    return _j;
  },
  publicationObjSpec(_p?: PublicationObjSpec): PublicationObjSpec {
    const _j = ({} as PublicationObjSpec);
    _o.set(_j, "pubobjtype", _p?.pubobjtype);
    _o.set(_j, "name", _p?.name);
    _o.set(_j, "pubtable", _p?.pubtable);
    _o.set(_j, "location", _p?.location);
    return _j;
  },
  createPublicationStmt(_p?: CreatePublicationStmt): CreatePublicationStmt {
    const _j = ({} as CreatePublicationStmt);
    _o.set(_j, "pubname", _p?.pubname);
    _o.set(_j, "options", _p?.options);
    _o.set(_j, "pubobjects", _p?.pubobjects);
    _o.set(_j, "for_all_tables", _p?.for_all_tables);
    return _j;
  },
  alterPublicationStmt(_p?: AlterPublicationStmt): AlterPublicationStmt {
    const _j = ({} as AlterPublicationStmt);
    _o.set(_j, "pubname", _p?.pubname);
    _o.set(_j, "options", _p?.options);
    _o.set(_j, "pubobjects", _p?.pubobjects);
    _o.set(_j, "for_all_tables", _p?.for_all_tables);
    _o.set(_j, "action", _p?.action);
    return _j;
  },
  createSubscriptionStmt(_p?: CreateSubscriptionStmt): CreateSubscriptionStmt {
    const _j = ({} as CreateSubscriptionStmt);
    _o.set(_j, "subname", _p?.subname);
    _o.set(_j, "conninfo", _p?.conninfo);
    _o.set(_j, "publication", _p?.publication);
    _o.set(_j, "options", _p?.options);
    return _j;
  },
  alterSubscriptionStmt(_p?: AlterSubscriptionStmt): AlterSubscriptionStmt {
    const _j = ({} as AlterSubscriptionStmt);
    _o.set(_j, "kind", _p?.kind);
    _o.set(_j, "subname", _p?.subname);
    _o.set(_j, "conninfo", _p?.conninfo);
    _o.set(_j, "publication", _p?.publication);
    _o.set(_j, "options", _p?.options);
    return _j;
  },
  dropSubscriptionStmt(_p?: DropSubscriptionStmt): DropSubscriptionStmt {
    const _j = ({} as DropSubscriptionStmt);
    _o.set(_j, "subname", _p?.subname);
    _o.set(_j, "missing_ok", _p?.missing_ok);
    _o.set(_j, "behavior", _p?.behavior);
    return _j;
  },
  scanToken(_p?: ScanToken): ScanToken {
    const _j = ({} as ScanToken);
    _o.set(_j, "start", _p?.start);
    _o.set(_j, "end", _p?.end);
    _o.set(_j, "token", _p?.token);
    _o.set(_j, "keywordKind", _p?.keywordKind);
    return _j;
  }
};",
    "file": "asts.ts",
  },
  {
    "code": "/**
* This file was automatically generated by pg-proto-parser@latest.
* DO NOT MODIFY IT BY HAND. Instead, modify the source proto file,
* and run the pg-proto-parser generate command to regenerate this file.
*/
export type OverridingKind = "OVERRIDING_NOT_SET" | "OVERRIDING_USER_VALUE" | "OVERRIDING_SYSTEM_VALUE";
export type QuerySource = "QSRC_ORIGINAL" | "QSRC_PARSER" | "QSRC_INSTEAD_RULE" | "QSRC_QUAL_INSTEAD_RULE" | "QSRC_NON_INSTEAD_RULE";
export type SortByDir = "SORTBY_DEFAULT" | "SORTBY_ASC" | "SORTBY_DESC" | "SORTBY_USING";
export type SortByNulls = "SORTBY_NULLS_DEFAULT" | "SORTBY_NULLS_FIRST" | "SORTBY_NULLS_LAST";
export type SetQuantifier = "SET_QUANTIFIER_DEFAULT" | "SET_QUANTIFIER_ALL" | "SET_QUANTIFIER_DISTINCT";
export type A_Expr_Kind = "AEXPR_OP" | "AEXPR_OP_ANY" | "AEXPR_OP_ALL" | "AEXPR_DISTINCT" | "AEXPR_NOT_DISTINCT" | "AEXPR_NULLIF" | "AEXPR_IN" | "AEXPR_LIKE" | "AEXPR_ILIKE" | "AEXPR_SIMILAR" | "AEXPR_BETWEEN" | "AEXPR_NOT_BETWEEN" | "AEXPR_BETWEEN_SYM" | "AEXPR_NOT_BETWEEN_SYM";
export type RoleSpecType = "ROLESPEC_CSTRING" | "ROLESPEC_CURRENT_ROLE" | "ROLESPEC_CURRENT_USER" | "ROLESPEC_SESSION_USER" | "ROLESPEC_PUBLIC";
export type TableLikeOption = "CREATE_TABLE_LIKE_COMMENTS" | "CREATE_TABLE_LIKE_COMPRESSION" | "CREATE_TABLE_LIKE_CONSTRAINTS" | "CREATE_TABLE_LIKE_DEFAULTS" | "CREATE_TABLE_LIKE_GENERATED" | "CREATE_TABLE_LIKE_IDENTITY" | "CREATE_TABLE_LIKE_INDEXES" | "CREATE_TABLE_LIKE_STATISTICS" | "CREATE_TABLE_LIKE_STORAGE" | "CREATE_TABLE_LIKE_ALL";
export type DefElemAction = "DEFELEM_UNSPEC" | "DEFELEM_SET" | "DEFELEM_ADD" | "DEFELEM_DROP";
export type PartitionStrategy = "PARTITION_STRATEGY_LIST" | "PARTITION_STRATEGY_RANGE" | "PARTITION_STRATEGY_HASH";
export type PartitionRangeDatumKind = "PARTITION_RANGE_DATUM_MINVALUE" | "PARTITION_RANGE_DATUM_VALUE" | "PARTITION_RANGE_DATUM_MAXVALUE";
export type RTEKind = "RTE_RELATION" | "RTE_SUBQUERY" | "RTE_JOIN" | "RTE_FUNCTION" | "RTE_TABLEFUNC" | "RTE_VALUES" | "RTE_CTE" | "RTE_NAMEDTUPLESTORE" | "RTE_RESULT";
export type WCOKind = "WCO_VIEW_CHECK" | "WCO_RLS_INSERT_CHECK" | "WCO_RLS_UPDATE_CHECK" | "WCO_RLS_CONFLICT_CHECK" | "WCO_RLS_MERGE_UPDATE_CHECK" | "WCO_RLS_MERGE_DELETE_CHECK";
export type GroupingSetKind = "GROUPING_SET_EMPTY" | "GROUPING_SET_SIMPLE" | "GROUPING_SET_ROLLUP" | "GROUPING_SET_CUBE" | "GROUPING_SET_SETS";
export type CTEMaterialize = "CTEMaterializeDefault" | "CTEMaterializeAlways" | "CTEMaterializeNever";
export type SetOperation = "SETOP_NONE" | "SETOP_UNION" | "SETOP_INTERSECT" | "SETOP_EXCEPT";
export type ObjectType = "OBJECT_ACCESS_METHOD" | "OBJECT_AGGREGATE" | "OBJECT_AMOP" | "OBJECT_AMPROC" | "OBJECT_ATTRIBUTE" | "OBJECT_CAST" | "OBJECT_COLUMN" | "OBJECT_COLLATION" | "OBJECT_CONVERSION" | "OBJECT_DATABASE" | "OBJECT_DEFAULT" | "OBJECT_DEFACL" | "OBJECT_DOMAIN" | "OBJECT_DOMCONSTRAINT" | "OBJECT_EVENT_TRIGGER" | "OBJECT_EXTENSION" | "OBJECT_FDW" | "OBJECT_FOREIGN_SERVER" | "OBJECT_FOREIGN_TABLE" | "OBJECT_FUNCTION" | "OBJECT_INDEX" | "OBJECT_LANGUAGE" | "OBJECT_LARGEOBJECT" | "OBJECT_MATVIEW" | "OBJECT_OPCLASS" | "OBJECT_OPERATOR" | "OBJECT_OPFAMILY" | "OBJECT_PARAMETER_ACL" | "OBJECT_POLICY" | "OBJECT_PROCEDURE" | "OBJECT_PUBLICATION" | "OBJECT_PUBLICATION_NAMESPACE" | "OBJECT_PUBLICATION_REL" | "OBJECT_ROLE" | "OBJECT_ROUTINE" | "OBJECT_RULE" | "OBJECT_SCHEMA" | "OBJECT_SEQUENCE" | "OBJECT_SUBSCRIPTION" | "OBJECT_STATISTIC_EXT" | "OBJECT_TABCONSTRAINT" | "OBJECT_TABLE" | "OBJECT_TABLESPACE" | "OBJECT_TRANSFORM" | "OBJECT_TRIGGER" | "OBJECT_TSCONFIGURATION" | "OBJECT_TSDICTIONARY" | "OBJECT_TSPARSER" | "OBJECT_TSTEMPLATE" | "OBJECT_TYPE" | "OBJECT_USER_MAPPING" | "OBJECT_VIEW";
export type DropBehavior = "DROP_RESTRICT" | "DROP_CASCADE";
export type AlterTableType = "AT_AddColumn" | "AT_AddColumnToView" | "AT_ColumnDefault" | "AT_CookedColumnDefault" | "AT_DropNotNull" | "AT_SetNotNull" | "AT_DropExpression" | "AT_CheckNotNull" | "AT_SetStatistics" | "AT_SetOptions" | "AT_ResetOptions" | "AT_SetStorage" | "AT_SetCompression" | "AT_DropColumn" | "AT_AddIndex" | "AT_ReAddIndex" | "AT_AddConstraint" | "AT_ReAddConstraint" | "AT_ReAddDomainConstraint" | "AT_AlterConstraint" | "AT_ValidateConstraint" | "AT_AddIndexConstraint" | "AT_DropConstraint" | "AT_ReAddComment" | "AT_AlterColumnType" | "AT_AlterColumnGenericOptions" | "AT_ChangeOwner" | "AT_ClusterOn" | "AT_DropCluster" | "AT_SetLogged" | "AT_SetUnLogged" | "AT_DropOids" | "AT_SetAccessMethod" | "AT_SetTableSpace" | "AT_SetRelOptions" | "AT_ResetRelOptions" | "AT_ReplaceRelOptions" | "AT_EnableTrig" | "AT_EnableAlwaysTrig" | "AT_EnableReplicaTrig" | "AT_DisableTrig" | "AT_EnableTrigAll" | "AT_DisableTrigAll" | "AT_EnableTrigUser" | "AT_DisableTrigUser" | "AT_EnableRule" | "AT_EnableAlwaysRule" | "AT_EnableReplicaRule" | "AT_DisableRule" | "AT_AddInherit" | "AT_DropInherit" | "AT_AddOf" | "AT_DropOf" | "AT_ReplicaIdentity" | "AT_EnableRowSecurity" | "AT_DisableRowSecurity" | "AT_ForceRowSecurity" | "AT_NoForceRowSecurity" | "AT_GenericOptions" | "AT_AttachPartition" | "AT_DetachPartition" | "AT_DetachPartitionFinalize" | "AT_AddIdentity" | "AT_SetIdentity" | "AT_DropIdentity" | "AT_ReAddStatistics";
export type GrantTargetType = "ACL_TARGET_OBJECT" | "ACL_TARGET_ALL_IN_SCHEMA" | "ACL_TARGET_DEFAULTS";
export type VariableSetKind = "VAR_SET_VALUE" | "VAR_SET_DEFAULT" | "VAR_SET_CURRENT" | "VAR_SET_MULTI" | "VAR_RESET" | "VAR_RESET_ALL";
export type ConstrType = "CONSTR_NULL" | "CONSTR_NOTNULL" | "CONSTR_DEFAULT" | "CONSTR_IDENTITY" | "CONSTR_GENERATED" | "CONSTR_CHECK" | "CONSTR_PRIMARY" | "CONSTR_UNIQUE" | "CONSTR_EXCLUSION" | "CONSTR_FOREIGN" | "CONSTR_ATTR_DEFERRABLE" | "CONSTR_ATTR_NOT_DEFERRABLE" | "CONSTR_ATTR_DEFERRED" | "CONSTR_ATTR_IMMEDIATE";
export type ImportForeignSchemaType = "FDW_IMPORT_SCHEMA_ALL" | "FDW_IMPORT_SCHEMA_LIMIT_TO" | "FDW_IMPORT_SCHEMA_EXCEPT";
export type RoleStmtType = "ROLESTMT_ROLE" | "ROLESTMT_USER" | "ROLESTMT_GROUP";
export type FetchDirection = "FETCH_FORWARD" | "FETCH_BACKWARD" | "FETCH_ABSOLUTE" | "FETCH_RELATIVE";
export type FunctionParameterMode = "FUNC_PARAM_IN" | "FUNC_PARAM_OUT" | "FUNC_PARAM_INOUT" | "FUNC_PARAM_VARIADIC" | "FUNC_PARAM_TABLE" | "FUNC_PARAM_DEFAULT";
export type TransactionStmtKind = "TRANS_STMT_BEGIN" | "TRANS_STMT_START" | "TRANS_STMT_COMMIT" | "TRANS_STMT_ROLLBACK" | "TRANS_STMT_SAVEPOINT" | "TRANS_STMT_RELEASE" | "TRANS_STMT_ROLLBACK_TO" | "TRANS_STMT_PREPARE" | "TRANS_STMT_COMMIT_PREPARED" | "TRANS_STMT_ROLLBACK_PREPARED";
export type ViewCheckOption = "NO_CHECK_OPTION" | "LOCAL_CHECK_OPTION" | "CASCADED_CHECK_OPTION";
export type DiscardMode = "DISCARD_ALL" | "DISCARD_PLANS" | "DISCARD_SEQUENCES" | "DISCARD_TEMP";
export type ReindexObjectType = "REINDEX_OBJECT_INDEX" | "REINDEX_OBJECT_TABLE" | "REINDEX_OBJECT_SCHEMA" | "REINDEX_OBJECT_SYSTEM" | "REINDEX_OBJECT_DATABASE";
export type AlterTSConfigType = "ALTER_TSCONFIG_ADD_MAPPING" | "ALTER_TSCONFIG_ALTER_MAPPING_FOR_TOKEN" | "ALTER_TSCONFIG_REPLACE_DICT" | "ALTER_TSCONFIG_REPLACE_DICT_FOR_TOKEN" | "ALTER_TSCONFIG_DROP_MAPPING";
export type PublicationObjSpecType = "PUBLICATIONOBJ_TABLE" | "PUBLICATIONOBJ_TABLES_IN_SCHEMA" | "PUBLICATIONOBJ_TABLES_IN_CUR_SCHEMA" | "PUBLICATIONOBJ_CONTINUATION";
export type AlterPublicationAction = "AP_AddObjects" | "AP_DropObjects" | "AP_SetObjects";
export type AlterSubscriptionType = "ALTER_SUBSCRIPTION_OPTIONS" | "ALTER_SUBSCRIPTION_CONNECTION" | "ALTER_SUBSCRIPTION_SET_PUBLICATION" | "ALTER_SUBSCRIPTION_ADD_PUBLICATION" | "ALTER_SUBSCRIPTION_DROP_PUBLICATION" | "ALTER_SUBSCRIPTION_REFRESH" | "ALTER_SUBSCRIPTION_ENABLED" | "ALTER_SUBSCRIPTION_SKIP";
export type OnCommitAction = "ONCOMMIT_NOOP" | "ONCOMMIT_PRESERVE_ROWS" | "ONCOMMIT_DELETE_ROWS" | "ONCOMMIT_DROP";
export type ParamKind = "PARAM_EXTERN" | "PARAM_EXEC" | "PARAM_SUBLINK" | "PARAM_MULTIEXPR";
export type CoercionContext = "COERCION_IMPLICIT" | "COERCION_ASSIGNMENT" | "COERCION_PLPGSQL" | "COERCION_EXPLICIT";
export type CoercionForm = "COERCE_EXPLICIT_CALL" | "COERCE_EXPLICIT_CAST" | "COERCE_IMPLICIT_CAST" | "COERCE_SQL_SYNTAX";
export type BoolExprType = "AND_EXPR" | "OR_EXPR" | "NOT_EXPR";
export type SubLinkType = "EXISTS_SUBLINK" | "ALL_SUBLINK" | "ANY_SUBLINK" | "ROWCOMPARE_SUBLINK" | "EXPR_SUBLINK" | "MULTIEXPR_SUBLINK" | "ARRAY_SUBLINK" | "CTE_SUBLINK";
export type RowCompareType = "ROWCOMPARE_LT" | "ROWCOMPARE_LE" | "ROWCOMPARE_EQ" | "ROWCOMPARE_GE" | "ROWCOMPARE_GT" | "ROWCOMPARE_NE";
export type MinMaxOp = "IS_GREATEST" | "IS_LEAST";
export type SQLValueFunctionOp = "SVFOP_CURRENT_DATE" | "SVFOP_CURRENT_TIME" | "SVFOP_CURRENT_TIME_N" | "SVFOP_CURRENT_TIMESTAMP" | "SVFOP_CURRENT_TIMESTAMP_N" | "SVFOP_LOCALTIME" | "SVFOP_LOCALTIME_N" | "SVFOP_LOCALTIMESTAMP" | "SVFOP_LOCALTIMESTAMP_N" | "SVFOP_CURRENT_ROLE" | "SVFOP_CURRENT_USER" | "SVFOP_USER" | "SVFOP_SESSION_USER" | "SVFOP_CURRENT_CATALOG" | "SVFOP_CURRENT_SCHEMA";
export type XmlExprOp = "IS_XMLCONCAT" | "IS_XMLELEMENT" | "IS_XMLFOREST" | "IS_XMLPARSE" | "IS_XMLPI" | "IS_XMLROOT" | "IS_XMLSERIALIZE" | "IS_DOCUMENT";
export type XmlOptionType = "XMLOPTION_DOCUMENT" | "XMLOPTION_CONTENT";
export type JsonEncoding = "JS_ENC_DEFAULT" | "JS_ENC_UTF8" | "JS_ENC_UTF16" | "JS_ENC_UTF32";
export type JsonFormatType = "JS_FORMAT_DEFAULT" | "JS_FORMAT_JSON" | "JS_FORMAT_JSONB";
export type JsonConstructorType = "JSCTOR_JSON_OBJECT" | "JSCTOR_JSON_ARRAY" | "JSCTOR_JSON_OBJECTAGG" | "JSCTOR_JSON_ARRAYAGG";
export type JsonValueType = "JS_TYPE_ANY" | "JS_TYPE_OBJECT" | "JS_TYPE_ARRAY" | "JS_TYPE_SCALAR";
export type NullTestType = "IS_NULL" | "IS_NOT_NULL";
export type BoolTestType = "IS_TRUE" | "IS_NOT_TRUE" | "IS_FALSE" | "IS_NOT_FALSE" | "IS_UNKNOWN" | "IS_NOT_UNKNOWN";
export type CmdType = "CMD_UNKNOWN" | "CMD_SELECT" | "CMD_UPDATE" | "CMD_INSERT" | "CMD_DELETE" | "CMD_MERGE" | "CMD_UTILITY" | "CMD_NOTHING";
export type JoinType = "JOIN_INNER" | "JOIN_LEFT" | "JOIN_FULL" | "JOIN_RIGHT" | "JOIN_SEMI" | "JOIN_ANTI" | "JOIN_RIGHT_ANTI" | "JOIN_UNIQUE_OUTER" | "JOIN_UNIQUE_INNER";
export type AggStrategy = "AGG_PLAIN" | "AGG_SORTED" | "AGG_HASHED" | "AGG_MIXED";
export type AggSplit = "AGGSPLIT_SIMPLE" | "AGGSPLIT_INITIAL_SERIAL" | "AGGSPLIT_FINAL_DESERIAL";
export type SetOpCmd = "SETOPCMD_INTERSECT" | "SETOPCMD_INTERSECT_ALL" | "SETOPCMD_EXCEPT" | "SETOPCMD_EXCEPT_ALL";
export type SetOpStrategy = "SETOP_SORTED" | "SETOP_HASHED";
export type OnConflictAction = "ONCONFLICT_NONE" | "ONCONFLICT_NOTHING" | "ONCONFLICT_UPDATE";
export type LimitOption = "LIMIT_OPTION_DEFAULT" | "LIMIT_OPTION_COUNT" | "LIMIT_OPTION_WITH_TIES";
export type LockClauseStrength = "LCS_NONE" | "LCS_FORKEYSHARE" | "LCS_FORSHARE" | "LCS_FORNOKEYUPDATE" | "LCS_FORUPDATE";
export type LockWaitPolicy = "LockWaitBlock" | "LockWaitSkip" | "LockWaitError";
export type LockTupleMode = "LockTupleKeyShare" | "LockTupleShare" | "LockTupleNoKeyExclusive" | "LockTupleExclusive";
export type KeywordKind = "NO_KEYWORD" | "UNRESERVED_KEYWORD" | "COL_NAME_KEYWORD" | "TYPE_FUNC_NAME_KEYWORD" | "RESERVED_KEYWORD";
export type Token = "NUL" | "ASCII_36" | "ASCII_37" | "ASCII_40" | "ASCII_41" | "ASCII_42" | "ASCII_43" | "ASCII_44" | "ASCII_45" | "ASCII_46" | "ASCII_47" | "ASCII_58" | "ASCII_59" | "ASCII_60" | "ASCII_61" | "ASCII_62" | "ASCII_63" | "ASCII_91" | "ASCII_92" | "ASCII_93" | "ASCII_94" | "IDENT" | "UIDENT" | "FCONST" | "SCONST" | "USCONST" | "BCONST" | "XCONST" | "Op" | "ICONST" | "PARAM" | "TYPECAST" | "DOT_DOT" | "COLON_EQUALS" | "EQUALS_GREATER" | "LESS_EQUALS" | "GREATER_EQUALS" | "NOT_EQUALS" | "SQL_COMMENT" | "C_COMMENT" | "ABORT_P" | "ABSENT" | "ABSOLUTE_P" | "ACCESS" | "ACTION" | "ADD_P" | "ADMIN" | "AFTER" | "AGGREGATE" | "ALL" | "ALSO" | "ALTER" | "ALWAYS" | "ANALYSE" | "ANALYZE" | "AND" | "ANY" | "ARRAY" | "AS" | "ASC" | "ASENSITIVE" | "ASSERTION" | "ASSIGNMENT" | "ASYMMETRIC" | "ATOMIC" | "AT" | "ATTACH" | "ATTRIBUTE" | "AUTHORIZATION" | "BACKWARD" | "BEFORE" | "BEGIN_P" | "BETWEEN" | "BIGINT" | "BINARY" | "BIT" | "BOOLEAN_P" | "BOTH" | "BREADTH" | "BY" | "CACHE" | "CALL" | "CALLED" | "CASCADE" | "CASCADED" | "CASE" | "CAST" | "CATALOG_P" | "CHAIN" | "CHAR_P" | "CHARACTER" | "CHARACTERISTICS" | "CHECK" | "CHECKPOINT" | "CLASS" | "CLOSE" | "CLUSTER" | "COALESCE" | "COLLATE" | "COLLATION" | "COLUMN" | "COLUMNS" | "COMMENT" | "COMMENTS" | "COMMIT" | "COMMITTED" | "COMPRESSION" | "CONCURRENTLY" | "CONFIGURATION" | "CONFLICT" | "CONNECTION" | "CONSTRAINT" | "CONSTRAINTS" | "CONTENT_P" | "CONTINUE_P" | "CONVERSION_P" | "COPY" | "COST" | "CREATE" | "CROSS" | "CSV" | "CUBE" | "CURRENT_P" | "CURRENT_CATALOG" | "CURRENT_DATE" | "CURRENT_ROLE" | "CURRENT_SCHEMA" | "CURRENT_TIME" | "CURRENT_TIMESTAMP" | "CURRENT_USER" | "CURSOR" | "CYCLE" | "DATA_P" | "DATABASE" | "DAY_P" | "DEALLOCATE" | "DEC" | "DECIMAL_P" | "DECLARE" | "DEFAULT" | "DEFAULTS" | "DEFERRABLE" | "DEFERRED" | "DEFINER" | "DELETE_P" | "DELIMITER" | "DELIMITERS" | "DEPENDS" | "DEPTH" | "DESC" | "DETACH" | "DICTIONARY" | "DISABLE_P" | "DISCARD" | "DISTINCT" | "DO" | "DOCUMENT_P" | "DOMAIN_P" | "DOUBLE_P" | "DROP" | "EACH" | "ELSE" | "ENABLE_P" | "ENCODING" | "ENCRYPTED" | "END_P" | "ENUM_P" | "ESCAPE" | "EVENT" | "EXCEPT" | "EXCLUDE" | "EXCLUDING" | "EXCLUSIVE" | "EXECUTE" | "EXISTS" | "EXPLAIN" | "EXPRESSION" | "EXTENSION" | "EXTERNAL" | "EXTRACT" | "FALSE_P" | "FAMILY" | "FETCH" | "FILTER" | "FINALIZE" | "FIRST_P" | "FLOAT_P" | "FOLLOWING" | "FOR" | "FORCE" | "FOREIGN" | "FORMAT" | "FORWARD" | "FREEZE" | "FROM" | "FULL" | "FUNCTION" | "FUNCTIONS" | "GENERATED" | "GLOBAL" | "GRANT" | "GRANTED" | "GREATEST" | "GROUP_P" | "GROUPING" | "GROUPS" | "HANDLER" | "HAVING" | "HEADER_P" | "HOLD" | "HOUR_P" | "IDENTITY_P" | "IF_P" | "ILIKE" | "IMMEDIATE" | "IMMUTABLE" | "IMPLICIT_P" | "IMPORT_P" | "IN_P" | "INCLUDE" | "INCLUDING" | "INCREMENT" | "INDENT" | "INDEX" | "INDEXES" | "INHERIT" | "INHERITS" | "INITIALLY" | "INLINE_P" | "INNER_P" | "INOUT" | "INPUT_P" | "INSENSITIVE" | "INSERT" | "INSTEAD" | "INT_P" | "INTEGER" | "INTERSECT" | "INTERVAL" | "INTO" | "INVOKER" | "IS" | "ISNULL" | "ISOLATION" | "JOIN" | "JSON" | "JSON_ARRAY" | "JSON_ARRAYAGG" | "JSON_OBJECT" | "JSON_OBJECTAGG" | "KEY" | "KEYS" | "LABEL" | "LANGUAGE" | "LARGE_P" | "LAST_P" | "LATERAL_P" | "LEADING" | "LEAKPROOF" | "LEAST" | "LEFT" | "LEVEL" | "LIKE" | "LIMIT" | "LISTEN" | "LOAD" | "LOCAL" | "LOCALTIME" | "LOCALTIMESTAMP" | "LOCATION" | "LOCK_P" | "LOCKED" | "LOGGED" | "MAPPING" | "MATCH" | "MATCHED" | "MATERIALIZED" | "MAXVALUE" | "MERGE" | "METHOD" | "MINUTE_P" | "MINVALUE" | "MODE" | "MONTH_P" | "MOVE" | "NAME_P" | "NAMES" | "NATIONAL" | "NATURAL" | "NCHAR" | "NEW" | "NEXT" | "NFC" | "NFD" | "NFKC" | "NFKD" | "NO" | "NONE" | "NORMALIZE" | "NORMALIZED" | "NOT" | "NOTHING" | "NOTIFY" | "NOTNULL" | "NOWAIT" | "NULL_P" | "NULLIF" | "NULLS_P" | "NUMERIC" | "OBJECT_P" | "OF" | "OFF" | "OFFSET" | "OIDS" | "OLD" | "ON" | "ONLY" | "OPERATOR" | "OPTION" | "OPTIONS" | "OR" | "ORDER" | "ORDINALITY" | "OTHERS" | "OUT_P" | "OUTER_P" | "OVER" | "OVERLAPS" | "OVERLAY" | "OVERRIDING" | "OWNED" | "OWNER" | "PARALLEL" | "PARAMETER" | "PARSER" | "PARTIAL" | "PARTITION" | "PASSING" | "PASSWORD" | "PLACING" | "PLANS" | "POLICY" | "POSITION" | "PRECEDING" | "PRECISION" | "PRESERVE" | "PREPARE" | "PREPARED" | "PRIMARY" | "PRIOR" | "PRIVILEGES" | "PROCEDURAL" | "PROCEDURE" | "PROCEDURES" | "PROGRAM" | "PUBLICATION" | "QUOTE" | "RANGE" | "READ" | "REAL" | "REASSIGN" | "RECHECK" | "RECURSIVE" | "REF_P" | "REFERENCES" | "REFERENCING" | "REFRESH" | "REINDEX" | "RELATIVE_P" | "RELEASE" | "RENAME" | "REPEATABLE" | "REPLACE" | "REPLICA" | "RESET" | "RESTART" | "RESTRICT" | "RETURN" | "RETURNING" | "RETURNS" | "REVOKE" | "RIGHT" | "ROLE" | "ROLLBACK" | "ROLLUP" | "ROUTINE" | "ROUTINES" | "ROW" | "ROWS" | "RULE" | "SAVEPOINT" | "SCALAR" | "SCHEMA" | "SCHEMAS" | "SCROLL" | "SEARCH" | "SECOND_P" | "SECURITY" | "SELECT" | "SEQUENCE" | "SEQUENCES" | "SERIALIZABLE" | "SERVER" | "SESSION" | "SESSION_USER" | "SET" | "SETS" | "SETOF" | "SHARE" | "SHOW" | "SIMILAR" | "SIMPLE" | "SKIP" | "SMALLINT" | "SNAPSHOT" | "SOME" | "SQL_P" | "STABLE" | "STANDALONE_P" | "START" | "STATEMENT" | "STATISTICS" | "STDIN" | "STDOUT" | "STORAGE" | "STORED" | "STRICT_P" | "STRIP_P" | "SUBSCRIPTION" | "SUBSTRING" | "SUPPORT" | "SYMMETRIC" | "SYSID" | "SYSTEM_P" | "SYSTEM_USER" | "TABLE" | "TABLES" | "TABLESAMPLE" | "TABLESPACE" | "TEMP" | "TEMPLATE" | "TEMPORARY" | "TEXT_P" | "THEN" | "TIES" | "TIME" | "TIMESTAMP" | "TO" | "TRAILING" | "TRANSACTION" | "TRANSFORM" | "TREAT" | "TRIGGER" | "TRIM" | "TRUE_P" | "TRUNCATE" | "TRUSTED" | "TYPE_P" | "TYPES_P" | "UESCAPE" | "UNBOUNDED" | "UNCOMMITTED" | "UNENCRYPTED" | "UNION" | "UNIQUE" | "UNKNOWN" | "UNLISTEN" | "UNLOGGED" | "UNTIL" | "UPDATE" | "USER" | "USING" | "VACUUM" | "VALID" | "VALIDATE" | "VALIDATOR" | "VALUE_P" | "VALUES" | "VARCHAR" | "VARIADIC" | "VARYING" | "VERBOSE" | "VERSION_P" | "VIEW" | "VIEWS" | "VOLATILE" | "WHEN" | "WHERE" | "WHITESPACE_P" | "WINDOW" | "WITH" | "WITHIN" | "WITHOUT" | "WORK" | "WRAPPER" | "WRITE" | "XML_P" | "XMLATTRIBUTES" | "XMLCONCAT" | "XMLELEMENT" | "XMLEXISTS" | "XMLFOREST" | "XMLNAMESPACES" | "XMLPARSE" | "XMLPI" | "XMLROOT" | "XMLSERIALIZE" | "XMLTABLE" | "YEAR_P" | "YES_P" | "ZONE" | "FORMAT_LA" | "NOT_LA" | "NULLS_LA" | "WITH_LA" | "WITHOUT_LA" | "MODE_TYPE_NAME" | "MODE_PLPGSQL_EXPR" | "MODE_PLPGSQL_ASSIGN1" | "MODE_PLPGSQL_ASSIGN2" | "MODE_PLPGSQL_ASSIGN3" | "UMINUS";",
    "file": "enums.ts",
  },
  {
    "code": "/**
* This file was automatically generated by pg-proto-parser@latest.
* DO NOT MODIFY IT BY HAND. Instead, modify the source proto file,
* and run the pg-proto-parser generate command to regenerate this file.
*/

export default {
    get<T>(obj: Record<string, any>, path: string): T | undefined {
      const keys = path.replace(/[(w+)]/g, '.$1').split('.');
      let result: any = obj;
      for (const key of keys) {
        if (result == null) {
          return undefined;
        }
        result = result[key];
      }
      return result as T;
    },
  
    set(obj: Record<string, any>, path: string, value: any): void {
      if (value === undefined) {
        return;
      }
  
      const keys = path.replace(/[(w+)]/g, '.$1').split('.');
      let current = obj;
      for (let i = 0; i < keys.length - 1; i++) {
        const key = keys[i];
        if (typeof current[key] !== 'object') {
          current[key] = {};
        }
        current = current[key];
      }
      current[keys[keys.length - 1]] = value;
    },
  
    has(obj: Record<string, any>, path: string): boolean {
      const keys = path.replace(/[(w+)]/g, '.$1').split('.');
      let current = obj;
      for (const key of keys) {
        if (current == null || !(key in current)) {
          return false;
        }
        current = current[key];
      }
      return true;
    }
  };
  
",
    "file": "path-obj.ts",
  },
  {
    "code": "/**
* This file was automatically generated by pg-proto-parser@latest.
* DO NOT MODIFY IT BY HAND. Instead, modify the source proto file,
* and run the pg-proto-parser generate command to regenerate this file.
*/
import { OverridingKind, QuerySource, SortByDir, SortByNulls, SetQuantifier, A_Expr_Kind, RoleSpecType, TableLikeOption, DefElemAction, PartitionStrategy, PartitionRangeDatumKind, RTEKind, WCOKind, GroupingSetKind, CTEMaterialize, SetOperation, ObjectType, DropBehavior, AlterTableType, GrantTargetType, VariableSetKind, ConstrType, ImportForeignSchemaType, RoleStmtType, FetchDirection, FunctionParameterMode, TransactionStmtKind, ViewCheckOption, DiscardMode, ReindexObjectType, AlterTSConfigType, PublicationObjSpecType, AlterPublicationAction, AlterSubscriptionType, OnCommitAction, ParamKind, CoercionContext, CoercionForm, BoolExprType, SubLinkType, RowCompareType, MinMaxOp, SQLValueFunctionOp, XmlExprOp, XmlOptionType, JsonEncoding, JsonFormatType, JsonConstructorType, JsonValueType, NullTestType, BoolTestType, CmdType, JoinType, AggStrategy, AggSplit, SetOpCmd, SetOpStrategy, OnConflictAction, LimitOption, LockClauseStrength, LockWaitPolicy, LockTupleMode, KeywordKind, Token } from "./enums";
export type Node = ParseResult | ScanResult | Integer | Float | Boolean | String | BitString | List | OidList | IntList | A_Const | Alias | RangeVar | TableFunc | IntoClause | Var | Param | Aggref | GroupingFunc | WindowFunc | SubscriptingRef | FuncExpr | NamedArgExpr | OpExpr | DistinctExpr | NullIfExpr | ScalarArrayOpExpr | BoolExpr | SubLink | SubPlan | AlternativeSubPlan | FieldSelect | FieldStore | RelabelType | CoerceViaIO | ArrayCoerceExpr | ConvertRowtypeExpr | CollateExpr | CaseExpr | CaseWhen | CaseTestExpr | ArrayExpr | RowExpr | RowCompareExpr | CoalesceExpr | MinMaxExpr | SQLValueFunction | XmlExpr | JsonFormat | JsonReturning | JsonValueExpr | JsonConstructorExpr | JsonIsPredicate | NullTest | BooleanTest | CoerceToDomain | CoerceToDomainValue | SetToDefault | CurrentOfExpr | NextValueExpr | InferenceElem | TargetEntry | RangeTblRef | JoinExpr | FromExpr | OnConflictExpr | Query | TypeName | ColumnRef | ParamRef | A_Expr | TypeCast | CollateClause | RoleSpec | FuncCall | A_Star | A_Indices | A_Indirection | A_ArrayExpr | ResTarget | MultiAssignRef | SortBy | WindowDef | RangeSubselect | RangeFunction | RangeTableFunc | RangeTableFuncCol | RangeTableSample | ColumnDef | TableLikeClause | IndexElem | DefElem | LockingClause | XmlSerialize | PartitionElem | PartitionSpec | PartitionBoundSpec | PartitionRangeDatum | PartitionCmd | RangeTblEntry | RTEPermissionInfo | RangeTblFunction | TableSampleClause | WithCheckOption | SortGroupClause | GroupingSet | WindowClause | RowMarkClause | WithClause | InferClause | OnConflictClause | CTESearchClause | CTECycleClause | CommonTableExpr | MergeWhenClause | MergeAction | TriggerTransition | JsonOutput | JsonKeyValue | JsonObjectConstructor | JsonArrayConstructor | JsonArrayQueryConstructor | JsonAggConstructor | JsonObjectAgg | JsonArrayAgg | RawStmt | InsertStmt | DeleteStmt | UpdateStmt | MergeStmt | SelectStmt | SetOperationStmt | ReturnStmt | PLAssignStmt | CreateSchemaStmt | AlterTableStmt | ReplicaIdentityStmt | AlterTableCmd | AlterCollationStmt | AlterDomainStmt | GrantStmt | ObjectWithArgs | AccessPriv | GrantRoleStmt | AlterDefaultPrivilegesStmt | CopyStmt | VariableSetStmt | VariableShowStmt | CreateStmt | Constraint | CreateTableSpaceStmt | DropTableSpaceStmt | AlterTableSpaceOptionsStmt | AlterTableMoveAllStmt | CreateExtensionStmt | AlterExtensionStmt | AlterExtensionContentsStmt | CreateFdwStmt | AlterFdwStmt | CreateForeignServerStmt | AlterForeignServerStmt | CreateForeignTableStmt | CreateUserMappingStmt | AlterUserMappingStmt | DropUserMappingStmt | ImportForeignSchemaStmt | CreatePolicyStmt | AlterPolicyStmt | CreateAmStmt | CreateTrigStmt | CreateEventTrigStmt | AlterEventTrigStmt | CreatePLangStmt | CreateRoleStmt | AlterRoleStmt | AlterRoleSetStmt | DropRoleStmt | CreateSeqStmt | AlterSeqStmt | DefineStmt | CreateDomainStmt | CreateOpClassStmt | CreateOpClassItem | CreateOpFamilyStmt | AlterOpFamilyStmt | DropStmt | TruncateStmt | CommentStmt | SecLabelStmt | DeclareCursorStmt | ClosePortalStmt | FetchStmt | IndexStmt | CreateStatsStmt | StatsElem | AlterStatsStmt | CreateFunctionStmt | FunctionParameter | AlterFunctionStmt | DoStmt | InlineCodeBlock | CallStmt | CallContext | RenameStmt | AlterObjectDependsStmt | AlterObjectSchemaStmt | AlterOwnerStmt | AlterOperatorStmt | AlterTypeStmt | RuleStmt | NotifyStmt | ListenStmt | UnlistenStmt | TransactionStmt | CompositeTypeStmt | CreateEnumStmt | CreateRangeStmt | AlterEnumStmt | ViewStmt | LoadStmt | CreatedbStmt | AlterDatabaseStmt | AlterDatabaseRefreshCollStmt | AlterDatabaseSetStmt | DropdbStmt | AlterSystemStmt | ClusterStmt | VacuumStmt | VacuumRelation | ExplainStmt | CreateTableAsStmt | RefreshMatViewStmt | CheckPointStmt | DiscardStmt | LockStmt | ConstraintsSetStmt | ReindexStmt | CreateConversionStmt | CreateCastStmt | CreateTransformStmt | PrepareStmt | ExecuteStmt | DeallocateStmt | DropOwnedStmt | ReassignOwnedStmt | AlterTSDictionaryStmt | AlterTSConfigurationStmt | PublicationTable | PublicationObjSpec | CreatePublicationStmt | AlterPublicationStmt | CreateSubscriptionStmt | AlterSubscriptionStmt | DropSubscriptionStmt | ScanToken;
export interface ParseResult {
  version?: number;
  stmts?: RawStmt[];
}
export interface ScanResult {
  version?: number;
  tokens?: ScanToken[];
}
export interface Integer {
  ival?: number;
}
export interface Float {
  fval?: string;
}
export interface Boolean {
  boolval?: boolean;
}
export interface String {
  sval?: string;
}
export interface BitString {
  bsval?: string;
}
export interface List {
  items?: Node[];
}
export interface OidList {
  items?: Node[];
}
export interface IntList {
  items?: Node[];
}
export interface A_Const {
  ival?: Integer;
  fval?: Float;
  boolval?: Boolean;
  sval?: String;
  bsval?: BitString;
  isnull?: boolean;
  location?: number;
}
export interface Alias {
  aliasname?: string;
  colnames?: Node[];
}
export interface RangeVar {
  catalogname?: string;
  schemaname?: string;
  relname?: string;
  inh?: boolean;
  relpersistence?: string;
  alias?: Alias;
  location?: number;
}
export interface TableFunc {
  ns_uris?: Node[];
  ns_names?: Node[];
  docexpr?: Node;
  rowexpr?: Node;
  colnames?: Node[];
  coltypes?: Node[];
  coltypmods?: Node[];
  colcollations?: Node[];
  colexprs?: Node[];
  coldefexprs?: Node[];
  notnulls?: bigint[];
  ordinalitycol?: number;
  location?: number;
}
export interface IntoClause {
  rel?: RangeVar;
  colNames?: Node[];
  accessMethod?: string;
  options?: Node[];
  onCommit?: OnCommitAction;
  tableSpaceName?: string;
  viewQuery?: Node;
  skipData?: boolean;
}
export interface Var {
  xpr?: Node;
  varno?: number;
  varattno?: number;
  vartype?: number;
  vartypmod?: number;
  varcollid?: number;
  varnullingrels?: bigint[];
  varlevelsup?: number;
  location?: number;
}
export interface Param {
  xpr?: Node;
  paramkind?: ParamKind;
  paramid?: number;
  paramtype?: number;
  paramtypmod?: number;
  paramcollid?: number;
  location?: number;
}
export interface Aggref {
  xpr?: Node;
  aggfnoid?: number;
  aggtype?: number;
  aggcollid?: number;
  inputcollid?: number;
  aggargtypes?: Node[];
  aggdirectargs?: Node[];
  args?: Node[];
  aggorder?: Node[];
  aggdistinct?: Node[];
  aggfilter?: Node;
  aggstar?: boolean;
  aggvariadic?: boolean;
  aggkind?: string;
  agglevelsup?: number;
  aggsplit?: AggSplit;
  aggno?: number;
  aggtransno?: number;
  location?: number;
}
export interface GroupingFunc {
  xpr?: Node;
  args?: Node[];
  refs?: Node[];
  agglevelsup?: number;
  location?: number;
}
export interface WindowFunc {
  xpr?: Node;
  winfnoid?: number;
  wintype?: number;
  wincollid?: number;
  inputcollid?: number;
  args?: Node[];
  aggfilter?: Node;
  winref?: number;
  winstar?: boolean;
  winagg?: boolean;
  location?: number;
}
export interface SubscriptingRef {
  xpr?: Node;
  refcontainertype?: number;
  refelemtype?: number;
  refrestype?: number;
  reftypmod?: number;
  refcollid?: number;
  refupperindexpr?: Node[];
  reflowerindexpr?: Node[];
  refexpr?: Node;
  refassgnexpr?: Node;
}
export interface FuncExpr {
  xpr?: Node;
  funcid?: number;
  funcresulttype?: number;
  funcretset?: boolean;
  funcvariadic?: boolean;
  funcformat?: CoercionForm;
  funccollid?: number;
  inputcollid?: number;
  args?: Node[];
  location?: number;
}
export interface NamedArgExpr {
  xpr?: Node;
  arg?: Node;
  name?: string;
  argnumber?: number;
  location?: number;
}
export interface OpExpr {
  xpr?: Node;
  opno?: number;
  opresulttype?: number;
  opretset?: boolean;
  opcollid?: number;
  inputcollid?: number;
  args?: Node[];
  location?: number;
}
export interface DistinctExpr {
  xpr?: Node;
  opno?: number;
  opresulttype?: number;
  opretset?: boolean;
  opcollid?: number;
  inputcollid?: number;
  args?: Node[];
  location?: number;
}
export interface NullIfExpr {
  xpr?: Node;
  opno?: number;
  opresulttype?: number;
  opretset?: boolean;
  opcollid?: number;
  inputcollid?: number;
  args?: Node[];
  location?: number;
}
export interface ScalarArrayOpExpr {
  xpr?: Node;
  opno?: number;
  useOr?: boolean;
  inputcollid?: number;
  args?: Node[];
  location?: number;
}
export interface BoolExpr {
  xpr?: Node;
  boolop?: BoolExprType;
  args?: Node[];
  location?: number;
}
export interface SubLink {
  xpr?: Node;
  subLinkType?: SubLinkType;
  subLinkId?: number;
  testexpr?: Node;
  operName?: Node[];
  subselect?: Node;
  location?: number;
}
export interface SubPlan {
  xpr?: Node;
  subLinkType?: SubLinkType;
  testexpr?: Node;
  paramIds?: Node[];
  plan_id?: number;
  plan_name?: string;
  firstColType?: number;
  firstColTypmod?: number;
  firstColCollation?: number;
  useHashTable?: boolean;
  unknownEqFalse?: boolean;
  parallel_safe?: boolean;
  setParam?: Node[];
  parParam?: Node[];
  args?: Node[];
  startup_cost?: number;
  per_call_cost?: number;
}
export interface AlternativeSubPlan {
  xpr?: Node;
  subplans?: Node[];
}
export interface FieldSelect {
  xpr?: Node;
  arg?: Node;
  fieldnum?: number;
  resulttype?: number;
  resulttypmod?: number;
  resultcollid?: number;
}
export interface FieldStore {
  xpr?: Node;
  arg?: Node;
  newvals?: Node[];
  fieldnums?: Node[];
  resulttype?: number;
}
export interface RelabelType {
  xpr?: Node;
  arg?: Node;
  resulttype?: number;
  resulttypmod?: number;
  resultcollid?: number;
  relabelformat?: CoercionForm;
  location?: number;
}
export interface CoerceViaIO {
  xpr?: Node;
  arg?: Node;
  resulttype?: number;
  resultcollid?: number;
  coerceformat?: CoercionForm;
  location?: number;
}
export interface ArrayCoerceExpr {
  xpr?: Node;
  arg?: Node;
  elemexpr?: Node;
  resulttype?: number;
  resulttypmod?: number;
  resultcollid?: number;
  coerceformat?: CoercionForm;
  location?: number;
}
export interface ConvertRowtypeExpr {
  xpr?: Node;
  arg?: Node;
  resulttype?: number;
  convertformat?: CoercionForm;
  location?: number;
}
export interface CollateExpr {
  xpr?: Node;
  arg?: Node;
  collOid?: number;
  location?: number;
}
export interface CaseExpr {
  xpr?: Node;
  casetype?: number;
  casecollid?: number;
  arg?: Node;
  args?: Node[];
  defresult?: Node;
  location?: number;
}
export interface CaseWhen {
  xpr?: Node;
  expr?: Node;
  result?: Node;
  location?: number;
}
export interface CaseTestExpr {
  xpr?: Node;
  typeId?: number;
  typeMod?: number;
  collation?: number;
}
export interface ArrayExpr {
  xpr?: Node;
  array_typeid?: number;
  array_collid?: number;
  element_typeid?: number;
  elements?: Node[];
  multidims?: boolean;
  location?: number;
}
export interface RowExpr {
  xpr?: Node;
  args?: Node[];
  row_typeid?: number;
  row_format?: CoercionForm;
  colnames?: Node[];
  location?: number;
}
export interface RowCompareExpr {
  xpr?: Node;
  rctype?: RowCompareType;
  opnos?: Node[];
  opfamilies?: Node[];
  inputcollids?: Node[];
  largs?: Node[];
  rargs?: Node[];
}
export interface CoalesceExpr {
  xpr?: Node;
  coalescetype?: number;
  coalescecollid?: number;
  args?: Node[];
  location?: number;
}
export interface MinMaxExpr {
  xpr?: Node;
  minmaxtype?: number;
  minmaxcollid?: number;
  inputcollid?: number;
  op?: MinMaxOp;
  args?: Node[];
  location?: number;
}
export interface SQLValueFunction {
  xpr?: Node;
  op?: SQLValueFunctionOp;
  type?: number;
  typmod?: number;
  location?: number;
}
export interface XmlExpr {
  xpr?: Node;
  op?: XmlExprOp;
  name?: string;
  named_args?: Node[];
  arg_names?: Node[];
  args?: Node[];
  xmloption?: XmlOptionType;
  indent?: boolean;
  type?: number;
  typmod?: number;
  location?: number;
}
export interface JsonFormat {
  format_type?: JsonFormatType;
  encoding?: JsonEncoding;
  location?: number;
}
export interface JsonReturning {
  format?: JsonFormat;
  typid?: number;
  typmod?: number;
}
export interface JsonValueExpr {
  raw_expr?: Node;
  formatted_expr?: Node;
  format?: JsonFormat;
}
export interface JsonConstructorExpr {
  xpr?: Node;
  type?: JsonConstructorType;
  args?: Node[];
  func?: Node;
  coercion?: Node;
  returning?: JsonReturning;
  absent_on_null?: boolean;
  unique?: boolean;
  location?: number;
}
export interface JsonIsPredicate {
  expr?: Node;
  format?: JsonFormat;
  item_type?: JsonValueType;
  unique_keys?: boolean;
  location?: number;
}
export interface NullTest {
  xpr?: Node;
  arg?: Node;
  nulltesttype?: NullTestType;
  argisrow?: boolean;
  location?: number;
}
export interface BooleanTest {
  xpr?: Node;
  arg?: Node;
  booltesttype?: BoolTestType;
  location?: number;
}
export interface CoerceToDomain {
  xpr?: Node;
  arg?: Node;
  resulttype?: number;
  resulttypmod?: number;
  resultcollid?: number;
  coercionformat?: CoercionForm;
  location?: number;
}
export interface CoerceToDomainValue {
  xpr?: Node;
  typeId?: number;
  typeMod?: number;
  collation?: number;
  location?: number;
}
export interface SetToDefault {
  xpr?: Node;
  typeId?: number;
  typeMod?: number;
  collation?: number;
  location?: number;
}
export interface CurrentOfExpr {
  xpr?: Node;
  cvarno?: number;
  cursor_name?: string;
  cursor_param?: number;
}
export interface NextValueExpr {
  xpr?: Node;
  seqid?: number;
  typeId?: number;
}
export interface InferenceElem {
  xpr?: Node;
  expr?: Node;
  infercollid?: number;
  inferopclass?: number;
}
export interface TargetEntry {
  xpr?: Node;
  expr?: Node;
  resno?: number;
  resname?: string;
  ressortgroupref?: number;
  resorigtbl?: number;
  resorigcol?: number;
  resjunk?: boolean;
}
export interface RangeTblRef {
  rtindex?: number;
}
export interface JoinExpr {
  jointype?: JoinType;
  isNatural?: boolean;
  larg?: Node;
  rarg?: Node;
  usingClause?: Node[];
  join_using_alias?: Alias;
  quals?: Node;
  alias?: Alias;
  rtindex?: number;
}
export interface FromExpr {
  fromlist?: Node[];
  quals?: Node;
}
export interface OnConflictExpr {
  action?: OnConflictAction;
  arbiterElems?: Node[];
  arbiterWhere?: Node;
  constraint?: number;
  onConflictSet?: Node[];
  onConflictWhere?: Node;
  exclRelIndex?: number;
  exclRelTlist?: Node[];
}
export interface Query {
  commandType?: CmdType;
  querySource?: QuerySource;
  canSetTag?: boolean;
  utilityStmt?: Node;
  resultRelation?: number;
  hasAggs?: boolean;
  hasWindowFuncs?: boolean;
  hasTargetSRFs?: boolean;
  hasSubLinks?: boolean;
  hasDistinctOn?: boolean;
  hasRecursive?: boolean;
  hasModifyingCTE?: boolean;
  hasForUpdate?: boolean;
  hasRowSecurity?: boolean;
  isReturn?: boolean;
  cteList?: Node[];
  rtable?: Node[];
  rteperminfos?: Node[];
  jointree?: FromExpr;
  mergeActionList?: Node[];
  mergeUseOuterJoin?: boolean;
  targetList?: Node[];
  override?: OverridingKind;
  onConflict?: OnConflictExpr;
  returningList?: Node[];
  groupClause?: Node[];
  groupDistinct?: boolean;
  groupingSets?: Node[];
  havingQual?: Node;
  windowClause?: Node[];
  distinctClause?: Node[];
  sortClause?: Node[];
  limitOffset?: Node;
  limitCount?: Node;
  limitOption?: LimitOption;
  rowMarks?: Node[];
  setOperations?: Node;
  constraintDeps?: Node[];
  withCheckOptions?: Node[];
  stmt_location?: number;
  stmt_len?: number;
}
export interface TypeName {
  names?: Node[];
  typeOid?: number;
  setof?: boolean;
  pct_type?: boolean;
  typmods?: Node[];
  typemod?: number;
  arrayBounds?: Node[];
  location?: number;
}
export interface ColumnRef {
  fields?: Node[];
  location?: number;
}
export interface ParamRef {
  number?: number;
  location?: number;
}
export interface A_Expr {
  kind?: A_Expr_Kind;
  name?: Node[];
  lexpr?: Node;
  rexpr?: Node;
  location?: number;
}
export interface TypeCast {
  arg?: Node;
  typeName?: TypeName;
  location?: number;
}
export interface CollateClause {
  arg?: Node;
  collname?: Node[];
  location?: number;
}
export interface RoleSpec {
  roletype?: RoleSpecType;
  rolename?: string;
  location?: number;
}
export interface FuncCall {
  funcname?: Node[];
  args?: Node[];
  agg_order?: Node[];
  agg_filter?: Node;
  over?: WindowDef;
  agg_within_group?: boolean;
  agg_star?: boolean;
  agg_distinct?: boolean;
  func_variadic?: boolean;
  funcformat?: CoercionForm;
  location?: number;
}
export interface A_Star {}
export interface A_Indices {
  is_slice?: boolean;
  lidx?: Node;
  uidx?: Node;
}
export interface A_Indirection {
  arg?: Node;
  indirection?: Node[];
}
export interface A_ArrayExpr {
  elements?: Node[];
  location?: number;
}
export interface ResTarget {
  name?: string;
  indirection?: Node[];
  val?: Node;
  location?: number;
}
export interface MultiAssignRef {
  source?: Node;
  colno?: number;
  ncolumns?: number;
}
export interface SortBy {
  node?: Node;
  sortby_dir?: SortByDir;
  sortby_nulls?: SortByNulls;
  useOp?: Node[];
  location?: number;
}
export interface WindowDef {
  name?: string;
  refname?: string;
  partitionClause?: Node[];
  orderClause?: Node[];
  frameOptions?: number;
  startOffset?: Node;
  endOffset?: Node;
  location?: number;
}
export interface RangeSubselect {
  lateral?: boolean;
  subquery?: Node;
  alias?: Alias;
}
export interface RangeFunction {
  lateral?: boolean;
  ordinality?: boolean;
  is_rowsfrom?: boolean;
  functions?: Node[];
  alias?: Alias;
  coldeflist?: Node[];
}
export interface RangeTableFunc {
  lateral?: boolean;
  docexpr?: Node;
  rowexpr?: Node;
  namespaces?: Node[];
  columns?: Node[];
  alias?: Alias;
  location?: number;
}
export interface RangeTableFuncCol {
  colname?: string;
  typeName?: TypeName;
  for_ordinality?: boolean;
  is_not_null?: boolean;
  colexpr?: Node;
  coldefexpr?: Node;
  location?: number;
}
export interface RangeTableSample {
  relation?: Node;
  method?: Node[];
  args?: Node[];
  repeatable?: Node;
  location?: number;
}
export interface ColumnDef {
  colname?: string;
  typeName?: TypeName;
  compression?: string;
  inhcount?: number;
  is_local?: boolean;
  is_not_null?: boolean;
  is_from_type?: boolean;
  storage?: string;
  storage_name?: string;
  raw_default?: Node;
  cooked_default?: Node;
  identity?: string;
  identitySequence?: RangeVar;
  generated?: string;
  collClause?: CollateClause;
  collOid?: number;
  constraints?: Node[];
  fdwoptions?: Node[];
  location?: number;
}
export interface TableLikeClause {
  relation?: RangeVar;
  options?: number;
  relationOid?: number;
}
export interface IndexElem {
  name?: string;
  expr?: Node;
  indexcolname?: string;
  collation?: Node[];
  opclass?: Node[];
  opclassopts?: Node[];
  ordering?: SortByDir;
  nulls_ordering?: SortByNulls;
}
export interface DefElem {
  defnamespace?: string;
  defname?: string;
  arg?: Node;
  defaction?: DefElemAction;
  location?: number;
}
export interface LockingClause {
  lockedRels?: Node[];
  strength?: LockClauseStrength;
  waitPolicy?: LockWaitPolicy;
}
export interface XmlSerialize {
  xmloption?: XmlOptionType;
  expr?: Node;
  typeName?: TypeName;
  indent?: boolean;
  location?: number;
}
export interface PartitionElem {
  name?: string;
  expr?: Node;
  collation?: Node[];
  opclass?: Node[];
  location?: number;
}
export interface PartitionSpec {
  strategy?: PartitionStrategy;
  partParams?: Node[];
  location?: number;
}
export interface PartitionBoundSpec {
  strategy?: string;
  is_default?: boolean;
  modulus?: number;
  remainder?: number;
  listdatums?: Node[];
  lowerdatums?: Node[];
  upperdatums?: Node[];
  location?: number;
}
export interface PartitionRangeDatum {
  kind?: PartitionRangeDatumKind;
  value?: Node;
  location?: number;
}
export interface PartitionCmd {
  name?: RangeVar;
  bound?: PartitionBoundSpec;
  concurrent?: boolean;
}
export interface RangeTblEntry {
  rtekind?: RTEKind;
  relid?: number;
  relkind?: string;
  rellockmode?: number;
  tablesample?: TableSampleClause;
  perminfoindex?: number;
  subquery?: Query;
  security_barrier?: boolean;
  jointype?: JoinType;
  joinmergedcols?: number;
  joinaliasvars?: Node[];
  joinleftcols?: Node[];
  joinrightcols?: Node[];
  join_using_alias?: Alias;
  functions?: Node[];
  funcordinality?: boolean;
  tablefunc?: TableFunc;
  values_lists?: Node[];
  ctename?: string;
  ctelevelsup?: number;
  self_reference?: boolean;
  coltypes?: Node[];
  coltypmods?: Node[];
  colcollations?: Node[];
  enrname?: string;
  enrtuples?: number;
  alias?: Alias;
  eref?: Alias;
  lateral?: boolean;
  inh?: boolean;
  inFromCl?: boolean;
  securityQuals?: Node[];
}
export interface RTEPermissionInfo {
  relid?: number;
  inh?: boolean;
  requiredPerms?: bigint;
  checkAsUser?: number;
  selectedCols?: bigint[];
  insertedCols?: bigint[];
  updatedCols?: bigint[];
}
export interface RangeTblFunction {
  funcexpr?: Node;
  funccolcount?: number;
  funccolnames?: Node[];
  funccoltypes?: Node[];
  funccoltypmods?: Node[];
  funccolcollations?: Node[];
  funcparams?: bigint[];
}
export interface TableSampleClause {
  tsmhandler?: number;
  args?: Node[];
  repeatable?: Node;
}
export interface WithCheckOption {
  kind?: WCOKind;
  relname?: string;
  polname?: string;
  qual?: Node;
  cascaded?: boolean;
}
export interface SortGroupClause {
  tleSortGroupRef?: number;
  eqop?: number;
  sortop?: number;
  nulls_first?: boolean;
  hashable?: boolean;
}
export interface GroupingSet {
  kind?: GroupingSetKind;
  content?: Node[];
  location?: number;
}
export interface WindowClause {
  name?: string;
  refname?: string;
  partitionClause?: Node[];
  orderClause?: Node[];
  frameOptions?: number;
  startOffset?: Node;
  endOffset?: Node;
  runCondition?: Node[];
  startInRangeFunc?: number;
  endInRangeFunc?: number;
  inRangeColl?: number;
  inRangeAsc?: boolean;
  inRangeNullsFirst?: boolean;
  winref?: number;
  copiedOrder?: boolean;
}
export interface RowMarkClause {
  rti?: number;
  strength?: LockClauseStrength;
  waitPolicy?: LockWaitPolicy;
  pushedDown?: boolean;
}
export interface WithClause {
  ctes?: Node[];
  recursive?: boolean;
  location?: number;
}
export interface InferClause {
  indexElems?: Node[];
  whereClause?: Node;
  conname?: string;
  location?: number;
}
export interface OnConflictClause {
  action?: OnConflictAction;
  infer?: InferClause;
  targetList?: Node[];
  whereClause?: Node;
  location?: number;
}
export interface CTESearchClause {
  search_col_list?: Node[];
  search_breadth_first?: boolean;
  search_seq_column?: string;
  location?: number;
}
export interface CTECycleClause {
  cycle_col_list?: Node[];
  cycle_mark_column?: string;
  cycle_mark_value?: Node;
  cycle_mark_default?: Node;
  cycle_path_column?: string;
  location?: number;
  cycle_mark_type?: number;
  cycle_mark_typmod?: number;
  cycle_mark_collation?: number;
  cycle_mark_neop?: number;
}
export interface CommonTableExpr {
  ctename?: string;
  aliascolnames?: Node[];
  ctematerialized?: CTEMaterialize;
  ctequery?: Node;
  search_clause?: CTESearchClause;
  cycle_clause?: CTECycleClause;
  location?: number;
  cterecursive?: boolean;
  cterefcount?: number;
  ctecolnames?: Node[];
  ctecoltypes?: Node[];
  ctecoltypmods?: Node[];
  ctecolcollations?: Node[];
}
export interface MergeWhenClause {
  matched?: boolean;
  commandType?: CmdType;
  override?: OverridingKind;
  condition?: Node;
  targetList?: Node[];
  values?: Node[];
}
export interface MergeAction {
  matched?: boolean;
  commandType?: CmdType;
  override?: OverridingKind;
  qual?: Node;
  targetList?: Node[];
  updateColnos?: Node[];
}
export interface TriggerTransition {
  name?: string;
  isNew?: boolean;
  isTable?: boolean;
}
export interface JsonOutput {
  typeName?: TypeName;
  returning?: JsonReturning;
}
export interface JsonKeyValue {
  key?: Node;
  value?: JsonValueExpr;
}
export interface JsonObjectConstructor {
  exprs?: Node[];
  output?: JsonOutput;
  absent_on_null?: boolean;
  unique?: boolean;
  location?: number;
}
export interface JsonArrayConstructor {
  exprs?: Node[];
  output?: JsonOutput;
  absent_on_null?: boolean;
  location?: number;
}
export interface JsonArrayQueryConstructor {
  query?: Node;
  output?: JsonOutput;
  format?: JsonFormat;
  absent_on_null?: boolean;
  location?: number;
}
export interface JsonAggConstructor {
  output?: JsonOutput;
  agg_filter?: Node;
  agg_order?: Node[];
  over?: WindowDef;
  location?: number;
}
export interface JsonObjectAgg {
  constructor?: JsonAggConstructor;
  arg?: JsonKeyValue;
  absent_on_null?: boolean;
  unique?: boolean;
}
export interface JsonArrayAgg {
  constructor?: JsonAggConstructor;
  arg?: JsonValueExpr;
  absent_on_null?: boolean;
}
export interface RawStmt {
  stmt?: Node;
  stmt_location?: number;
  stmt_len?: number;
}
export interface InsertStmt {
  relation?: RangeVar;
  cols?: Node[];
  selectStmt?: Node;
  onConflictClause?: OnConflictClause;
  returningList?: Node[];
  withClause?: WithClause;
  override?: OverridingKind;
}
export interface DeleteStmt {
  relation?: RangeVar;
  usingClause?: Node[];
  whereClause?: Node;
  returningList?: Node[];
  withClause?: WithClause;
}
export interface UpdateStmt {
  relation?: RangeVar;
  targetList?: Node[];
  whereClause?: Node;
  fromClause?: Node[];
  returningList?: Node[];
  withClause?: WithClause;
}
export interface MergeStmt {
  relation?: RangeVar;
  sourceRelation?: Node;
  joinCondition?: Node;
  mergeWhenClauses?: Node[];
  withClause?: WithClause;
}
export interface SelectStmt {
  distinctClause?: Node[];
  intoClause?: IntoClause;
  targetList?: Node[];
  fromClause?: Node[];
  whereClause?: Node;
  groupClause?: Node[];
  groupDistinct?: boolean;
  havingClause?: Node;
  windowClause?: Node[];
  valuesLists?: Node[];
  sortClause?: Node[];
  limitOffset?: Node;
  limitCount?: Node;
  limitOption?: LimitOption;
  lockingClause?: Node[];
  withClause?: WithClause;
  op?: SetOperation;
  all?: boolean;
  larg?: SelectStmt;
  rarg?: SelectStmt;
}
export interface SetOperationStmt {
  op?: SetOperation;
  all?: boolean;
  larg?: Node;
  rarg?: Node;
  colTypes?: Node[];
  colTypmods?: Node[];
  colCollations?: Node[];
  groupClauses?: Node[];
}
export interface ReturnStmt {
  returnval?: Node;
}
export interface PLAssignStmt {
  name?: string;
  indirection?: Node[];
  nnames?: number;
  val?: SelectStmt;
  location?: number;
}
export interface CreateSchemaStmt {
  schemaname?: string;
  authrole?: RoleSpec;
  schemaElts?: Node[];
  if_not_exists?: boolean;
}
export interface AlterTableStmt {
  relation?: RangeVar;
  cmds?: Node[];
  objtype?: ObjectType;
  missing_ok?: boolean;
}
export interface ReplicaIdentityStmt {
  identity_type?: string;
  name?: string;
}
export interface AlterTableCmd {
  subtype?: AlterTableType;
  name?: string;
  num?: number;
  newowner?: RoleSpec;
  def?: Node;
  behavior?: DropBehavior;
  missing_ok?: boolean;
  recurse?: boolean;
}
export interface AlterCollationStmt {
  collname?: Node[];
}
export interface AlterDomainStmt {
  subtype?: string;
  typeName?: Node[];
  name?: string;
  def?: Node;
  behavior?: DropBehavior;
  missing_ok?: boolean;
}
export interface GrantStmt {
  is_grant?: boolean;
  targtype?: GrantTargetType;
  objtype?: ObjectType;
  objects?: Node[];
  privileges?: Node[];
  grantees?: Node[];
  grant_option?: boolean;
  grantor?: RoleSpec;
  behavior?: DropBehavior;
}
export interface ObjectWithArgs {
  objname?: Node[];
  objargs?: Node[];
  objfuncargs?: Node[];
  args_unspecified?: boolean;
}
export interface AccessPriv {
  priv_name?: string;
  cols?: Node[];
}
export interface GrantRoleStmt {
  granted_roles?: Node[];
  grantee_roles?: Node[];
  is_grant?: boolean;
  opt?: Node[];
  grantor?: RoleSpec;
  behavior?: DropBehavior;
}
export interface AlterDefaultPrivilegesStmt {
  options?: Node[];
  action?: GrantStmt;
}
export interface CopyStmt {
  relation?: RangeVar;
  query?: Node;
  attlist?: Node[];
  is_from?: boolean;
  is_program?: boolean;
  filename?: string;
  options?: Node[];
  whereClause?: Node;
}
export interface VariableSetStmt {
  kind?: VariableSetKind;
  name?: string;
  args?: Node[];
  is_local?: boolean;
}
export interface VariableShowStmt {
  name?: string;
}
export interface CreateStmt {
  relation?: RangeVar;
  tableElts?: Node[];
  inhRelations?: Node[];
  partbound?: PartitionBoundSpec;
  partspec?: PartitionSpec;
  ofTypename?: TypeName;
  constraints?: Node[];
  options?: Node[];
  oncommit?: OnCommitAction;
  tablespacename?: string;
  accessMethod?: string;
  if_not_exists?: boolean;
}
export interface Constraint {
  contype?: ConstrType;
  conname?: string;
  deferrable?: boolean;
  initdeferred?: boolean;
  location?: number;
  is_no_inherit?: boolean;
  raw_expr?: Node;
  cooked_expr?: string;
  generated_when?: string;
  nulls_not_distinct?: boolean;
  keys?: Node[];
  including?: Node[];
  exclusions?: Node[];
  options?: Node[];
  indexname?: string;
  indexspace?: string;
  reset_default_tblspc?: boolean;
  access_method?: string;
  where_clause?: Node;
  pktable?: RangeVar;
  fk_attrs?: Node[];
  pk_attrs?: Node[];
  fk_matchtype?: string;
  fk_upd_action?: string;
  fk_del_action?: string;
  fk_del_set_cols?: Node[];
  old_conpfeqop?: Node[];
  old_pktable_oid?: number;
  skip_validation?: boolean;
  initially_valid?: boolean;
}
export interface CreateTableSpaceStmt {
  tablespacename?: string;
  owner?: RoleSpec;
  location?: string;
  options?: Node[];
}
export interface DropTableSpaceStmt {
  tablespacename?: string;
  missing_ok?: boolean;
}
export interface AlterTableSpaceOptionsStmt {
  tablespacename?: string;
  options?: Node[];
  isReset?: boolean;
}
export interface AlterTableMoveAllStmt {
  orig_tablespacename?: string;
  objtype?: ObjectType;
  roles?: Node[];
  new_tablespacename?: string;
  nowait?: boolean;
}
export interface CreateExtensionStmt {
  extname?: string;
  if_not_exists?: boolean;
  options?: Node[];
}
export interface AlterExtensionStmt {
  extname?: string;
  options?: Node[];
}
export interface AlterExtensionContentsStmt {
  extname?: string;
  action?: number;
  objtype?: ObjectType;
  object?: Node;
}
export interface CreateFdwStmt {
  fdwname?: string;
  func_options?: Node[];
  options?: Node[];
}
export interface AlterFdwStmt {
  fdwname?: string;
  func_options?: Node[];
  options?: Node[];
}
export interface CreateForeignServerStmt {
  servername?: string;
  servertype?: string;
  version?: string;
  fdwname?: string;
  if_not_exists?: boolean;
  options?: Node[];
}
export interface AlterForeignServerStmt {
  servername?: string;
  version?: string;
  options?: Node[];
  has_version?: boolean;
}
export interface CreateForeignTableStmt {
  base?: CreateStmt;
  servername?: string;
  options?: Node[];
}
export interface CreateUserMappingStmt {
  user?: RoleSpec;
  servername?: string;
  if_not_exists?: boolean;
  options?: Node[];
}
export interface AlterUserMappingStmt {
  user?: RoleSpec;
  servername?: string;
  options?: Node[];
}
export interface DropUserMappingStmt {
  user?: RoleSpec;
  servername?: string;
  missing_ok?: boolean;
}
export interface ImportForeignSchemaStmt {
  server_name?: string;
  remote_schema?: string;
  local_schema?: string;
  list_type?: ImportForeignSchemaType;
  table_list?: Node[];
  options?: Node[];
}
export interface CreatePolicyStmt {
  policy_name?: string;
  table?: RangeVar;
  cmd_name?: string;
  permissive?: boolean;
  roles?: Node[];
  qual?: Node;
  with_check?: Node;
}
export interface AlterPolicyStmt {
  policy_name?: string;
  table?: RangeVar;
  roles?: Node[];
  qual?: Node;
  with_check?: Node;
}
export interface CreateAmStmt {
  amname?: string;
  handler_name?: Node[];
  amtype?: string;
}
export interface CreateTrigStmt {
  replace?: boolean;
  isconstraint?: boolean;
  trigname?: string;
  relation?: RangeVar;
  funcname?: Node[];
  args?: Node[];
  row?: boolean;
  timing?: number;
  events?: number;
  columns?: Node[];
  whenClause?: Node;
  transitionRels?: Node[];
  deferrable?: boolean;
  initdeferred?: boolean;
  constrrel?: RangeVar;
}
export interface CreateEventTrigStmt {
  trigname?: string;
  eventname?: string;
  whenclause?: Node[];
  funcname?: Node[];
}
export interface AlterEventTrigStmt {
  trigname?: string;
  tgenabled?: string;
}
export interface CreatePLangStmt {
  replace?: boolean;
  plname?: string;
  plhandler?: Node[];
  plinline?: Node[];
  plvalidator?: Node[];
  pltrusted?: boolean;
}
export interface CreateRoleStmt {
  stmt_type?: RoleStmtType;
  role?: string;
  options?: Node[];
}
export interface AlterRoleStmt {
  role?: RoleSpec;
  options?: Node[];
  action?: number;
}
export interface AlterRoleSetStmt {
  role?: RoleSpec;
  database?: string;
  setstmt?: VariableSetStmt;
}
export interface DropRoleStmt {
  roles?: Node[];
  missing_ok?: boolean;
}
export interface CreateSeqStmt {
  sequence?: RangeVar;
  options?: Node[];
  ownerId?: number;
  for_identity?: boolean;
  if_not_exists?: boolean;
}
export interface AlterSeqStmt {
  sequence?: RangeVar;
  options?: Node[];
  for_identity?: boolean;
  missing_ok?: boolean;
}
export interface DefineStmt {
  kind?: ObjectType;
  oldstyle?: boolean;
  defnames?: Node[];
  args?: Node[];
  definition?: Node[];
  if_not_exists?: boolean;
  replace?: boolean;
}
export interface CreateDomainStmt {
  domainname?: Node[];
  typeName?: TypeName;
  collClause?: CollateClause;
  constraints?: Node[];
}
export interface CreateOpClassStmt {
  opclassname?: Node[];
  opfamilyname?: Node[];
  amname?: string;
  datatype?: TypeName;
  items?: Node[];
  isDefault?: boolean;
}
export interface CreateOpClassItem {
  itemtype?: number;
  name?: ObjectWithArgs;
  number?: number;
  order_family?: Node[];
  class_args?: Node[];
  storedtype?: TypeName;
}
export interface CreateOpFamilyStmt {
  opfamilyname?: Node[];
  amname?: string;
}
export interface AlterOpFamilyStmt {
  opfamilyname?: Node[];
  amname?: string;
  isDrop?: boolean;
  items?: Node[];
}
export interface DropStmt {
  objects?: Node[];
  removeType?: ObjectType;
  behavior?: DropBehavior;
  missing_ok?: boolean;
  concurrent?: boolean;
}
export interface TruncateStmt {
  relations?: Node[];
  restart_seqs?: boolean;
  behavior?: DropBehavior;
}
export interface CommentStmt {
  objtype?: ObjectType;
  object?: Node;
  comment?: string;
}
export interface SecLabelStmt {
  objtype?: ObjectType;
  object?: Node;
  provider?: string;
  label?: string;
}
export interface DeclareCursorStmt {
  portalname?: string;
  options?: number;
  query?: Node;
}
export interface ClosePortalStmt {
  portalname?: string;
}
export interface FetchStmt {
  direction?: FetchDirection;
  howMany?: bigint;
  portalname?: string;
  ismove?: boolean;
}
export interface IndexStmt {
  idxname?: string;
  relation?: RangeVar;
  accessMethod?: string;
  tableSpace?: string;
  indexParams?: Node[];
  indexIncludingParams?: Node[];
  options?: Node[];
  whereClause?: Node;
  excludeOpNames?: Node[];
  idxcomment?: string;
  indexOid?: number;
  oldNumber?: number;
  oldCreateSubid?: number;
  oldFirstRelfilelocatorSubid?: number;
  unique?: boolean;
  nulls_not_distinct?: boolean;
  primary?: boolean;
  isconstraint?: boolean;
  deferrable?: boolean;
  initdeferred?: boolean;
  transformed?: boolean;
  concurrent?: boolean;
  if_not_exists?: boolean;
  reset_default_tblspc?: boolean;
}
export interface CreateStatsStmt {
  defnames?: Node[];
  stat_types?: Node[];
  exprs?: Node[];
  relations?: Node[];
  stxcomment?: string;
  transformed?: boolean;
  if_not_exists?: boolean;
}
export interface StatsElem {
  name?: string;
  expr?: Node;
}
export interface AlterStatsStmt {
  defnames?: Node[];
  stxstattarget?: number;
  missing_ok?: boolean;
}
export interface CreateFunctionStmt {
  is_procedure?: boolean;
  replace?: boolean;
  funcname?: Node[];
  parameters?: Node[];
  returnType?: TypeName;
  options?: Node[];
  sql_body?: Node;
}
export interface FunctionParameter {
  name?: string;
  argType?: TypeName;
  mode?: FunctionParameterMode;
  defexpr?: Node;
}
export interface AlterFunctionStmt {
  objtype?: ObjectType;
  func?: ObjectWithArgs;
  actions?: Node[];
}
export interface DoStmt {
  args?: Node[];
}
export interface InlineCodeBlock {
  source_text?: string;
  langOid?: number;
  langIsTrusted?: boolean;
  atomic?: boolean;
}
export interface CallStmt {
  funccall?: FuncCall;
  funcexpr?: FuncExpr;
  outargs?: Node[];
}
export interface CallContext {
  atomic?: boolean;
}
export interface RenameStmt {
  renameType?: ObjectType;
  relationType?: ObjectType;
  relation?: RangeVar;
  object?: Node;
  subname?: string;
  newname?: string;
  behavior?: DropBehavior;
  missing_ok?: boolean;
}
export interface AlterObjectDependsStmt {
  objectType?: ObjectType;
  relation?: RangeVar;
  object?: Node;
  extname?: String;
  remove?: boolean;
}
export interface AlterObjectSchemaStmt {
  objectType?: ObjectType;
  relation?: RangeVar;
  object?: Node;
  newschema?: string;
  missing_ok?: boolean;
}
export interface AlterOwnerStmt {
  objectType?: ObjectType;
  relation?: RangeVar;
  object?: Node;
  newowner?: RoleSpec;
}
export interface AlterOperatorStmt {
  opername?: ObjectWithArgs;
  options?: Node[];
}
export interface AlterTypeStmt {
  typeName?: Node[];
  options?: Node[];
}
export interface RuleStmt {
  relation?: RangeVar;
  rulename?: string;
  whereClause?: Node;
  event?: CmdType;
  instead?: boolean;
  actions?: Node[];
  replace?: boolean;
}
export interface NotifyStmt {
  conditionname?: string;
  payload?: string;
}
export interface ListenStmt {
  conditionname?: string;
}
export interface UnlistenStmt {
  conditionname?: string;
}
export interface TransactionStmt {
  kind?: TransactionStmtKind;
  options?: Node[];
  savepoint_name?: string;
  gid?: string;
  chain?: boolean;
}
export interface CompositeTypeStmt {
  typevar?: RangeVar;
  coldeflist?: Node[];
}
export interface CreateEnumStmt {
  typeName?: Node[];
  vals?: Node[];
}
export interface CreateRangeStmt {
  typeName?: Node[];
  params?: Node[];
}
export interface AlterEnumStmt {
  typeName?: Node[];
  oldVal?: string;
  newVal?: string;
  newValNeighbor?: string;
  newValIsAfter?: boolean;
  skipIfNewValExists?: boolean;
}
export interface ViewStmt {
  view?: RangeVar;
  aliases?: Node[];
  query?: Node;
  replace?: boolean;
  options?: Node[];
  withCheckOption?: ViewCheckOption;
}
export interface LoadStmt {
  filename?: string;
}
export interface CreatedbStmt {
  dbname?: string;
  options?: Node[];
}
export interface AlterDatabaseStmt {
  dbname?: string;
  options?: Node[];
}
export interface AlterDatabaseRefreshCollStmt {
  dbname?: string;
}
export interface AlterDatabaseSetStmt {
  dbname?: string;
  setstmt?: VariableSetStmt;
}
export interface DropdbStmt {
  dbname?: string;
  missing_ok?: boolean;
  options?: Node[];
}
export interface AlterSystemStmt {
  setstmt?: VariableSetStmt;
}
export interface ClusterStmt {
  relation?: RangeVar;
  indexname?: string;
  params?: Node[];
}
export interface VacuumStmt {
  options?: Node[];
  rels?: Node[];
  is_vacuumcmd?: boolean;
}
export interface VacuumRelation {
  relation?: RangeVar;
  oid?: number;
  va_cols?: Node[];
}
export interface ExplainStmt {
  query?: Node;
  options?: Node[];
}
export interface CreateTableAsStmt {
  query?: Node;
  into?: IntoClause;
  objtype?: ObjectType;
  is_select_into?: boolean;
  if_not_exists?: boolean;
}
export interface RefreshMatViewStmt {
  concurrent?: boolean;
  skipData?: boolean;
  relation?: RangeVar;
}
export interface CheckPointStmt {}
export interface DiscardStmt {
  target?: DiscardMode;
}
export interface LockStmt {
  relations?: Node[];
  mode?: number;
  nowait?: boolean;
}
export interface ConstraintsSetStmt {
  constraints?: Node[];
  deferred?: boolean;
}
export interface ReindexStmt {
  kind?: ReindexObjectType;
  relation?: RangeVar;
  name?: string;
  params?: Node[];
}
export interface CreateConversionStmt {
  conversion_name?: Node[];
  for_encoding_name?: string;
  to_encoding_name?: string;
  func_name?: Node[];
  def?: boolean;
}
export interface CreateCastStmt {
  sourcetype?: TypeName;
  targettype?: TypeName;
  func?: ObjectWithArgs;
  context?: CoercionContext;
  inout?: boolean;
}
export interface CreateTransformStmt {
  replace?: boolean;
  type_name?: TypeName;
  lang?: string;
  fromsql?: ObjectWithArgs;
  tosql?: ObjectWithArgs;
}
export interface PrepareStmt {
  name?: string;
  argtypes?: Node[];
  query?: Node;
}
export interface ExecuteStmt {
  name?: string;
  params?: Node[];
}
export interface DeallocateStmt {
  name?: string;
}
export interface DropOwnedStmt {
  roles?: Node[];
  behavior?: DropBehavior;
}
export interface ReassignOwnedStmt {
  roles?: Node[];
  newrole?: RoleSpec;
}
export interface AlterTSDictionaryStmt {
  dictname?: Node[];
  options?: Node[];
}
export interface AlterTSConfigurationStmt {
  kind?: AlterTSConfigType;
  cfgname?: Node[];
  tokentype?: Node[];
  dicts?: Node[];
  override?: boolean;
  replace?: boolean;
  missing_ok?: boolean;
}
export interface PublicationTable {
  relation?: RangeVar;
  whereClause?: Node;
  columns?: Node[];
}
export interface PublicationObjSpec {
  pubobjtype?: PublicationObjSpecType;
  name?: string;
  pubtable?: PublicationTable;
  location?: number;
}
export interface CreatePublicationStmt {
  pubname?: string;
  options?: Node[];
  pubobjects?: Node[];
  for_all_tables?: boolean;
}
export interface AlterPublicationStmt {
  pubname?: string;
  options?: Node[];
  pubobjects?: Node[];
  for_all_tables?: boolean;
  action?: AlterPublicationAction;
}
export interface CreateSubscriptionStmt {
  subname?: string;
  conninfo?: string;
  publication?: Node[];
  options?: Node[];
}
export interface AlterSubscriptionStmt {
  kind?: AlterSubscriptionType;
  subname?: string;
  conninfo?: string;
  publication?: Node[];
  options?: Node[];
}
export interface DropSubscriptionStmt {
  subname?: string;
  missing_ok?: boolean;
  behavior?: DropBehavior;
}
export interface ScanToken {
  start?: number;
  end?: number;
  token?: Token;
  keywordKind?: KeywordKind;
}",
    "file": "types.ts",
  },
  {
    "code": "/**
* This file was automatically generated by pg-proto-parser@latest.
* DO NOT MODIFY IT BY HAND. Instead, modify the source proto file,
* and run the pg-proto-parser generate command to regenerate this file.
*/
export type EnumType = "OverridingKind" | "QuerySource" | "SortByDir" | "SortByNulls" | "SetQuantifier" | "A_Expr_Kind" | "RoleSpecType" | "TableLikeOption" | "DefElemAction" | "PartitionStrategy" | "PartitionRangeDatumKind" | "RTEKind" | "WCOKind" | "GroupingSetKind" | "CTEMaterialize" | "SetOperation" | "ObjectType" | "DropBehavior" | "AlterTableType" | "GrantTargetType" | "VariableSetKind" | "ConstrType" | "ImportForeignSchemaType" | "RoleStmtType" | "FetchDirection" | "FunctionParameterMode" | "TransactionStmtKind" | "ViewCheckOption" | "DiscardMode" | "ReindexObjectType" | "AlterTSConfigType" | "PublicationObjSpecType" | "AlterPublicationAction" | "AlterSubscriptionType" | "OnCommitAction" | "ParamKind" | "CoercionContext" | "CoercionForm" | "BoolExprType" | "SubLinkType" | "RowCompareType" | "MinMaxOp" | "SQLValueFunctionOp" | "XmlExprOp" | "XmlOptionType" | "JsonEncoding" | "JsonFormatType" | "JsonConstructorType" | "JsonValueType" | "NullTestType" | "BoolTestType" | "CmdType" | "JoinType" | "AggStrategy" | "AggSplit" | "SetOpCmd" | "SetOpStrategy" | "OnConflictAction" | "LimitOption" | "LockClauseStrength" | "LockWaitPolicy" | "LockTupleMode" | "KeywordKind" | "Token";
export const getEnumValue = (enumType: EnumType, key: string | number) => {
  switch (enumType) {
    case "OverridingKind":
      {
        switch (key) {
          case "OVERRIDING_NOT_SET":
            return 0;
          case "OVERRIDING_USER_VALUE":
            return 1;
          case "OVERRIDING_SYSTEM_VALUE":
            return 2;
          case 0:
            return "OVERRIDING_NOT_SET";
          case 1:
            return "OVERRIDING_USER_VALUE";
          case 2:
            return "OVERRIDING_SYSTEM_VALUE";
          default:
            throw new Error("Key not recognized in enum OverridingKind");
        }
      }
    case "QuerySource":
      {
        switch (key) {
          case "QSRC_ORIGINAL":
            return 0;
          case "QSRC_PARSER":
            return 1;
          case "QSRC_INSTEAD_RULE":
            return 2;
          case "QSRC_QUAL_INSTEAD_RULE":
            return 3;
          case "QSRC_NON_INSTEAD_RULE":
            return 4;
          case 0:
            return "QSRC_ORIGINAL";
          case 1:
            return "QSRC_PARSER";
          case 2:
            return "QSRC_INSTEAD_RULE";
          case 3:
            return "QSRC_QUAL_INSTEAD_RULE";
          case 4:
            return "QSRC_NON_INSTEAD_RULE";
          default:
            throw new Error("Key not recognized in enum QuerySource");
        }
      }
    case "SortByDir":
      {
        switch (key) {
          case "SORTBY_DEFAULT":
            return 0;
          case "SORTBY_ASC":
            return 1;
          case "SORTBY_DESC":
            return 2;
          case "SORTBY_USING":
            return 3;
          case 0:
            return "SORTBY_DEFAULT";
          case 1:
            return "SORTBY_ASC";
          case 2:
            return "SORTBY_DESC";
          case 3:
            return "SORTBY_USING";
          default:
            throw new Error("Key not recognized in enum SortByDir");
        }
      }
    case "SortByNulls":
      {
        switch (key) {
          case "SORTBY_NULLS_DEFAULT":
            return 0;
          case "SORTBY_NULLS_FIRST":
            return 1;
          case "SORTBY_NULLS_LAST":
            return 2;
          case 0:
            return "SORTBY_NULLS_DEFAULT";
          case 1:
            return "SORTBY_NULLS_FIRST";
          case 2:
            return "SORTBY_NULLS_LAST";
          default:
            throw new Error("Key not recognized in enum SortByNulls");
        }
      }
    case "SetQuantifier":
      {
        switch (key) {
          case "SET_QUANTIFIER_DEFAULT":
            return 0;
          case "SET_QUANTIFIER_ALL":
            return 1;
          case "SET_QUANTIFIER_DISTINCT":
            return 2;
          case 0:
            return "SET_QUANTIFIER_DEFAULT";
          case 1:
            return "SET_QUANTIFIER_ALL";
          case 2:
            return "SET_QUANTIFIER_DISTINCT";
          default:
            throw new Error("Key not recognized in enum SetQuantifier");
        }
      }
    case "A_Expr_Kind":
      {
        switch (key) {
          case "AEXPR_OP":
            return 0;
          case "AEXPR_OP_ANY":
            return 1;
          case "AEXPR_OP_ALL":
            return 2;
          case "AEXPR_DISTINCT":
            return 3;
          case "AEXPR_NOT_DISTINCT":
            return 4;
          case "AEXPR_NULLIF":
            return 5;
          case "AEXPR_IN":
            return 6;
          case "AEXPR_LIKE":
            return 7;
          case "AEXPR_ILIKE":
            return 8;
          case "AEXPR_SIMILAR":
            return 9;
          case "AEXPR_BETWEEN":
            return 10;
          case "AEXPR_NOT_BETWEEN":
            return 11;
          case "AEXPR_BETWEEN_SYM":
            return 12;
          case "AEXPR_NOT_BETWEEN_SYM":
            return 13;
          case 0:
            return "AEXPR_OP";
          case 1:
            return "AEXPR_OP_ANY";
          case 2:
            return "AEXPR_OP_ALL";
          case 3:
            return "AEXPR_DISTINCT";
          case 4:
            return "AEXPR_NOT_DISTINCT";
          case 5:
            return "AEXPR_NULLIF";
          case 6:
            return "AEXPR_IN";
          case 7:
            return "AEXPR_LIKE";
          case 8:
            return "AEXPR_ILIKE";
          case 9:
            return "AEXPR_SIMILAR";
          case 10:
            return "AEXPR_BETWEEN";
          case 11:
            return "AEXPR_NOT_BETWEEN";
          case 12:
            return "AEXPR_BETWEEN_SYM";
          case 13:
            return "AEXPR_NOT_BETWEEN_SYM";
          default:
            throw new Error("Key not recognized in enum A_Expr_Kind");
        }
      }
    case "RoleSpecType":
      {
        switch (key) {
          case "ROLESPEC_CSTRING":
            return 0;
          case "ROLESPEC_CURRENT_ROLE":
            return 1;
          case "ROLESPEC_CURRENT_USER":
            return 2;
          case "ROLESPEC_SESSION_USER":
            return 3;
          case "ROLESPEC_PUBLIC":
            return 4;
          case 0:
            return "ROLESPEC_CSTRING";
          case 1:
            return "ROLESPEC_CURRENT_ROLE";
          case 2:
            return "ROLESPEC_CURRENT_USER";
          case 3:
            return "ROLESPEC_SESSION_USER";
          case 4:
            return "ROLESPEC_PUBLIC";
          default:
            throw new Error("Key not recognized in enum RoleSpecType");
        }
      }
    case "TableLikeOption":
      {
        switch (key) {
          case "CREATE_TABLE_LIKE_COMMENTS":
            return 0;
          case "CREATE_TABLE_LIKE_COMPRESSION":
            return 1;
          case "CREATE_TABLE_LIKE_CONSTRAINTS":
            return 2;
          case "CREATE_TABLE_LIKE_DEFAULTS":
            return 3;
          case "CREATE_TABLE_LIKE_GENERATED":
            return 4;
          case "CREATE_TABLE_LIKE_IDENTITY":
            return 5;
          case "CREATE_TABLE_LIKE_INDEXES":
            return 6;
          case "CREATE_TABLE_LIKE_STATISTICS":
            return 7;
          case "CREATE_TABLE_LIKE_STORAGE":
            return 8;
          case "CREATE_TABLE_LIKE_ALL":
            return 9;
          case 0:
            return "CREATE_TABLE_LIKE_COMMENTS";
          case 1:
            return "CREATE_TABLE_LIKE_COMPRESSION";
          case 2:
            return "CREATE_TABLE_LIKE_CONSTRAINTS";
          case 3:
            return "CREATE_TABLE_LIKE_DEFAULTS";
          case 4:
            return "CREATE_TABLE_LIKE_GENERATED";
          case 5:
            return "CREATE_TABLE_LIKE_IDENTITY";
          case 6:
            return "CREATE_TABLE_LIKE_INDEXES";
          case 7:
            return "CREATE_TABLE_LIKE_STATISTICS";
          case 8:
            return "CREATE_TABLE_LIKE_STORAGE";
          case 9:
            return "CREATE_TABLE_LIKE_ALL";
          default:
            throw new Error("Key not recognized in enum TableLikeOption");
        }
      }
    case "DefElemAction":
      {
        switch (key) {
          case "DEFELEM_UNSPEC":
            return 0;
          case "DEFELEM_SET":
            return 1;
          case "DEFELEM_ADD":
            return 2;
          case "DEFELEM_DROP":
            return 3;
          case 0:
            return "DEFELEM_UNSPEC";
          case 1:
            return "DEFELEM_SET";
          case 2:
            return "DEFELEM_ADD";
          case 3:
            return "DEFELEM_DROP";
          default:
            throw new Error("Key not recognized in enum DefElemAction");
        }
      }
    case "PartitionStrategy":
      {
        switch (key) {
          case "PARTITION_STRATEGY_LIST":
            return 0;
          case "PARTITION_STRATEGY_RANGE":
            return 1;
          case "PARTITION_STRATEGY_HASH":
            return 2;
          case 0:
            return "PARTITION_STRATEGY_LIST";
          case 1:
            return "PARTITION_STRATEGY_RANGE";
          case 2:
            return "PARTITION_STRATEGY_HASH";
          default:
            throw new Error("Key not recognized in enum PartitionStrategy");
        }
      }
    case "PartitionRangeDatumKind":
      {
        switch (key) {
          case "PARTITION_RANGE_DATUM_MINVALUE":
            return 0;
          case "PARTITION_RANGE_DATUM_VALUE":
            return 1;
          case "PARTITION_RANGE_DATUM_MAXVALUE":
            return 2;
          case 0:
            return "PARTITION_RANGE_DATUM_MINVALUE";
          case 1:
            return "PARTITION_RANGE_DATUM_VALUE";
          case 2:
            return "PARTITION_RANGE_DATUM_MAXVALUE";
          default:
            throw new Error("Key not recognized in enum PartitionRangeDatumKind");
        }
      }
    case "RTEKind":
      {
        switch (key) {
          case "RTE_RELATION":
            return 0;
          case "RTE_SUBQUERY":
            return 1;
          case "RTE_JOIN":
            return 2;
          case "RTE_FUNCTION":
            return 3;
          case "RTE_TABLEFUNC":
            return 4;
          case "RTE_VALUES":
            return 5;
          case "RTE_CTE":
            return 6;
          case "RTE_NAMEDTUPLESTORE":
            return 7;
          case "RTE_RESULT":
            return 8;
          case 0:
            return "RTE_RELATION";
          case 1:
            return "RTE_SUBQUERY";
          case 2:
            return "RTE_JOIN";
          case 3:
            return "RTE_FUNCTION";
          case 4:
            return "RTE_TABLEFUNC";
          case 5:
            return "RTE_VALUES";
          case 6:
            return "RTE_CTE";
          case 7:
            return "RTE_NAMEDTUPLESTORE";
          case 8:
            return "RTE_RESULT";
          default:
            throw new Error("Key not recognized in enum RTEKind");
        }
      }
    case "WCOKind":
      {
        switch (key) {
          case "WCO_VIEW_CHECK":
            return 0;
          case "WCO_RLS_INSERT_CHECK":
            return 1;
          case "WCO_RLS_UPDATE_CHECK":
            return 2;
          case "WCO_RLS_CONFLICT_CHECK":
            return 3;
          case "WCO_RLS_MERGE_UPDATE_CHECK":
            return 4;
          case "WCO_RLS_MERGE_DELETE_CHECK":
            return 5;
          case 0:
            return "WCO_VIEW_CHECK";
          case 1:
            return "WCO_RLS_INSERT_CHECK";
          case 2:
            return "WCO_RLS_UPDATE_CHECK";
          case 3:
            return "WCO_RLS_CONFLICT_CHECK";
          case 4:
            return "WCO_RLS_MERGE_UPDATE_CHECK";
          case 5:
            return "WCO_RLS_MERGE_DELETE_CHECK";
          default:
            throw new Error("Key not recognized in enum WCOKind");
        }
      }
    case "GroupingSetKind":
      {
        switch (key) {
          case "GROUPING_SET_EMPTY":
            return 0;
          case "GROUPING_SET_SIMPLE":
            return 1;
          case "GROUPING_SET_ROLLUP":
            return 2;
          case "GROUPING_SET_CUBE":
            return 3;
          case "GROUPING_SET_SETS":
            return 4;
          case 0:
            return "GROUPING_SET_EMPTY";
          case 1:
            return "GROUPING_SET_SIMPLE";
          case 2:
            return "GROUPING_SET_ROLLUP";
          case 3:
            return "GROUPING_SET_CUBE";
          case 4:
            return "GROUPING_SET_SETS";
          default:
            throw new Error("Key not recognized in enum GroupingSetKind");
        }
      }
    case "CTEMaterialize":
      {
        switch (key) {
          case "CTEMaterializeDefault":
            return 0;
          case "CTEMaterializeAlways":
            return 1;
          case "CTEMaterializeNever":
            return 2;
          case 0:
            return "CTEMaterializeDefault";
          case 1:
            return "CTEMaterializeAlways";
          case 2:
            return "CTEMaterializeNever";
          default:
            throw new Error("Key not recognized in enum CTEMaterialize");
        }
      }
    case "SetOperation":
      {
        switch (key) {
          case "SETOP_NONE":
            return 0;
          case "SETOP_UNION":
            return 1;
          case "SETOP_INTERSECT":
            return 2;
          case "SETOP_EXCEPT":
            return 3;
          case 0:
            return "SETOP_NONE";
          case 1:
            return "SETOP_UNION";
          case 2:
            return "SETOP_INTERSECT";
          case 3:
            return "SETOP_EXCEPT";
          default:
            throw new Error("Key not recognized in enum SetOperation");
        }
      }
    case "ObjectType":
      {
        switch (key) {
          case "OBJECT_ACCESS_METHOD":
            return 0;
          case "OBJECT_AGGREGATE":
            return 1;
          case "OBJECT_AMOP":
            return 2;
          case "OBJECT_AMPROC":
            return 3;
          case "OBJECT_ATTRIBUTE":
            return 4;
          case "OBJECT_CAST":
            return 5;
          case "OBJECT_COLUMN":
            return 6;
          case "OBJECT_COLLATION":
            return 7;
          case "OBJECT_CONVERSION":
            return 8;
          case "OBJECT_DATABASE":
            return 9;
          case "OBJECT_DEFAULT":
            return 10;
          case "OBJECT_DEFACL":
            return 11;
          case "OBJECT_DOMAIN":
            return 12;
          case "OBJECT_DOMCONSTRAINT":
            return 13;
          case "OBJECT_EVENT_TRIGGER":
            return 14;
          case "OBJECT_EXTENSION":
            return 15;
          case "OBJECT_FDW":
            return 16;
          case "OBJECT_FOREIGN_SERVER":
            return 17;
          case "OBJECT_FOREIGN_TABLE":
            return 18;
          case "OBJECT_FUNCTION":
            return 19;
          case "OBJECT_INDEX":
            return 20;
          case "OBJECT_LANGUAGE":
            return 21;
          case "OBJECT_LARGEOBJECT":
            return 22;
          case "OBJECT_MATVIEW":
            return 23;
          case "OBJECT_OPCLASS":
            return 24;
          case "OBJECT_OPERATOR":
            return 25;
          case "OBJECT_OPFAMILY":
            return 26;
          case "OBJECT_PARAMETER_ACL":
            return 27;
          case "OBJECT_POLICY":
            return 28;
          case "OBJECT_PROCEDURE":
            return 29;
          case "OBJECT_PUBLICATION":
            return 30;
          case "OBJECT_PUBLICATION_NAMESPACE":
            return 31;
          case "OBJECT_PUBLICATION_REL":
            return 32;
          case "OBJECT_ROLE":
            return 33;
          case "OBJECT_ROUTINE":
            return 34;
          case "OBJECT_RULE":
            return 35;
          case "OBJECT_SCHEMA":
            return 36;
          case "OBJECT_SEQUENCE":
            return 37;
          case "OBJECT_SUBSCRIPTION":
            return 38;
          case "OBJECT_STATISTIC_EXT":
            return 39;
          case "OBJECT_TABCONSTRAINT":
            return 40;
          case "OBJECT_TABLE":
            return 41;
          case "OBJECT_TABLESPACE":
            return 42;
          case "OBJECT_TRANSFORM":
            return 43;
          case "OBJECT_TRIGGER":
            return 44;
          case "OBJECT_TSCONFIGURATION":
            return 45;
          case "OBJECT_TSDICTIONARY":
            return 46;
          case "OBJECT_TSPARSER":
            return 47;
          case "OBJECT_TSTEMPLATE":
            return 48;
          case "OBJECT_TYPE":
            return 49;
          case "OBJECT_USER_MAPPING":
            return 50;
          case "OBJECT_VIEW":
            return 51;
          case 0:
            return "OBJECT_ACCESS_METHOD";
          case 1:
            return "OBJECT_AGGREGATE";
          case 2:
            return "OBJECT_AMOP";
          case 3:
            return "OBJECT_AMPROC";
          case 4:
            return "OBJECT_ATTRIBUTE";
          case 5:
            return "OBJECT_CAST";
          case 6:
            return "OBJECT_COLUMN";
          case 7:
            return "OBJECT_COLLATION";
          case 8:
            return "OBJECT_CONVERSION";
          case 9:
            return "OBJECT_DATABASE";
          case 10:
            return "OBJECT_DEFAULT";
          case 11:
            return "OBJECT_DEFACL";
          case 12:
            return "OBJECT_DOMAIN";
          case 13:
            return "OBJECT_DOMCONSTRAINT";
          case 14:
            return "OBJECT_EVENT_TRIGGER";
          case 15:
            return "OBJECT_EXTENSION";
          case 16:
            return "OBJECT_FDW";
          case 17:
            return "OBJECT_FOREIGN_SERVER";
          case 18:
            return "OBJECT_FOREIGN_TABLE";
          case 19:
            return "OBJECT_FUNCTION";
          case 20:
            return "OBJECT_INDEX";
          case 21:
            return "OBJECT_LANGUAGE";
          case 22:
            return "OBJECT_LARGEOBJECT";
          case 23:
            return "OBJECT_MATVIEW";
          case 24:
            return "OBJECT_OPCLASS";
          case 25:
            return "OBJECT_OPERATOR";
          case 26:
            return "OBJECT_OPFAMILY";
          case 27:
            return "OBJECT_PARAMETER_ACL";
          case 28:
            return "OBJECT_POLICY";
          case 29:
            return "OBJECT_PROCEDURE";
          case 30:
            return "OBJECT_PUBLICATION";
          case 31:
            return "OBJECT_PUBLICATION_NAMESPACE";
          case 32:
            return "OBJECT_PUBLICATION_REL";
          case 33:
            return "OBJECT_ROLE";
          case 34:
            return "OBJECT_ROUTINE";
          case 35:
            return "OBJECT_RULE";
          case 36:
            return "OBJECT_SCHEMA";
          case 37:
            return "OBJECT_SEQUENCE";
          case 38:
            return "OBJECT_SUBSCRIPTION";
          case 39:
            return "OBJECT_STATISTIC_EXT";
          case 40:
            return "OBJECT_TABCONSTRAINT";
          case 41:
            return "OBJECT_TABLE";
          case 42:
            return "OBJECT_TABLESPACE";
          case 43:
            return "OBJECT_TRANSFORM";
          case 44:
            return "OBJECT_TRIGGER";
          case 45:
            return "OBJECT_TSCONFIGURATION";
          case 46:
            return "OBJECT_TSDICTIONARY";
          case 47:
            return "OBJECT_TSPARSER";
          case 48:
            return "OBJECT_TSTEMPLATE";
          case 49:
            return "OBJECT_TYPE";
          case 50:
            return "OBJECT_USER_MAPPING";
          case 51:
            return "OBJECT_VIEW";
          default:
            throw new Error("Key not recognized in enum ObjectType");
        }
      }
    case "DropBehavior":
      {
        switch (key) {
          case "DROP_RESTRICT":
            return 0;
          case "DROP_CASCADE":
            return 1;
          case 0:
            return "DROP_RESTRICT";
          case 1:
            return "DROP_CASCADE";
          default:
            throw new Error("Key not recognized in enum DropBehavior");
        }
      }
    case "AlterTableType":
      {
        switch (key) {
          case "AT_AddColumn":
            return 0;
          case "AT_AddColumnToView":
            return 1;
          case "AT_ColumnDefault":
            return 2;
          case "AT_CookedColumnDefault":
            return 3;
          case "AT_DropNotNull":
            return 4;
          case "AT_SetNotNull":
            return 5;
          case "AT_DropExpression":
            return 6;
          case "AT_CheckNotNull":
            return 7;
          case "AT_SetStatistics":
            return 8;
          case "AT_SetOptions":
            return 9;
          case "AT_ResetOptions":
            return 10;
          case "AT_SetStorage":
            return 11;
          case "AT_SetCompression":
            return 12;
          case "AT_DropColumn":
            return 13;
          case "AT_AddIndex":
            return 14;
          case "AT_ReAddIndex":
            return 15;
          case "AT_AddConstraint":
            return 16;
          case "AT_ReAddConstraint":
            return 17;
          case "AT_ReAddDomainConstraint":
            return 18;
          case "AT_AlterConstraint":
            return 19;
          case "AT_ValidateConstraint":
            return 20;
          case "AT_AddIndexConstraint":
            return 21;
          case "AT_DropConstraint":
            return 22;
          case "AT_ReAddComment":
            return 23;
          case "AT_AlterColumnType":
            return 24;
          case "AT_AlterColumnGenericOptions":
            return 25;
          case "AT_ChangeOwner":
            return 26;
          case "AT_ClusterOn":
            return 27;
          case "AT_DropCluster":
            return 28;
          case "AT_SetLogged":
            return 29;
          case "AT_SetUnLogged":
            return 30;
          case "AT_DropOids":
            return 31;
          case "AT_SetAccessMethod":
            return 32;
          case "AT_SetTableSpace":
            return 33;
          case "AT_SetRelOptions":
            return 34;
          case "AT_ResetRelOptions":
            return 35;
          case "AT_ReplaceRelOptions":
            return 36;
          case "AT_EnableTrig":
            return 37;
          case "AT_EnableAlwaysTrig":
            return 38;
          case "AT_EnableReplicaTrig":
            return 39;
          case "AT_DisableTrig":
            return 40;
          case "AT_EnableTrigAll":
            return 41;
          case "AT_DisableTrigAll":
            return 42;
          case "AT_EnableTrigUser":
            return 43;
          case "AT_DisableTrigUser":
            return 44;
          case "AT_EnableRule":
            return 45;
          case "AT_EnableAlwaysRule":
            return 46;
          case "AT_EnableReplicaRule":
            return 47;
          case "AT_DisableRule":
            return 48;
          case "AT_AddInherit":
            return 49;
          case "AT_DropInherit":
            return 50;
          case "AT_AddOf":
            return 51;
          case "AT_DropOf":
            return 52;
          case "AT_ReplicaIdentity":
            return 53;
          case "AT_EnableRowSecurity":
            return 54;
          case "AT_DisableRowSecurity":
            return 55;
          case "AT_ForceRowSecurity":
            return 56;
          case "AT_NoForceRowSecurity":
            return 57;
          case "AT_GenericOptions":
            return 58;
          case "AT_AttachPartition":
            return 59;
          case "AT_DetachPartition":
            return 60;
          case "AT_DetachPartitionFinalize":
            return 61;
          case "AT_AddIdentity":
            return 62;
          case "AT_SetIdentity":
            return 63;
          case "AT_DropIdentity":
            return 64;
          case "AT_ReAddStatistics":
            return 65;
          case 0:
            return "AT_AddColumn";
          case 1:
            return "AT_AddColumnToView";
          case 2:
            return "AT_ColumnDefault";
          case 3:
            return "AT_CookedColumnDefault";
          case 4:
            return "AT_DropNotNull";
          case 5:
            return "AT_SetNotNull";
          case 6:
            return "AT_DropExpression";
          case 7:
            return "AT_CheckNotNull";
          case 8:
            return "AT_SetStatistics";
          case 9:
            return "AT_SetOptions";
          case 10:
            return "AT_ResetOptions";
          case 11:
            return "AT_SetStorage";
          case 12:
            return "AT_SetCompression";
          case 13:
            return "AT_DropColumn";
          case 14:
            return "AT_AddIndex";
          case 15:
            return "AT_ReAddIndex";
          case 16:
            return "AT_AddConstraint";
          case 17:
            return "AT_ReAddConstraint";
          case 18:
            return "AT_ReAddDomainConstraint";
          case 19:
            return "AT_AlterConstraint";
          case 20:
            return "AT_ValidateConstraint";
          case 21:
            return "AT_AddIndexConstraint";
          case 22:
            return "AT_DropConstraint";
          case 23:
            return "AT_ReAddComment";
          case 24:
            return "AT_AlterColumnType";
          case 25:
            return "AT_AlterColumnGenericOptions";
          case 26:
            return "AT_ChangeOwner";
          case 27:
            return "AT_ClusterOn";
          case 28:
            return "AT_DropCluster";
          case 29:
            return "AT_SetLogged";
          case 30:
            return "AT_SetUnLogged";
          case 31:
            return "AT_DropOids";
          case 32:
            return "AT_SetAccessMethod";
          case 33:
            return "AT_SetTableSpace";
          case 34:
            return "AT_SetRelOptions";
          case 35:
            return "AT_ResetRelOptions";
          case 36:
            return "AT_ReplaceRelOptions";
          case 37:
            return "AT_EnableTrig";
          case 38:
            return "AT_EnableAlwaysTrig";
          case 39:
            return "AT_EnableReplicaTrig";
          case 40:
            return "AT_DisableTrig";
          case 41:
            return "AT_EnableTrigAll";
          case 42:
            return "AT_DisableTrigAll";
          case 43:
            return "AT_EnableTrigUser";
          case 44:
            return "AT_DisableTrigUser";
          case 45:
            return "AT_EnableRule";
          case 46:
            return "AT_EnableAlwaysRule";
          case 47:
            return "AT_EnableReplicaRule";
          case 48:
            return "AT_DisableRule";
          case 49:
            return "AT_AddInherit";
          case 50:
            return "AT_DropInherit";
          case 51:
            return "AT_AddOf";
          case 52:
            return "AT_DropOf";
          case 53:
            return "AT_ReplicaIdentity";
          case 54:
            return "AT_EnableRowSecurity";
          case 55:
            return "AT_DisableRowSecurity";
          case 56:
            return "AT_ForceRowSecurity";
          case 57:
            return "AT_NoForceRowSecurity";
          case 58:
            return "AT_GenericOptions";
          case 59:
            return "AT_AttachPartition";
          case 60:
            return "AT_DetachPartition";
          case 61:
            return "AT_DetachPartitionFinalize";
          case 62:
            return "AT_AddIdentity";
          case 63:
            return "AT_SetIdentity";
          case 64:
            return "AT_DropIdentity";
          case 65:
            return "AT_ReAddStatistics";
          default:
            throw new Error("Key not recognized in enum AlterTableType");
        }
      }
    case "GrantTargetType":
      {
        switch (key) {
          case "ACL_TARGET_OBJECT":
            return 0;
          case "ACL_TARGET_ALL_IN_SCHEMA":
            return 1;
          case "ACL_TARGET_DEFAULTS":
            return 2;
          case 0:
            return "ACL_TARGET_OBJECT";
          case 1:
            return "ACL_TARGET_ALL_IN_SCHEMA";
          case 2:
            return "ACL_TARGET_DEFAULTS";
          default:
            throw new Error("Key not recognized in enum GrantTargetType");
        }
      }
    case "VariableSetKind":
      {
        switch (key) {
          case "VAR_SET_VALUE":
            return 0;
          case "VAR_SET_DEFAULT":
            return 1;
          case "VAR_SET_CURRENT":
            return 2;
          case "VAR_SET_MULTI":
            return 3;
          case "VAR_RESET":
            return 4;
          case "VAR_RESET_ALL":
            return 5;
          case 0:
            return "VAR_SET_VALUE";
          case 1:
            return "VAR_SET_DEFAULT";
          case 2:
            return "VAR_SET_CURRENT";
          case 3:
            return "VAR_SET_MULTI";
          case 4:
            return "VAR_RESET";
          case 5:
            return "VAR_RESET_ALL";
          default:
            throw new Error("Key not recognized in enum VariableSetKind");
        }
      }
    case "ConstrType":
      {
        switch (key) {
          case "CONSTR_NULL":
            return 0;
          case "CONSTR_NOTNULL":
            return 1;
          case "CONSTR_DEFAULT":
            return 2;
          case "CONSTR_IDENTITY":
            return 3;
          case "CONSTR_GENERATED":
            return 4;
          case "CONSTR_CHECK":
            return 5;
          case "CONSTR_PRIMARY":
            return 6;
          case "CONSTR_UNIQUE":
            return 7;
          case "CONSTR_EXCLUSION":
            return 8;
          case "CONSTR_FOREIGN":
            return 9;
          case "CONSTR_ATTR_DEFERRABLE":
            return 10;
          case "CONSTR_ATTR_NOT_DEFERRABLE":
            return 11;
          case "CONSTR_ATTR_DEFERRED":
            return 12;
          case "CONSTR_ATTR_IMMEDIATE":
            return 13;
          case 0:
            return "CONSTR_NULL";
          case 1:
            return "CONSTR_NOTNULL";
          case 2:
            return "CONSTR_DEFAULT";
          case 3:
            return "CONSTR_IDENTITY";
          case 4:
            return "CONSTR_GENERATED";
          case 5:
            return "CONSTR_CHECK";
          case 6:
            return "CONSTR_PRIMARY";
          case 7:
            return "CONSTR_UNIQUE";
          case 8:
            return "CONSTR_EXCLUSION";
          case 9:
            return "CONSTR_FOREIGN";
          case 10:
            return "CONSTR_ATTR_DEFERRABLE";
          case 11:
            return "CONSTR_ATTR_NOT_DEFERRABLE";
          case 12:
            return "CONSTR_ATTR_DEFERRED";
          case 13:
            return "CONSTR_ATTR_IMMEDIATE";
          default:
            throw new Error("Key not recognized in enum ConstrType");
        }
      }
    case "ImportForeignSchemaType":
      {
        switch (key) {
          case "FDW_IMPORT_SCHEMA_ALL":
            return 0;
          case "FDW_IMPORT_SCHEMA_LIMIT_TO":
            return 1;
          case "FDW_IMPORT_SCHEMA_EXCEPT":
            return 2;
          case 0:
            return "FDW_IMPORT_SCHEMA_ALL";
          case 1:
            return "FDW_IMPORT_SCHEMA_LIMIT_TO";
          case 2:
            return "FDW_IMPORT_SCHEMA_EXCEPT";
          default:
            throw new Error("Key not recognized in enum ImportForeignSchemaType");
        }
      }
    case "RoleStmtType":
      {
        switch (key) {
          case "ROLESTMT_ROLE":
            return 0;
          case "ROLESTMT_USER":
            return 1;
          case "ROLESTMT_GROUP":
            return 2;
          case 0:
            return "ROLESTMT_ROLE";
          case 1:
            return "ROLESTMT_USER";
          case 2:
            return "ROLESTMT_GROUP";
          default:
            throw new Error("Key not recognized in enum RoleStmtType");
        }
      }
    case "FetchDirection":
      {
        switch (key) {
          case "FETCH_FORWARD":
            return 0;
          case "FETCH_BACKWARD":
            return 1;
          case "FETCH_ABSOLUTE":
            return 2;
          case "FETCH_RELATIVE":
            return 3;
          case 0:
            return "FETCH_FORWARD";
          case 1:
            return "FETCH_BACKWARD";
          case 2:
            return "FETCH_ABSOLUTE";
          case 3:
            return "FETCH_RELATIVE";
          default:
            throw new Error("Key not recognized in enum FetchDirection");
        }
      }
    case "FunctionParameterMode":
      {
        switch (key) {
          case "FUNC_PARAM_IN":
            return 0;
          case "FUNC_PARAM_OUT":
            return 1;
          case "FUNC_PARAM_INOUT":
            return 2;
          case "FUNC_PARAM_VARIADIC":
            return 3;
          case "FUNC_PARAM_TABLE":
            return 4;
          case "FUNC_PARAM_DEFAULT":
            return 5;
          case 0:
            return "FUNC_PARAM_IN";
          case 1:
            return "FUNC_PARAM_OUT";
          case 2:
            return "FUNC_PARAM_INOUT";
          case 3:
            return "FUNC_PARAM_VARIADIC";
          case 4:
            return "FUNC_PARAM_TABLE";
          case 5:
            return "FUNC_PARAM_DEFAULT";
          default:
            throw new Error("Key not recognized in enum FunctionParameterMode");
        }
      }
    case "TransactionStmtKind":
      {
        switch (key) {
          case "TRANS_STMT_BEGIN":
            return 0;
          case "TRANS_STMT_START":
            return 1;
          case "TRANS_STMT_COMMIT":
            return 2;
          case "TRANS_STMT_ROLLBACK":
            return 3;
          case "TRANS_STMT_SAVEPOINT":
            return 4;
          case "TRANS_STMT_RELEASE":
            return 5;
          case "TRANS_STMT_ROLLBACK_TO":
            return 6;
          case "TRANS_STMT_PREPARE":
            return 7;
          case "TRANS_STMT_COMMIT_PREPARED":
            return 8;
          case "TRANS_STMT_ROLLBACK_PREPARED":
            return 9;
          case 0:
            return "TRANS_STMT_BEGIN";
          case 1:
            return "TRANS_STMT_START";
          case 2:
            return "TRANS_STMT_COMMIT";
          case 3:
            return "TRANS_STMT_ROLLBACK";
          case 4:
            return "TRANS_STMT_SAVEPOINT";
          case 5:
            return "TRANS_STMT_RELEASE";
          case 6:
            return "TRANS_STMT_ROLLBACK_TO";
          case 7:
            return "TRANS_STMT_PREPARE";
          case 8:
            return "TRANS_STMT_COMMIT_PREPARED";
          case 9:
            return "TRANS_STMT_ROLLBACK_PREPARED";
          default:
            throw new Error("Key not recognized in enum TransactionStmtKind");
        }
      }
    case "ViewCheckOption":
      {
        switch (key) {
          case "NO_CHECK_OPTION":
            return 0;
          case "LOCAL_CHECK_OPTION":
            return 1;
          case "CASCADED_CHECK_OPTION":
            return 2;
          case 0:
            return "NO_CHECK_OPTION";
          case 1:
            return "LOCAL_CHECK_OPTION";
          case 2:
            return "CASCADED_CHECK_OPTION";
          default:
            throw new Error("Key not recognized in enum ViewCheckOption");
        }
      }
    case "DiscardMode":
      {
        switch (key) {
          case "DISCARD_ALL":
            return 0;
          case "DISCARD_PLANS":
            return 1;
          case "DISCARD_SEQUENCES":
            return 2;
          case "DISCARD_TEMP":
            return 3;
          case 0:
            return "DISCARD_ALL";
          case 1:
            return "DISCARD_PLANS";
          case 2:
            return "DISCARD_SEQUENCES";
          case 3:
            return "DISCARD_TEMP";
          default:
            throw new Error("Key not recognized in enum DiscardMode");
        }
      }
    case "ReindexObjectType":
      {
        switch (key) {
          case "REINDEX_OBJECT_INDEX":
            return 0;
          case "REINDEX_OBJECT_TABLE":
            return 1;
          case "REINDEX_OBJECT_SCHEMA":
            return 2;
          case "REINDEX_OBJECT_SYSTEM":
            return 3;
          case "REINDEX_OBJECT_DATABASE":
            return 4;
          case 0:
            return "REINDEX_OBJECT_INDEX";
          case 1:
            return "REINDEX_OBJECT_TABLE";
          case 2:
            return "REINDEX_OBJECT_SCHEMA";
          case 3:
            return "REINDEX_OBJECT_SYSTEM";
          case 4:
            return "REINDEX_OBJECT_DATABASE";
          default:
            throw new Error("Key not recognized in enum ReindexObjectType");
        }
      }
    case "AlterTSConfigType":
      {
        switch (key) {
          case "ALTER_TSCONFIG_ADD_MAPPING":
            return 0;
          case "ALTER_TSCONFIG_ALTER_MAPPING_FOR_TOKEN":
            return 1;
          case "ALTER_TSCONFIG_REPLACE_DICT":
            return 2;
          case "ALTER_TSCONFIG_REPLACE_DICT_FOR_TOKEN":
            return 3;
          case "ALTER_TSCONFIG_DROP_MAPPING":
            return 4;
          case 0:
            return "ALTER_TSCONFIG_ADD_MAPPING";
          case 1:
            return "ALTER_TSCONFIG_ALTER_MAPPING_FOR_TOKEN";
          case 2:
            return "ALTER_TSCONFIG_REPLACE_DICT";
          case 3:
            return "ALTER_TSCONFIG_REPLACE_DICT_FOR_TOKEN";
          case 4:
            return "ALTER_TSCONFIG_DROP_MAPPING";
          default:
            throw new Error("Key not recognized in enum AlterTSConfigType");
        }
      }
    case "PublicationObjSpecType":
      {
        switch (key) {
          case "PUBLICATIONOBJ_TABLE":
            return 0;
          case "PUBLICATIONOBJ_TABLES_IN_SCHEMA":
            return 1;
          case "PUBLICATIONOBJ_TABLES_IN_CUR_SCHEMA":
            return 2;
          case "PUBLICATIONOBJ_CONTINUATION":
            return 3;
          case 0:
            return "PUBLICATIONOBJ_TABLE";
          case 1:
            return "PUBLICATIONOBJ_TABLES_IN_SCHEMA";
          case 2:
            return "PUBLICATIONOBJ_TABLES_IN_CUR_SCHEMA";
          case 3:
            return "PUBLICATIONOBJ_CONTINUATION";
          default:
            throw new Error("Key not recognized in enum PublicationObjSpecType");
        }
      }
    case "AlterPublicationAction":
      {
        switch (key) {
          case "AP_AddObjects":
            return 0;
          case "AP_DropObjects":
            return 1;
          case "AP_SetObjects":
            return 2;
          case 0:
            return "AP_AddObjects";
          case 1:
            return "AP_DropObjects";
          case 2:
            return "AP_SetObjects";
          default:
            throw new Error("Key not recognized in enum AlterPublicationAction");
        }
      }
    case "AlterSubscriptionType":
      {
        switch (key) {
          case "ALTER_SUBSCRIPTION_OPTIONS":
            return 0;
          case "ALTER_SUBSCRIPTION_CONNECTION":
            return 1;
          case "ALTER_SUBSCRIPTION_SET_PUBLICATION":
            return 2;
          case "ALTER_SUBSCRIPTION_ADD_PUBLICATION":
            return 3;
          case "ALTER_SUBSCRIPTION_DROP_PUBLICATION":
            return 4;
          case "ALTER_SUBSCRIPTION_REFRESH":
            return 5;
          case "ALTER_SUBSCRIPTION_ENABLED":
            return 6;
          case "ALTER_SUBSCRIPTION_SKIP":
            return 7;
          case 0:
            return "ALTER_SUBSCRIPTION_OPTIONS";
          case 1:
            return "ALTER_SUBSCRIPTION_CONNECTION";
          case 2:
            return "ALTER_SUBSCRIPTION_SET_PUBLICATION";
          case 3:
            return "ALTER_SUBSCRIPTION_ADD_PUBLICATION";
          case 4:
            return "ALTER_SUBSCRIPTION_DROP_PUBLICATION";
          case 5:
            return "ALTER_SUBSCRIPTION_REFRESH";
          case 6:
            return "ALTER_SUBSCRIPTION_ENABLED";
          case 7:
            return "ALTER_SUBSCRIPTION_SKIP";
          default:
            throw new Error("Key not recognized in enum AlterSubscriptionType");
        }
      }
    case "OnCommitAction":
      {
        switch (key) {
          case "ONCOMMIT_NOOP":
            return 0;
          case "ONCOMMIT_PRESERVE_ROWS":
            return 1;
          case "ONCOMMIT_DELETE_ROWS":
            return 2;
          case "ONCOMMIT_DROP":
            return 3;
          case 0:
            return "ONCOMMIT_NOOP";
          case 1:
            return "ONCOMMIT_PRESERVE_ROWS";
          case 2:
            return "ONCOMMIT_DELETE_ROWS";
          case 3:
            return "ONCOMMIT_DROP";
          default:
            throw new Error("Key not recognized in enum OnCommitAction");
        }
      }
    case "ParamKind":
      {
        switch (key) {
          case "PARAM_EXTERN":
            return 0;
          case "PARAM_EXEC":
            return 1;
          case "PARAM_SUBLINK":
            return 2;
          case "PARAM_MULTIEXPR":
            return 3;
          case 0:
            return "PARAM_EXTERN";
          case 1:
            return "PARAM_EXEC";
          case 2:
            return "PARAM_SUBLINK";
          case 3:
            return "PARAM_MULTIEXPR";
          default:
            throw new Error("Key not recognized in enum ParamKind");
        }
      }
    case "CoercionContext":
      {
        switch (key) {
          case "COERCION_IMPLICIT":
            return 0;
          case "COERCION_ASSIGNMENT":
            return 1;
          case "COERCION_PLPGSQL":
            return 2;
          case "COERCION_EXPLICIT":
            return 3;
          case 0:
            return "COERCION_IMPLICIT";
          case 1:
            return "COERCION_ASSIGNMENT";
          case 2:
            return "COERCION_PLPGSQL";
          case 3:
            return "COERCION_EXPLICIT";
          default:
            throw new Error("Key not recognized in enum CoercionContext");
        }
      }
    case "CoercionForm":
      {
        switch (key) {
          case "COERCE_EXPLICIT_CALL":
            return 0;
          case "COERCE_EXPLICIT_CAST":
            return 1;
          case "COERCE_IMPLICIT_CAST":
            return 2;
          case "COERCE_SQL_SYNTAX":
            return 3;
          case 0:
            return "COERCE_EXPLICIT_CALL";
          case 1:
            return "COERCE_EXPLICIT_CAST";
          case 2:
            return "COERCE_IMPLICIT_CAST";
          case 3:
            return "COERCE_SQL_SYNTAX";
          default:
            throw new Error("Key not recognized in enum CoercionForm");
        }
      }
    case "BoolExprType":
      {
        switch (key) {
          case "AND_EXPR":
            return 0;
          case "OR_EXPR":
            return 1;
          case "NOT_EXPR":
            return 2;
          case 0:
            return "AND_EXPR";
          case 1:
            return "OR_EXPR";
          case 2:
            return "NOT_EXPR";
          default:
            throw new Error("Key not recognized in enum BoolExprType");
        }
      }
    case "SubLinkType":
      {
        switch (key) {
          case "EXISTS_SUBLINK":
            return 0;
          case "ALL_SUBLINK":
            return 1;
          case "ANY_SUBLINK":
            return 2;
          case "ROWCOMPARE_SUBLINK":
            return 3;
          case "EXPR_SUBLINK":
            return 4;
          case "MULTIEXPR_SUBLINK":
            return 5;
          case "ARRAY_SUBLINK":
            return 6;
          case "CTE_SUBLINK":
            return 7;
          case 0:
            return "EXISTS_SUBLINK";
          case 1:
            return "ALL_SUBLINK";
          case 2:
            return "ANY_SUBLINK";
          case 3:
            return "ROWCOMPARE_SUBLINK";
          case 4:
            return "EXPR_SUBLINK";
          case 5:
            return "MULTIEXPR_SUBLINK";
          case 6:
            return "ARRAY_SUBLINK";
          case 7:
            return "CTE_SUBLINK";
          default:
            throw new Error("Key not recognized in enum SubLinkType");
        }
      }
    case "RowCompareType":
      {
        switch (key) {
          case "ROWCOMPARE_LT":
            return 0;
          case "ROWCOMPARE_LE":
            return 1;
          case "ROWCOMPARE_EQ":
            return 2;
          case "ROWCOMPARE_GE":
            return 3;
          case "ROWCOMPARE_GT":
            return 4;
          case "ROWCOMPARE_NE":
            return 5;
          case 0:
            return "ROWCOMPARE_LT";
          case 1:
            return "ROWCOMPARE_LE";
          case 2:
            return "ROWCOMPARE_EQ";
          case 3:
            return "ROWCOMPARE_GE";
          case 4:
            return "ROWCOMPARE_GT";
          case 5:
            return "ROWCOMPARE_NE";
          default:
            throw new Error("Key not recognized in enum RowCompareType");
        }
      }
    case "MinMaxOp":
      {
        switch (key) {
          case "IS_GREATEST":
            return 0;
          case "IS_LEAST":
            return 1;
          case 0:
            return "IS_GREATEST";
          case 1:
            return "IS_LEAST";
          default:
            throw new Error("Key not recognized in enum MinMaxOp");
        }
      }
    case "SQLValueFunctionOp":
      {
        switch (key) {
          case "SVFOP_CURRENT_DATE":
            return 0;
          case "SVFOP_CURRENT_TIME":
            return 1;
          case "SVFOP_CURRENT_TIME_N":
            return 2;
          case "SVFOP_CURRENT_TIMESTAMP":
            return 3;
          case "SVFOP_CURRENT_TIMESTAMP_N":
            return 4;
          case "SVFOP_LOCALTIME":
            return 5;
          case "SVFOP_LOCALTIME_N":
            return 6;
          case "SVFOP_LOCALTIMESTAMP":
            return 7;
          case "SVFOP_LOCALTIMESTAMP_N":
            return 8;
          case "SVFOP_CURRENT_ROLE":
            return 9;
          case "SVFOP_CURRENT_USER":
            return 10;
          case "SVFOP_USER":
            return 11;
          case "SVFOP_SESSION_USER":
            return 12;
          case "SVFOP_CURRENT_CATALOG":
            return 13;
          case "SVFOP_CURRENT_SCHEMA":
            return 14;
          case 0:
            return "SVFOP_CURRENT_DATE";
          case 1:
            return "SVFOP_CURRENT_TIME";
          case 2:
            return "SVFOP_CURRENT_TIME_N";
          case 3:
            return "SVFOP_CURRENT_TIMESTAMP";
          case 4:
            return "SVFOP_CURRENT_TIMESTAMP_N";
          case 5:
            return "SVFOP_LOCALTIME";
          case 6:
            return "SVFOP_LOCALTIME_N";
          case 7:
            return "SVFOP_LOCALTIMESTAMP";
          case 8:
            return "SVFOP_LOCALTIMESTAMP_N";
          case 9:
            return "SVFOP_CURRENT_ROLE";
          case 10:
            return "SVFOP_CURRENT_USER";
          case 11:
            return "SVFOP_USER";
          case 12:
            return "SVFOP_SESSION_USER";
          case 13:
            return "SVFOP_CURRENT_CATALOG";
          case 14:
            return "SVFOP_CURRENT_SCHEMA";
          default:
            throw new Error("Key not recognized in enum SQLValueFunctionOp");
        }
      }
    case "XmlExprOp":
      {
        switch (key) {
          case "IS_XMLCONCAT":
            return 0;
          case "IS_XMLELEMENT":
            return 1;
          case "IS_XMLFOREST":
            return 2;
          case "IS_XMLPARSE":
            return 3;
          case "IS_XMLPI":
            return 4;
          case "IS_XMLROOT":
            return 5;
          case "IS_XMLSERIALIZE":
            return 6;
          case "IS_DOCUMENT":
            return 7;
          case 0:
            return "IS_XMLCONCAT";
          case 1:
            return "IS_XMLELEMENT";
          case 2:
            return "IS_XMLFOREST";
          case 3:
            return "IS_XMLPARSE";
          case 4:
            return "IS_XMLPI";
          case 5:
            return "IS_XMLROOT";
          case 6:
            return "IS_XMLSERIALIZE";
          case 7:
            return "IS_DOCUMENT";
          default:
            throw new Error("Key not recognized in enum XmlExprOp");
        }
      }
    case "XmlOptionType":
      {
        switch (key) {
          case "XMLOPTION_DOCUMENT":
            return 0;
          case "XMLOPTION_CONTENT":
            return 1;
          case 0:
            return "XMLOPTION_DOCUMENT";
          case 1:
            return "XMLOPTION_CONTENT";
          default:
            throw new Error("Key not recognized in enum XmlOptionType");
        }
      }
    case "JsonEncoding":
      {
        switch (key) {
          case "JS_ENC_DEFAULT":
            return 0;
          case "JS_ENC_UTF8":
            return 1;
          case "JS_ENC_UTF16":
            return 2;
          case "JS_ENC_UTF32":
            return 3;
          case 0:
            return "JS_ENC_DEFAULT";
          case 1:
            return "JS_ENC_UTF8";
          case 2:
            return "JS_ENC_UTF16";
          case 3:
            return "JS_ENC_UTF32";
          default:
            throw new Error("Key not recognized in enum JsonEncoding");
        }
      }
    case "JsonFormatType":
      {
        switch (key) {
          case "JS_FORMAT_DEFAULT":
            return 0;
          case "JS_FORMAT_JSON":
            return 1;
          case "JS_FORMAT_JSONB":
            return 2;
          case 0:
            return "JS_FORMAT_DEFAULT";
          case 1:
            return "JS_FORMAT_JSON";
          case 2:
            return "JS_FORMAT_JSONB";
          default:
            throw new Error("Key not recognized in enum JsonFormatType");
        }
      }
    case "JsonConstructorType":
      {
        switch (key) {
          case "JSCTOR_JSON_OBJECT":
            return 0;
          case "JSCTOR_JSON_ARRAY":
            return 1;
          case "JSCTOR_JSON_OBJECTAGG":
            return 2;
          case "JSCTOR_JSON_ARRAYAGG":
            return 3;
          case 0:
            return "JSCTOR_JSON_OBJECT";
          case 1:
            return "JSCTOR_JSON_ARRAY";
          case 2:
            return "JSCTOR_JSON_OBJECTAGG";
          case 3:
            return "JSCTOR_JSON_ARRAYAGG";
          default:
            throw new Error("Key not recognized in enum JsonConstructorType");
        }
      }
    case "JsonValueType":
      {
        switch (key) {
          case "JS_TYPE_ANY":
            return 0;
          case "JS_TYPE_OBJECT":
            return 1;
          case "JS_TYPE_ARRAY":
            return 2;
          case "JS_TYPE_SCALAR":
            return 3;
          case 0:
            return "JS_TYPE_ANY";
          case 1:
            return "JS_TYPE_OBJECT";
          case 2:
            return "JS_TYPE_ARRAY";
          case 3:
            return "JS_TYPE_SCALAR";
          default:
            throw new Error("Key not recognized in enum JsonValueType");
        }
      }
    case "NullTestType":
      {
        switch (key) {
          case "IS_NULL":
            return 0;
          case "IS_NOT_NULL":
            return 1;
          case 0:
            return "IS_NULL";
          case 1:
            return "IS_NOT_NULL";
          default:
            throw new Error("Key not recognized in enum NullTestType");
        }
      }
    case "BoolTestType":
      {
        switch (key) {
          case "IS_TRUE":
            return 0;
          case "IS_NOT_TRUE":
            return 1;
          case "IS_FALSE":
            return 2;
          case "IS_NOT_FALSE":
            return 3;
          case "IS_UNKNOWN":
            return 4;
          case "IS_NOT_UNKNOWN":
            return 5;
          case 0:
            return "IS_TRUE";
          case 1:
            return "IS_NOT_TRUE";
          case 2:
            return "IS_FALSE";
          case 3:
            return "IS_NOT_FALSE";
          case 4:
            return "IS_UNKNOWN";
          case 5:
            return "IS_NOT_UNKNOWN";
          default:
            throw new Error("Key not recognized in enum BoolTestType");
        }
      }
    case "CmdType":
      {
        switch (key) {
          case "CMD_UNKNOWN":
            return 0;
          case "CMD_SELECT":
            return 1;
          case "CMD_UPDATE":
            return 2;
          case "CMD_INSERT":
            return 3;
          case "CMD_DELETE":
            return 4;
          case "CMD_MERGE":
            return 5;
          case "CMD_UTILITY":
            return 6;
          case "CMD_NOTHING":
            return 7;
          case 0:
            return "CMD_UNKNOWN";
          case 1:
            return "CMD_SELECT";
          case 2:
            return "CMD_UPDATE";
          case 3:
            return "CMD_INSERT";
          case 4:
            return "CMD_DELETE";
          case 5:
            return "CMD_MERGE";
          case 6:
            return "CMD_UTILITY";
          case 7:
            return "CMD_NOTHING";
          default:
            throw new Error("Key not recognized in enum CmdType");
        }
      }
    case "JoinType":
      {
        switch (key) {
          case "JOIN_INNER":
            return 0;
          case "JOIN_LEFT":
            return 1;
          case "JOIN_FULL":
            return 2;
          case "JOIN_RIGHT":
            return 3;
          case "JOIN_SEMI":
            return 4;
          case "JOIN_ANTI":
            return 5;
          case "JOIN_RIGHT_ANTI":
            return 6;
          case "JOIN_UNIQUE_OUTER":
            return 7;
          case "JOIN_UNIQUE_INNER":
            return 8;
          case 0:
            return "JOIN_INNER";
          case 1:
            return "JOIN_LEFT";
          case 2:
            return "JOIN_FULL";
          case 3:
            return "JOIN_RIGHT";
          case 4:
            return "JOIN_SEMI";
          case 5:
            return "JOIN_ANTI";
          case 6:
            return "JOIN_RIGHT_ANTI";
          case 7:
            return "JOIN_UNIQUE_OUTER";
          case 8:
            return "JOIN_UNIQUE_INNER";
          default:
            throw new Error("Key not recognized in enum JoinType");
        }
      }
    case "AggStrategy":
      {
        switch (key) {
          case "AGG_PLAIN":
            return 0;
          case "AGG_SORTED":
            return 1;
          case "AGG_HASHED":
            return 2;
          case "AGG_MIXED":
            return 3;
          case 0:
            return "AGG_PLAIN";
          case 1:
            return "AGG_SORTED";
          case 2:
            return "AGG_HASHED";
          case 3:
            return "AGG_MIXED";
          default:
            throw new Error("Key not recognized in enum AggStrategy");
        }
      }
    case "AggSplit":
      {
        switch (key) {
          case "AGGSPLIT_SIMPLE":
            return 0;
          case "AGGSPLIT_INITIAL_SERIAL":
            return 1;
          case "AGGSPLIT_FINAL_DESERIAL":
            return 2;
          case 0:
            return "AGGSPLIT_SIMPLE";
          case 1:
            return "AGGSPLIT_INITIAL_SERIAL";
          case 2:
            return "AGGSPLIT_FINAL_DESERIAL";
          default:
            throw new Error("Key not recognized in enum AggSplit");
        }
      }
    case "SetOpCmd":
      {
        switch (key) {
          case "SETOPCMD_INTERSECT":
            return 0;
          case "SETOPCMD_INTERSECT_ALL":
            return 1;
          case "SETOPCMD_EXCEPT":
            return 2;
          case "SETOPCMD_EXCEPT_ALL":
            return 3;
          case 0:
            return "SETOPCMD_INTERSECT";
          case 1:
            return "SETOPCMD_INTERSECT_ALL";
          case 2:
            return "SETOPCMD_EXCEPT";
          case 3:
            return "SETOPCMD_EXCEPT_ALL";
          default:
            throw new Error("Key not recognized in enum SetOpCmd");
        }
      }
    case "SetOpStrategy":
      {
        switch (key) {
          case "SETOP_SORTED":
            return 0;
          case "SETOP_HASHED":
            return 1;
          case 0:
            return "SETOP_SORTED";
          case 1:
            return "SETOP_HASHED";
          default:
            throw new Error("Key not recognized in enum SetOpStrategy");
        }
      }
    case "OnConflictAction":
      {
        switch (key) {
          case "ONCONFLICT_NONE":
            return 0;
          case "ONCONFLICT_NOTHING":
            return 1;
          case "ONCONFLICT_UPDATE":
            return 2;
          case 0:
            return "ONCONFLICT_NONE";
          case 1:
            return "ONCONFLICT_NOTHING";
          case 2:
            return "ONCONFLICT_UPDATE";
          default:
            throw new Error("Key not recognized in enum OnConflictAction");
        }
      }
    case "LimitOption":
      {
        switch (key) {
          case "LIMIT_OPTION_DEFAULT":
            return 0;
          case "LIMIT_OPTION_COUNT":
            return 1;
          case "LIMIT_OPTION_WITH_TIES":
            return 2;
          case 0:
            return "LIMIT_OPTION_DEFAULT";
          case 1:
            return "LIMIT_OPTION_COUNT";
          case 2:
            return "LIMIT_OPTION_WITH_TIES";
          default:
            throw new Error("Key not recognized in enum LimitOption");
        }
      }
    case "LockClauseStrength":
      {
        switch (key) {
          case "LCS_NONE":
            return 0;
          case "LCS_FORKEYSHARE":
            return 1;
          case "LCS_FORSHARE":
            return 2;
          case "LCS_FORNOKEYUPDATE":
            return 3;
          case "LCS_FORUPDATE":
            return 4;
          case 0:
            return "LCS_NONE";
          case 1:
            return "LCS_FORKEYSHARE";
          case 2:
            return "LCS_FORSHARE";
          case 3:
            return "LCS_FORNOKEYUPDATE";
          case 4:
            return "LCS_FORUPDATE";
          default:
            throw new Error("Key not recognized in enum LockClauseStrength");
        }
      }
    case "LockWaitPolicy":
      {
        switch (key) {
          case "LockWaitBlock":
            return 0;
          case "LockWaitSkip":
            return 1;
          case "LockWaitError":
            return 2;
          case 0:
            return "LockWaitBlock";
          case 1:
            return "LockWaitSkip";
          case 2:
            return "LockWaitError";
          default:
            throw new Error("Key not recognized in enum LockWaitPolicy");
        }
      }
    case "LockTupleMode":
      {
        switch (key) {
          case "LockTupleKeyShare":
            return 0;
          case "LockTupleShare":
            return 1;
          case "LockTupleNoKeyExclusive":
            return 2;
          case "LockTupleExclusive":
            return 3;
          case 0:
            return "LockTupleKeyShare";
          case 1:
            return "LockTupleShare";
          case 2:
            return "LockTupleNoKeyExclusive";
          case 3:
            return "LockTupleExclusive";
          default:
            throw new Error("Key not recognized in enum LockTupleMode");
        }
      }
    case "KeywordKind":
      {
        switch (key) {
          case "NO_KEYWORD":
            return 0;
          case "UNRESERVED_KEYWORD":
            return 1;
          case "COL_NAME_KEYWORD":
            return 2;
          case "TYPE_FUNC_NAME_KEYWORD":
            return 3;
          case "RESERVED_KEYWORD":
            return 4;
          case 0:
            return "NO_KEYWORD";
          case 1:
            return "UNRESERVED_KEYWORD";
          case 2:
            return "COL_NAME_KEYWORD";
          case 3:
            return "TYPE_FUNC_NAME_KEYWORD";
          case 4:
            return "RESERVED_KEYWORD";
          default:
            throw new Error("Key not recognized in enum KeywordKind");
        }
      }
    case "Token":
      {
        switch (key) {
          case "NUL":
            return 0;
          case "ASCII_36":
            return 36;
          case "ASCII_37":
            return 37;
          case "ASCII_40":
            return 40;
          case "ASCII_41":
            return 41;
          case "ASCII_42":
            return 42;
          case "ASCII_43":
            return 43;
          case "ASCII_44":
            return 44;
          case "ASCII_45":
            return 45;
          case "ASCII_46":
            return 46;
          case "ASCII_47":
            return 47;
          case "ASCII_58":
            return 58;
          case "ASCII_59":
            return 59;
          case "ASCII_60":
            return 60;
          case "ASCII_61":
            return 61;
          case "ASCII_62":
            return 62;
          case "ASCII_63":
            return 63;
          case "ASCII_91":
            return 91;
          case "ASCII_92":
            return 92;
          case "ASCII_93":
            return 93;
          case "ASCII_94":
            return 94;
          case "IDENT":
            return 258;
          case "UIDENT":
            return 259;
          case "FCONST":
            return 260;
          case "SCONST":
            return 261;
          case "USCONST":
            return 262;
          case "BCONST":
            return 263;
          case "XCONST":
            return 264;
          case "Op":
            return 265;
          case "ICONST":
            return 266;
          case "PARAM":
            return 267;
          case "TYPECAST":
            return 268;
          case "DOT_DOT":
            return 269;
          case "COLON_EQUALS":
            return 270;
          case "EQUALS_GREATER":
            return 271;
          case "LESS_EQUALS":
            return 272;
          case "GREATER_EQUALS":
            return 273;
          case "NOT_EQUALS":
            return 274;
          case "SQL_COMMENT":
            return 275;
          case "C_COMMENT":
            return 276;
          case "ABORT_P":
            return 277;
          case "ABSENT":
            return 278;
          case "ABSOLUTE_P":
            return 279;
          case "ACCESS":
            return 280;
          case "ACTION":
            return 281;
          case "ADD_P":
            return 282;
          case "ADMIN":
            return 283;
          case "AFTER":
            return 284;
          case "AGGREGATE":
            return 285;
          case "ALL":
            return 286;
          case "ALSO":
            return 287;
          case "ALTER":
            return 288;
          case "ALWAYS":
            return 289;
          case "ANALYSE":
            return 290;
          case "ANALYZE":
            return 291;
          case "AND":
            return 292;
          case "ANY":
            return 293;
          case "ARRAY":
            return 294;
          case "AS":
            return 295;
          case "ASC":
            return 296;
          case "ASENSITIVE":
            return 297;
          case "ASSERTION":
            return 298;
          case "ASSIGNMENT":
            return 299;
          case "ASYMMETRIC":
            return 300;
          case "ATOMIC":
            return 301;
          case "AT":
            return 302;
          case "ATTACH":
            return 303;
          case "ATTRIBUTE":
            return 304;
          case "AUTHORIZATION":
            return 305;
          case "BACKWARD":
            return 306;
          case "BEFORE":
            return 307;
          case "BEGIN_P":
            return 308;
          case "BETWEEN":
            return 309;
          case "BIGINT":
            return 310;
          case "BINARY":
            return 311;
          case "BIT":
            return 312;
          case "BOOLEAN_P":
            return 313;
          case "BOTH":
            return 314;
          case "BREADTH":
            return 315;
          case "BY":
            return 316;
          case "CACHE":
            return 317;
          case "CALL":
            return 318;
          case "CALLED":
            return 319;
          case "CASCADE":
            return 320;
          case "CASCADED":
            return 321;
          case "CASE":
            return 322;
          case "CAST":
            return 323;
          case "CATALOG_P":
            return 324;
          case "CHAIN":
            return 325;
          case "CHAR_P":
            return 326;
          case "CHARACTER":
            return 327;
          case "CHARACTERISTICS":
            return 328;
          case "CHECK":
            return 329;
          case "CHECKPOINT":
            return 330;
          case "CLASS":
            return 331;
          case "CLOSE":
            return 332;
          case "CLUSTER":
            return 333;
          case "COALESCE":
            return 334;
          case "COLLATE":
            return 335;
          case "COLLATION":
            return 336;
          case "COLUMN":
            return 337;
          case "COLUMNS":
            return 338;
          case "COMMENT":
            return 339;
          case "COMMENTS":
            return 340;
          case "COMMIT":
            return 341;
          case "COMMITTED":
            return 342;
          case "COMPRESSION":
            return 343;
          case "CONCURRENTLY":
            return 344;
          case "CONFIGURATION":
            return 345;
          case "CONFLICT":
            return 346;
          case "CONNECTION":
            return 347;
          case "CONSTRAINT":
            return 348;
          case "CONSTRAINTS":
            return 349;
          case "CONTENT_P":
            return 350;
          case "CONTINUE_P":
            return 351;
          case "CONVERSION_P":
            return 352;
          case "COPY":
            return 353;
          case "COST":
            return 354;
          case "CREATE":
            return 355;
          case "CROSS":
            return 356;
          case "CSV":
            return 357;
          case "CUBE":
            return 358;
          case "CURRENT_P":
            return 359;
          case "CURRENT_CATALOG":
            return 360;
          case "CURRENT_DATE":
            return 361;
          case "CURRENT_ROLE":
            return 362;
          case "CURRENT_SCHEMA":
            return 363;
          case "CURRENT_TIME":
            return 364;
          case "CURRENT_TIMESTAMP":
            return 365;
          case "CURRENT_USER":
            return 366;
          case "CURSOR":
            return 367;
          case "CYCLE":
            return 368;
          case "DATA_P":
            return 369;
          case "DATABASE":
            return 370;
          case "DAY_P":
            return 371;
          case "DEALLOCATE":
            return 372;
          case "DEC":
            return 373;
          case "DECIMAL_P":
            return 374;
          case "DECLARE":
            return 375;
          case "DEFAULT":
            return 376;
          case "DEFAULTS":
            return 377;
          case "DEFERRABLE":
            return 378;
          case "DEFERRED":
            return 379;
          case "DEFINER":
            return 380;
          case "DELETE_P":
            return 381;
          case "DELIMITER":
            return 382;
          case "DELIMITERS":
            return 383;
          case "DEPENDS":
            return 384;
          case "DEPTH":
            return 385;
          case "DESC":
            return 386;
          case "DETACH":
            return 387;
          case "DICTIONARY":
            return 388;
          case "DISABLE_P":
            return 389;
          case "DISCARD":
            return 390;
          case "DISTINCT":
            return 391;
          case "DO":
            return 392;
          case "DOCUMENT_P":
            return 393;
          case "DOMAIN_P":
            return 394;
          case "DOUBLE_P":
            return 395;
          case "DROP":
            return 396;
          case "EACH":
            return 397;
          case "ELSE":
            return 398;
          case "ENABLE_P":
            return 399;
          case "ENCODING":
            return 400;
          case "ENCRYPTED":
            return 401;
          case "END_P":
            return 402;
          case "ENUM_P":
            return 403;
          case "ESCAPE":
            return 404;
          case "EVENT":
            return 405;
          case "EXCEPT":
            return 406;
          case "EXCLUDE":
            return 407;
          case "EXCLUDING":
            return 408;
          case "EXCLUSIVE":
            return 409;
          case "EXECUTE":
            return 410;
          case "EXISTS":
            return 411;
          case "EXPLAIN":
            return 412;
          case "EXPRESSION":
            return 413;
          case "EXTENSION":
            return 414;
          case "EXTERNAL":
            return 415;
          case "EXTRACT":
            return 416;
          case "FALSE_P":
            return 417;
          case "FAMILY":
            return 418;
          case "FETCH":
            return 419;
          case "FILTER":
            return 420;
          case "FINALIZE":
            return 421;
          case "FIRST_P":
            return 422;
          case "FLOAT_P":
            return 423;
          case "FOLLOWING":
            return 424;
          case "FOR":
            return 425;
          case "FORCE":
            return 426;
          case "FOREIGN":
            return 427;
          case "FORMAT":
            return 428;
          case "FORWARD":
            return 429;
          case "FREEZE":
            return 430;
          case "FROM":
            return 431;
          case "FULL":
            return 432;
          case "FUNCTION":
            return 433;
          case "FUNCTIONS":
            return 434;
          case "GENERATED":
            return 435;
          case "GLOBAL":
            return 436;
          case "GRANT":
            return 437;
          case "GRANTED":
            return 438;
          case "GREATEST":
            return 439;
          case "GROUP_P":
            return 440;
          case "GROUPING":
            return 441;
          case "GROUPS":
            return 442;
          case "HANDLER":
            return 443;
          case "HAVING":
            return 444;
          case "HEADER_P":
            return 445;
          case "HOLD":
            return 446;
          case "HOUR_P":
            return 447;
          case "IDENTITY_P":
            return 448;
          case "IF_P":
            return 449;
          case "ILIKE":
            return 450;
          case "IMMEDIATE":
            return 451;
          case "IMMUTABLE":
            return 452;
          case "IMPLICIT_P":
            return 453;
          case "IMPORT_P":
            return 454;
          case "IN_P":
            return 455;
          case "INCLUDE":
            return 456;
          case "INCLUDING":
            return 457;
          case "INCREMENT":
            return 458;
          case "INDENT":
            return 459;
          case "INDEX":
            return 460;
          case "INDEXES":
            return 461;
          case "INHERIT":
            return 462;
          case "INHERITS":
            return 463;
          case "INITIALLY":
            return 464;
          case "INLINE_P":
            return 465;
          case "INNER_P":
            return 466;
          case "INOUT":
            return 467;
          case "INPUT_P":
            return 468;
          case "INSENSITIVE":
            return 469;
          case "INSERT":
            return 470;
          case "INSTEAD":
            return 471;
          case "INT_P":
            return 472;
          case "INTEGER":
            return 473;
          case "INTERSECT":
            return 474;
          case "INTERVAL":
            return 475;
          case "INTO":
            return 476;
          case "INVOKER":
            return 477;
          case "IS":
            return 478;
          case "ISNULL":
            return 479;
          case "ISOLATION":
            return 480;
          case "JOIN":
            return 481;
          case "JSON":
            return 482;
          case "JSON_ARRAY":
            return 483;
          case "JSON_ARRAYAGG":
            return 484;
          case "JSON_OBJECT":
            return 485;
          case "JSON_OBJECTAGG":
            return 486;
          case "KEY":
            return 487;
          case "KEYS":
            return 488;
          case "LABEL":
            return 489;
          case "LANGUAGE":
            return 490;
          case "LARGE_P":
            return 491;
          case "LAST_P":
            return 492;
          case "LATERAL_P":
            return 493;
          case "LEADING":
            return 494;
          case "LEAKPROOF":
            return 495;
          case "LEAST":
            return 496;
          case "LEFT":
            return 497;
          case "LEVEL":
            return 498;
          case "LIKE":
            return 499;
          case "LIMIT":
            return 500;
          case "LISTEN":
            return 501;
          case "LOAD":
            return 502;
          case "LOCAL":
            return 503;
          case "LOCALTIME":
            return 504;
          case "LOCALTIMESTAMP":
            return 505;
          case "LOCATION":
            return 506;
          case "LOCK_P":
            return 507;
          case "LOCKED":
            return 508;
          case "LOGGED":
            return 509;
          case "MAPPING":
            return 510;
          case "MATCH":
            return 511;
          case "MATCHED":
            return 512;
          case "MATERIALIZED":
            return 513;
          case "MAXVALUE":
            return 514;
          case "MERGE":
            return 515;
          case "METHOD":
            return 516;
          case "MINUTE_P":
            return 517;
          case "MINVALUE":
            return 518;
          case "MODE":
            return 519;
          case "MONTH_P":
            return 520;
          case "MOVE":
            return 521;
          case "NAME_P":
            return 522;
          case "NAMES":
            return 523;
          case "NATIONAL":
            return 524;
          case "NATURAL":
            return 525;
          case "NCHAR":
            return 526;
          case "NEW":
            return 527;
          case "NEXT":
            return 528;
          case "NFC":
            return 529;
          case "NFD":
            return 530;
          case "NFKC":
            return 531;
          case "NFKD":
            return 532;
          case "NO":
            return 533;
          case "NONE":
            return 534;
          case "NORMALIZE":
            return 535;
          case "NORMALIZED":
            return 536;
          case "NOT":
            return 537;
          case "NOTHING":
            return 538;
          case "NOTIFY":
            return 539;
          case "NOTNULL":
            return 540;
          case "NOWAIT":
            return 541;
          case "NULL_P":
            return 542;
          case "NULLIF":
            return 543;
          case "NULLS_P":
            return 544;
          case "NUMERIC":
            return 545;
          case "OBJECT_P":
            return 546;
          case "OF":
            return 547;
          case "OFF":
            return 548;
          case "OFFSET":
            return 549;
          case "OIDS":
            return 550;
          case "OLD":
            return 551;
          case "ON":
            return 552;
          case "ONLY":
            return 553;
          case "OPERATOR":
            return 554;
          case "OPTION":
            return 555;
          case "OPTIONS":
            return 556;
          case "OR":
            return 557;
          case "ORDER":
            return 558;
          case "ORDINALITY":
            return 559;
          case "OTHERS":
            return 560;
          case "OUT_P":
            return 561;
          case "OUTER_P":
            return 562;
          case "OVER":
            return 563;
          case "OVERLAPS":
            return 564;
          case "OVERLAY":
            return 565;
          case "OVERRIDING":
            return 566;
          case "OWNED":
            return 567;
          case "OWNER":
            return 568;
          case "PARALLEL":
            return 569;
          case "PARAMETER":
            return 570;
          case "PARSER":
            return 571;
          case "PARTIAL":
            return 572;
          case "PARTITION":
            return 573;
          case "PASSING":
            return 574;
          case "PASSWORD":
            return 575;
          case "PLACING":
            return 576;
          case "PLANS":
            return 577;
          case "POLICY":
            return 578;
          case "POSITION":
            return 579;
          case "PRECEDING":
            return 580;
          case "PRECISION":
            return 581;
          case "PRESERVE":
            return 582;
          case "PREPARE":
            return 583;
          case "PREPARED":
            return 584;
          case "PRIMARY":
            return 585;
          case "PRIOR":
            return 586;
          case "PRIVILEGES":
            return 587;
          case "PROCEDURAL":
            return 588;
          case "PROCEDURE":
            return 589;
          case "PROCEDURES":
            return 590;
          case "PROGRAM":
            return 591;
          case "PUBLICATION":
            return 592;
          case "QUOTE":
            return 593;
          case "RANGE":
            return 594;
          case "READ":
            return 595;
          case "REAL":
            return 596;
          case "REASSIGN":
            return 597;
          case "RECHECK":
            return 598;
          case "RECURSIVE":
            return 599;
          case "REF_P":
            return 600;
          case "REFERENCES":
            return 601;
          case "REFERENCING":
            return 602;
          case "REFRESH":
            return 603;
          case "REINDEX":
            return 604;
          case "RELATIVE_P":
            return 605;
          case "RELEASE":
            return 606;
          case "RENAME":
            return 607;
          case "REPEATABLE":
            return 608;
          case "REPLACE":
            return 609;
          case "REPLICA":
            return 610;
          case "RESET":
            return 611;
          case "RESTART":
            return 612;
          case "RESTRICT":
            return 613;
          case "RETURN":
            return 614;
          case "RETURNING":
            return 615;
          case "RETURNS":
            return 616;
          case "REVOKE":
            return 617;
          case "RIGHT":
            return 618;
          case "ROLE":
            return 619;
          case "ROLLBACK":
            return 620;
          case "ROLLUP":
            return 621;
          case "ROUTINE":
            return 622;
          case "ROUTINES":
            return 623;
          case "ROW":
            return 624;
          case "ROWS":
            return 625;
          case "RULE":
            return 626;
          case "SAVEPOINT":
            return 627;
          case "SCALAR":
            return 628;
          case "SCHEMA":
            return 629;
          case "SCHEMAS":
            return 630;
          case "SCROLL":
            return 631;
          case "SEARCH":
            return 632;
          case "SECOND_P":
            return 633;
          case "SECURITY":
            return 634;
          case "SELECT":
            return 635;
          case "SEQUENCE":
            return 636;
          case "SEQUENCES":
            return 637;
          case "SERIALIZABLE":
            return 638;
          case "SERVER":
            return 639;
          case "SESSION":
            return 640;
          case "SESSION_USER":
            return 641;
          case "SET":
            return 642;
          case "SETS":
            return 643;
          case "SETOF":
            return 644;
          case "SHARE":
            return 645;
          case "SHOW":
            return 646;
          case "SIMILAR":
            return 647;
          case "SIMPLE":
            return 648;
          case "SKIP":
            return 649;
          case "SMALLINT":
            return 650;
          case "SNAPSHOT":
            return 651;
          case "SOME":
            return 652;
          case "SQL_P":
            return 653;
          case "STABLE":
            return 654;
          case "STANDALONE_P":
            return 655;
          case "START":
            return 656;
          case "STATEMENT":
            return 657;
          case "STATISTICS":
            return 658;
          case "STDIN":
            return 659;
          case "STDOUT":
            return 660;
          case "STORAGE":
            return 661;
          case "STORED":
            return 662;
          case "STRICT_P":
            return 663;
          case "STRIP_P":
            return 664;
          case "SUBSCRIPTION":
            return 665;
          case "SUBSTRING":
            return 666;
          case "SUPPORT":
            return 667;
          case "SYMMETRIC":
            return 668;
          case "SYSID":
            return 669;
          case "SYSTEM_P":
            return 670;
          case "SYSTEM_USER":
            return 671;
          case "TABLE":
            return 672;
          case "TABLES":
            return 673;
          case "TABLESAMPLE":
            return 674;
          case "TABLESPACE":
            return 675;
          case "TEMP":
            return 676;
          case "TEMPLATE":
            return 677;
          case "TEMPORARY":
            return 678;
          case "TEXT_P":
            return 679;
          case "THEN":
            return 680;
          case "TIES":
            return 681;
          case "TIME":
            return 682;
          case "TIMESTAMP":
            return 683;
          case "TO":
            return 684;
          case "TRAILING":
            return 685;
          case "TRANSACTION":
            return 686;
          case "TRANSFORM":
            return 687;
          case "TREAT":
            return 688;
          case "TRIGGER":
            return 689;
          case "TRIM":
            return 690;
          case "TRUE_P":
            return 691;
          case "TRUNCATE":
            return 692;
          case "TRUSTED":
            return 693;
          case "TYPE_P":
            return 694;
          case "TYPES_P":
            return 695;
          case "UESCAPE":
            return 696;
          case "UNBOUNDED":
            return 697;
          case "UNCOMMITTED":
            return 698;
          case "UNENCRYPTED":
            return 699;
          case "UNION":
            return 700;
          case "UNIQUE":
            return 701;
          case "UNKNOWN":
            return 702;
          case "UNLISTEN":
            return 703;
          case "UNLOGGED":
            return 704;
          case "UNTIL":
            return 705;
          case "UPDATE":
            return 706;
          case "USER":
            return 707;
          case "USING":
            return 708;
          case "VACUUM":
            return 709;
          case "VALID":
            return 710;
          case "VALIDATE":
            return 711;
          case "VALIDATOR":
            return 712;
          case "VALUE_P":
            return 713;
          case "VALUES":
            return 714;
          case "VARCHAR":
            return 715;
          case "VARIADIC":
            return 716;
          case "VARYING":
            return 717;
          case "VERBOSE":
            return 718;
          case "VERSION_P":
            return 719;
          case "VIEW":
            return 720;
          case "VIEWS":
            return 721;
          case "VOLATILE":
            return 722;
          case "WHEN":
            return 723;
          case "WHERE":
            return 724;
          case "WHITESPACE_P":
            return 725;
          case "WINDOW":
            return 726;
          case "WITH":
            return 727;
          case "WITHIN":
            return 728;
          case "WITHOUT":
            return 729;
          case "WORK":
            return 730;
          case "WRAPPER":
            return 731;
          case "WRITE":
            return 732;
          case "XML_P":
            return 733;
          case "XMLATTRIBUTES":
            return 734;
          case "XMLCONCAT":
            return 735;
          case "XMLELEMENT":
            return 736;
          case "XMLEXISTS":
            return 737;
          case "XMLFOREST":
            return 738;
          case "XMLNAMESPACES":
            return 739;
          case "XMLPARSE":
            return 740;
          case "XMLPI":
            return 741;
          case "XMLROOT":
            return 742;
          case "XMLSERIALIZE":
            return 743;
          case "XMLTABLE":
            return 744;
          case "YEAR_P":
            return 745;
          case "YES_P":
            return 746;
          case "ZONE":
            return 747;
          case "FORMAT_LA":
            return 748;
          case "NOT_LA":
            return 749;
          case "NULLS_LA":
            return 750;
          case "WITH_LA":
            return 751;
          case "WITHOUT_LA":
            return 752;
          case "MODE_TYPE_NAME":
            return 753;
          case "MODE_PLPGSQL_EXPR":
            return 754;
          case "MODE_PLPGSQL_ASSIGN1":
            return 755;
          case "MODE_PLPGSQL_ASSIGN2":
            return 756;
          case "MODE_PLPGSQL_ASSIGN3":
            return 757;
          case "UMINUS":
            return 758;
          case 0:
            return "NUL";
          case 36:
            return "ASCII_36";
          case 37:
            return "ASCII_37";
          case 40:
            return "ASCII_40";
          case 41:
            return "ASCII_41";
          case 42:
            return "ASCII_42";
          case 43:
            return "ASCII_43";
          case 44:
            return "ASCII_44";
          case 45:
            return "ASCII_45";
          case 46:
            return "ASCII_46";
          case 47:
            return "ASCII_47";
          case 58:
            return "ASCII_58";
          case 59:
            return "ASCII_59";
          case 60:
            return "ASCII_60";
          case 61:
            return "ASCII_61";
          case 62:
            return "ASCII_62";
          case 63:
            return "ASCII_63";
          case 91:
            return "ASCII_91";
          case 92:
            return "ASCII_92";
          case 93:
            return "ASCII_93";
          case 94:
            return "ASCII_94";
          case 258:
            return "IDENT";
          case 259:
            return "UIDENT";
          case 260:
            return "FCONST";
          case 261:
            return "SCONST";
          case 262:
            return "USCONST";
          case 263:
            return "BCONST";
          case 264:
            return "XCONST";
          case 265:
            return "Op";
          case 266:
            return "ICONST";
          case 267:
            return "PARAM";
          case 268:
            return "TYPECAST";
          case 269:
            return "DOT_DOT";
          case 270:
            return "COLON_EQUALS";
          case 271:
            return "EQUALS_GREATER";
          case 272:
            return "LESS_EQUALS";
          case 273:
            return "GREATER_EQUALS";
          case 274:
            return "NOT_EQUALS";
          case 275:
            return "SQL_COMMENT";
          case 276:
            return "C_COMMENT";
          case 277:
            return "ABORT_P";
          case 278:
            return "ABSENT";
          case 279:
            return "ABSOLUTE_P";
          case 280:
            return "ACCESS";
          case 281:
            return "ACTION";
          case 282:
            return "ADD_P";
          case 283:
            return "ADMIN";
          case 284:
            return "AFTER";
          case 285:
            return "AGGREGATE";
          case 286:
            return "ALL";
          case 287:
            return "ALSO";
          case 288:
            return "ALTER";
          case 289:
            return "ALWAYS";
          case 290:
            return "ANALYSE";
          case 291:
            return "ANALYZE";
          case 292:
            return "AND";
          case 293:
            return "ANY";
          case 294:
            return "ARRAY";
          case 295:
            return "AS";
          case 296:
            return "ASC";
          case 297:
            return "ASENSITIVE";
          case 298:
            return "ASSERTION";
          case 299:
            return "ASSIGNMENT";
          case 300:
            return "ASYMMETRIC";
          case 301:
            return "ATOMIC";
          case 302:
            return "AT";
          case 303:
            return "ATTACH";
          case 304:
            return "ATTRIBUTE";
          case 305:
            return "AUTHORIZATION";
          case 306:
            return "BACKWARD";
          case 307:
            return "BEFORE";
          case 308:
            return "BEGIN_P";
          case 309:
            return "BETWEEN";
          case 310:
            return "BIGINT";
          case 311:
            return "BINARY";
          case 312:
            return "BIT";
          case 313:
            return "BOOLEAN_P";
          case 314:
            return "BOTH";
          case 315:
            return "BREADTH";
          case 316:
            return "BY";
          case 317:
            return "CACHE";
          case 318:
            return "CALL";
          case 319:
            return "CALLED";
          case 320:
            return "CASCADE";
          case 321:
            return "CASCADED";
          case 322:
            return "CASE";
          case 323:
            return "CAST";
          case 324:
            return "CATALOG_P";
          case 325:
            return "CHAIN";
          case 326:
            return "CHAR_P";
          case 327:
            return "CHARACTER";
          case 328:
            return "CHARACTERISTICS";
          case 329:
            return "CHECK";
          case 330:
            return "CHECKPOINT";
          case 331:
            return "CLASS";
          case 332:
            return "CLOSE";
          case 333:
            return "CLUSTER";
          case 334:
            return "COALESCE";
          case 335:
            return "COLLATE";
          case 336:
            return "COLLATION";
          case 337:
            return "COLUMN";
          case 338:
            return "COLUMNS";
          case 339:
            return "COMMENT";
          case 340:
            return "COMMENTS";
          case 341:
            return "COMMIT";
          case 342:
            return "COMMITTED";
          case 343:
            return "COMPRESSION";
          case 344:
            return "CONCURRENTLY";
          case 345:
            return "CONFIGURATION";
          case 346:
            return "CONFLICT";
          case 347:
            return "CONNECTION";
          case 348:
            return "CONSTRAINT";
          case 349:
            return "CONSTRAINTS";
          case 350:
            return "CONTENT_P";
          case 351:
            return "CONTINUE_P";
          case 352:
            return "CONVERSION_P";
          case 353:
            return "COPY";
          case 354:
            return "COST";
          case 355:
            return "CREATE";
          case 356:
            return "CROSS";
          case 357:
            return "CSV";
          case 358:
            return "CUBE";
          case 359:
            return "CURRENT_P";
          case 360:
            return "CURRENT_CATALOG";
          case 361:
            return "CURRENT_DATE";
          case 362:
            return "CURRENT_ROLE";
          case 363:
            return "CURRENT_SCHEMA";
          case 364:
            return "CURRENT_TIME";
          case 365:
            return "CURRENT_TIMESTAMP";
          case 366:
            return "CURRENT_USER";
          case 367:
            return "CURSOR";
          case 368:
            return "CYCLE";
          case 369:
            return "DATA_P";
          case 370:
            return "DATABASE";
          case 371:
            return "DAY_P";
          case 372:
            return "DEALLOCATE";
          case 373:
            return "DEC";
          case 374:
            return "DECIMAL_P";
          case 375:
            return "DECLARE";
          case 376:
            return "DEFAULT";
          case 377:
            return "DEFAULTS";
          case 378:
            return "DEFERRABLE";
          case 379:
            return "DEFERRED";
          case 380:
            return "DEFINER";
          case 381:
            return "DELETE_P";
          case 382:
            return "DELIMITER";
          case 383:
            return "DELIMITERS";
          case 384:
            return "DEPENDS";
          case 385:
            return "DEPTH";
          case 386:
            return "DESC";
          case 387:
            return "DETACH";
          case 388:
            return "DICTIONARY";
          case 389:
            return "DISABLE_P";
          case 390:
            return "DISCARD";
          case 391:
            return "DISTINCT";
          case 392:
            return "DO";
          case 393:
            return "DOCUMENT_P";
          case 394:
            return "DOMAIN_P";
          case 395:
            return "DOUBLE_P";
          case 396:
            return "DROP";
          case 397:
            return "EACH";
          case 398:
            return "ELSE";
          case 399:
            return "ENABLE_P";
          case 400:
            return "ENCODING";
          case 401:
            return "ENCRYPTED";
          case 402:
            return "END_P";
          case 403:
            return "ENUM_P";
          case 404:
            return "ESCAPE";
          case 405:
            return "EVENT";
          case 406:
            return "EXCEPT";
          case 407:
            return "EXCLUDE";
          case 408:
            return "EXCLUDING";
          case 409:
            return "EXCLUSIVE";
          case 410:
            return "EXECUTE";
          case 411:
            return "EXISTS";
          case 412:
            return "EXPLAIN";
          case 413:
            return "EXPRESSION";
          case 414:
            return "EXTENSION";
          case 415:
            return "EXTERNAL";
          case 416:
            return "EXTRACT";
          case 417:
            return "FALSE_P";
          case 418:
            return "FAMILY";
          case 419:
            return "FETCH";
          case 420:
            return "FILTER";
          case 421:
            return "FINALIZE";
          case 422:
            return "FIRST_P";
          case 423:
            return "FLOAT_P";
          case 424:
            return "FOLLOWING";
          case 425:
            return "FOR";
          case 426:
            return "FORCE";
          case 427:
            return "FOREIGN";
          case 428:
            return "FORMAT";
          case 429:
            return "FORWARD";
          case 430:
            return "FREEZE";
          case 431:
            return "FROM";
          case 432:
            return "FULL";
          case 433:
            return "FUNCTION";
          case 434:
            return "FUNCTIONS";
          case 435:
            return "GENERATED";
          case 436:
            return "GLOBAL";
          case 437:
            return "GRANT";
          case 438:
            return "GRANTED";
          case 439:
            return "GREATEST";
          case 440:
            return "GROUP_P";
          case 441:
            return "GROUPING";
          case 442:
            return "GROUPS";
          case 443:
            return "HANDLER";
          case 444:
            return "HAVING";
          case 445:
            return "HEADER_P";
          case 446:
            return "HOLD";
          case 447:
            return "HOUR_P";
          case 448:
            return "IDENTITY_P";
          case 449:
            return "IF_P";
          case 450:
            return "ILIKE";
          case 451:
            return "IMMEDIATE";
          case 452:
            return "IMMUTABLE";
          case 453:
            return "IMPLICIT_P";
          case 454:
            return "IMPORT_P";
          case 455:
            return "IN_P";
          case 456:
            return "INCLUDE";
          case 457:
            return "INCLUDING";
          case 458:
            return "INCREMENT";
          case 459:
            return "INDENT";
          case 460:
            return "INDEX";
          case 461:
            return "INDEXES";
          case 462:
            return "INHERIT";
          case 463:
            return "INHERITS";
          case 464:
            return "INITIALLY";
          case 465:
            return "INLINE_P";
          case 466:
            return "INNER_P";
          case 467:
            return "INOUT";
          case 468:
            return "INPUT_P";
          case 469:
            return "INSENSITIVE";
          case 470:
            return "INSERT";
          case 471:
            return "INSTEAD";
          case 472:
            return "INT_P";
          case 473:
            return "INTEGER";
          case 474:
            return "INTERSECT";
          case 475:
            return "INTERVAL";
          case 476:
            return "INTO";
          case 477:
            return "INVOKER";
          case 478:
            return "IS";
          case 479:
            return "ISNULL";
          case 480:
            return "ISOLATION";
          case 481:
            return "JOIN";
          case 482:
            return "JSON";
          case 483:
            return "JSON_ARRAY";
          case 484:
            return "JSON_ARRAYAGG";
          case 485:
            return "JSON_OBJECT";
          case 486:
            return "JSON_OBJECTAGG";
          case 487:
            return "KEY";
          case 488:
            return "KEYS";
          case 489:
            return "LABEL";
          case 490:
            return "LANGUAGE";
          case 491:
            return "LARGE_P";
          case 492:
            return "LAST_P";
          case 493:
            return "LATERAL_P";
          case 494:
            return "LEADING";
          case 495:
            return "LEAKPROOF";
          case 496:
            return "LEAST";
          case 497:
            return "LEFT";
          case 498:
            return "LEVEL";
          case 499:
            return "LIKE";
          case 500:
            return "LIMIT";
          case 501:
            return "LISTEN";
          case 502:
            return "LOAD";
          case 503:
            return "LOCAL";
          case 504:
            return "LOCALTIME";
          case 505:
            return "LOCALTIMESTAMP";
          case 506:
            return "LOCATION";
          case 507:
            return "LOCK_P";
          case 508:
            return "LOCKED";
          case 509:
            return "LOGGED";
          case 510:
            return "MAPPING";
          case 511:
            return "MATCH";
          case 512:
            return "MATCHED";
          case 513:
            return "MATERIALIZED";
          case 514:
            return "MAXVALUE";
          case 515:
            return "MERGE";
          case 516:
            return "METHOD";
          case 517:
            return "MINUTE_P";
          case 518:
            return "MINVALUE";
          case 519:
            return "MODE";
          case 520:
            return "MONTH_P";
          case 521:
            return "MOVE";
          case 522:
            return "NAME_P";
          case 523:
            return "NAMES";
          case 524:
            return "NATIONAL";
          case 525:
            return "NATURAL";
          case 526:
            return "NCHAR";
          case 527:
            return "NEW";
          case 528:
            return "NEXT";
          case 529:
            return "NFC";
          case 530:
            return "NFD";
          case 531:
            return "NFKC";
          case 532:
            return "NFKD";
          case 533:
            return "NO";
          case 534:
            return "NONE";
          case 535:
            return "NORMALIZE";
          case 536:
            return "NORMALIZED";
          case 537:
            return "NOT";
          case 538:
            return "NOTHING";
          case 539:
            return "NOTIFY";
          case 540:
            return "NOTNULL";
          case 541:
            return "NOWAIT";
          case 542:
            return "NULL_P";
          case 543:
            return "NULLIF";
          case 544:
            return "NULLS_P";
          case 545:
            return "NUMERIC";
          case 546:
            return "OBJECT_P";
          case 547:
            return "OF";
          case 548:
            return "OFF";
          case 549:
            return "OFFSET";
          case 550:
            return "OIDS";
          case 551:
            return "OLD";
          case 552:
            return "ON";
          case 553:
            return "ONLY";
          case 554:
            return "OPERATOR";
          case 555:
            return "OPTION";
          case 556:
            return "OPTIONS";
          case 557:
            return "OR";
          case 558:
            return "ORDER";
          case 559:
            return "ORDINALITY";
          case 560:
            return "OTHERS";
          case 561:
            return "OUT_P";
          case 562:
            return "OUTER_P";
          case 563:
            return "OVER";
          case 564:
            return "OVERLAPS";
          case 565:
            return "OVERLAY";
          case 566:
            return "OVERRIDING";
          case 567:
            return "OWNED";
          case 568:
            return "OWNER";
          case 569:
            return "PARALLEL";
          case 570:
            return "PARAMETER";
          case 571:
            return "PARSER";
          case 572:
            return "PARTIAL";
          case 573:
            return "PARTITION";
          case 574:
            return "PASSING";
          case 575:
            return "PASSWORD";
          case 576:
            return "PLACING";
          case 577:
            return "PLANS";
          case 578:
            return "POLICY";
          case 579:
            return "POSITION";
          case 580:
            return "PRECEDING";
          case 581:
            return "PRECISION";
          case 582:
            return "PRESERVE";
          case 583:
            return "PREPARE";
          case 584:
            return "PREPARED";
          case 585:
            return "PRIMARY";
          case 586:
            return "PRIOR";
          case 587:
            return "PRIVILEGES";
          case 588:
            return "PROCEDURAL";
          case 589:
            return "PROCEDURE";
          case 590:
            return "PROCEDURES";
          case 591:
            return "PROGRAM";
          case 592:
            return "PUBLICATION";
          case 593:
            return "QUOTE";
          case 594:
            return "RANGE";
          case 595:
            return "READ";
          case 596:
            return "REAL";
          case 597:
            return "REASSIGN";
          case 598:
            return "RECHECK";
          case 599:
            return "RECURSIVE";
          case 600:
            return "REF_P";
          case 601:
            return "REFERENCES";
          case 602:
            return "REFERENCING";
          case 603:
            return "REFRESH";
          case 604:
            return "REINDEX";
          case 605:
            return "RELATIVE_P";
          case 606:
            return "RELEASE";
          case 607:
            return "RENAME";
          case 608:
            return "REPEATABLE";
          case 609:
            return "REPLACE";
          case 610:
            return "REPLICA";
          case 611:
            return "RESET";
          case 612:
            return "RESTART";
          case 613:
            return "RESTRICT";
          case 614:
            return "RETURN";
          case 615:
            return "RETURNING";
          case 616:
            return "RETURNS";
          case 617:
            return "REVOKE";
          case 618:
            return "RIGHT";
          case 619:
            return "ROLE";
          case 620:
            return "ROLLBACK";
          case 621:
            return "ROLLUP";
          case 622:
            return "ROUTINE";
          case 623:
            return "ROUTINES";
          case 624:
            return "ROW";
          case 625:
            return "ROWS";
          case 626:
            return "RULE";
          case 627:
            return "SAVEPOINT";
          case 628:
            return "SCALAR";
          case 629:
            return "SCHEMA";
          case 630:
            return "SCHEMAS";
          case 631:
            return "SCROLL";
          case 632:
            return "SEARCH";
          case 633:
            return "SECOND_P";
          case 634:
            return "SECURITY";
          case 635:
            return "SELECT";
          case 636:
            return "SEQUENCE";
          case 637:
            return "SEQUENCES";
          case 638:
            return "SERIALIZABLE";
          case 639:
            return "SERVER";
          case 640:
            return "SESSION";
          case 641:
            return "SESSION_USER";
          case 642:
            return "SET";
          case 643:
            return "SETS";
          case 644:
            return "SETOF";
          case 645:
            return "SHARE";
          case 646:
            return "SHOW";
          case 647:
            return "SIMILAR";
          case 648:
            return "SIMPLE";
          case 649:
            return "SKIP";
          case 650:
            return "SMALLINT";
          case 651:
            return "SNAPSHOT";
          case 652:
            return "SOME";
          case 653:
            return "SQL_P";
          case 654:
            return "STABLE";
          case 655:
            return "STANDALONE_P";
          case 656:
            return "START";
          case 657:
            return "STATEMENT";
          case 658:
            return "STATISTICS";
          case 659:
            return "STDIN";
          case 660:
            return "STDOUT";
          case 661:
            return "STORAGE";
          case 662:
            return "STORED";
          case 663:
            return "STRICT_P";
          case 664:
            return "STRIP_P";
          case 665:
            return "SUBSCRIPTION";
          case 666:
            return "SUBSTRING";
          case 667:
            return "SUPPORT";
          case 668:
            return "SYMMETRIC";
          case 669:
            return "SYSID";
          case 670:
            return "SYSTEM_P";
          case 671:
            return "SYSTEM_USER";
          case 672:
            return "TABLE";
          case 673:
            return "TABLES";
          case 674:
            return "TABLESAMPLE";
          case 675:
            return "TABLESPACE";
          case 676:
            return "TEMP";
          case 677:
            return "TEMPLATE";
          case 678:
            return "TEMPORARY";
          case 679:
            return "TEXT_P";
          case 680:
            return "THEN";
          case 681:
            return "TIES";
          case 682:
            return "TIME";
          case 683:
            return "TIMESTAMP";
          case 684:
            return "TO";
          case 685:
            return "TRAILING";
          case 686:
            return "TRANSACTION";
          case 687:
            return "TRANSFORM";
          case 688:
            return "TREAT";
          case 689:
            return "TRIGGER";
          case 690:
            return "TRIM";
          case 691:
            return "TRUE_P";
          case 692:
            return "TRUNCATE";
          case 693:
            return "TRUSTED";
          case 694:
            return "TYPE_P";
          case 695:
            return "TYPES_P";
          case 696:
            return "UESCAPE";
          case 697:
            return "UNBOUNDED";
          case 698:
            return "UNCOMMITTED";
          case 699:
            return "UNENCRYPTED";
          case 700:
            return "UNION";
          case 701:
            return "UNIQUE";
          case 702:
            return "UNKNOWN";
          case 703:
            return "UNLISTEN";
          case 704:
            return "UNLOGGED";
          case 705:
            return "UNTIL";
          case 706:
            return "UPDATE";
          case 707:
            return "USER";
          case 708:
            return "USING";
          case 709:
            return "VACUUM";
          case 710:
            return "VALID";
          case 711:
            return "VALIDATE";
          case 712:
            return "VALIDATOR";
          case 713:
            return "VALUE_P";
          case 714:
            return "VALUES";
          case 715:
            return "VARCHAR";
          case 716:
            return "VARIADIC";
          case 717:
            return "VARYING";
          case 718:
            return "VERBOSE";
          case 719:
            return "VERSION_P";
          case 720:
            return "VIEW";
          case 721:
            return "VIEWS";
          case 722:
            return "VOLATILE";
          case 723:
            return "WHEN";
          case 724:
            return "WHERE";
          case 725:
            return "WHITESPACE_P";
          case 726:
            return "WINDOW";
          case 727:
            return "WITH";
          case 728:
            return "WITHIN";
          case 729:
            return "WITHOUT";
          case 730:
            return "WORK";
          case 731:
            return "WRAPPER";
          case 732:
            return "WRITE";
          case 733:
            return "XML_P";
          case 734:
            return "XMLATTRIBUTES";
          case 735:
            return "XMLCONCAT";
          case 736:
            return "XMLELEMENT";
          case 737:
            return "XMLEXISTS";
          case 738:
            return "XMLFOREST";
          case 739:
            return "XMLNAMESPACES";
          case 740:
            return "XMLPARSE";
          case 741:
            return "XMLPI";
          case 742:
            return "XMLROOT";
          case 743:
            return "XMLSERIALIZE";
          case 744:
            return "XMLTABLE";
          case 745:
            return "YEAR_P";
          case 746:
            return "YES_P";
          case 747:
            return "ZONE";
          case 748:
            return "FORMAT_LA";
          case 749:
            return "NOT_LA";
          case 750:
            return "NULLS_LA";
          case 751:
            return "WITH_LA";
          case 752:
            return "WITHOUT_LA";
          case 753:
            return "MODE_TYPE_NAME";
          case 754:
            return "MODE_PLPGSQL_EXPR";
          case 755:
            return "MODE_PLPGSQL_ASSIGN1";
          case 756:
            return "MODE_PLPGSQL_ASSIGN2";
          case 757:
            return "MODE_PLPGSQL_ASSIGN3";
          case 758:
            return "UMINUS";
          default:
            throw new Error("Key not recognized in enum Token");
        }
      }
    default:
      throw new Error("Enum type not recognized");
  }
};",
    "file": "utils.ts",
  },
  {
    "code": "/**
* This file was automatically generated by pg-proto-parser@latest.
* DO NOT MODIFY IT BY HAND. Instead, modify the source proto file,
* and run the pg-proto-parser generate command to regenerate this file.
*/
import { OverridingKind, QuerySource, SortByDir, SortByNulls, SetQuantifier, A_Expr_Kind, RoleSpecType, TableLikeOption, DefElemAction, PartitionStrategy, PartitionRangeDatumKind, RTEKind, WCOKind, GroupingSetKind, CTEMaterialize, SetOperation, ObjectType, DropBehavior, AlterTableType, GrantTargetType, VariableSetKind, ConstrType, ImportForeignSchemaType, RoleStmtType, FetchDirection, FunctionParameterMode, TransactionStmtKind, ViewCheckOption, DiscardMode, ReindexObjectType, AlterTSConfigType, PublicationObjSpecType, AlterPublicationAction, AlterSubscriptionType, OnCommitAction, ParamKind, CoercionContext, CoercionForm, BoolExprType, SubLinkType, RowCompareType, MinMaxOp, SQLValueFunctionOp, XmlExprOp, XmlOptionType, JsonEncoding, JsonFormatType, JsonConstructorType, JsonValueType, NullTestType, BoolTestType, CmdType, JoinType, AggStrategy, AggSplit, SetOpCmd, SetOpStrategy, OnConflictAction, LimitOption, LockClauseStrength, LockWaitPolicy, LockTupleMode, KeywordKind, Token } from "./enums";
export type Node = ParseResult | ScanResult | Integer | Float | Boolean | String | BitString | List | OidList | IntList | A_Const | Alias | RangeVar | TableFunc | IntoClause | Var | Param | Aggref | GroupingFunc | WindowFunc | SubscriptingRef | FuncExpr | NamedArgExpr | OpExpr | DistinctExpr | NullIfExpr | ScalarArrayOpExpr | BoolExpr | SubLink | SubPlan | AlternativeSubPlan | FieldSelect | FieldStore | RelabelType | CoerceViaIO | ArrayCoerceExpr | ConvertRowtypeExpr | CollateExpr | CaseExpr | CaseWhen | CaseTestExpr | ArrayExpr | RowExpr | RowCompareExpr | CoalesceExpr | MinMaxExpr | SQLValueFunction | XmlExpr | JsonFormat | JsonReturning | JsonValueExpr | JsonConstructorExpr | JsonIsPredicate | NullTest | BooleanTest | CoerceToDomain | CoerceToDomainValue | SetToDefault | CurrentOfExpr | NextValueExpr | InferenceElem | TargetEntry | RangeTblRef | JoinExpr | FromExpr | OnConflictExpr | Query | TypeName | ColumnRef | ParamRef | A_Expr | TypeCast | CollateClause | RoleSpec | FuncCall | A_Star | A_Indices | A_Indirection | A_ArrayExpr | ResTarget | MultiAssignRef | SortBy | WindowDef | RangeSubselect | RangeFunction | RangeTableFunc | RangeTableFuncCol | RangeTableSample | ColumnDef | TableLikeClause | IndexElem | DefElem | LockingClause | XmlSerialize | PartitionElem | PartitionSpec | PartitionBoundSpec | PartitionRangeDatum | PartitionCmd | RangeTblEntry | RTEPermissionInfo | RangeTblFunction | TableSampleClause | WithCheckOption | SortGroupClause | GroupingSet | WindowClause | RowMarkClause | WithClause | InferClause | OnConflictClause | CTESearchClause | CTECycleClause | CommonTableExpr | MergeWhenClause | MergeAction | TriggerTransition | JsonOutput | JsonKeyValue | JsonObjectConstructor | JsonArrayConstructor | JsonArrayQueryConstructor | JsonAggConstructor | JsonObjectAgg | JsonArrayAgg | RawStmt | InsertStmt | DeleteStmt | UpdateStmt | MergeStmt | SelectStmt | SetOperationStmt | ReturnStmt | PLAssignStmt | CreateSchemaStmt | AlterTableStmt | ReplicaIdentityStmt | AlterTableCmd | AlterCollationStmt | AlterDomainStmt | GrantStmt | ObjectWithArgs | AccessPriv | GrantRoleStmt | AlterDefaultPrivilegesStmt | CopyStmt | VariableSetStmt | VariableShowStmt | CreateStmt | Constraint | CreateTableSpaceStmt | DropTableSpaceStmt | AlterTableSpaceOptionsStmt | AlterTableMoveAllStmt | CreateExtensionStmt | AlterExtensionStmt | AlterExtensionContentsStmt | CreateFdwStmt | AlterFdwStmt | CreateForeignServerStmt | AlterForeignServerStmt | CreateForeignTableStmt | CreateUserMappingStmt | AlterUserMappingStmt | DropUserMappingStmt | ImportForeignSchemaStmt | CreatePolicyStmt | AlterPolicyStmt | CreateAmStmt | CreateTrigStmt | CreateEventTrigStmt | AlterEventTrigStmt | CreatePLangStmt | CreateRoleStmt | AlterRoleStmt | AlterRoleSetStmt | DropRoleStmt | CreateSeqStmt | AlterSeqStmt | DefineStmt | CreateDomainStmt | CreateOpClassStmt | CreateOpClassItem | CreateOpFamilyStmt | AlterOpFamilyStmt | DropStmt | TruncateStmt | CommentStmt | SecLabelStmt | DeclareCursorStmt | ClosePortalStmt | FetchStmt | IndexStmt | CreateStatsStmt | StatsElem | AlterStatsStmt | CreateFunctionStmt | FunctionParameter | AlterFunctionStmt | DoStmt | InlineCodeBlock | CallStmt | CallContext | RenameStmt | AlterObjectDependsStmt | AlterObjectSchemaStmt | AlterOwnerStmt | AlterOperatorStmt | AlterTypeStmt | RuleStmt | NotifyStmt | ListenStmt | UnlistenStmt | TransactionStmt | CompositeTypeStmt | CreateEnumStmt | CreateRangeStmt | AlterEnumStmt | ViewStmt | LoadStmt | CreatedbStmt | AlterDatabaseStmt | AlterDatabaseRefreshCollStmt | AlterDatabaseSetStmt | DropdbStmt | AlterSystemStmt | ClusterStmt | VacuumStmt | VacuumRelation | ExplainStmt | CreateTableAsStmt | RefreshMatViewStmt | CheckPointStmt | DiscardStmt | LockStmt | ConstraintsSetStmt | ReindexStmt | CreateConversionStmt | CreateCastStmt | CreateTransformStmt | PrepareStmt | ExecuteStmt | DeallocateStmt | DropOwnedStmt | ReassignOwnedStmt | AlterTSDictionaryStmt | AlterTSConfigurationStmt | PublicationTable | PublicationObjSpec | CreatePublicationStmt | AlterPublicationStmt | CreateSubscriptionStmt | AlterSubscriptionStmt | DropSubscriptionStmt | ScanToken;
export interface ParseResult {
  ParseResult: {
    version?: number;
    stmts?: RawStmt[];
  };
}
export interface ScanResult {
  ScanResult: {
    version?: number;
    tokens?: ScanToken[];
  };
}
export interface Integer {
  ival?: number;
}
export interface Float {
  fval?: string;
}
export interface Boolean {
  boolval?: boolean;
}
export interface String {
  sval?: string;
}
export interface BitString {
  bsval?: string;
}
export interface List {
  items?: Node[];
}
export interface OidList {
  items?: Node[];
}
export interface IntList {
  items?: Node[];
}
export interface A_Const {
  ival?: Integer;
  fval?: Float;
  boolval?: Boolean;
  sval?: String;
  bsval?: BitString;
  isnull?: boolean;
  location?: number;
}
export interface Alias {
  aliasname?: string;
  colnames?: Node[];
}
export interface RangeVar {
  catalogname?: string;
  schemaname?: string;
  relname?: string;
  inh?: boolean;
  relpersistence?: string;
  alias?: Alias;
  location?: number;
}
export interface TableFunc {
  ns_uris?: Node[];
  ns_names?: Node[];
  docexpr?: Node;
  rowexpr?: Node;
  colnames?: Node[];
  coltypes?: Node[];
  coltypmods?: Node[];
  colcollations?: Node[];
  colexprs?: Node[];
  coldefexprs?: Node[];
  notnulls?: bigint[];
  ordinalitycol?: number;
  location?: number;
}
export interface IntoClause {
  rel?: RangeVar;
  colNames?: Node[];
  accessMethod?: string;
  options?: Node[];
  onCommit?: OnCommitAction;
  tableSpaceName?: string;
  viewQuery?: Node;
  skipData?: boolean;
}
export interface Var {
  xpr?: Node;
  varno?: number;
  varattno?: number;
  vartype?: number;
  vartypmod?: number;
  varcollid?: number;
  varnullingrels?: bigint[];
  varlevelsup?: number;
  location?: number;
}
export interface Param {
  xpr?: Node;
  paramkind?: ParamKind;
  paramid?: number;
  paramtype?: number;
  paramtypmod?: number;
  paramcollid?: number;
  location?: number;
}
export interface Aggref {
  xpr?: Node;
  aggfnoid?: number;
  aggtype?: number;
  aggcollid?: number;
  inputcollid?: number;
  aggargtypes?: Node[];
  aggdirectargs?: Node[];
  args?: Node[];
  aggorder?: Node[];
  aggdistinct?: Node[];
  aggfilter?: Node;
  aggstar?: boolean;
  aggvariadic?: boolean;
  aggkind?: string;
  agglevelsup?: number;
  aggsplit?: AggSplit;
  aggno?: number;
  aggtransno?: number;
  location?: number;
}
export interface GroupingFunc {
  xpr?: Node;
  args?: Node[];
  refs?: Node[];
  agglevelsup?: number;
  location?: number;
}
export interface WindowFunc {
  xpr?: Node;
  winfnoid?: number;
  wintype?: number;
  wincollid?: number;
  inputcollid?: number;
  args?: Node[];
  aggfilter?: Node;
  winref?: number;
  winstar?: boolean;
  winagg?: boolean;
  location?: number;
}
export interface SubscriptingRef {
  xpr?: Node;
  refcontainertype?: number;
  refelemtype?: number;
  refrestype?: number;
  reftypmod?: number;
  refcollid?: number;
  refupperindexpr?: Node[];
  reflowerindexpr?: Node[];
  refexpr?: Node;
  refassgnexpr?: Node;
}
export interface FuncExpr {
  xpr?: Node;
  funcid?: number;
  funcresulttype?: number;
  funcretset?: boolean;
  funcvariadic?: boolean;
  funcformat?: CoercionForm;
  funccollid?: number;
  inputcollid?: number;
  args?: Node[];
  location?: number;
}
export interface NamedArgExpr {
  xpr?: Node;
  arg?: Node;
  name?: string;
  argnumber?: number;
  location?: number;
}
export interface OpExpr {
  xpr?: Node;
  opno?: number;
  opresulttype?: number;
  opretset?: boolean;
  opcollid?: number;
  inputcollid?: number;
  args?: Node[];
  location?: number;
}
export interface DistinctExpr {
  xpr?: Node;
  opno?: number;
  opresulttype?: number;
  opretset?: boolean;
  opcollid?: number;
  inputcollid?: number;
  args?: Node[];
  location?: number;
}
export interface NullIfExpr {
  xpr?: Node;
  opno?: number;
  opresulttype?: number;
  opretset?: boolean;
  opcollid?: number;
  inputcollid?: number;
  args?: Node[];
  location?: number;
}
export interface ScalarArrayOpExpr {
  xpr?: Node;
  opno?: number;
  useOr?: boolean;
  inputcollid?: number;
  args?: Node[];
  location?: number;
}
export interface BoolExpr {
  xpr?: Node;
  boolop?: BoolExprType;
  args?: Node[];
  location?: number;
}
export interface SubLink {
  xpr?: Node;
  subLinkType?: SubLinkType;
  subLinkId?: number;
  testexpr?: Node;
  operName?: Node[];
  subselect?: Node;
  location?: number;
}
export interface SubPlan {
  xpr?: Node;
  subLinkType?: SubLinkType;
  testexpr?: Node;
  paramIds?: Node[];
  plan_id?: number;
  plan_name?: string;
  firstColType?: number;
  firstColTypmod?: number;
  firstColCollation?: number;
  useHashTable?: boolean;
  unknownEqFalse?: boolean;
  parallel_safe?: boolean;
  setParam?: Node[];
  parParam?: Node[];
  args?: Node[];
  startup_cost?: number;
  per_call_cost?: number;
}
export interface AlternativeSubPlan {
  xpr?: Node;
  subplans?: Node[];
}
export interface FieldSelect {
  xpr?: Node;
  arg?: Node;
  fieldnum?: number;
  resulttype?: number;
  resulttypmod?: number;
  resultcollid?: number;
}
export interface FieldStore {
  xpr?: Node;
  arg?: Node;
  newvals?: Node[];
  fieldnums?: Node[];
  resulttype?: number;
}
export interface RelabelType {
  xpr?: Node;
  arg?: Node;
  resulttype?: number;
  resulttypmod?: number;
  resultcollid?: number;
  relabelformat?: CoercionForm;
  location?: number;
}
export interface CoerceViaIO {
  xpr?: Node;
  arg?: Node;
  resulttype?: number;
  resultcollid?: number;
  coerceformat?: CoercionForm;
  location?: number;
}
export interface ArrayCoerceExpr {
  xpr?: Node;
  arg?: Node;
  elemexpr?: Node;
  resulttype?: number;
  resulttypmod?: number;
  resultcollid?: number;
  coerceformat?: CoercionForm;
  location?: number;
}
export interface ConvertRowtypeExpr {
  xpr?: Node;
  arg?: Node;
  resulttype?: number;
  convertformat?: CoercionForm;
  location?: number;
}
export interface CollateExpr {
  xpr?: Node;
  arg?: Node;
  collOid?: number;
  location?: number;
}
export interface CaseExpr {
  xpr?: Node;
  casetype?: number;
  casecollid?: number;
  arg?: Node;
  args?: Node[];
  defresult?: Node;
  location?: number;
}
export interface CaseWhen {
  xpr?: Node;
  expr?: Node;
  result?: Node;
  location?: number;
}
export interface CaseTestExpr {
  xpr?: Node;
  typeId?: number;
  typeMod?: number;
  collation?: number;
}
export interface ArrayExpr {
  xpr?: Node;
  array_typeid?: number;
  array_collid?: number;
  element_typeid?: number;
  elements?: Node[];
  multidims?: boolean;
  location?: number;
}
export interface RowExpr {
  xpr?: Node;
  args?: Node[];
  row_typeid?: number;
  row_format?: CoercionForm;
  colnames?: Node[];
  location?: number;
}
export interface RowCompareExpr {
  xpr?: Node;
  rctype?: RowCompareType;
  opnos?: Node[];
  opfamilies?: Node[];
  inputcollids?: Node[];
  largs?: Node[];
  rargs?: Node[];
}
export interface CoalesceExpr {
  xpr?: Node;
  coalescetype?: number;
  coalescecollid?: number;
  args?: Node[];
  location?: number;
}
export interface MinMaxExpr {
  xpr?: Node;
  minmaxtype?: number;
  minmaxcollid?: number;
  inputcollid?: number;
  op?: MinMaxOp;
  args?: Node[];
  location?: number;
}
export interface SQLValueFunction {
  xpr?: Node;
  op?: SQLValueFunctionOp;
  type?: number;
  typmod?: number;
  location?: number;
}
export interface XmlExpr {
  xpr?: Node;
  op?: XmlExprOp;
  name?: string;
  named_args?: Node[];
  arg_names?: Node[];
  args?: Node[];
  xmloption?: XmlOptionType;
  indent?: boolean;
  type?: number;
  typmod?: number;
  location?: number;
}
export interface JsonFormat {
  format_type?: JsonFormatType;
  encoding?: JsonEncoding;
  location?: number;
}
export interface JsonReturning {
  format?: JsonFormat;
  typid?: number;
  typmod?: number;
}
export interface JsonValueExpr {
  raw_expr?: Node;
  formatted_expr?: Node;
  format?: JsonFormat;
}
export interface JsonConstructorExpr {
  xpr?: Node;
  type?: JsonConstructorType;
  args?: Node[];
  func?: Node;
  coercion?: Node;
  returning?: JsonReturning;
  absent_on_null?: boolean;
  unique?: boolean;
  location?: number;
}
export interface JsonIsPredicate {
  expr?: Node;
  format?: JsonFormat;
  item_type?: JsonValueType;
  unique_keys?: boolean;
  location?: number;
}
export interface NullTest {
  xpr?: Node;
  arg?: Node;
  nulltesttype?: NullTestType;
  argisrow?: boolean;
  location?: number;
}
export interface BooleanTest {
  xpr?: Node;
  arg?: Node;
  booltesttype?: BoolTestType;
  location?: number;
}
export interface CoerceToDomain {
  xpr?: Node;
  arg?: Node;
  resulttype?: number;
  resulttypmod?: number;
  resultcollid?: number;
  coercionformat?: CoercionForm;
  location?: number;
}
export interface CoerceToDomainValue {
  xpr?: Node;
  typeId?: number;
  typeMod?: number;
  collation?: number;
  location?: number;
}
export interface SetToDefault {
  xpr?: Node;
  typeId?: number;
  typeMod?: number;
  collation?: number;
  location?: number;
}
export interface CurrentOfExpr {
  xpr?: Node;
  cvarno?: number;
  cursor_name?: string;
  cursor_param?: number;
}
export interface NextValueExpr {
  xpr?: Node;
  seqid?: number;
  typeId?: number;
}
export interface InferenceElem {
  xpr?: Node;
  expr?: Node;
  infercollid?: number;
  inferopclass?: number;
}
export interface TargetEntry {
  xpr?: Node;
  expr?: Node;
  resno?: number;
  resname?: string;
  ressortgroupref?: number;
  resorigtbl?: number;
  resorigcol?: number;
  resjunk?: boolean;
}
export interface RangeTblRef {
  rtindex?: number;
}
export interface JoinExpr {
  jointype?: JoinType;
  isNatural?: boolean;
  larg?: Node;
  rarg?: Node;
  usingClause?: Node[];
  join_using_alias?: Alias;
  quals?: Node;
  alias?: Alias;
  rtindex?: number;
}
export interface FromExpr {
  fromlist?: Node[];
  quals?: Node;
}
export interface OnConflictExpr {
  action?: OnConflictAction;
  arbiterElems?: Node[];
  arbiterWhere?: Node;
  constraint?: number;
  onConflictSet?: Node[];
  onConflictWhere?: Node;
  exclRelIndex?: number;
  exclRelTlist?: Node[];
}
export interface Query {
  commandType?: CmdType;
  querySource?: QuerySource;
  canSetTag?: boolean;
  utilityStmt?: Node;
  resultRelation?: number;
  hasAggs?: boolean;
  hasWindowFuncs?: boolean;
  hasTargetSRFs?: boolean;
  hasSubLinks?: boolean;
  hasDistinctOn?: boolean;
  hasRecursive?: boolean;
  hasModifyingCTE?: boolean;
  hasForUpdate?: boolean;
  hasRowSecurity?: boolean;
  isReturn?: boolean;
  cteList?: Node[];
  rtable?: Node[];
  rteperminfos?: Node[];
  jointree?: FromExpr;
  mergeActionList?: Node[];
  mergeUseOuterJoin?: boolean;
  targetList?: Node[];
  override?: OverridingKind;
  onConflict?: OnConflictExpr;
  returningList?: Node[];
  groupClause?: Node[];
  groupDistinct?: boolean;
  groupingSets?: Node[];
  havingQual?: Node;
  windowClause?: Node[];
  distinctClause?: Node[];
  sortClause?: Node[];
  limitOffset?: Node;
  limitCount?: Node;
  limitOption?: LimitOption;
  rowMarks?: Node[];
  setOperations?: Node;
  constraintDeps?: Node[];
  withCheckOptions?: Node[];
  stmt_location?: number;
  stmt_len?: number;
}
export interface TypeName {
  names?: Node[];
  typeOid?: number;
  setof?: boolean;
  pct_type?: boolean;
  typmods?: Node[];
  typemod?: number;
  arrayBounds?: Node[];
  location?: number;
}
export interface ColumnRef {
  fields?: Node[];
  location?: number;
}
export interface ParamRef {
  number?: number;
  location?: number;
}
export interface A_Expr {
  kind?: A_Expr_Kind;
  name?: Node[];
  lexpr?: Node;
  rexpr?: Node;
  location?: number;
}
export interface TypeCast {
  arg?: Node;
  typeName?: TypeName;
  location?: number;
}
export interface CollateClause {
  arg?: Node;
  collname?: Node[];
  location?: number;
}
export interface RoleSpec {
  roletype?: RoleSpecType;
  rolename?: string;
  location?: number;
}
export interface FuncCall {
  funcname?: Node[];
  args?: Node[];
  agg_order?: Node[];
  agg_filter?: Node;
  over?: WindowDef;
  agg_within_group?: boolean;
  agg_star?: boolean;
  agg_distinct?: boolean;
  func_variadic?: boolean;
  funcformat?: CoercionForm;
  location?: number;
}
export interface A_Star {}
export interface A_Indices {
  is_slice?: boolean;
  lidx?: Node;
  uidx?: Node;
}
export interface A_Indirection {
  arg?: Node;
  indirection?: Node[];
}
export interface A_ArrayExpr {
  elements?: Node[];
  location?: number;
}
export interface ResTarget {
  name?: string;
  indirection?: Node[];
  val?: Node;
  location?: number;
}
export interface MultiAssignRef {
  source?: Node;
  colno?: number;
  ncolumns?: number;
}
export interface SortBy {
  node?: Node;
  sortby_dir?: SortByDir;
  sortby_nulls?: SortByNulls;
  useOp?: Node[];
  location?: number;
}
export interface WindowDef {
  name?: string;
  refname?: string;
  partitionClause?: Node[];
  orderClause?: Node[];
  frameOptions?: number;
  startOffset?: Node;
  endOffset?: Node;
  location?: number;
}
export interface RangeSubselect {
  lateral?: boolean;
  subquery?: Node;
  alias?: Alias;
}
export interface RangeFunction {
  lateral?: boolean;
  ordinality?: boolean;
  is_rowsfrom?: boolean;
  functions?: Node[];
  alias?: Alias;
  coldeflist?: Node[];
}
export interface RangeTableFunc {
  lateral?: boolean;
  docexpr?: Node;
  rowexpr?: Node;
  namespaces?: Node[];
  columns?: Node[];
  alias?: Alias;
  location?: number;
}
export interface RangeTableFuncCol {
  colname?: string;
  typeName?: TypeName;
  for_ordinality?: boolean;
  is_not_null?: boolean;
  colexpr?: Node;
  coldefexpr?: Node;
  location?: number;
}
export interface RangeTableSample {
  relation?: Node;
  method?: Node[];
  args?: Node[];
  repeatable?: Node;
  location?: number;
}
export interface ColumnDef {
  colname?: string;
  typeName?: TypeName;
  compression?: string;
  inhcount?: number;
  is_local?: boolean;
  is_not_null?: boolean;
  is_from_type?: boolean;
  storage?: string;
  storage_name?: string;
  raw_default?: Node;
  cooked_default?: Node;
  identity?: string;
  identitySequence?: RangeVar;
  generated?: string;
  collClause?: CollateClause;
  collOid?: number;
  constraints?: Node[];
  fdwoptions?: Node[];
  location?: number;
}
export interface TableLikeClause {
  relation?: RangeVar;
  options?: number;
  relationOid?: number;
}
export interface IndexElem {
  name?: string;
  expr?: Node;
  indexcolname?: string;
  collation?: Node[];
  opclass?: Node[];
  opclassopts?: Node[];
  ordering?: SortByDir;
  nulls_ordering?: SortByNulls;
}
export interface DefElem {
  defnamespace?: string;
  defname?: string;
  arg?: Node;
  defaction?: DefElemAction;
  location?: number;
}
export interface LockingClause {
  lockedRels?: Node[];
  strength?: LockClauseStrength;
  waitPolicy?: LockWaitPolicy;
}
export interface XmlSerialize {
  xmloption?: XmlOptionType;
  expr?: Node;
  typeName?: TypeName;
  indent?: boolean;
  location?: number;
}
export interface PartitionElem {
  name?: string;
  expr?: Node;
  collation?: Node[];
  opclass?: Node[];
  location?: number;
}
export interface PartitionSpec {
  strategy?: PartitionStrategy;
  partParams?: Node[];
  location?: number;
}
export interface PartitionBoundSpec {
  strategy?: string;
  is_default?: boolean;
  modulus?: number;
  remainder?: number;
  listdatums?: Node[];
  lowerdatums?: Node[];
  upperdatums?: Node[];
  location?: number;
}
export interface PartitionRangeDatum {
  kind?: PartitionRangeDatumKind;
  value?: Node;
  location?: number;
}
export interface PartitionCmd {
  name?: RangeVar;
  bound?: PartitionBoundSpec;
  concurrent?: boolean;
}
export interface RangeTblEntry {
  rtekind?: RTEKind;
  relid?: number;
  relkind?: string;
  rellockmode?: number;
  tablesample?: TableSampleClause;
  perminfoindex?: number;
  subquery?: Query;
  security_barrier?: boolean;
  jointype?: JoinType;
  joinmergedcols?: number;
  joinaliasvars?: Node[];
  joinleftcols?: Node[];
  joinrightcols?: Node[];
  join_using_alias?: Alias;
  functions?: Node[];
  funcordinality?: boolean;
  tablefunc?: TableFunc;
  values_lists?: Node[];
  ctename?: string;
  ctelevelsup?: number;
  self_reference?: boolean;
  coltypes?: Node[];
  coltypmods?: Node[];
  colcollations?: Node[];
  enrname?: string;
  enrtuples?: number;
  alias?: Alias;
  eref?: Alias;
  lateral?: boolean;
  inh?: boolean;
  inFromCl?: boolean;
  securityQuals?: Node[];
}
export interface RTEPermissionInfo {
  relid?: number;
  inh?: boolean;
  requiredPerms?: bigint;
  checkAsUser?: number;
  selectedCols?: bigint[];
  insertedCols?: bigint[];
  updatedCols?: bigint[];
}
export interface RangeTblFunction {
  funcexpr?: Node;
  funccolcount?: number;
  funccolnames?: Node[];
  funccoltypes?: Node[];
  funccoltypmods?: Node[];
  funccolcollations?: Node[];
  funcparams?: bigint[];
}
export interface TableSampleClause {
  tsmhandler?: number;
  args?: Node[];
  repeatable?: Node;
}
export interface WithCheckOption {
  kind?: WCOKind;
  relname?: string;
  polname?: string;
  qual?: Node;
  cascaded?: boolean;
}
export interface SortGroupClause {
  tleSortGroupRef?: number;
  eqop?: number;
  sortop?: number;
  nulls_first?: boolean;
  hashable?: boolean;
}
export interface GroupingSet {
  kind?: GroupingSetKind;
  content?: Node[];
  location?: number;
}
export interface WindowClause {
  name?: string;
  refname?: string;
  partitionClause?: Node[];
  orderClause?: Node[];
  frameOptions?: number;
  startOffset?: Node;
  endOffset?: Node;
  runCondition?: Node[];
  startInRangeFunc?: number;
  endInRangeFunc?: number;
  inRangeColl?: number;
  inRangeAsc?: boolean;
  inRangeNullsFirst?: boolean;
  winref?: number;
  copiedOrder?: boolean;
}
export interface RowMarkClause {
  rti?: number;
  strength?: LockClauseStrength;
  waitPolicy?: LockWaitPolicy;
  pushedDown?: boolean;
}
export interface WithClause {
  ctes?: Node[];
  recursive?: boolean;
  location?: number;
}
export interface InferClause {
  indexElems?: Node[];
  whereClause?: Node;
  conname?: string;
  location?: number;
}
export interface OnConflictClause {
  action?: OnConflictAction;
  infer?: InferClause;
  targetList?: Node[];
  whereClause?: Node;
  location?: number;
}
export interface CTESearchClause {
  search_col_list?: Node[];
  search_breadth_first?: boolean;
  search_seq_column?: string;
  location?: number;
}
export interface CTECycleClause {
  cycle_col_list?: Node[];
  cycle_mark_column?: string;
  cycle_mark_value?: Node;
  cycle_mark_default?: Node;
  cycle_path_column?: string;
  location?: number;
  cycle_mark_type?: number;
  cycle_mark_typmod?: number;
  cycle_mark_collation?: number;
  cycle_mark_neop?: number;
}
export interface CommonTableExpr {
  ctename?: string;
  aliascolnames?: Node[];
  ctematerialized?: CTEMaterialize;
  ctequery?: Node;
  search_clause?: CTESearchClause;
  cycle_clause?: CTECycleClause;
  location?: number;
  cterecursive?: boolean;
  cterefcount?: number;
  ctecolnames?: Node[];
  ctecoltypes?: Node[];
  ctecoltypmods?: Node[];
  ctecolcollations?: Node[];
}
export interface MergeWhenClause {
  matched?: boolean;
  commandType?: CmdType;
  override?: OverridingKind;
  condition?: Node;
  targetList?: Node[];
  values?: Node[];
}
export interface MergeAction {
  matched?: boolean;
  commandType?: CmdType;
  override?: OverridingKind;
  qual?: Node;
  targetList?: Node[];
  updateColnos?: Node[];
}
export interface TriggerTransition {
  name?: string;
  isNew?: boolean;
  isTable?: boolean;
}
export interface JsonOutput {
  typeName?: TypeName;
  returning?: JsonReturning;
}
export interface JsonKeyValue {
  key?: Node;
  value?: JsonValueExpr;
}
export interface JsonObjectConstructor {
  exprs?: Node[];
  output?: JsonOutput;
  absent_on_null?: boolean;
  unique?: boolean;
  location?: number;
}
export interface JsonArrayConstructor {
  exprs?: Node[];
  output?: JsonOutput;
  absent_on_null?: boolean;
  location?: number;
}
export interface JsonArrayQueryConstructor {
  query?: Node;
  output?: JsonOutput;
  format?: JsonFormat;
  absent_on_null?: boolean;
  location?: number;
}
export interface JsonAggConstructor {
  output?: JsonOutput;
  agg_filter?: Node;
  agg_order?: Node[];
  over?: WindowDef;
  location?: number;
}
export interface JsonObjectAgg {
  constructor?: JsonAggConstructor;
  arg?: JsonKeyValue;
  absent_on_null?: boolean;
  unique?: boolean;
}
export interface JsonArrayAgg {
  constructor?: JsonAggConstructor;
  arg?: JsonValueExpr;
  absent_on_null?: boolean;
}
export interface RawStmt {
  stmt?: Node;
  stmt_location?: number;
  stmt_len?: number;
}
export interface InsertStmt {
  relation?: RangeVar;
  cols?: Node[];
  selectStmt?: Node;
  onConflictClause?: OnConflictClause;
  returningList?: Node[];
  withClause?: WithClause;
  override?: OverridingKind;
}
export interface DeleteStmt {
  relation?: RangeVar;
  usingClause?: Node[];
  whereClause?: Node;
  returningList?: Node[];
  withClause?: WithClause;
}
export interface UpdateStmt {
  relation?: RangeVar;
  targetList?: Node[];
  whereClause?: Node;
  fromClause?: Node[];
  returningList?: Node[];
  withClause?: WithClause;
}
export interface MergeStmt {
  relation?: RangeVar;
  sourceRelation?: Node;
  joinCondition?: Node;
  mergeWhenClauses?: Node[];
  withClause?: WithClause;
}
export interface SelectStmt {
  distinctClause?: Node[];
  intoClause?: IntoClause;
  targetList?: Node[];
  fromClause?: Node[];
  whereClause?: Node;
  groupClause?: Node[];
  groupDistinct?: boolean;
  havingClause?: Node;
  windowClause?: Node[];
  valuesLists?: Node[];
  sortClause?: Node[];
  limitOffset?: Node;
  limitCount?: Node;
  limitOption?: LimitOption;
  lockingClause?: Node[];
  withClause?: WithClause;
  op?: SetOperation;
  all?: boolean;
  larg?: SelectStmt;
  rarg?: SelectStmt;
}
export interface SetOperationStmt {
  op?: SetOperation;
  all?: boolean;
  larg?: Node;
  rarg?: Node;
  colTypes?: Node[];
  colTypmods?: Node[];
  colCollations?: Node[];
  groupClauses?: Node[];
}
export interface ReturnStmt {
  returnval?: Node;
}
export interface PLAssignStmt {
  name?: string;
  indirection?: Node[];
  nnames?: number;
  val?: SelectStmt;
  location?: number;
}
export interface CreateSchemaStmt {
  schemaname?: string;
  authrole?: RoleSpec;
  schemaElts?: Node[];
  if_not_exists?: boolean;
}
export interface AlterTableStmt {
  relation?: RangeVar;
  cmds?: Node[];
  objtype?: ObjectType;
  missing_ok?: boolean;
}
export interface ReplicaIdentityStmt {
  identity_type?: string;
  name?: string;
}
export interface AlterTableCmd {
  subtype?: AlterTableType;
  name?: string;
  num?: number;
  newowner?: RoleSpec;
  def?: Node;
  behavior?: DropBehavior;
  missing_ok?: boolean;
  recurse?: boolean;
}
export interface AlterCollationStmt {
  collname?: Node[];
}
export interface AlterDomainStmt {
  subtype?: string;
  typeName?: Node[];
  name?: string;
  def?: Node;
  behavior?: DropBehavior;
  missing_ok?: boolean;
}
export interface GrantStmt {
  is_grant?: boolean;
  targtype?: GrantTargetType;
  objtype?: ObjectType;
  objects?: Node[];
  privileges?: Node[];
  grantees?: Node[];
  grant_option?: boolean;
  grantor?: RoleSpec;
  behavior?: DropBehavior;
}
export interface ObjectWithArgs {
  objname?: Node[];
  objargs?: Node[];
  objfuncargs?: Node[];
  args_unspecified?: boolean;
}
export interface AccessPriv {
  priv_name?: string;
  cols?: Node[];
}
export interface GrantRoleStmt {
  granted_roles?: Node[];
  grantee_roles?: Node[];
  is_grant?: boolean;
  opt?: Node[];
  grantor?: RoleSpec;
  behavior?: DropBehavior;
}
export interface AlterDefaultPrivilegesStmt {
  options?: Node[];
  action?: GrantStmt;
}
export interface CopyStmt {
  relation?: RangeVar;
  query?: Node;
  attlist?: Node[];
  is_from?: boolean;
  is_program?: boolean;
  filename?: string;
  options?: Node[];
  whereClause?: Node;
}
export interface VariableSetStmt {
  kind?: VariableSetKind;
  name?: string;
  args?: Node[];
  is_local?: boolean;
}
export interface VariableShowStmt {
  name?: string;
}
export interface CreateStmt {
  relation?: RangeVar;
  tableElts?: Node[];
  inhRelations?: Node[];
  partbound?: PartitionBoundSpec;
  partspec?: PartitionSpec;
  ofTypename?: TypeName;
  constraints?: Node[];
  options?: Node[];
  oncommit?: OnCommitAction;
  tablespacename?: string;
  accessMethod?: string;
  if_not_exists?: boolean;
}
export interface Constraint {
  contype?: ConstrType;
  conname?: string;
  deferrable?: boolean;
  initdeferred?: boolean;
  location?: number;
  is_no_inherit?: boolean;
  raw_expr?: Node;
  cooked_expr?: string;
  generated_when?: string;
  nulls_not_distinct?: boolean;
  keys?: Node[];
  including?: Node[];
  exclusions?: Node[];
  options?: Node[];
  indexname?: string;
  indexspace?: string;
  reset_default_tblspc?: boolean;
  access_method?: string;
  where_clause?: Node;
  pktable?: RangeVar;
  fk_attrs?: Node[];
  pk_attrs?: Node[];
  fk_matchtype?: string;
  fk_upd_action?: string;
  fk_del_action?: string;
  fk_del_set_cols?: Node[];
  old_conpfeqop?: Node[];
  old_pktable_oid?: number;
  skip_validation?: boolean;
  initially_valid?: boolean;
}
export interface CreateTableSpaceStmt {
  tablespacename?: string;
  owner?: RoleSpec;
  location?: string;
  options?: Node[];
}
export interface DropTableSpaceStmt {
  tablespacename?: string;
  missing_ok?: boolean;
}
export interface AlterTableSpaceOptionsStmt {
  tablespacename?: string;
  options?: Node[];
  isReset?: boolean;
}
export interface AlterTableMoveAllStmt {
  orig_tablespacename?: string;
  objtype?: ObjectType;
  roles?: Node[];
  new_tablespacename?: string;
  nowait?: boolean;
}
export interface CreateExtensionStmt {
  extname?: string;
  if_not_exists?: boolean;
  options?: Node[];
}
export interface AlterExtensionStmt {
  extname?: string;
  options?: Node[];
}
export interface AlterExtensionContentsStmt {
  extname?: string;
  action?: number;
  objtype?: ObjectType;
  object?: Node;
}
export interface CreateFdwStmt {
  fdwname?: string;
  func_options?: Node[];
  options?: Node[];
}
export interface AlterFdwStmt {
  fdwname?: string;
  func_options?: Node[];
  options?: Node[];
}
export interface CreateForeignServerStmt {
  servername?: string;
  servertype?: string;
  version?: string;
  fdwname?: string;
  if_not_exists?: boolean;
  options?: Node[];
}
export interface AlterForeignServerStmt {
  servername?: string;
  version?: string;
  options?: Node[];
  has_version?: boolean;
}
export interface CreateForeignTableStmt {
  base?: CreateStmt;
  servername?: string;
  options?: Node[];
}
export interface CreateUserMappingStmt {
  user?: RoleSpec;
  servername?: string;
  if_not_exists?: boolean;
  options?: Node[];
}
export interface AlterUserMappingStmt {
  user?: RoleSpec;
  servername?: string;
  options?: Node[];
}
export interface DropUserMappingStmt {
  user?: RoleSpec;
  servername?: string;
  missing_ok?: boolean;
}
export interface ImportForeignSchemaStmt {
  server_name?: string;
  remote_schema?: string;
  local_schema?: string;
  list_type?: ImportForeignSchemaType;
  table_list?: Node[];
  options?: Node[];
}
export interface CreatePolicyStmt {
  policy_name?: string;
  table?: RangeVar;
  cmd_name?: string;
  permissive?: boolean;
  roles?: Node[];
  qual?: Node;
  with_check?: Node;
}
export interface AlterPolicyStmt {
  policy_name?: string;
  table?: RangeVar;
  roles?: Node[];
  qual?: Node;
  with_check?: Node;
}
export interface CreateAmStmt {
  amname?: string;
  handler_name?: Node[];
  amtype?: string;
}
export interface CreateTrigStmt {
  replace?: boolean;
  isconstraint?: boolean;
  trigname?: string;
  relation?: RangeVar;
  funcname?: Node[];
  args?: Node[];
  row?: boolean;
  timing?: number;
  events?: number;
  columns?: Node[];
  whenClause?: Node;
  transitionRels?: Node[];
  deferrable?: boolean;
  initdeferred?: boolean;
  constrrel?: RangeVar;
}
export interface CreateEventTrigStmt {
  trigname?: string;
  eventname?: string;
  whenclause?: Node[];
  funcname?: Node[];
}
export interface AlterEventTrigStmt {
  trigname?: string;
  tgenabled?: string;
}
export interface CreatePLangStmt {
  replace?: boolean;
  plname?: string;
  plhandler?: Node[];
  plinline?: Node[];
  plvalidator?: Node[];
  pltrusted?: boolean;
}
export interface CreateRoleStmt {
  stmt_type?: RoleStmtType;
  role?: string;
  options?: Node[];
}
export interface AlterRoleStmt {
  role?: RoleSpec;
  options?: Node[];
  action?: number;
}
export interface AlterRoleSetStmt {
  role?: RoleSpec;
  database?: string;
  setstmt?: VariableSetStmt;
}
export interface DropRoleStmt {
  roles?: Node[];
  missing_ok?: boolean;
}
export interface CreateSeqStmt {
  sequence?: RangeVar;
  options?: Node[];
  ownerId?: number;
  for_identity?: boolean;
  if_not_exists?: boolean;
}
export interface AlterSeqStmt {
  sequence?: RangeVar;
  options?: Node[];
  for_identity?: boolean;
  missing_ok?: boolean;
}
export interface DefineStmt {
  kind?: ObjectType;
  oldstyle?: boolean;
  defnames?: Node[];
  args?: Node[];
  definition?: Node[];
  if_not_exists?: boolean;
  replace?: boolean;
}
export interface CreateDomainStmt {
  domainname?: Node[];
  typeName?: TypeName;
  collClause?: CollateClause;
  constraints?: Node[];
}
export interface CreateOpClassStmt {
  opclassname?: Node[];
  opfamilyname?: Node[];
  amname?: string;
  datatype?: TypeName;
  items?: Node[];
  isDefault?: boolean;
}
export interface CreateOpClassItem {
  itemtype?: number;
  name?: ObjectWithArgs;
  number?: number;
  order_family?: Node[];
  class_args?: Node[];
  storedtype?: TypeName;
}
export interface CreateOpFamilyStmt {
  opfamilyname?: Node[];
  amname?: string;
}
export interface AlterOpFamilyStmt {
  opfamilyname?: Node[];
  amname?: string;
  isDrop?: boolean;
  items?: Node[];
}
export interface DropStmt {
  objects?: Node[];
  removeType?: ObjectType;
  behavior?: DropBehavior;
  missing_ok?: boolean;
  concurrent?: boolean;
}
export interface TruncateStmt {
  relations?: Node[];
  restart_seqs?: boolean;
  behavior?: DropBehavior;
}
export interface CommentStmt {
  objtype?: ObjectType;
  object?: Node;
  comment?: string;
}
export interface SecLabelStmt {
  objtype?: ObjectType;
  object?: Node;
  provider?: string;
  label?: string;
}
export interface DeclareCursorStmt {
  portalname?: string;
  options?: number;
  query?: Node;
}
export interface ClosePortalStmt {
  portalname?: string;
}
export interface FetchStmt {
  direction?: FetchDirection;
  howMany?: bigint;
  portalname?: string;
  ismove?: boolean;
}
export interface IndexStmt {
  idxname?: string;
  relation?: RangeVar;
  accessMethod?: string;
  tableSpace?: string;
  indexParams?: Node[];
  indexIncludingParams?: Node[];
  options?: Node[];
  whereClause?: Node;
  excludeOpNames?: Node[];
  idxcomment?: string;
  indexOid?: number;
  oldNumber?: number;
  oldCreateSubid?: number;
  oldFirstRelfilelocatorSubid?: number;
  unique?: boolean;
  nulls_not_distinct?: boolean;
  primary?: boolean;
  isconstraint?: boolean;
  deferrable?: boolean;
  initdeferred?: boolean;
  transformed?: boolean;
  concurrent?: boolean;
  if_not_exists?: boolean;
  reset_default_tblspc?: boolean;
}
export interface CreateStatsStmt {
  defnames?: Node[];
  stat_types?: Node[];
  exprs?: Node[];
  relations?: Node[];
  stxcomment?: string;
  transformed?: boolean;
  if_not_exists?: boolean;
}
export interface StatsElem {
  name?: string;
  expr?: Node;
}
export interface AlterStatsStmt {
  defnames?: Node[];
  stxstattarget?: number;
  missing_ok?: boolean;
}
export interface CreateFunctionStmt {
  is_procedure?: boolean;
  replace?: boolean;
  funcname?: Node[];
  parameters?: Node[];
  returnType?: TypeName;
  options?: Node[];
  sql_body?: Node;
}
export interface FunctionParameter {
  name?: string;
  argType?: TypeName;
  mode?: FunctionParameterMode;
  defexpr?: Node;
}
export interface AlterFunctionStmt {
  objtype?: ObjectType;
  func?: ObjectWithArgs;
  actions?: Node[];
}
export interface DoStmt {
  args?: Node[];
}
export interface InlineCodeBlock {
  source_text?: string;
  langOid?: number;
  langIsTrusted?: boolean;
  atomic?: boolean;
}
export interface CallStmt {
  funccall?: FuncCall;
  funcexpr?: FuncExpr;
  outargs?: Node[];
}
export interface CallContext {
  atomic?: boolean;
}
export interface RenameStmt {
  renameType?: ObjectType;
  relationType?: ObjectType;
  relation?: RangeVar;
  object?: Node;
  subname?: string;
  newname?: string;
  behavior?: DropBehavior;
  missing_ok?: boolean;
}
export interface AlterObjectDependsStmt {
  objectType?: ObjectType;
  relation?: RangeVar;
  object?: Node;
  extname?: String;
  remove?: boolean;
}
export interface AlterObjectSchemaStmt {
  objectType?: ObjectType;
  relation?: RangeVar;
  object?: Node;
  newschema?: string;
  missing_ok?: boolean;
}
export interface AlterOwnerStmt {
  objectType?: ObjectType;
  relation?: RangeVar;
  object?: Node;
  newowner?: RoleSpec;
}
export interface AlterOperatorStmt {
  opername?: ObjectWithArgs;
  options?: Node[];
}
export interface AlterTypeStmt {
  typeName?: Node[];
  options?: Node[];
}
export interface RuleStmt {
  relation?: RangeVar;
  rulename?: string;
  whereClause?: Node;
  event?: CmdType;
  instead?: boolean;
  actions?: Node[];
  replace?: boolean;
}
export interface NotifyStmt {
  conditionname?: string;
  payload?: string;
}
export interface ListenStmt {
  conditionname?: string;
}
export interface UnlistenStmt {
  conditionname?: string;
}
export interface TransactionStmt {
  kind?: TransactionStmtKind;
  options?: Node[];
  savepoint_name?: string;
  gid?: string;
  chain?: boolean;
}
export interface CompositeTypeStmt {
  typevar?: RangeVar;
  coldeflist?: Node[];
}
export interface CreateEnumStmt {
  typeName?: Node[];
  vals?: Node[];
}
export interface CreateRangeStmt {
  typeName?: Node[];
  params?: Node[];
}
export interface AlterEnumStmt {
  typeName?: Node[];
  oldVal?: string;
  newVal?: string;
  newValNeighbor?: string;
  newValIsAfter?: boolean;
  skipIfNewValExists?: boolean;
}
export interface ViewStmt {
  view?: RangeVar;
  aliases?: Node[];
  query?: Node;
  replace?: boolean;
  options?: Node[];
  withCheckOption?: ViewCheckOption;
}
export interface LoadStmt {
  filename?: string;
}
export interface CreatedbStmt {
  dbname?: string;
  options?: Node[];
}
export interface AlterDatabaseStmt {
  dbname?: string;
  options?: Node[];
}
export interface AlterDatabaseRefreshCollStmt {
  dbname?: string;
}
export interface AlterDatabaseSetStmt {
  dbname?: string;
  setstmt?: VariableSetStmt;
}
export interface DropdbStmt {
  dbname?: string;
  missing_ok?: boolean;
  options?: Node[];
}
export interface AlterSystemStmt {
  setstmt?: VariableSetStmt;
}
export interface ClusterStmt {
  relation?: RangeVar;
  indexname?: string;
  params?: Node[];
}
export interface VacuumStmt {
  options?: Node[];
  rels?: Node[];
  is_vacuumcmd?: boolean;
}
export interface VacuumRelation {
  relation?: RangeVar;
  oid?: number;
  va_cols?: Node[];
}
export interface ExplainStmt {
  query?: Node;
  options?: Node[];
}
export interface CreateTableAsStmt {
  query?: Node;
  into?: IntoClause;
  objtype?: ObjectType;
  is_select_into?: boolean;
  if_not_exists?: boolean;
}
export interface RefreshMatViewStmt {
  concurrent?: boolean;
  skipData?: boolean;
  relation?: RangeVar;
}
export interface CheckPointStmt {}
export interface DiscardStmt {
  target?: DiscardMode;
}
export interface LockStmt {
  relations?: Node[];
  mode?: number;
  nowait?: boolean;
}
export interface ConstraintsSetStmt {
  constraints?: Node[];
  deferred?: boolean;
}
export interface ReindexStmt {
  kind?: ReindexObjectType;
  relation?: RangeVar;
  name?: string;
  params?: Node[];
}
export interface CreateConversionStmt {
  conversion_name?: Node[];
  for_encoding_name?: string;
  to_encoding_name?: string;
  func_name?: Node[];
  def?: boolean;
}
export interface CreateCastStmt {
  sourcetype?: TypeName;
  targettype?: TypeName;
  func?: ObjectWithArgs;
  context?: CoercionContext;
  inout?: boolean;
}
export interface CreateTransformStmt {
  replace?: boolean;
  type_name?: TypeName;
  lang?: string;
  fromsql?: ObjectWithArgs;
  tosql?: ObjectWithArgs;
}
export interface PrepareStmt {
  name?: string;
  argtypes?: Node[];
  query?: Node;
}
export interface ExecuteStmt {
  name?: string;
  params?: Node[];
}
export interface DeallocateStmt {
  name?: string;
}
export interface DropOwnedStmt {
  roles?: Node[];
  behavior?: DropBehavior;
}
export interface ReassignOwnedStmt {
  roles?: Node[];
  newrole?: RoleSpec;
}
export interface AlterTSDictionaryStmt {
  dictname?: Node[];
  options?: Node[];
}
export interface AlterTSConfigurationStmt {
  kind?: AlterTSConfigType;
  cfgname?: Node[];
  tokentype?: Node[];
  dicts?: Node[];
  override?: boolean;
  replace?: boolean;
  missing_ok?: boolean;
}
export interface PublicationTable {
  relation?: RangeVar;
  whereClause?: Node;
  columns?: Node[];
}
export interface PublicationObjSpec {
  pubobjtype?: PublicationObjSpecType;
  name?: string;
  pubtable?: PublicationTable;
  location?: number;
}
export interface CreatePublicationStmt {
  pubname?: string;
  options?: Node[];
  pubobjects?: Node[];
  for_all_tables?: boolean;
}
export interface AlterPublicationStmt {
  pubname?: string;
  options?: Node[];
  pubobjects?: Node[];
  for_all_tables?: boolean;
  action?: AlterPublicationAction;
}
export interface CreateSubscriptionStmt {
  subname?: string;
  conninfo?: string;
  publication?: Node[];
  options?: Node[];
}
export interface AlterSubscriptionStmt {
  kind?: AlterSubscriptionType;
  subname?: string;
  conninfo?: string;
  publication?: Node[];
  options?: Node[];
}
export interface DropSubscriptionStmt {
  subname?: string;
  missing_ok?: boolean;
  behavior?: DropBehavior;
}
export interface ScanToken {
  ScanToken: {
    start?: number;
    end?: number;
    token?: Token;
    keywordKind?: KeywordKind;
  };
}",
    "file": "wrapped.ts",
  },
]
`;
